// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'shaders', true, true);
Module['FS_createPath']('/', 'textures', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 105, 110, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 107, 121, 95, 115, 97, 109, 112, 108, 101, 114, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 116, 105, 109, 101, 114, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 100, 97, 121, 108, 105, 103, 104, 116, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 111, 114, 116, 104, 111, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 97, 111, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 111, 103, 95, 102, 97, 99, 116, 111, 114, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 111, 103, 95, 104, 101, 105, 103, 104, 116, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 119, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 111, 112, 97, 99, 105, 116, 121, 59, 13, 10, 13, 10, 99, 111, 110, 115, 116, 32, 102, 108, 111, 97, 116, 32, 112, 105, 32, 61, 32, 51, 46, 49, 52, 49, 53, 57, 50, 54, 53, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 51, 40, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 41, 41, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 99, 111, 108, 111, 114, 32, 61, 61, 32, 118, 101, 99, 51, 40, 49, 46, 48, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 99, 97, 114, 100, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 13, 10, 32, 32, 32, 32, 105, 110, 116, 32, 119, 119, 32, 61, 32, 105, 110, 116, 40, 97, 98, 115, 40, 119, 41, 43, 48, 46, 53, 41, 59, 32, 47, 47, 32, 114, 111, 117, 110, 100, 32, 105, 116, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 99, 108, 111, 117, 100, 32, 61, 32, 119, 119, 32, 61, 61, 32, 49, 54, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 119, 97, 116, 101, 114, 32, 61, 32, 119, 119, 32, 61, 61, 32, 49, 50, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 99, 108, 111, 117, 100, 32, 38, 38, 32, 98, 111, 111, 108, 40, 111, 114, 116, 104, 111, 41, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 99, 97, 114, 100, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 100, 102, 32, 61, 32, 99, 108, 111, 117, 100, 32, 63, 32, 49, 46, 48, 32, 45, 32, 100, 105, 102, 102, 117, 115, 101, 32, 42, 32, 48, 46, 50, 32, 58, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 97, 111, 32, 61, 32, 99, 108, 111, 117, 100, 32, 63, 32, 49, 46, 48, 32, 45, 32, 40, 49, 46, 48, 32, 45, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 97, 111, 41, 32, 42, 32, 48, 46, 50, 32, 58, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 97, 111, 59, 13, 10, 32, 32, 32, 32, 97, 111, 32, 61, 32, 109, 105, 110, 40, 49, 46, 48, 44, 32, 97, 111, 32, 43, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 41, 59, 13, 10, 32, 32, 32, 32, 100, 102, 32, 61, 32, 109, 105, 110, 40, 49, 46, 48, 44, 32, 100, 102, 32, 43, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 41, 59, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 118, 97, 108, 117, 101, 32, 61, 32, 109, 105, 110, 40, 49, 46, 48, 44, 32, 100, 97, 121, 108, 105, 103, 104, 116, 32, 43, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 41, 59, 13, 10, 32, 32, 32, 32, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 95, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 51, 40, 118, 97, 108, 117, 101, 32, 42, 32, 48, 46, 51, 32, 43, 32, 48, 46, 50, 41, 59, 13, 10, 32, 32, 32, 32, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 32, 61, 32, 118, 101, 99, 51, 40, 118, 97, 108, 117, 101, 32, 42, 32, 48, 46, 51, 32, 43, 32, 48, 46, 50, 41, 59, 13, 10, 32, 32, 32, 32, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 32, 61, 32, 97, 109, 98, 105, 101, 110, 116, 32, 43, 32, 108, 105, 103, 104, 116, 95, 99, 111, 108, 111, 114, 32, 42, 32, 100, 102, 59, 13, 10, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 99, 108, 97, 109, 112, 40, 99, 111, 108, 111, 114, 32, 42, 32, 108, 105, 103, 104, 116, 32, 42, 32, 97, 111, 44, 32, 118, 101, 99, 51, 40, 48, 46, 48, 41, 44, 32, 118, 101, 99, 51, 40, 49, 46, 48, 41, 41, 59, 13, 10, 32, 32, 32, 32, 118, 101, 99, 51, 32, 115, 107, 121, 95, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 51, 40, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 107, 121, 95, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 101, 99, 50, 40, 116, 105, 109, 101, 114, 44, 32, 102, 111, 103, 95, 104, 101, 105, 103, 104, 116, 41, 41, 41, 59, 13, 10, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 109, 105, 120, 40, 99, 111, 108, 111, 114, 44, 32, 115, 107, 121, 95, 99, 111, 108, 111, 114, 44, 32, 102, 111, 103, 95, 102, 97, 99, 116, 111, 114, 41, 59, 13, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 44, 32, 111, 112, 97, 99, 105, 116, 121, 41, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'block_fragment.glsl', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 105, 110, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 109, 97, 116, 114, 105, 120, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 99, 97, 109, 101, 114, 97, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 102, 111, 103, 95, 100, 105, 115, 116, 97, 110, 99, 101, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 111, 114, 116, 104, 111, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 116, 105, 109, 101, 114, 59, 13, 10, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 117, 118, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 119, 115, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 98, 108, 111, 99, 107, 95, 112, 111, 115, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 97, 111, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 111, 103, 95, 102, 97, 99, 116, 111, 114, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 111, 103, 95, 104, 101, 105, 103, 104, 116, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 119, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 111, 112, 97, 99, 105, 116, 121, 59, 13, 10, 13, 10, 99, 111, 110, 115, 116, 32, 102, 108, 111, 97, 116, 32, 112, 105, 32, 61, 32, 51, 46, 49, 52, 49, 53, 57, 50, 54, 53, 59, 13, 10, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 95, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 118, 101, 99, 51, 40, 45, 49, 46, 48, 44, 32, 49, 46, 48, 44, 32, 45, 49, 46, 48, 41, 41, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 111, 112, 97, 99, 105, 116, 121, 32, 61, 32, 49, 46, 59, 13, 10, 32, 32, 32, 32, 119, 32, 61, 32, 119, 115, 46, 120, 59, 13, 10, 32, 32, 32, 32, 105, 110, 116, 32, 119, 32, 61, 32, 105, 110, 116, 40, 119, 115, 46, 120, 41, 59, 13, 10, 32, 32, 32, 32, 105, 110, 116, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 61, 32, 105, 110, 116, 40, 119, 115, 46, 121, 41, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 98, 97, 99, 107, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 51, 50, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 97, 99, 107, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 51, 50, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 102, 114, 111, 110, 116, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 49, 54, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 102, 114, 111, 110, 116, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 49, 54, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 98, 111, 116, 116, 111, 109, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 56, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 111, 116, 116, 111, 109, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 56, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 116, 111, 112, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 52, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 116, 111, 112, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 52, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 114, 105, 103, 104, 116, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 50, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 114, 105, 103, 104, 116, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 50, 59, 13, 10, 32, 32, 32, 32, 98, 111, 111, 108, 32, 108, 101, 102, 116, 32, 61, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 62, 61, 32, 49, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 108, 101, 102, 116, 41, 32, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 45, 61, 32, 49, 59, 13, 10, 32, 32, 32, 32, 47, 47, 32, 105, 102, 32, 40, 102, 97, 99, 101, 95, 109, 97, 115, 107, 32, 33, 61, 32, 48, 41, 32, 47, 47, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 48, 13, 10, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 99, 97, 109, 101, 114, 97, 95, 100, 105, 115, 116, 97, 110, 99, 101, 32, 61, 32, 100, 105, 115, 116, 97, 110, 99, 101, 40, 99, 97, 109, 101, 114, 97, 44, 32, 118, 101, 99, 51, 40, 112, 111, 115, 105, 116, 105, 111, 110, 41, 41, 59, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 114, 32, 61, 32, 112, 111, 119, 40, 99, 97, 109, 101, 114, 97, 95, 100, 105, 115, 116, 97, 110, 99, 101, 32, 47, 32, 102, 111, 103, 95, 100, 105, 115, 116, 97, 110, 99, 101, 32, 42, 32, 52, 46, 44, 32, 52, 46, 41, 59, 13, 10, 32, 32, 32, 32, 118, 101, 99, 52, 32, 112, 111, 115, 95, 111, 102, 102, 32, 61, 32, 118, 101, 99, 52, 40, 48, 46, 44, 32, 45, 114, 44, 32, 48, 46, 44, 32, 48, 46, 41, 59, 13, 10, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 111, 32, 61, 32, 48, 46, 59, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 119, 32, 61, 61, 32, 49, 50, 41, 32, 123, 32, 47, 47, 32, 119, 97, 116, 101, 114, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 102, 32, 61, 32, 48, 46, 48, 49, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 33, 98, 111, 116, 116, 111, 109, 32, 124, 124, 32, 98, 108, 111, 99, 107, 95, 112, 111, 115, 46, 121, 32, 62, 32, 48, 46, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 111, 110, 108, 121, 32, 100, 105, 115, 116, 111, 114, 116, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 105, 102, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 118, 101, 114, 116, 105, 99, 101, 115, 32, 105, 102, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 102, 97, 99, 101, 32, 105, 115, 32, 115, 104, 111, 119, 105, 110, 103, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 32, 61, 32, 97, 98, 115, 40, 115, 105, 110, 40, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 32, 43, 32, 112, 111, 115, 105, 116, 105, 111, 110, 46, 122, 32, 43, 32, 116, 105, 109, 101, 114, 32, 42, 32, 50, 48, 48, 46, 41, 32, 42, 32, 48, 46, 50, 41, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 33, 98, 111, 116, 116, 111, 109, 32, 38, 38, 32, 98, 108, 111, 99, 107, 95, 112, 111, 115, 46, 121, 32, 60, 32, 48, 46, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 105, 102, 32, 116, 104, 101, 32, 118, 101, 114, 116, 101, 120, 32, 105, 115, 32, 111, 110, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 97, 110, 100, 32, 116, 104, 101, 114, 101, 32, 105, 115, 110, 39, 116, 32, 97, 32, 102, 97, 99, 101, 32, 117, 110, 100, 101, 114, 32, 105, 116, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 111, 118, 101, 32, 116, 104, 101, 32, 118, 101, 114, 116, 105, 99, 101, 115, 32, 100, 111, 119, 110, 32, 115, 108, 105, 103, 104, 116, 108, 121, 32, 116, 111, 32, 102, 105, 108, 108, 32, 105, 110, 32, 116, 104, 101, 32, 103, 97, 112, 32, 102, 114, 111, 109, 32, 99, 104, 97, 110, 103, 105, 110, 103, 32, 112, 111, 115, 95, 111, 102, 102, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 32, 43, 61, 32, 48, 46, 49, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 32, 43, 61, 32, 48, 46, 48, 48, 53, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 115, 95, 111, 102, 102, 32, 45, 61, 32, 118, 101, 99, 52, 40, 110, 111, 114, 109, 97, 108, 32, 42, 32, 102, 44, 32, 48, 46, 41, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 13, 10, 32, 32, 32, 32, 112, 111, 115, 95, 111, 102, 102, 46, 121, 32, 45, 61, 32, 111, 59, 13, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 109, 97, 116, 114, 105, 120, 32, 42, 32, 40, 112, 111, 115, 105, 116, 105, 111, 110, 32, 43, 32, 112, 111, 115, 95, 111, 102, 102, 41, 59, 13, 10, 13, 10, 32, 32, 32, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 32, 61, 32, 117, 118, 46, 120, 121, 59, 13, 10, 32, 32, 32, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 97, 111, 32, 61, 32, 48, 46, 51, 32, 43, 32, 40, 49, 46, 48, 32, 45, 32, 117, 118, 46, 122, 41, 32, 42, 32, 48, 46, 55, 59, 13, 10, 32, 32, 32, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 32, 61, 32, 117, 118, 46, 119, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 116, 111, 112, 32, 38, 38, 32, 115, 105, 103, 110, 40, 98, 108, 111, 99, 107, 95, 112, 111, 115, 46, 121, 41, 32, 61, 61, 32, 115, 105, 103, 110, 40, 110, 111, 114, 109, 97, 108, 46, 121, 41, 41, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 108, 105, 103, 104, 116, 32, 45, 61, 32, 111, 59, 13, 10, 32, 32, 32, 32, 100, 105, 102, 102, 117, 115, 101, 32, 61, 32, 109, 97, 120, 40, 48, 46, 48, 44, 32, 100, 111, 116, 40, 110, 111, 114, 109, 97, 108, 44, 32, 108, 105, 103, 104, 116, 95, 100, 105, 114, 101, 99, 116, 105, 111, 110, 41, 41, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 111, 111, 108, 40, 111, 114, 116, 104, 111, 41, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 103, 95, 102, 97, 99, 116, 111, 114, 32, 61, 32, 48, 46, 48, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 103, 95, 104, 101, 105, 103, 104, 116, 32, 61, 32, 48, 46, 48, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 103, 95, 102, 97, 99, 116, 111, 114, 32, 61, 32, 112, 111, 119, 40, 99, 108, 97, 109, 112, 40, 99, 97, 109, 101, 114, 97, 95, 100, 105, 115, 116, 97, 110, 99, 101, 32, 47, 32, 102, 111, 103, 95, 100, 105, 115, 116, 97, 110, 99, 101, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 44, 32, 52, 46, 48, 41, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 100, 121, 32, 61, 32, 112, 111, 115, 105, 116, 105, 111, 110, 46, 121, 32, 45, 32, 99, 97, 109, 101, 114, 97, 46, 121, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 100, 120, 32, 61, 32, 100, 105, 115, 116, 97, 110, 99, 101, 40, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 122, 44, 32, 99, 97, 109, 101, 114, 97, 46, 120, 122, 41, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 103, 95, 104, 101, 105, 103, 104, 116, 32, 61, 32, 40, 97, 116, 97, 110, 40, 100, 121, 44, 32, 100, 120, 41, 32, 43, 32, 112, 105, 32, 47, 32, 50, 46, 48, 41, 32, 47, 32, 112, 105, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'block_vertex.glsl', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 48, 46, 44, 32, 48, 46, 44, 32, 48, 46, 44, 32, 49, 46, 41, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'line_fragment.glsl', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 109, 97, 116, 114, 105, 120, 59, 13, 10, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 109, 97, 116, 114, 105, 120, 32, 42, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'line_vertex.glsl', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 116, 105, 109, 101, 114, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 118, 101, 99, 50, 32, 117, 118, 32, 61, 32, 118, 101, 99, 50, 40, 116, 105, 109, 101, 114, 44, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 46, 116, 41, 59, 13, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 117, 118, 41, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'sky_fragment.glsl', fileData4, true, true, false);
var fileData5 = [];
fileData5.push.apply(fileData5, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 109, 97, 116, 114, 105, 120, 59, 13, 10, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 117, 118, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 109, 97, 116, 114, 105, 120, 32, 42, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 32, 32, 32, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 32, 61, 32, 117, 118, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'sky_vertex.glsl', fileData5, true, true, false);
var fileData6 = [];
fileData6.push.apply(fileData6, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 98, 111, 111, 108, 32, 105, 115, 95, 115, 105, 103, 110, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 41, 59, 13, 10, 32, 32, 32, 32, 105, 102, 32, 40, 105, 115, 95, 115, 105, 103, 110, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 99, 111, 108, 111, 114, 32, 61, 61, 32, 118, 101, 99, 52, 40, 49, 46, 48, 41, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 99, 97, 114, 100, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 46, 97, 32, 61, 32, 109, 97, 120, 40, 99, 111, 108, 111, 114, 46, 97, 44, 32, 48, 46, 52, 41, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'text_fragment.glsl', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [35, 105, 102, 100, 101, 102, 32, 71, 76, 95, 69, 83, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 35, 101, 110, 100, 105, 102, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 109, 97, 116, 114, 105, 120, 59, 13, 10, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 117, 118, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 109, 97, 116, 114, 105, 120, 32, 42, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 32, 32, 32, 32, 102, 114, 97, 103, 109, 101, 110, 116, 95, 117, 118, 32, 61, 32, 117, 118, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/shaders', 'text_vertex.glsl', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 0, 0, 0, 2, 0, 8, 6, 0, 0, 0, 244, 120, 212, 250, 0, 0, 10, 65, 105, 67, 67, 80, 73, 67, 67, 32, 80, 114, 111, 102, 105, 108, 101, 0, 0, 72, 13, 157, 150, 119, 84, 83, 217, 22, 135, 207, 189, 55, 189, 208, 18, 34, 32, 37, 244, 26, 122, 9, 32, 210, 59, 72, 21, 4, 81, 137, 73, 128, 80, 2, 134, 132, 38, 118, 68, 5, 70, 20, 17, 41, 86, 100, 84, 192, 1, 71, 135, 34, 99, 69, 20, 11, 131, 130, 98, 215, 9, 242, 16, 80, 198, 193, 81, 68, 69, 229, 221, 140, 107, 9, 239, 173, 53, 243, 222, 154, 253, 199, 89, 223, 217, 231, 183, 215, 217, 103, 239, 125, 215, 186, 0, 80, 252, 130, 4, 194, 116, 88, 1, 128, 52, 161, 88, 20, 238, 235, 193, 92, 18, 19, 203, 196, 247, 2, 24, 16, 1, 14, 88, 1, 192, 225, 102, 102, 4, 71, 248, 68, 2, 212, 252, 189, 61, 153, 153, 168, 72, 198, 179, 246, 238, 46, 128, 100, 187, 219, 44, 191, 80, 38, 115, 214, 255, 127, 145, 34, 55, 67, 36, 6, 0, 10, 69, 213, 54, 60, 126, 38, 23, 229, 2, 148, 83, 179, 197, 25, 50, 255, 4, 202, 244, 149, 41, 50, 134, 49, 50, 22, 161, 9, 162, 172, 34, 227, 196, 175, 108, 246, 167, 230, 43, 187, 201, 152, 151, 38, 228, 161, 26, 89, 206, 25, 188, 52, 158, 140, 187, 80, 222, 154, 37, 225, 163, 140, 4, 161, 92, 152, 37, 224, 103, 163, 124, 7, 101, 189, 84, 73, 154, 0, 229, 247, 40, 211, 211, 248, 156, 76, 0, 48, 20, 153, 95, 204, 231, 38, 161, 108, 137, 50, 69, 20, 25, 238, 137, 242, 2, 0, 8, 148, 196, 57, 188, 114, 14, 139, 249, 57, 104, 158, 0, 120, 166, 103, 228, 138, 4, 137, 73, 98, 166, 17, 215, 152, 105, 229, 232, 200, 102, 250, 241, 179, 83, 249, 98, 49, 43, 148, 195, 77, 225, 136, 120, 76, 207, 244, 180, 12, 142, 48, 23, 128, 175, 111, 150, 69, 1, 37, 89, 109, 153, 104, 145, 237, 173, 28, 237, 237, 89, 214, 230, 104, 249, 191, 217, 223, 30, 126, 83, 253, 61, 200, 122, 251, 85, 241, 38, 236, 207, 158, 65, 140, 158, 89, 223, 108, 236, 172, 47, 189, 22, 0, 246, 36, 90, 155, 29, 179, 190, 149, 85, 0, 180, 109, 6, 64, 229, 225, 172, 79, 239, 32, 0, 242, 5, 0, 180, 222, 156, 243, 30, 134, 108, 94, 146, 196, 226, 12, 39, 11, 139, 236, 236, 108, 115, 1, 159, 107, 46, 43, 232, 55, 251, 159, 130, 111, 202, 191, 134, 57, 247, 153, 203, 238, 251, 86, 59, 166, 23, 63, 129, 35, 73, 21, 51, 101, 69, 229, 166, 167, 166, 75, 68, 204, 204, 12, 14, 151, 207, 100, 253, 247, 16, 255, 227, 192, 57, 105, 205, 201, 195, 44, 156, 159, 192, 23, 241, 133, 232, 85, 81, 232, 148, 9, 132, 137, 104, 187, 133, 60, 129, 88, 144, 46, 100, 10, 132, 127, 213, 225, 127, 24, 54, 39, 7, 25, 126, 157, 107, 20, 104, 117, 95, 0, 125, 133, 57, 80, 184, 73, 7, 200, 111, 61, 0, 67, 35, 3, 36, 110, 63, 122, 2, 125, 235, 91, 16, 49, 10, 200, 190, 188, 104, 173, 145, 175, 115, 143, 50, 122, 254, 231, 250, 31, 11, 92, 138, 110, 225, 76, 65, 34, 83, 230, 246, 12, 143, 100, 114, 37, 162, 44, 25, 163, 223, 132, 108, 193, 2, 18, 144, 7, 116, 160, 10, 52, 129, 46, 48, 2, 44, 96, 13, 28, 128, 51, 112, 3, 222, 32, 0, 132, 128, 72, 16, 3, 150, 3, 46, 72, 2, 105, 64, 4, 178, 65, 62, 216, 0, 10, 65, 49, 216, 1, 118, 131, 106, 112, 0, 212, 129, 122, 208, 4, 78, 130, 54, 112, 6, 92, 4, 87, 192, 13, 112, 11, 12, 128, 71, 64, 10, 134, 193, 75, 48, 1, 222, 129, 105, 8, 130, 240, 16, 21, 162, 65, 170, 144, 22, 164, 15, 153, 66, 214, 16, 27, 90, 8, 121, 67, 65, 80, 56, 20, 3, 197, 67, 137, 144, 16, 146, 64, 249, 208, 38, 168, 24, 42, 131, 170, 161, 67, 80, 61, 244, 35, 116, 26, 186, 8, 93, 131, 250, 160, 7, 208, 32, 52, 6, 253, 1, 125, 132, 17, 152, 2, 211, 97, 13, 216, 0, 182, 128, 217, 176, 59, 28, 8, 71, 194, 203, 224, 68, 120, 21, 156, 7, 23, 192, 219, 225, 74, 184, 22, 62, 14, 183, 194, 23, 225, 27, 240, 0, 44, 133, 95, 194, 147, 8, 64, 200, 8, 3, 209, 70, 88, 8, 27, 241, 68, 66, 144, 88, 36, 1, 17, 33, 107, 145, 34, 164, 2, 169, 69, 154, 144, 14, 164, 27, 185, 141, 72, 145, 113, 228, 3, 6, 135, 161, 97, 152, 24, 22, 198, 25, 227, 135, 89, 140, 225, 98, 86, 97, 214, 98, 74, 48, 213, 152, 99, 152, 86, 76, 23, 230, 54, 102, 16, 51, 129, 249, 130, 165, 98, 213, 177, 166, 88, 39, 172, 63, 118, 9, 54, 17, 155, 141, 45, 196, 86, 96, 143, 96, 91, 176, 151, 177, 3, 216, 97, 236, 59, 28, 14, 199, 192, 25, 226, 28, 112, 126, 184, 24, 92, 50, 110, 53, 174, 4, 183, 15, 215, 140, 187, 128, 235, 195, 13, 225, 38, 241, 120, 188, 42, 222, 20, 239, 130, 15, 193, 115, 240, 98, 124, 33, 190, 10, 127, 28, 127, 30, 223, 143, 31, 198, 191, 39, 144, 9, 90, 4, 107, 130, 15, 33, 150, 32, 36, 108, 36, 84, 16, 26, 8, 231, 8, 253, 132, 17, 194, 52, 81, 129, 168, 79, 116, 34, 134, 16, 121, 196, 92, 98, 41, 177, 142, 216, 65, 188, 73, 28, 38, 78, 147, 20, 73, 134, 36, 23, 82, 36, 41, 153, 180, 129, 84, 73, 106, 34, 93, 38, 61, 38, 189, 33, 147, 201, 58, 100, 71, 114, 24, 89, 64, 94, 79, 174, 36, 159, 32, 95, 37, 15, 146, 63, 80, 148, 40, 38, 20, 79, 74, 28, 69, 66, 217, 78, 57, 74, 185, 64, 121, 64, 121, 67, 165, 82, 13, 168, 110, 212, 88, 170, 152, 186, 157, 90, 79, 189, 68, 125, 74, 125, 47, 71, 147, 51, 151, 243, 151, 227, 201, 173, 147, 171, 145, 107, 149, 235, 151, 123, 37, 79, 148, 215, 151, 119, 151, 95, 46, 159, 39, 95, 33, 127, 74, 254, 166, 252, 184, 2, 81, 193, 64, 193, 83, 129, 163, 176, 86, 161, 70, 225, 180, 194, 61, 133, 73, 69, 154, 162, 149, 98, 136, 98, 154, 98, 137, 98, 131, 226, 53, 197, 81, 37, 188, 146, 129, 146, 183, 18, 79, 169, 64, 233, 176, 210, 37, 165, 33, 26, 66, 211, 165, 121, 210, 184, 180, 77, 180, 58, 218, 101, 218, 48, 29, 71, 55, 164, 251, 211, 147, 233, 197, 244, 31, 232, 189, 244, 9, 101, 37, 101, 91, 229, 40, 229, 28, 229, 26, 229, 179, 202, 82, 6, 194, 48, 96, 248, 51, 82, 25, 165, 140, 147, 140, 187, 140, 143, 243, 52, 230, 185, 207, 227, 207, 219, 54, 175, 105, 94, 255, 188, 41, 149, 249, 42, 110, 42, 124, 149, 34, 149, 102, 149, 1, 149, 143, 170, 76, 85, 111, 213, 20, 213, 157, 170, 109, 170, 79, 212, 48, 106, 38, 106, 97, 106, 217, 106, 251, 213, 46, 171, 141, 207, 167, 207, 119, 158, 207, 157, 95, 52, 255, 228, 252, 135, 234, 176, 186, 137, 122, 184, 250, 106, 245, 195, 234, 61, 234, 147, 26, 154, 26, 190, 26, 25, 26, 85, 26, 151, 52, 198, 53, 25, 154, 110, 154, 201, 154, 229, 154, 231, 52, 199, 180, 104, 90, 11, 181, 4, 90, 229, 90, 231, 181, 94, 48, 149, 153, 238, 204, 84, 102, 37, 179, 139, 57, 161, 173, 174, 237, 167, 45, 209, 62, 164, 221, 171, 61, 173, 99, 168, 179, 88, 103, 163, 78, 179, 206, 19, 93, 146, 46, 91, 55, 65, 183, 92, 183, 83, 119, 66, 79, 75, 47, 88, 47, 95, 175, 81, 239, 161, 62, 81, 159, 173, 159, 164, 191, 71, 191, 91, 127, 202, 192, 208, 32, 218, 96, 139, 65, 155, 193, 168, 161, 138, 161, 191, 97, 158, 97, 163, 225, 99, 35, 170, 145, 171, 209, 42, 163, 90, 163, 59, 198, 56, 99, 182, 113, 138, 241, 62, 227, 91, 38, 176, 137, 157, 73, 146, 73, 141, 201, 77, 83, 216, 212, 222, 84, 96, 186, 207, 180, 207, 12, 107, 230, 104, 38, 52, 171, 53, 187, 199, 162, 176, 220, 89, 89, 172, 70, 214, 160, 57, 195, 60, 200, 124, 163, 121, 155, 249, 43, 11, 61, 139, 88, 139, 157, 22, 221, 22, 95, 44, 237, 44, 83, 45, 235, 44, 31, 89, 41, 89, 5, 88, 109, 180, 234, 176, 250, 195, 218, 196, 154, 107, 93, 99, 125, 199, 134, 106, 227, 99, 179, 206, 166, 221, 230, 181, 173, 169, 45, 223, 118, 191, 237, 125, 59, 154, 93, 176, 221, 22, 187, 78, 187, 207, 246, 14, 246, 34, 251, 38, 251, 49, 7, 61, 135, 120, 135, 189, 14, 247, 216, 116, 118, 40, 187, 132, 125, 213, 17, 235, 232, 225, 184, 206, 241, 140, 227, 7, 39, 123, 39, 177, 211, 73, 167, 223, 157, 89, 206, 41, 206, 13, 206, 163, 11, 12, 23, 240, 23, 212, 45, 24, 114, 209, 113, 225, 184, 28, 114, 145, 46, 100, 46, 140, 95, 120, 112, 161, 212, 85, 219, 149, 227, 90, 235, 250, 204, 77, 215, 141, 231, 118, 196, 109, 196, 221, 216, 61, 217, 253, 184, 251, 43, 15, 75, 15, 145, 71, 139, 199, 148, 167, 147, 231, 26, 207, 11, 94, 136, 151, 175, 87, 145, 87, 175, 183, 146, 247, 98, 239, 106, 239, 167, 62, 58, 62, 137, 62, 141, 62, 19, 190, 118, 190, 171, 125, 47, 248, 97, 253, 2, 253, 118, 250, 221, 243, 215, 240, 231, 250, 215, 251, 79, 4, 56, 4, 172, 9, 232, 10, 164, 4, 70, 4, 86, 7, 62, 11, 50, 9, 18, 5, 117, 4, 195, 193, 1, 193, 187, 130, 31, 47, 210, 95, 36, 92, 212, 22, 2, 66, 252, 67, 118, 133, 60, 9, 53, 12, 93, 21, 250, 115, 24, 46, 44, 52, 172, 38, 236, 121, 184, 85, 120, 126, 120, 119, 4, 45, 98, 69, 68, 67, 196, 187, 72, 143, 200, 210, 200, 71, 139, 141, 22, 75, 22, 119, 70, 201, 71, 197, 69, 213, 71, 77, 69, 123, 69, 151, 69, 75, 151, 88, 44, 89, 179, 228, 70, 140, 90, 140, 32, 166, 61, 22, 31, 27, 21, 123, 36, 118, 114, 169, 247, 210, 221, 75, 135, 227, 236, 226, 10, 227, 238, 46, 51, 92, 150, 179, 236, 218, 114, 181, 229, 169, 203, 207, 174, 144, 95, 193, 89, 113, 42, 30, 27, 31, 29, 223, 16, 255, 137, 19, 194, 169, 229, 76, 174, 244, 95, 185, 119, 229, 4, 215, 147, 187, 135, 251, 146, 231, 198, 43, 231, 141, 241, 93, 248, 101, 252, 145, 4, 151, 132, 178, 132, 209, 68, 151, 196, 93, 137, 99, 73, 174, 73, 21, 73, 227, 2, 79, 65, 181, 224, 117, 178, 95, 242, 129, 228, 169, 148, 144, 148, 163, 41, 51, 169, 209, 169, 205, 105, 132, 180, 248, 180, 211, 66, 37, 97, 138, 176, 43, 93, 51, 61, 39, 189, 47, 195, 52, 163, 48, 67, 186, 202, 105, 213, 238, 85, 19, 162, 64, 209, 145, 76, 40, 115, 89, 102, 187, 152, 142, 254, 76, 245, 72, 140, 36, 155, 37, 131, 89, 11, 179, 106, 178, 222, 103, 71, 101, 159, 202, 81, 204, 17, 230, 244, 228, 154, 228, 110, 203, 29, 201, 243, 201, 251, 126, 53, 102, 53, 119, 117, 103, 190, 118, 254, 134, 252, 193, 53, 238, 107, 14, 173, 133, 214, 174, 92, 219, 185, 78, 119, 93, 193, 186, 225, 245, 190, 235, 143, 109, 32, 109, 72, 217, 240, 203, 70, 203, 141, 101, 27, 223, 110, 138, 222, 212, 81, 160, 81, 176, 190, 96, 104, 179, 239, 230, 198, 66, 185, 66, 81, 225, 189, 45, 206, 91, 14, 108, 197, 108, 21, 108, 237, 221, 102, 179, 173, 106, 219, 151, 34, 94, 209, 245, 98, 203, 226, 138, 226, 79, 37, 220, 146, 235, 223, 89, 125, 87, 249, 221, 204, 246, 132, 237, 189, 165, 246, 165, 251, 119, 224, 118, 8, 119, 220, 221, 233, 186, 243, 88, 153, 98, 89, 94, 217, 208, 174, 224, 93, 173, 229, 204, 242, 162, 242, 183, 187, 87, 236, 190, 86, 97, 91, 113, 96, 15, 105, 143, 100, 143, 180, 50, 168, 178, 189, 74, 175, 106, 71, 213, 167, 234, 164, 234, 129, 26, 143, 154, 230, 189, 234, 123, 183, 237, 157, 218, 199, 219, 215, 191, 223, 109, 127, 211, 1, 141, 3, 197, 7, 62, 30, 20, 28, 188, 127, 200, 247, 80, 107, 173, 65, 109, 197, 97, 220, 225, 172, 195, 207, 235, 162, 234, 186, 191, 103, 127, 95, 127, 68, 237, 72, 241, 145, 207, 71, 133, 71, 165, 199, 194, 143, 117, 213, 59, 212, 215, 55, 168, 55, 148, 54, 194, 141, 146, 198, 177, 227, 113, 199, 111, 253, 224, 245, 67, 123, 19, 171, 233, 80, 51, 163, 185, 248, 4, 56, 33, 57, 241, 226, 199, 248, 31, 239, 158, 12, 60, 217, 121, 138, 125, 170, 233, 39, 253, 159, 246, 182, 208, 90, 138, 90, 161, 214, 220, 214, 137, 182, 164, 54, 105, 123, 76, 123, 223, 233, 128, 211, 157, 29, 206, 29, 45, 63, 155, 255, 124, 244, 140, 246, 153, 154, 179, 202, 103, 75, 207, 145, 206, 21, 156, 155, 57, 159, 119, 126, 242, 66, 198, 133, 241, 139, 137, 23, 135, 58, 87, 116, 62, 186, 180, 228, 210, 157, 174, 176, 174, 222, 203, 129, 151, 175, 94, 241, 185, 114, 169, 219, 189, 251, 252, 85, 151, 171, 103, 174, 57, 93, 59, 125, 157, 125, 189, 237, 134, 253, 141, 214, 30, 187, 158, 150, 95, 236, 126, 105, 233, 181, 239, 109, 189, 233, 112, 179, 253, 150, 227, 173, 142, 190, 5, 125, 231, 250, 93, 251, 47, 222, 246, 186, 125, 229, 142, 255, 157, 27, 3, 139, 6, 250, 238, 46, 190, 123, 255, 94, 220, 61, 233, 125, 222, 253, 209, 7, 169, 15, 94, 63, 204, 122, 56, 253, 104, 253, 99, 236, 227, 162, 39, 10, 79, 42, 158, 170, 63, 173, 253, 213, 248, 215, 102, 169, 189, 244, 236, 160, 215, 96, 207, 179, 136, 103, 143, 134, 184, 67, 47, 255, 149, 249, 175, 79, 195, 5, 207, 169, 207, 43, 70, 180, 70, 234, 71, 173, 71, 207, 140, 249, 140, 221, 122, 177, 244, 197, 240, 203, 140, 151, 211, 227, 133, 191, 41, 254, 182, 247, 149, 209, 171, 159, 126, 119, 251, 189, 103, 98, 201, 196, 240, 107, 209, 235, 153, 63, 74, 222, 168, 190, 57, 250, 214, 246, 109, 231, 100, 232, 228, 211, 119, 105, 239, 166, 167, 138, 222, 171, 190, 63, 246, 129, 253, 161, 251, 99, 244, 199, 145, 233, 236, 79, 248, 79, 149, 159, 141, 63, 119, 124, 9, 252, 242, 120, 38, 109, 102, 230, 223, 247, 132, 243, 251, 50, 58, 89, 126, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 19, 0, 0, 11, 19, 1, 0, 154, 156, 24, 0, 0, 2, 48, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 52, 46, 48, 34, 62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 116, 105, 102, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47, 49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 65, 99, 111, 114, 110, 32, 118, 101, 114, 115, 105, 111, 110, 32, 52, 46, 50, 46, 50, 60, 47, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 62, 53, 60, 47, 116, 105, 102, 102, 58, 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 55, 50, 60, 47, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 55, 50, 60, 47, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 148, 54, 152, 252, 0, 0, 64, 0, 73, 68, 65, 84, 120, 1, 236, 189, 9, 180, 93, 197, 121, 46, 88, 91, 35, 26, 46, 26, 208, 128, 6, 208, 17, 118, 68, 252, 130, 16, 78, 228, 56, 36, 50, 126, 105, 203, 238, 100, 5, 17, 175, 118, 44, 158, 157, 231, 142, 200, 235, 64, 22, 228, 37, 157, 6, 57, 239, 37, 121, 65, 106, 63, 59, 203, 6, 58, 43, 105, 67, 199, 56, 9, 56, 3, 60, 219, 241, 90, 54, 226, 197, 233, 6, 183, 27, 144, 73, 28, 136, 145, 140, 19, 12, 72, 58, 71, 211, 213, 112, 175, 102, 221, 43, 233, 94, 73, 187, 191, 127, 15, 103, 215, 191, 107, 207, 195, 185, 231, 28, 253, 255, 90, 117, 118, 85, 237, 170, 255, 175, 250, 118, 141, 127, 13, 71, 41, 33, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 40, 133, 128, 85, 42, 182, 68, 22, 4, 4, 129, 43, 27, 1, 219, 158, 110, 43, 245, 105, 128, 112, 22, 102, 182, 82, 214, 127, 178, 44, 117, 177, 14, 80, 108, 219, 222, 12, 190, 179, 92, 57, 234, 179, 150, 101, 13, 213, 33, 71, 120, 10, 2, 130, 128, 32, 32, 8, 8, 2, 130, 64, 10, 2, 77, 219, 126, 1, 29, 179, 71, 7, 49, 22, 168, 143, 118, 219, 246, 14, 95, 146, 109, 183, 106, 149, 85, 95, 46, 132, 179, 32, 32, 8, 244, 12, 2, 39, 109, 251, 97, 52, 58, 219, 60, 67, 141, 221, 218, 112, 226, 199, 109, 123, 29, 252, 233, 157, 23, 110, 124, 75, 56, 76, 63, 186, 247, 186, 249, 69, 182, 71, 151, 245, 99, 254, 226, 242, 132, 12, 79, 129, 89, 8, 51, 207, 51, 211, 227, 194, 214, 226, 111, 219, 214, 17, 8, 6, 157, 112, 13, 74, 32, 210, 83, 139, 172, 4, 166, 67, 182, 189, 138, 4, 7, 116, 118, 117, 66, 240, 210, 175, 182, 219, 246, 64, 32, 139, 108, 205, 77, 165, 153, 10, 3, 65, 64, 16, 232, 61, 4, 208, 228, 173, 71, 11, 64, 51, 2, 234, 120, 155, 48, 181, 52, 128, 187, 92, 222, 96, 239, 83, 139, 212, 144, 140, 90, 80, 77, 250, 111, 221, 231, 174, 38, 11, 80, 131, 3, 114, 150, 249, 38, 204, 30, 254, 212, 57, 121, 239, 85, 109, 203, 60, 251, 131, 25, 89, 35, 156, 134, 126, 116, 19, 166, 23, 130, 60, 195, 105, 16, 149, 197, 85, 181, 231, 29, 3, 128, 211, 134, 104, 187, 227, 223, 96, 143, 59, 0, 241, 82, 178, 231, 68, 237, 249, 134, 0, 148, 185, 167, 130, 172, 31, 135, 181, 190, 242, 221, 137, 252, 136, 12, 65, 160, 74, 4, 206, 187, 19, 86, 175, 95, 28, 105, 162, 126, 76, 74, 226, 159, 248, 50, 41, 226, 68, 191, 59, 168, 20, 53, 180, 107, 96, 110, 131, 105, 192, 208, 218, 96, 229, 132, 222, 243, 84, 6, 166, 35, 25, 194, 84, 22, 228, 89, 204, 60, 193, 236, 128, 111, 108, 123, 251, 64, 155, 57, 102, 167, 88, 128, 61, 234, 191, 83, 106, 232, 71, 218, 239, 122, 208, 130, 22, 126, 38, 12, 13, 176, 72, 187, 66, 141, 255, 22, 152, 70, 167, 179, 114, 214, 93, 127, 62, 48, 205, 45, 115, 113, 226, 81, 22, 247, 125, 60, 238, 101, 149, 254, 181, 44, 178, 231, 72, 32, 205, 254, 87, 42, 53, 55, 136, 114, 213, 134, 192, 94, 159, 109, 138, 82, 191, 21, 112, 167, 106, 112, 236, 163, 129, 91, 108, 130, 192, 149, 139, 0, 245, 11, 80, 69, 222, 15, 4, 188, 126, 241, 200, 92, 236, 199, 185, 156, 132, 72, 207, 14, 0, 146, 50, 213, 239, 239, 222, 171, 212, 186, 32, 143, 123, 149, 101, 173, 59, 227, 187, 177, 43, 234, 6, 52, 146, 30, 145, 247, 194, 93, 190, 171, 234, 231, 88, 155, 225, 63, 140, 183, 173, 21, 90, 70, 108, 251, 94, 176, 163, 193, 213, 231, 96, 110, 135, 249, 24, 204, 131, 48, 77, 219, 62, 10, 147, 60, 186, 69, 184, 74, 8, 157, 255, 106, 140, 46, 41, 13, 25, 200, 238, 232, 96, 48, 67, 130, 106, 9, 114, 90, 169, 175, 4, 140, 143, 194, 186, 244, 59, 129, 187, 62, 219, 18, 108, 252, 219, 171, 84, 43, 144, 112, 230, 203, 129, 93, 108, 130, 192, 149, 139, 192, 143, 42, 245, 40, 207, 253, 242, 15, 114, 183, 233, 146, 1, 128, 137, 73, 215, 251, 140, 42, 117, 119, 144, 200, 201, 79, 7, 118, 165, 240, 78, 155, 129, 30, 109, 165, 141, 0, 245, 184, 89, 236, 152, 125, 211, 210, 130, 51, 35, 191, 190, 61, 27, 190, 245, 191, 195, 143, 102, 230, 27, 97, 104, 93, 56, 24, 131, 100, 97, 26, 17, 102, 24, 157, 255, 76, 163, 64, 235, 1, 23, 54, 208, 15, 92, 210, 125, 234, 178, 31, 86, 234, 25, 206, 251, 252, 139, 112, 95, 141, 93, 232, 14, 193, 126, 21, 204, 7, 221, 81, 152, 85, 139, 38, 138, 203, 159, 88, 23, 173, 197, 223, 208, 254, 246, 148, 150, 145, 71, 80, 206, 58, 182, 41, 15, 0, 255, 102, 128, 192, 10, 101, 219, 245, 238, 61, 8, 100, 137, 77, 16, 232, 82, 4, 112, 26, 103, 133, 59, 65, 242, 18, 72, 19, 195, 105, 175, 118, 105, 106, 203, 39, 11, 235, 238, 247, 162, 163, 209, 169, 81, 158, 171, 201, 129, 239, 60, 38, 113, 145, 123, 0, 66, 105, 169, 119, 15, 128, 183, 1, 204, 203, 251, 240, 122, 61, 213, 131, 108, 207, 130, 153, 86, 61, 108, 30, 59, 132, 45, 196, 140, 188, 233, 9, 205, 240, 56, 134, 13, 106, 5, 215, 103, 161, 246, 199, 30, 15, 141, 78, 54, 225, 160, 129, 135, 191, 28, 160, 189, 27, 190, 55, 79, 62, 114, 135, 197, 122, 59, 173, 52, 7, 116, 100, 71, 18, 15, 132, 171, 127, 80, 109, 164, 201, 73, 93, 35, 41, 93, 85, 190, 195, 230, 79, 26, 236, 105, 116, 104, 97, 149, 252, 83, 121, 97, 128, 121, 78, 147, 142, 98, 249, 66, 106, 28, 9, 32, 8, 244, 49, 2, 216, 143, 67, 155, 213, 53, 26, 202, 180, 36, 87, 127, 99, 213, 199, 160, 79, 68, 214, 240, 133, 231, 45, 106, 11, 166, 149, 224, 177, 151, 219, 78, 52, 140, 88, 21, 109, 180, 221, 202, 254, 106, 96, 47, 110, 67, 103, 76, 131, 140, 163, 152, 145, 55, 178, 115, 153, 74, 235, 195, 86, 246, 240, 65, 200, 150, 82, 155, 2, 21, 194, 209, 157, 150, 53, 119, 37, 166, 218, 7, 97, 70, 97, 30, 26, 86, 234, 142, 32, 244, 233, 79, 7, 246, 78, 216, 206, 61, 158, 36, 5, 233, 75, 92, 115, 75, 138, 219, 43, 239, 240, 109, 104, 25, 198, 35, 154, 105, 44, 25, 242, 93, 29, 121, 90, 214, 69, 104, 101, 72, 11, 227, 209, 181, 183, 97, 176, 217, 209, 147, 24, 84, 39, 80, 23, 155, 158, 233, 236, 0, 8, 185, 134, 220, 73, 48, 11, 97, 232, 36, 74, 176, 7, 200, 135, 68, 158, 87, 14, 2, 104, 247, 151, 184, 107, 255, 94, 158, 143, 162, 78, 46, 220, 150, 5, 0, 25, 0, 100, 65, 105, 130, 194, 160, 98, 91, 48, 84, 209, 233, 233, 116, 166, 231, 149, 250, 197, 32, 57, 199, 97, 93, 130, 141, 159, 238, 59, 44, 196, 255, 20, 233, 162, 93, 162, 193, 65, 227, 168, 31, 215, 15, 227, 191, 205, 252, 196, 172, 27, 97, 159, 227, 225, 29, 21, 248, 162, 35, 74, 157, 244, 252, 239, 196, 243, 70, 152, 173, 72, 95, 197, 116, 252, 19, 97, 134, 11, 45, 107, 91, 179, 45, 123, 193, 220, 154, 247, 2, 88, 193, 96, 132, 82, 50, 35, 24, 127, 133, 19, 118, 5, 184, 71, 161, 137, 89, 202, 242, 57, 99, 43, 115, 118, 200, 129, 30, 239, 83, 129, 40, 42, 245, 111, 127, 40, 112, 215, 111, 59, 232, 110, 66, 110, 64, 18, 153, 142, 47, 251, 236, 117, 27, 252, 163, 144, 141, 70, 224, 173, 125, 120, 10, 93, 161, 8, 96, 66, 116, 119, 208, 238, 19, 8, 147, 239, 202, 10, 133, 12, 0, 178, 34, 53, 1, 225, 118, 43, 181, 7, 98, 105, 157, 155, 102, 149, 151, 209, 137, 219, 248, 208, 79, 4, 73, 113, 250, 34, 231, 61, 189, 67, 71, 245, 82, 240, 206, 233, 182, 104, 67, 154, 19, 87, 169, 51, 136, 159, 127, 211, 28, 18, 240, 191, 243, 14, 112, 228, 147, 150, 53, 227, 253, 152, 233, 14, 129, 57, 218, 33, 162, 115, 223, 129, 251, 45, 152, 45, 51, 240, 3, 143, 149, 74, 205, 164, 25, 154, 77, 111, 243, 18, 34, 97, 43, 131, 79, 179, 34, 103, 118, 8, 227, 201, 246, 195, 213, 244, 196, 140, 30, 199, 64, 252, 129, 14, 132, 92, 124, 176, 38, 73, 61, 193, 22, 61, 142, 54, 0, 165, 36, 207, 250, 218, 68, 36, 252, 135, 74, 125, 55, 36, 87, 219, 23, 19, 122, 211, 159, 78, 170, 219, 30, 205, 236, 76, 93, 240, 197, 201, 179, 123, 16, 192, 228, 15, 157, 248, 163, 65, 130, 104, 39, 210, 130, 191, 12, 220, 201, 54, 25, 0, 36, 227, 51, 161, 111, 209, 147, 162, 239, 153, 88, 194, 232, 225, 35, 65, 10, 72, 221, 59, 251, 161, 192, 237, 219, 102, 76, 245, 109, 244, 196, 24, 160, 101, 89, 83, 48, 72, 40, 54, 0, 64, 190, 23, 6, 252, 166, 211, 238, 127, 70, 116, 220, 229, 134, 246, 38, 180, 227, 144, 151, 124, 212, 165, 240, 94, 4, 79, 42, 6, 64, 127, 30, 36, 96, 41, 212, 175, 195, 155, 2, 247, 149, 101, 195, 192, 139, 180, 61, 30, 145, 190, 231, 52, 198, 169, 157, 39, 28, 131, 57, 123, 130, 137, 189, 10, 94, 87, 42, 93, 152, 115, 165, 230, 252, 74, 207, 55, 38, 104, 31, 165, 195, 176, 1, 157, 216, 154, 214, 30, 6, 97, 85, 254, 25, 161, 30, 249, 74, 176, 163, 193, 11, 85, 174, 200, 93, 222, 33, 21, 224, 37, 90, 255, 46, 77, 166, 236, 50, 44, 89, 31, 157, 153, 17, 31, 132, 92, 218, 153, 57, 98, 137, 128, 43, 148, 250, 106, 16, 125, 209, 131, 80, 110, 108, 242, 221, 176, 47, 187, 205, 81, 123, 250, 62, 214, 179, 190, 77, 127, 34, 28, 45, 157, 108, 164, 11, 115, 148, 218, 133, 122, 82, 156, 208, 195, 109, 165, 5, 149, 128, 102, 61, 1, 174, 180, 52, 50, 81, 100, 205, 48, 36, 15, 79, 51, 188, 106, 240, 128, 16, 192, 239, 19, 14, 3, 170, 165, 231, 124, 87, 71, 159, 150, 69, 231, 45, 181, 242, 232, 44, 5, 69, 106, 139, 138, 164, 235, 144, 187, 190, 142, 210, 227, 236, 127, 41, 194, 130, 214, 233, 113, 90, 198, 41, 129, 50, 209, 42, 132, 160, 68, 74, 67, 0, 5, 94, 59, 6, 75, 3, 242, 21, 127, 152, 22, 167, 47, 222, 183, 58, 116, 10, 128, 26, 0, 24, 58, 222, 70, 102, 19, 140, 54, 59, 117, 161, 36, 63, 239, 157, 31, 166, 146, 217, 8, 120, 82, 39, 54, 197, 51, 116, 253, 43, 26, 20, 159, 14, 146, 101, 58, 12, 189, 183, 176, 17, 96, 3, 121, 184, 228, 220, 19, 71, 215, 166, 234, 241, 11, 53, 66, 218, 109, 127, 96, 183, 159, 77, 186, 180, 19, 18, 141, 170, 11, 149, 198, 219, 203, 147, 115, 46, 128, 174, 190, 213, 136, 252, 6, 89, 71, 12, 143, 101, 48, 218, 109, 113, 237, 224, 198, 119, 203, 147, 102, 7, 237, 54, 43, 178, 12, 54, 243, 196, 175, 58, 44, 18, 224, 151, 73, 191, 204, 241, 149, 154, 170, 5, 18, 63, 148, 51, 126, 34, 98, 255, 142, 58, 196, 100, 229, 105, 158, 70, 24, 90, 149, 53, 110, 90, 56, 180, 47, 77, 250, 202, 46, 141, 52, 241, 100, 229, 39, 212, 254, 52, 116, 126, 8, 187, 218, 169, 129, 110, 100, 252, 30, 122, 88, 127, 95, 133, 157, 203, 175, 247, 212, 81, 21, 233, 21, 30, 213, 35, 128, 19, 95, 116, 5, 189, 70, 123, 190, 80, 189, 148, 46, 229, 200, 43, 128, 131, 65, 163, 75, 147, 90, 89, 178, 222, 110, 223, 189, 79, 249, 221, 255, 148, 206, 152, 15, 14, 170, 107, 16, 204, 142, 120, 228, 94, 95, 174, 246, 174, 225, 251, 85, 246, 68, 103, 131, 29, 140, 77, 231, 203, 198, 255, 56, 114, 241, 218, 153, 237, 143, 177, 171, 105, 245, 72, 23, 112, 53, 38, 31, 40, 228, 73, 39, 110, 189, 123, 65, 231, 22, 216, 143, 108, 201, 195, 167, 215, 195, 162, 193, 9, 29, 207, 108, 77, 232, 32, 168, 182, 54, 192, 24, 232, 248, 95, 124, 236, 11, 254, 62, 26, 46, 187, 217, 160, 111, 139, 80, 51, 113, 60, 49, 162, 172, 208, 240, 177, 216, 137, 152, 184, 50, 195, 229, 87, 87, 223, 227, 228, 137, 127, 247, 33, 128, 201, 153, 54, 33, 162, 201, 144, 118, 35, 108, 247, 37, 183, 218, 20, 241, 10, 224, 84, 208, 70, 181, 18, 186, 143, 27, 159, 133, 242, 243, 255, 192, 163, 233, 160, 224, 252, 84, 119, 254, 223, 28, 101, 146, 128, 139, 212, 200, 45, 132, 76, 143, 94, 174, 237, 207, 128, 32, 96, 35, 239, 216, 169, 160, 59, 231, 208, 73, 243, 65, 71, 160, 162, 102, 251, 240, 118, 78, 138, 211, 253, 12, 165, 212, 194, 135, 217, 160, 11, 220, 12, 186, 114, 46, 161, 105, 226, 10, 102, 158, 253, 3, 19, 58, 227, 168, 181, 13, 192, 32, 0, 121, 213, 52, 110, 126, 206, 157, 242, 183, 22, 46, 42, 91, 62, 173, 134, 101, 147, 239, 8, 158, 78, 25, 220, 80, 71, 75, 210, 100, 242, 118, 79, 168, 38, 166, 142, 252, 9, 207, 100, 4, 232, 118, 210, 160, 156, 145, 109, 111, 166, 99, 127, 201, 92, 123, 232, 109, 173, 149, 191, 11, 113, 160, 141, 111, 193, 7, 15, 141, 246, 176, 12, 192, 47, 70, 177, 27, 85, 102, 1, 88, 55, 3, 217, 145, 54, 250, 243, 9, 106, 44, 43, 149, 27, 149, 7, 200, 160, 142, 127, 253, 8, 27, 253, 194, 167, 77, 206, 224, 164, 18, 85, 48, 221, 70, 216, 102, 235, 88, 142, 211, 255, 17, 132, 26, 122, 103, 141, 55, 114, 144, 225, 105, 48, 48, 74, 119, 58, 13, 166, 66, 142, 202, 91, 183, 251, 141, 186, 203, 43, 26, 36, 53, 95, 194, 148, 2, 72, 39, 218, 0, 100, 150, 202, 91, 232, 146, 21, 13, 130, 120, 107, 91, 83, 150, 146, 141, 200, 215, 158, 92, 90, 214, 91, 31, 97, 214, 157, 97, 127, 74, 229, 44, 204, 144, 58, 56, 42, 44, 249, 85, 82, 31, 34, 19, 90, 151, 167, 59, 0, 91, 136, 180, 87, 97, 34, 235, 103, 93, 73, 239, 4, 95, 179, 77, 238, 240, 101, 92, 157, 200, 100, 146, 12, 0, 64, 29, 142, 78, 141, 164, 240, 189, 254, 14, 106, 104, 106, 12, 60, 106, 97, 99, 91, 64, 244, 199, 44, 254, 155, 90, 54, 29, 185, 42, 81, 234, 252, 50, 144, 179, 250, 89, 201, 30, 136, 32, 135, 142, 122, 117, 25, 132, 199, 204, 246, 29, 153, 180, 22, 94, 104, 159, 131, 46, 199, 183, 111, 55, 254, 122, 54, 216, 255, 176, 215, 208, 10, 68, 168, 194, 145, 22, 190, 14, 92, 255, 224, 200, 79, 123, 93, 79, 115, 0, 112, 100, 115, 93, 178, 178, 240, 237, 196, 0, 192, 79, 7, 202, 22, 45, 127, 100, 169, 3, 24, 44, 148, 223, 92, 221, 52, 180, 45, 72, 65, 97, 122, 147, 237, 221, 241, 243, 212, 205, 207, 127, 53, 219, 247, 194, 185, 199, 236, 120, 75, 55, 231, 53, 111, 218, 204, 122, 88, 92, 3, 84, 89, 131, 153, 55, 19, 101, 195, 99, 219, 253, 55, 2, 30, 180, 71, 251, 208, 209, 192, 221, 127, 54, 28, 140, 191, 59, 200, 213, 101, 118, 27, 221, 8, 59, 155, 125, 246, 197, 60, 199, 64, 2, 158, 9, 54, 236, 184, 158, 111, 89, 164, 202, 92, 57, 198, 118, 94, 71, 197, 25, 32, 207, 151, 108, 251, 56, 180, 2, 229, 214, 61, 81, 227, 219, 107, 251, 224, 121, 0, 134, 254, 12, 72, 39, 58, 1, 176, 92, 169, 1, 255, 136, 195, 55, 16, 135, 150, 39, 168, 161, 198, 128, 169, 184, 124, 92, 118, 19, 218, 184, 181, 252, 6, 95, 240, 10, 96, 49, 232, 59, 156, 231, 138, 70, 68, 35, 99, 83, 169, 236, 39, 58, 133, 107, 39, 121, 126, 206, 148, 154, 229, 114, 94, 221, 237, 194, 209, 214, 209, 169, 110, 29, 184, 49, 62, 165, 135, 102, 33, 220, 3, 85, 212, 191, 197, 74, 85, 248, 7, 91, 147, 181, 123, 44, 226, 83, 223, 77, 111, 102, 186, 127, 2, 86, 81, 146, 250, 235, 15, 186, 112, 1, 219, 83, 28, 152, 27, 62, 204, 221, 87, 128, 139, 143, 130, 28, 53, 108, 207, 14, 102, 216, 231, 114, 59, 189, 176, 234, 111, 3, 159, 77, 30, 166, 205, 31, 109, 149, 223, 41, 166, 14, 103, 234, 64, 226, 179, 154, 241, 175, 192, 1, 158, 83, 96, 26, 199, 152, 92, 248, 24, 84, 108, 151, 56, 216, 164, 173, 237, 111, 66, 24, 71, 173, 135, 167, 166, 253, 8, 39, 192, 89, 24, 105, 20, 201, 50, 255, 191, 5, 243, 174, 121, 237, 152, 152, 46, 52, 80, 181, 178, 141, 100, 148, 142, 226, 155, 16, 139, 164, 191, 150, 56, 44, 79, 148, 237, 98, 223, 183, 170, 180, 117, 82, 3, 64, 105, 70, 134, 55, 58, 139, 57, 148, 245, 72, 26, 161, 122, 185, 182, 138, 252, 241, 246, 45, 82, 88, 14, 207, 193, 23, 170, 72, 83, 39, 121, 68, 124, 219, 28, 249, 13, 7, 237, 31, 13, 0, 95, 10, 166, 124, 70, 104, 31, 59, 249, 161, 38, 74, 22, 114, 62, 0, 131, 93, 185, 206, 134, 48, 82, 187, 225, 200, 122, 239, 83, 179, 82, 213, 31, 208, 177, 235, 83, 255, 5, 167, 0, 70, 151, 161, 117, 156, 132, 205, 122, 244, 61, 66, 52, 158, 123, 57, 96, 143, 123, 196, 45, 196, 199, 153, 213, 55, 244, 47, 204, 151, 62, 194, 193, 153, 123, 158, 30, 47, 213, 110, 168, 239, 155, 155, 162, 226, 96, 0, 180, 145, 73, 113, 207, 124, 187, 199, 241, 24, 143, 62, 25, 160, 26, 3, 0, 190, 20, 21, 133, 81, 157, 126, 131, 230, 142, 251, 124, 223, 57, 99, 226, 240, 141, 215, 242, 1, 56, 255, 234, 166, 107, 164, 9, 191, 218, 54, 198, 82, 178, 249, 169, 159, 254, 236, 4, 128, 33, 181, 241, 51, 75, 26, 226, 209, 31, 147, 67, 124, 119, 236, 252, 15, 45, 131, 142, 85, 50, 224, 204, 88, 21, 36, 88, 221, 8, 52, 43, 31, 0, 212, 215, 56, 4, 3, 128, 96, 125, 219, 220, 56, 87, 224, 108, 42, 42, 172, 187, 169, 209, 105, 118, 55, 161, 2, 71, 158, 113, 231, 199, 96, 28, 205, 71, 131, 42, 59, 204, 106, 190, 41, 50, 223, 49, 41, 243, 27, 96, 128, 19, 67, 8, 75, 75, 14, 26, 185, 179, 226, 239, 162, 211, 8, 60, 73, 159, 208, 31, 3, 84, 96, 78, 27, 62, 61, 114, 6, 54, 145, 223, 38, 6, 174, 74, 189, 249, 169, 152, 35, 108, 95, 76, 21, 130, 144, 201, 6, 215, 174, 249, 249, 182, 183, 92, 226, 13, 241, 38, 32, 17, 42, 7, 20, 246, 28, 249, 57, 107, 98, 85, 164, 71, 231, 193, 103, 200, 19, 171, 137, 209, 211, 37, 246, 26, 17, 48, 143, 225, 86, 94, 230, 107, 76, 189, 176, 206, 130, 0, 26, 12, 186, 220, 135, 214, 176, 105, 164, 231, 27, 88, 125, 26, 35, 53, 35, 205, 180, 233, 93, 104, 198, 237, 116, 123, 126, 28, 239, 121, 169, 182, 141, 90, 81, 3, 0, 104, 2, 44, 62, 91, 42, 54, 0, 65, 222, 176, 12, 24, 79, 92, 5, 79, 157, 127, 104, 227, 21, 226, 7, 131, 0, 82, 220, 102, 87, 193, 35, 48, 45, 65, 104, 52, 188, 41, 54, 37, 24, 112, 56, 67, 15, 45, 52, 172, 155, 121, 135, 112, 100, 75, 108, 252, 30, 123, 177, 215, 248, 43, 224, 102, 99, 66, 178, 128, 122, 18, 124, 95, 2, 191, 248, 70, 168, 168, 244, 99, 200, 166, 13, 116, 252, 143, 123, 138, 234, 158, 51, 24, 108, 178, 211, 32, 238, 49, 88, 188, 91, 203, 211, 228, 199, 59, 23, 90, 179, 141, 146, 152, 207, 143, 15, 0, 242, 13, 112, 243, 73, 146, 208, 62, 2, 248, 154, 190, 214, 153, 78, 133, 232, 6, 237, 112, 246, 246, 197, 231, 151, 247, 137, 54, 143, 100, 106, 244, 246, 134, 188, 60, 36, 124, 15, 34, 128, 202, 174, 209, 32, 83, 169, 243, 25, 89, 171, 163, 155, 178, 226, 6, 0, 188, 67, 172, 167, 113, 226, 107, 164, 123, 66, 27, 246, 220, 143, 140, 70, 124, 139, 6, 92, 35, 243, 167, 55, 84, 221, 201, 103, 108, 155, 233, 90, 155, 90, 84, 211, 153, 243, 83, 97, 192, 179, 198, 249, 227, 206, 150, 57, 63, 43, 117, 167, 131, 107, 23, 156, 82, 196, 26, 91, 222, 1, 7, 26, 48, 133, 178, 131, 208, 122, 185, 131, 179, 250, 25, 58, 151, 95, 79, 29, 243, 177, 214, 159, 24, 74, 227, 88, 161, 179, 19, 130, 6, 67, 142, 113, 247, 69, 28, 219, 168, 135, 235, 71, 123, 51, 177, 158, 87, 119, 11, 101, 36, 118, 208, 130, 242, 193, 101, 53, 26, 175, 190, 89, 27, 137, 4, 173, 15, 60, 81, 201, 230, 173, 104, 231, 195, 217, 87, 254, 189, 182, 19, 133, 98, 65, 251, 79, 113, 200, 215, 254, 187, 246, 187, 138, 44, 144, 159, 56, 19, 143, 16, 51, 141, 235, 60, 167, 254, 32, 34, 76, 105, 47, 190, 35, 253, 28, 23, 233, 113, 199, 37, 245, 71, 11, 9, 194, 169, 7, 190, 5, 251, 250, 219, 129, 67, 35, 142, 215, 74, 252, 249, 209, 49, 165, 238, 139, 126, 223, 194, 169, 12, 171, 231, 142, 97, 69, 231, 69, 169, 217, 74, 253, 11, 253, 223, 88, 64, 23, 107, 211, 48, 5, 50, 76, 27, 182, 181, 255, 6, 247, 157, 174, 253, 127, 4, 127, 83, 196, 133, 191, 216, 124, 143, 27, 239, 252, 211, 248, 123, 43, 28, 0, 176, 178, 93, 180, 130, 178, 131, 176, 91, 16, 247, 234, 224, 196, 204, 222, 247, 21, 73, 67, 55, 198, 57, 232, 252, 13, 178, 179, 234, 51, 23, 233, 115, 140, 187, 6, 116, 38, 104, 166, 186, 49, 225, 21, 164, 41, 249, 100, 198, 130, 208, 9, 153, 10, 4, 106, 44, 90, 74, 253, 118, 209, 191, 252, 213, 216, 244, 137, 213, 80, 51, 163, 121, 182, 59, 55, 10, 238, 36, 138, 124, 163, 25, 223, 116, 197, 103, 65, 17, 106, 240, 10, 18, 250, 166, 51, 202, 63, 217, 140, 234, 0, 3, 13, 64, 160, 6, 30, 52, 214, 66, 235, 153, 33, 34, 65, 13, 164, 201, 163, 224, 140, 126, 59, 203, 40, 35, 180, 242, 30, 80, 190, 139, 50, 176, 17, 49, 164, 110, 115, 22, 54, 18, 103, 242, 92, 243, 65, 146, 105, 110, 52, 161, 127, 26, 212, 134, 163, 74, 11, 150, 1, 180, 243, 240, 148, 199, 250, 213, 159, 44, 253, 198, 183, 141, 248, 254, 44, 66, 49, 7, 50, 22, 57, 176, 36, 110, 124, 6, 30, 63, 56, 76, 226, 81, 44, 85, 110, 44, 46, 191, 115, 109, 31, 151, 139, 220, 181, 169, 186, 219, 71, 203, 224, 82, 103, 92, 174, 117, 108, 103, 220, 183, 52, 106, 147, 141, 242, 206, 219, 150, 234, 218, 250, 158, 213, 0, 56, 115, 97, 134, 248, 116, 76, 10, 251, 143, 240, 127, 107, 218, 204, 114, 202, 227, 122, 14, 113, 254, 95, 251, 171, 222, 19, 59, 171, 56, 127, 172, 243, 39, 59, 70, 247, 123, 241, 135, 136, 13, 88, 155, 182, 237, 236, 63, 160, 219, 241, 150, 193, 76, 194, 177, 11, 111, 212, 223, 88, 14, 183, 179, 97, 106, 9, 251, 183, 56, 154, 128, 55, 254, 47, 252, 84, 78, 43, 145, 174, 96, 122, 191, 124, 46, 46, 64, 122, 1, 105, 240, 143, 6, 206, 196, 12, 113, 207, 162, 182, 212, 65, 252, 101, 240, 146, 161, 182, 51, 131, 229, 6, 165, 62, 201, 103, 186, 78, 95, 64, 53, 111, 83, 120, 67, 31, 252, 8, 143, 109, 230, 232, 128, 230, 70, 195, 125, 167, 26, 189, 94, 169, 255, 24, 64, 72, 121, 188, 208, 209, 60, 190, 161, 212, 77, 193, 183, 165, 148, 204, 188, 39, 72, 79, 117, 54, 204, 228, 121, 17, 40, 192, 186, 10, 30, 81, 98, 161, 137, 17, 186, 66, 16, 128, 118, 49, 244, 151, 191, 103, 182, 214, 209, 214, 247, 14, 156, 198, 136, 8, 205, 111, 159, 106, 0, 248, 44, 150, 175, 255, 99, 150, 74, 107, 112, 30, 213, 51, 211, 222, 149, 126, 13, 176, 159, 128, 168, 103, 163, 206, 66, 197, 111, 71, 140, 18, 239, 251, 21, 59, 42, 195, 53, 44, 62, 175, 246, 147, 6, 28, 219, 248, 186, 92, 251, 93, 200, 18, 127, 138, 160, 78, 124, 234, 228, 141, 153, 160, 70, 123, 58, 186, 196, 193, 53, 16, 164, 153, 161, 113, 106, 103, 41, 52, 19, 110, 116, 86, 58, 134, 149, 238, 181, 191, 77, 100, 30, 155, 21, 207, 116, 236, 63, 25, 66, 249, 214, 202, 128, 104, 0, 234, 42, 3, 124, 63, 10, 181, 56, 157, 47, 239, 117, 229, 173, 24, 95, 12, 0, 248, 78, 115, 42, 135, 157, 83, 131, 21, 75, 116, 254, 88, 124, 167, 123, 72, 213, 106, 236, 130, 174, 167, 147, 1, 176, 27, 248, 159, 241, 16, 214, 105, 228, 44, 25, 196, 170, 79, 243, 35, 17, 31, 3, 199, 177, 194, 87, 66, 135, 18, 119, 110, 83, 124, 236, 244, 55, 96, 182, 138, 144, 207, 78, 151, 105, 247, 184, 166, 34, 167, 152, 52, 140, 11, 157, 82, 72, 23, 221, 213, 33, 204, 193, 87, 61, 229, 207, 0, 1, 229, 158, 127, 143, 2, 199, 76, 13, 166, 249, 61, 120, 71, 24, 44, 129, 229, 231, 212, 91, 49, 204, 157, 232, 84, 190, 137, 248, 228, 164, 183, 114, 149, 45, 181, 19, 177, 4, 224, 13, 244, 92, 136, 157, 223, 137, 41, 239, 217, 16, 234, 84, 168, 72, 13, 64, 181, 199, 128, 58, 149, 149, 36, 57, 232, 120, 215, 6, 95, 158, 207, 178, 248, 224, 192, 89, 19, 170, 245, 34, 36, 164, 131, 46, 228, 160, 63, 22, 161, 181, 113, 234, 228, 52, 237, 3, 92, 174, 155, 142, 37, 54, 146, 242, 84, 199, 59, 200, 36, 21, 60, 205, 200, 61, 114, 186, 8, 234, 132, 77, 173, 124, 145, 4, 184, 119, 11, 132, 246, 4, 248, 178, 252, 167, 179, 60, 178, 222, 103, 143, 46, 159, 48, 210, 168, 207, 102, 72, 70, 29, 76, 62, 41, 225, 227, 82, 246, 137, 142, 87, 27, 240, 209, 119, 158, 184, 191, 64, 133, 240, 90, 235, 92, 89, 172, 234, 136, 207, 239, 222, 240, 139, 55, 111, 155, 234, 144, 219, 13, 60, 147, 7, 0, 245, 12, 128, 161, 129, 213, 104, 98, 203, 123, 55, 124, 3, 73, 67, 23, 33, 160, 29, 65, 108, 116, 81, 178, 234, 75, 10, 26, 124, 212, 198, 6, 204, 6, 207, 208, 128, 104, 53, 76, 222, 147, 18, 245, 165, 177, 131, 156, 249, 6, 85, 160, 80, 119, 103, 108, 12, 58, 118, 85, 126, 190, 190, 131, 240, 245, 158, 40, 148, 115, 103, 104, 77, 159, 154, 209, 149, 243, 151, 216, 157, 252, 104, 230, 18, 100, 103, 6, 217, 157, 204, 163, 200, 234, 97, 4, 130, 83, 0, 157, 159, 245, 247, 48, 108, 125, 149, 116, 190, 62, 89, 111, 3, 5, 173, 138, 54, 251, 119, 214, 66, 157, 77, 159, 125, 5, 104, 23, 103, 6, 39, 124, 232, 255, 71, 66, 84, 236, 162, 175, 46, 206, 102, 215, 36, 13, 218, 174, 38, 7, 59, 223, 73, 166, 174, 201, 136, 36, 164, 63, 17, 144, 1, 64, 127, 126, 215, 60, 185, 226, 255, 199, 64, 157, 114, 125, 71, 2, 249, 134, 216, 254, 191, 120, 38, 207, 119, 232, 68, 216, 3, 198, 205, 163, 212, 61, 213, 124, 1, 78, 39, 50, 214, 133, 50, 204, 229, 134, 254, 91, 226, 238, 66, 216, 37, 73, 121, 16, 144, 1, 64, 30, 180, 36, 172, 32, 208, 219, 8, 96, 70, 26, 162, 254, 219, 120, 221, 53, 95, 200, 93, 110, 92, 6, 192, 125, 83, 139, 182, 171, 227, 199, 103, 186, 6, 96, 73, 72, 105, 4, 112, 23, 131, 119, 15, 192, 240, 180, 210, 204, 132, 129, 32, 32, 8, 116, 45, 2, 219, 113, 41, 146, 121, 213, 223, 228, 159, 237, 218, 4, 247, 122, 194, 232, 70, 73, 165, 112, 241, 162, 144, 32, 208, 165, 8, 96, 116, 58, 0, 179, 16, 166, 103, 47, 148, 234, 82, 104, 37, 89, 130, 64, 87, 33, 128, 245, 255, 153, 35, 238, 73, 159, 38, 234, 59, 204, 225, 108, 87, 35, 119, 85, 46, 36, 49, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 80, 61, 2, 86, 81, 150, 182, 109, 79, 241, 226, 78, 198, 115, 220, 178, 172, 203, 69, 121, 245, 82, 60, 228, 123, 18, 210, 59, 11, 134, 242, 79, 230, 34, 204, 169, 78, 229, 223, 195, 125, 70, 72, 254, 25, 200, 167, 116, 8, 117, 16, 1, 124, 139, 153, 16, 55, 221, 19, 73, 248, 159, 187, 18, 190, 3, 242, 77, 121, 190, 218, 203, 55, 61, 58, 93, 7, 6, 60, 249, 163, 94, 26, 164, 252, 123, 64, 200, 163, 255, 17, 64, 253, 163, 126, 155, 250, 0, 170, 135, 165, 250, 32, 191, 19, 207, 132, 154, 215, 249, 252, 62, 106, 251, 131, 225, 8, 120, 215, 130, 223, 175, 161, 1, 124, 62, 252, 174, 14, 55, 228, 109, 0, 223, 143, 193, 156, 241, 249, 67, 246, 61, 190, 189, 202, 39, 100, 45, 3, 191, 223, 134, 249, 15, 48, 115, 163, 120, 219, 246, 229, 157, 74, 89, 159, 64, 26, 94, 143, 122, 95, 212, 15, 178, 23, 34, 238, 47, 192, 124, 4, 184, 223, 30, 199, 199, 182, 47, 180, 148, 154, 70, 242, 183, 199, 133, 169, 197, 31, 3, 65, 140, 252, 94, 69, 137, 60, 229, 241, 159, 163, 212, 217, 175, 91, 214, 192, 150, 42, 228, 141, 219, 246, 122, 20, 210, 135, 193, 203, 231, 159, 129, 237, 89, 164, 97, 224, 221, 150, 165, 236, 12, 129, 115, 5, 241, 190, 199, 127, 197, 183, 184, 59, 42, 162, 109, 159, 131, 247, 85, 143, 224, 103, 43, 190, 69, 187, 108, 70, 133, 77, 243, 59, 105, 219, 15, 35, 35, 235, 17, 46, 71, 222, 117, 174, 99, 215, 163, 76, 220, 92, 54, 29, 62, 71, 228, 125, 61, 122, 220, 175, 194, 29, 83, 7, 46, 190, 168, 212, 228, 143, 67, 222, 65, 63, 78, 101, 79, 52, 122, 248, 152, 15, 0, 247, 207, 69, 241, 180, 237, 177, 147, 74, 77, 189, 7, 178, 191, 18, 245, 94, 252, 4, 129, 158, 70, 0, 19, 79, 148, 127, 234, 7, 62, 5, 179, 38, 42, 47, 168, 159, 168, 127, 170, 174, 250, 103, 175, 130, 128, 12, 116, 248, 132, 109, 43, 154, 37, 87, 79, 212, 8, 216, 246, 38, 116, 10, 17, 116, 14, 126, 213, 202, 221, 110, 219, 3, 167, 35, 36, 37, 123, 157, 217, 129, 247, 254, 172, 176, 28, 6, 248, 232, 148, 171, 124, 116, 10, 248, 219, 52, 67, 234, 8, 237, 181, 237, 109, 102, 250, 90, 205, 170, 132, 183, 108, 251, 94, 147, 127, 154, 15, 125, 181, 106, 203, 2, 229, 231, 60, 58, 228, 52, 201, 193, 251, 55, 182, 148, 197, 96, 151, 109, 55, 3, 126, 69, 109, 67, 171, 202, 166, 3, 146, 7, 78, 217, 54, 149, 171, 140, 116, 238, 169, 178, 50, 245, 248, 16, 186, 48, 123, 61, 60, 130, 224, 109, 173, 140, 206, 70, 236, 130, 64, 79, 34, 128, 2, 157, 179, 13, 60, 79, 19, 166, 234, 8, 9, 152, 7, 147, 131, 246, 159, 168, 78, 186, 82, 16, 60, 9, 102, 115, 114, 2, 170, 111, 244, 155, 182, 221, 72, 150, 25, 247, 214, 73, 75, 46, 237, 74, 36, 94, 24, 240, 28, 143, 19, 145, 232, 79, 67, 164, 65, 82, 79, 215, 74, 103, 109, 123, 117, 116, 50, 118, 245, 221, 0, 32, 122, 160, 19, 157, 123, 215, 183, 181, 185, 44, 248, 229, 7, 0, 206, 160, 184, 220, 96, 20, 117, 47, 123, 231, 171, 227, 209, 124, 161, 108, 254, 41, 254, 40, 180, 111, 58, 215, 108, 246, 131, 8, 166, 10, 47, 111, 86, 145, 110, 225, 33, 8, 84, 130, 64, 161, 73, 32, 213, 146, 225, 123, 179, 200, 207, 52, 83, 223, 171, 212, 113, 206, 12, 138, 56, 165, 238, 132, 161, 181, 240, 89, 227, 74, 61, 78, 30, 1, 45, 159, 107, 219, 71, 182, 4, 238, 226, 54, 82, 1, 35, 246, 37, 152, 72, 213, 95, 113, 206, 233, 49, 23, 99, 111, 3, 15, 117, 158, 156, 91, 97, 110, 134, 153, 15, 67, 235, 160, 119, 152, 122, 94, 154, 128, 55, 191, 133, 159, 178, 100, 209, 66, 143, 75, 14, 230, 79, 195, 126, 7, 204, 74, 24, 95, 254, 251, 160, 150, 109, 193, 173, 17, 141, 61, 70, 255, 69, 243, 168, 197, 58, 162, 212, 247, 107, 97, 156, 204, 244, 89, 188, 38, 28, 18, 204, 12, 10, 3, 141, 89, 53, 4, 45, 196, 102, 232, 210, 67, 203, 47, 206, 247, 248, 36, 36, 44, 135, 161, 114, 64, 207, 59, 32, 20, 75, 65, 68, 22, 213, 141, 82, 244, 14, 165, 30, 2, 131, 132, 124, 178, 119, 143, 59, 165, 147, 73, 220, 247, 34, 150, 65, 46, 48, 175, 156, 142, 253, 74, 253, 117, 132, 58, 137, 234, 251, 44, 168, 219, 29, 130, 125, 185, 89, 6, 27, 183, 217, 246, 217, 213, 57, 197, 25, 193, 15, 43, 245, 3, 195, 83, 169, 187, 224, 55, 153, 132, 227, 57, 21, 134, 234, 164, 70, 75, 97, 223, 245, 55, 154, 135, 88, 5, 129, 94, 69, 192, 89, 84, 12, 18, 63, 138, 165, 46, 167, 239, 165, 246, 159, 202, 62, 181, 61, 161, 242, 15, 31, 53, 235, 209, 74, 38, 129, 195, 232, 128, 249, 168, 219, 81, 192, 207, 35, 17, 58, 97, 54, 24, 154, 161, 87, 48, 251, 128, 128, 4, 21, 240, 11, 60, 93, 117, 106, 0, 70, 154, 144, 149, 168, 74, 133, 138, 244, 41, 158, 30, 114, 141, 210, 222, 129, 82, 4, 38, 155, 96, 104, 31, 64, 34, 1, 109, 10, 23, 162, 242, 242, 227, 132, 30, 10, 212, 225, 17, 170, 225, 186, 52, 0, 199, 43, 235, 212, 227, 242, 101, 248, 99, 163, 159, 83, 226, 25, 178, 199, 183, 25, 225, 52, 15, 4, 93, 8, 211, 208, 188, 58, 98, 221, 111, 148, 193, 146, 29, 48, 52, 80, 230, 236, 63, 126, 102, 1, 229, 59, 45, 127, 105, 180, 127, 71, 153, 140, 131, 81, 67, 99, 230, 91, 35, 235, 33, 94, 174, 245, 3, 184, 207, 106, 218, 159, 50, 233, 151, 184, 130, 64, 105, 4, 218, 26, 0, 71, 23, 28, 89, 246, 73, 6, 202, 124, 84, 93, 105, 148, 150, 143, 70, 37, 84, 169, 91, 209, 170, 5, 52, 148, 188, 2, 146, 107, 207, 198, 178, 9, 104, 153, 235, 31, 180, 14, 59, 157, 248, 210, 106, 95, 64, 213, 15, 0, 192, 123, 58, 204, 218, 172, 121, 224, 233, 161, 148, 197, 55, 150, 89, 121, 230, 9, 215, 180, 237, 208, 160, 232, 88, 105, 252, 163, 228, 163, 243, 167, 14, 206, 35, 167, 123, 188, 151, 119, 146, 117, 13, 0, 170, 255, 198, 81, 249, 211, 253, 160, 250, 223, 226, 231, 212, 125, 30, 41, 213, 169, 233, 188, 43, 181, 163, 172, 82, 151, 23, 208, 145, 210, 131, 37, 254, 157, 137, 115, 43, 145, 231, 203, 134, 186, 190, 220, 94, 16, 115, 217, 101, 207, 23, 146, 48, 59, 96, 219, 95, 8, 242, 79, 182, 161, 13, 73, 225, 229, 157, 32, 208, 11, 8, 160, 32, 103, 234, 131, 180, 73, 153, 87, 13, 210, 251, 159, 228, 37, 0, 140, 62, 22, 176, 29, 135, 164, 236, 110, 252, 105, 20, 104, 131, 74]);
fileData8.push.apply(fileData8, [125, 211, 244, 183, 127, 215, 244, 203, 237, 227, 171, 82, 73, 221, 58, 21, 90, 191, 7, 96, 46, 96, 200, 51, 137, 244, 31, 117, 18, 201, 129, 121, 53, 171, 12, 236, 255, 190, 143, 135, 61, 235, 167, 157, 123, 215, 231, 122, 130, 179, 62, 179, 130, 187, 171, 113, 65, 249, 253, 86, 192, 105, 255, 35, 176, 63, 93, 126, 195, 67, 192, 177, 155, 108, 200, 215, 131, 65, 122, 72, 237, 191, 248, 167, 3, 119, 247, 216, 134, 113, 34, 230, 42, 150, 156, 243, 17, 106, 65, 22, 32, 213, 129, 19, 8, 211, 120, 160, 203, 164, 126, 140, 37, 0, 51, 200, 55, 255, 204, 199, 172, 164, 248, 102, 76, 160, 125, 29, 23, 54, 227, 247, 185, 155, 187, 160, 110, 251, 79, 220, 231, 236, 3, 220, 93, 222, 133, 150, 117, 10, 204, 0, 12, 77, 120, 124, 19, 177, 74, 82, 94, 86, 20, 135, 137, 150, 31, 149, 166, 56, 63, 164, 149, 246, 110, 109, 36, 156, 226, 194, 116, 171, 63, 210, 188, 14, 38, 83, 199, 91, 119, 30, 178, 246, 65, 88, 2, 252, 1, 79, 75, 201, 254, 199, 84, 255, 71, 171, 244, 198, 12, 245, 27, 160, 115, 200, 153, 177, 149, 234, 27, 192, 134, 42, 156, 201, 195, 216, 32, 215, 249, 217, 33, 7, 27, 232, 27, 59, 226, 203, 111, 4, 11, 203, 72, 114, 31, 115, 43, 155, 11, 189, 243, 91, 189, 124, 148, 137, 77, 129, 0, 7, 115, 235, 255, 48, 102, 126, 253, 161, 1, 64, 62, 209, 129, 233, 180, 55, 81, 245, 159, 244, 109, 234, 126, 215, 210, 147, 233, 218, 141, 101, 186, 188, 105, 104, 26, 249, 63, 152, 168, 1, 80, 70, 157, 116, 118, 228, 211, 58, 125, 33, 218, 195, 78, 30, 144, 10, 52, 101, 99, 95, 197, 242, 163, 18, 157, 176, 49, 179, 17, 21, 190, 106, 191, 137, 150, 159, 37, 63, 248, 80, 203, 96, 180, 37, 209, 242, 39, 81, 178, 200, 173, 50, 12, 234, 19, 138, 63, 145, 163, 219, 164, 229, 237, 174, 31, 196, 152, 218, 250, 228, 101, 107, 194, 43, 81, 3, 112, 86, 169, 208, 154, 195, 37, 115, 99, 13, 42, 29, 194, 189, 18, 13, 62, 13, 140, 237, 229, 209, 239, 178, 249, 98, 244, 115, 145, 76, 182, 208, 19, 27, 106, 118, 164, 22, 164, 115, 105, 130, 6, 226, 3, 33, 105, 216, 167, 87, 33, 161, 18, 96, 86, 168, 105, 25, 46, 220, 65, 103, 237, 127, 189, 66, 17, 201, 172, 46, 42, 200, 195, 181, 3, 157, 161, 189, 74, 125, 148, 75, 90, 82, 122, 86, 205, 249, 85, 227, 106, 162, 163, 230, 170, 158, 189, 45, 212, 25, 62, 25, 47, 32, 234, 160, 82, 199, 120, 197, 27, 111, 37, 177, 129, 22, 112, 6, 159, 10, 159, 65, 58, 10, 110, 198, 116, 181, 143, 115, 3, 121, 206, 28, 32, 117, 48, 193, 119, 237, 46, 66, 244, 67, 11, 2, 30, 229, 109, 72, 64, 193, 59, 25, 202, 203, 38, 14, 19, 45, 63, 46, 23, 232, 32, 105, 162, 182, 17, 147, 65, 42, 119, 7, 96, 232, 142, 22, 143, 22, 140, 249, 182, 94, 121, 98, 215, 185, 247, 157, 157, 114, 71, 27, 208, 71, 112, 215, 11, 45, 135, 175, 237, 198, 60, 12, 225, 94, 28, 116, 180, 107, 66, 105, 59, 20, 114, 27, 78, 115, 102, 173, 5, 153, 172, 212, 58, 205, 9, 235, 138, 111, 112, 183, 82, 123, 148, 250, 211, 96, 170, 65, 205, 197, 20, 82, 19, 106, 21, 183, 21, 142, 210, 183, 110, 76, 143, 238, 228, 153, 155, 253, 26, 119, 215, 231, 242, 10, 230, 221, 92, 194, 129, 191, 226, 238, 114, 46, 236, 8, 127, 57, 40, 48, 205, 147, 150, 117, 67, 135, 103, 196, 243, 48, 201, 180, 105, 29, 248, 71, 97, 110, 214, 114, 179, 29, 246, 207, 162, 211, 163, 103, 77, 68, 203, 95, 87, 255, 51, 49, 71, 26, 86, 227, 241, 25, 24, 167, 126, 92, 84, 23, 231, 78, 81, 83, 118, 186, 126, 214, 87, 11, 119, 122, 96, 80, 132, 240, 77, 40, 45, 26, 205, 250, 77, 205, 81, 216, 186, 14, 23, 25, 97, 38, 212, 194, 224, 162, 225, 50, 89, 209, 192, 133, 59, 107, 45, 107, 90, 228, 178, 24, 26, 205, 63, 11, 202, 7, 197, 152, 251, 144, 27, 175, 115, 191, 230, 178, 224, 181, 180, 12, 55, 212, 185, 20, 92, 89, 146, 80, 23, 26, 200, 241, 255, 9, 115, 59, 229, 220, 196, 159, 124, 135, 167, 209, 111, 30, 2, 223, 245, 8, 31, 234, 127, 242, 112, 104, 135, 197, 188, 76, 253, 1, 218, 134, 209, 182, 79, 6, 11, 2, 243, 49, 181, 19, 199, 162, 14, 246, 21, 104, 5, 240, 152, 178, 21, 63, 143, 128, 47, 53, 12, 19, 74, 192, 138, 6, 37, 207, 240, 68, 236, 219, 106, 89, 43, 202, 165, 205, 84, 41, 52, 27, 186, 16, 243, 140, 238, 249, 13, 184, 44, 101, 3, 18, 164, 209, 96, 21, 31, 81, 23, 235, 218, 13, 117, 223, 196, 46, 1, 152, 27, 166, 28, 8, 130, 177, 145, 153, 131, 66, 62, 224, 106, 145, 161, 200, 158, 61, 164, 110, 115, 228, 226, 103, 255, 83, 133, 4, 196, 68, 50, 151, 131, 130, 19, 6, 102, 57, 168, 107, 9, 192, 207, 91, 220, 211, 217, 6, 71, 157, 115, 37, 196, 203, 191, 179, 11, 119, 230, 96, 91, 53, 24, 151, 6, 71, 101, 216, 185, 89, 2, 102, 94, 124, 243, 95, 249, 101, 55, 29, 60, 228, 18, 157, 190, 65, 27, 66, 97, 166, 96, 230, 23, 218, 128, 87, 78, 253, 79, 252, 49, 248, 104, 6, 146, 139, 44, 1, 56, 177, 27, 122, 90, 203, 218, 119, 27, 155, 162, 219, 41, 172, 84, 78, 92, 58, 39, 90, 62, 165, 11, 57, 158, 14, 179, 137, 151, 187, 54, 14, 186, 133, 54, 37, 23, 170, 11, 9, 75, 29, 58, 255, 172, 246, 220, 223, 6, 140, 157, 60, 146, 70, 35, 89, 200, 196, 106, 5, 144, 182, 208, 233, 23, 74, 109, 246, 205, 183, 137, 75, 0, 166, 222, 134, 227, 120, 140, 109, 58, 160, 25, 225, 85, 219, 160, 17, 8, 109, 220, 25, 187, 149, 10, 77, 191, 19, 212, 239, 111, 241, 60, 30, 124, 28, 163, 67, 82, 135, 85, 70, 180, 203, 26, 204, 46, 147, 161, 207, 236, 217, 15, 224, 9, 117, 27, 105, 95, 148, 183, 73, 235, 244, 211, 150, 117, 221, 199, 201, 163, 18, 130, 58, 22, 67, 248, 231, 2, 94, 187, 193, 127, 38, 52, 196, 221, 70, 206, 54, 184, 239, 99, 132, 190, 165, 138, 148, 241, 242, 63, 64, 8, 143, 44, 105, 207, 134, 227, 36, 56, 115, 96, 204, 18, 70, 162, 79, 203, 196, 69, 43, 232, 143, 250, 246, 63, 241, 205, 127, 167, 240, 109, 220, 194, 80, 144, 37, 139, 134, 50, 220, 130, 199, 251, 92, 207, 118, 25, 123, 198, 91, 27, 165, 6, 126, 7, 222, 141, 99, 230, 119, 55, 158, 94, 249, 163, 98, 127, 9, 247, 4, 20, 84, 255, 187, 194, 20, 52, 144, 167, 60, 43, 30, 52, 150, 110, 70, 204, 202, 130, 16, 77, 204, 218, 204, 17, 119, 43, 8, 32, 182, 82, 8, 224, 91, 175, 186, 136, 147, 70, 96, 66, 87, 78, 60, 193, 203, 157, 207, 154, 94, 57, 247, 52, 92, 133, 178, 243, 126, 152, 72, 109, 145, 31, 58, 238, 137, 99, 94, 218, 183, 143, 11, 85, 159, 63, 210, 77, 27, 192, 159, 156, 102, 89, 84, 164, 104, 45, 233, 145, 104, 105, 190, 86, 128, 90, 100, 231, 196, 208, 64, 116, 184, 234, 125, 49, 213, 160, 201, 117, 104, 249, 253, 8, 234, 96, 227, 134, 74, 164, 241, 209, 166, 51, 179, 105, 215, 47, 140, 206, 195, 215, 19, 58, 239, 76, 255, 234, 55, 162, 57, 153, 235, 34, 13, 0, 102, 199, 33, 44, 170, 157, 133, 249, 31, 211, 156, 105, 59, 133, 14, 63, 206, 183, 241, 29, 84, 40, 42, 37, 204, 132, 181, 13, 61, 102, 222, 204, 116, 213, 165, 1, 112, 230, 28, 116, 245, 240, 22, 24, 194, 60, 226, 26, 98, 31, 134, 242, 71, 32, 181, 242, 31, 53, 11, 32, 217, 235, 96, 104, 4, 78, 233, 137, 32, 174, 49, 171, 244, 163, 120, 204, 248, 70, 57, 39, 9, 141, 58, 228, 64, 243, 49, 83, 155, 241, 69, 225, 225, 229, 127, 144, 58, 136, 74, 8, 179, 64, 173, 220, 17, 251, 183, 183, 37, 49, 110, 26, 199, 96, 41, 78, 181, 26, 200, 248, 153, 105, 103, 54, 186, 117, 90, 62, 0, 164, 153, 240, 189, 218, 183, 39, 80, 163, 136, 52, 64, 52, 65, 169, 132, 78, 186, 247, 140, 80, 57, 107, 150, 49, 227, 182, 147, 242, 212, 123, 84, 50, 37, 218, 213, 190, 174, 197, 236, 43, 116, 52, 30, 41, 100, 116, 161, 9, 39, 218, 6, 229, 104, 106, 51, 241, 206, 25, 40, 90, 227, 124, 20, 99, 224, 10, 73, 107, 0, 145, 31, 77, 5, 135, 198, 128, 117, 57, 246, 222, 45, 190, 216, 43, 109, 0, 112, 54, 242, 58, 220, 241, 202, 59, 97, 194, 23, 165, 170, 129, 15, 145, 66, 78, 129, 47, 164, 118, 243, 191, 161, 254, 196, 230, 146, 85, 92, 160, 217, 177, 214, 57, 0, 160, 205, 45, 144, 79, 141, 75, 244, 200, 218, 61, 106, 20, 209, 1, 59, 3, 149, 68, 13, 151, 158, 207, 40, 59, 47, 255, 12, 5, 3, 95, 74, 159, 179, 72, 192, 130, 237, 166, 217, 113, 109, 244, 178, 113, 250, 34, 249, 156, 126, 209, 132, 32, 75, 211, 47, 70, 118, 174, 44, 179, 186, 99, 75, 81, 89, 122, 188, 232, 70, 238, 252, 6, 61, 140, 111, 199, 14, 173, 208, 32, 220, 79, 78, 208, 54, 249, 97, 203, 60, 193, 149, 202, 227, 195, 48, 84, 230, 124, 131, 242, 89, 255, 213, 219, 148, 238, 78, 201, 135, 28, 170, 247, 164, 225, 73, 32, 71, 253, 93, 107, 71, 87, 230, 91, 213, 25, 23, 160, 56, 75, 4, 212, 202, 164, 16, 181, 93, 124, 107, 76, 5, 9, 51, 7, 254, 131, 213, 118, 254, 148, 70, 222, 0, 82, 151, 191, 221, 105, 132, 185, 63, 111, 116, 90, 70, 69, 236, 95, 13, 0, 0, 209, 46, 196, 241, 139, 193, 153, 45, 21, 124, 223, 104, 22, 222, 8, 20, 146, 86, 123, 134, 102, 159, 212, 24, 69, 208, 185, 77, 209, 76, 242, 249, 210, 173, 234, 1, 237, 137, 92, 210, 168, 115, 0, 144, 53, 181, 209, 71, 81, 99, 46, 173, 202, 200, 148, 151, 115, 31, 133, 248, 203, 101, 158, 141, 254, 207, 140, 182, 214, 44, 163, 216, 204, 193, 204, 139, 111, 170, 175, 107, 200, 245, 188, 152, 217, 31, 149, 187, 77, 158, 137, 232, 40, 170, 105, 144, 162, 103, 188, 151, 72, 51, 64, 255, 79, 50, 0, 179, 12, 233, 243, 229, 183, 53, 19, 193, 4, 101, 152, 54, 147, 9, 229, 68, 224, 205, 216, 181, 239, 49, 194, 152, 6, 91, 93, 127, 44, 46, 103, 150, 11, 7, 167, 50, 8, 67, 29, 125, 12, 85, 171, 29, 50, 219, 91, 109, 114, 94, 56, 23, 17, 17, 205, 6, 240, 229, 101, 223, 53, 55, 29, 52, 244, 168, 87, 202, 0, 96, 144, 171, 68, 189, 15, 127, 56, 81, 69, 169, 227, 84, 169, 29, 3, 3, 115, 19, 22, 37, 169, 156, 10, 26, 219, 184, 182, 240, 18, 29, 108, 252, 211, 211, 111, 22, 200, 234, 150, 0, 116, 57, 105, 118, 190, 84, 65, 41, 47, 151, 14, 179, 252, 167, 156, 131, 71, 2, 249, 198, 65, 74, 67, 185, 111, 16, 155, 103, 104, 62, 248, 236, 35, 24, 160, 199, 198, 41, 240, 130, 182, 242, 113, 58, 77, 157, 173, 49, 163, 129, 95, 131, 167, 135, 98, 237, 42, 189, 17, 117, 59, 58, 249, 160, 51, 39, 158, 121, 41, 186, 204, 22, 128, 226, 138, 138, 18, 42, 251, 222, 192, 234, 48, 150, 189, 234, 83, 107, 247, 58, 192, 40, 153, 243, 204, 58, 224, 148, 215, 70, 149, 121, 195, 146, 243, 122, 94, 11, 138, 107, 156, 19, 85, 164, 216, 248, 21, 162, 91, 151, 44, 103, 155, 14, 156, 141, 110, 173, 80, 160, 144, 115, 96, 111, 200, 163, 247, 157, 104, 0, 177, 1, 102, 132, 111, 130, 57, 186, 211, 178, 174, 141, 84, 79, 214, 158, 97, 203, 178, 177, 89, 229, 30, 236, 202, 123, 156, 203, 186, 252, 117, 238, 206, 238, 66, 1, 91, 136, 157, 47, 15, 6, 49, 14, 227, 200, 75, 244, 198, 191, 255, 166, 20, 223, 47, 167, 172, 83, 65, 188, 206, 217, 208, 43, 253, 22, 151, 102, 244, 83, 252, 117, 110, 215, 197, 173, 105, 81, 112, 20, 46, 244, 13, 6, 254, 109, 90, 156, 34, 239, 135, 149, 250, 31, 248, 154, 200, 97, 148, 191, 117, 229, 142, 253, 132, 18, 66, 13, 13, 237, 126, 10, 232, 0, 54, 250, 94, 77, 27, 187, 46, 6, 126, 174, 13, 126, 45, 92, 58, 193, 131, 171, 101, 31, 67, 135, 225, 92, 219, 29, 14, 159, 213, 77, 71, 17, 113, 134, 111, 214, 241, 246, 6, 195, 164, 152, 103, 9, 123, 111, 195, 162, 31, 110, 6, 246, 39, 10, 229, 69, 0, 31, 120, 133, 22, 103, 46, 236, 216, 92, 182, 24, 71, 253, 108, 44, 129, 59, 123, 51, 42, 91, 239, 215, 228, 244, 158, 213, 213, 202, 174, 163, 125, 1, 72, 252, 113, 94, 39, 253, 236, 228, 63, 6, 233, 199, 140, 121, 174, 226, 254, 227, 133, 213, 255, 137, 45, 36, 223, 133, 235, 136, 124, 101, 105, 91, 50, 105, 131, 151, 255, 122, 219, 25, 88, 232, 220, 173, 70, 51, 190, 163, 57, 122, 223, 138, 15, 142, 142, 118, 156, 235, 117, 169, 97, 188, 238, 150, 137, 206, 28, 6, 103, 247, 225, 52, 194, 221, 193, 192, 100, 225, 26, 52, 192, 147, 176, 27, 251, 114, 222, 180, 97, 212, 182, 73, 111, 1, 112, 43, 236, 127, 64, 197, 39, 54, 70, 25, 135, 239, 123, 57, 255, 27, 32, 215, 57, 175, 239, 135, 191, 11, 29, 196, 5, 30, 166, 122, 23, 118, 232, 15, 163, 163, 112, 246, 139, 187, 220, 221, 171, 104, 139, 228, 159, 226, 155, 3, 96, 59, 245, 98, 37, 28, 58, 30, 117, 101, 251, 191, 103, 171, 217, 128, 228, 179, 243, 158, 103, 149, 250, 226, 53, 204, 239, 218, 223, 96, 206, 10, 28, 40, 75, 15, 115, 54, 147, 19, 7, 184, 75, 44, 107, 8, 26, 144, 167, 81, 14, 113, 42, 133, 136, 74, 226, 208, 135, 148, 90, 88, 74, 51, 182, 212, 61, 195, 77, 42, 255, 13, 227, 74, 253, 37, 122, 116, 234, 144, 52, 178, 119, 226, 138, 156, 79, 88, 214, 192, 235, 255, 10, 245, 244, 187, 180, 55, 98, 45, 134, 0, 122, 152, 235, 17, 243, 126, 12, 4, 30, 244, 58, 9, 29, 115, 250, 190, 24, 220, 161, 132, 168, 171, 238, 195, 207, 147, 168, 223, 161, 114, 15, 223, 18, 132, 111, 77, 237, 12, 47, 226, 197, 248, 161, 26, 91, 187, 138, 182, 1, 113, 34, 145, 62, 26, 0, 253, 1, 204, 221, 20, 38, 122, 183, 223, 248, 73, 220, 140, 112, 15, 202, 255, 219, 20, 166, 42, 66, 221, 15, 1, 83, 211, 32, 215, 84, 231, 35, 219, 109, 26, 51, 54, 66, 81, 6, 35, 214, 236, 26, 228, 95, 57, 161, 35, 230, 155, 174, 72, 249, 146, 124, 179, 97, 21, 105, 64, 3, 231, 169, 195, 124, 32, 156, 255, 30, 79, 212, 164, 84, 33, 55, 43, 15, 174, 130, 46, 142, 73, 242, 183, 247, 243, 158, 245, 89, 237, 26, 88, 44, 22, 21, 151, 9, 204, 128, 67, 27, 203, 210, 215, 216, 205, 77, 161, 233, 113, 98, 243, 19, 243, 2, 168, 83, 103, 168, 145, 179, 6, 88, 121, 25, 12, 169, 129, 73, 30, 31, 247, 70, 164, 207, 44, 55, 181, 228, 159, 238, 152, 167, 155, 231, 232, 201, 218, 222, 195, 236, 100, 136, 83, 254, 19, 39, 57, 17, 89, 16, 175, 16, 2, 192, 56, 195, 206, 119, 103, 103, 60, 54, 4, 218, 149, 148, 195, 215, 141, 118, 22, 156, 11, 83, 53, 237, 15, 196, 207, 132, 201, 122, 34, 162, 150, 129, 63, 125, 26, 179, 142, 217, 141, 208, 39, 203, 236, 76, 252, 88, 152, 217, 197, 140, 234, 90, 248, 159, 241, 136, 219, 192, 80, 25, 241, 39, 197, 225, 196, 76, 136, 58, 56, 51, 2, 57, 2, 98, 61, 116, 7, 102, 55, 218, 72, 152, 180, 32, 203, 240, 7, 69, 249, 103, 216, 57, 196, 230, 10, 202, 117, 241, 52, 136, 110, 210, 72, 190, 8, 133, 52, 57, 69, 88, 116, 60, 142, 197, 91, 123, 71, 35, 238, 168, 45, 138, 164, 132, 70, 218, 33, 74, 213, 0, 12, 27, 42, 232, 16, 135, 10, 156, 135, 149, 250, 61, 206, 102, 20, 119, 78, 212, 93, 6, 169, 172, 167, 47, 237, 0, 179, 117, 60, 109, 213, 187, 48, 219, 188, 12, 67, 87, 132, 211, 51, 248, 190, 232, 124, 230, 120, 55, 210, 185, 82, 105, 134, 170, 176, 42, 35, 84, 6, 1, 96, 252, 42, 212, 136, 183, 128, 7, 181, 9, 159, 132, 86, 32, 138, 214, 192, 243, 37, 152, 75, 232, 36, 105, 147, 102, 35, 42, 80, 86, 63, 236, 48, 132, 18, 178, 42, 42, 126, 21, 49, 242, 65, 131, 204, 245, 158, 138, 159, 234, 255, 163, 129, 134, 85, 79, 223, 40, 102, 251, 234, 14, 152, 201, 192, 235, 30, 152, 33, 253, 109, 149, 118, 180, 234, 104, 102, 28, 130, 76, 231, 107, 164, 182, 75, 133, 228, 211, 70, 55, 115, 3, 142, 51, 170, 142, 92, 215, 51, 55, 131, 69, 239, 26, 47, 148, 152, 112, 164, 138, 103, 123, 97, 246, 97, 55, 176, 240, 119, 26, 163, 60, 16, 17, 14, 157, 57, 250, 19, 78, 75, 146, 155, 111, 218, 42, 174, 1, 64, 230, 86, 193, 208, 89, 119, 218, 221, 154, 102, 162, 206, 197, 82, 35, 64, 241, 136, 71, 100, 121, 73, 202, 71, 145, 119, 251, 140, 13, 170, 209, 127, 94, 149, 149, 183, 121, 12, 45, 253, 207, 128, 246, 26, 27, 39, 163, 53, 101, 89, 211, 96, 132, 51, 202, 61, 208, 181, 235, 217, 232, 102, 106, 0, 210, 229, 52, 217, 159, 69, 81, 218, 170, 215, 0, 24, 152, 120, 30, 222, 145, 81, 18, 234, 209, 222, 45, 113, 97, 139, 250, 163, 126, 81, 185, 142, 162, 218, 102, 124, 122, 90, 209, 30, 99, 3, 152, 211, 42, 147, 38, 210, 49, 110, 27, 109, 30, 207, 213, 227, 85, 109, 135, 108, 58, 137, 20, 106, 19, 195, 176, 56, 231, 71, 240, 71, 58, 249, 53, 179, 102, 217, 11, 243, 206, 229, 110, 228, 205, 63, 184, 47, 131, 137, 251, 214, 186, 112, 106, 227, 58, 242, 237, 243, 230, 161, 146, 240, 166, 202, 59, 190, 82, 33, 108, 8, 176, 35, 155, 43, 73, 68, 20, 19, 163, 33, 44, 222, 217, 69, 177, 215, 253, 204, 74, 239, 20, 236, 84, 117, 168, 206, 163, 19, 246, 65, 247, 98, 26, 173, 112, 214, 135, 137, 158, 159, 191, 48, 142, 67, 214, 123, 254, 93, 151, 173, 219, 205, 178, 218, 124, 65, 127, 95, 196, 206, 143, 65, 82, 83, 155, 188, 169, 141, 135, 119, 62, 69, 163, 136, 220, 184, 56, 230, 55, 222, 21, 204, 128, 227, 34, 21, 244, 231, 203, 73, 148, 151, 244, 206, 28, 234, 201, 166, 147, 235, 246, 79, 135, 58, 38, 44, 9, 80, 105, 231, 116, 168, 242, 134, 217, 196, 164, 45, 177, 81, 16, 230, 92, 209, 34, 212, 191, 94, 2, 210, 191, 77, 46, 65, 25, 3, 67, 56, 169, 197, 55, 187, 131, 144, 54, 22, 33, 75, 126, 21, 60, 24, 88, 48, 116, 214, 190, 180, 201, 152, 21, 22, 236, 205, 196, 37, 8, 231, 162, 31, 12, 196, 98, 150, 254, 25, 167, 30, 119, 152, 5, 142, 230, 152, 230, 136, 174, 25, 125, 73, 77, 173, 157, 36, 223, 3, 112, 188, 150, 134, 240, 128, 59, 139, 69, 158, 125, 162, 102, 198, 189, 15, 161, 238, 79, 123, 204, 149, 189, 49, 75, 65, 67, 162, 232, 60, 116, 136, 178, 223, 9, 93, 38, 47, 166, 230, 167, 220, 241, 59, 63, 45, 200, 12, 173, 193, 103, 82, 41, 159, 50, 6, 159, 4, 69, 254, 134, 199, 151, 237, 63, 247, 24, 247, 44, 12, 198, 14, 42, 176, 103, 96, 19, 73, 13, 200, 169, 43, 150, 207, 171, 138, 167, 217, 1, 13, 111, 170, 130, 111, 20, 15, 164, 126, 75, 144, 23, 178, 81, 9, 139, 47, 251, 232, 4, 208, 40, 134, 41, 93, 107, 16, 37, 91, 247, 3, 199, 228, 118, 4, 157, 63, 234, 74, 104, 111, 78, 61, 101, 63, 97, 102, 218, 208, 211, 92, 151, 221, 108, 143, 125, 188, 39, 102, 0, 160, 231, 19, 41, 89, 5, 19, 165, 21, 232, 8, 54, 122, 90, 202, 218, 99, 190, 243, 195, 169, 101, 177, 172, 224, 12, 241, 205, 50, 208, 108, 100, 136, 86, 48, 8, 42, 151, 217, 177, 28, 163, 202, 214, 174, 148, 176, 175, 54, 71, 128, 213, 205, 2, 193, 159, 46, 220, 161, 198, 21, 157, 97, 219, 64, 181, 100, 16, 249, 233, 97, 40, 78, 59, 157, 121, 17, 64, 227, 79, 188, 60, 242, 115, 8, 248, 221, 219, 192, 136, 119, 154, 89, 159, 87, 166, 30, 62, 212, 216, 147, 118, 133, 46, 254, 161, 17, 183, 179, 119, 3, 79, 26, 37, 19, 54, 244, 46, 138, 176, 153, 183, 126, 170, 107, 0, 16, 108, 40, 117, 74, 224, 22, 100, 176, 1, 67, 51, 2, 167, 83, 197, 115, 10, 204, 122, 115, 230, 7, 95, 187, 154, 242, 183, 221, 189, 108, 134, 24, 106, 116, 156, 150, 60, 130, 101, 13, 247, 59, 80, 250, 66, 52, 92, 233, 255, 1, 152, 105, 161, 50, 153, 172, 145, 40, 243, 245, 73, 158, 95, 234, 131, 140, 57, 62, 108, 80, 134, 119, 180, 78, 26, 145, 255, 10, 150, 0, 193, 219, 109, 127, 156, 91, 231, 214, 67, 14, 149, 127, 42, 247, 100, 200, 190, 201, 76, 35, 124, 75, 174, 65, 199, 225, 22, 211, 49, 212, 38, 47, 156, 142, 150, 177, 49, 213, 201, 43, 126, 38, 126, 0, 224, 167, 21, 137, 161, 58, 170, 109, 150, 43, 63, 16, 247, 121, 119, 234, 25, 104, 0, 234, 191, 214, 55, 111, 158, 34, 202, 64, 35, 47, 143, 92, 225, 233, 60, 176, 95, 204, 178, 61, 169, 202, 86, 215, 48, 33, 195, 81, 157, 125, 182, 164, 104, 215, 20, 231, 202, 52, 2, 71, 0, 157, 81, 166, 31, 236, 77, 218, 57, 85, 152, 18, 26, 27, 95, 64, 194, 179, 218, 127, 3, 76, 202, 68, 93, 3, 128, 226, 249, 119, 186, 140, 160, 131, 78, 74, 124, 134, 119, 230, 105, 128, 54, 236, 52, 16, 136, 154, 241, 192, 187, 250, 217, 255, 94, 163, 147, 45, 191, 196, 145, 150, 125, 228, 34, 166, 238, 57, 221, 46, 229, 61, 106, 255, 135, 15, 80, 121, 21, 60, 58, 122, 174, 233, 243, 89, 39, 61, 235, 211, 138, 36, 148, 201, 70, 26, 150, 85, 188, 143, 111, 147, 186, 103, 0, 160, 231, 19, 95, 137, 180, 2, 124, 111, 174, 30, 160, 75, 237, 72, 243, 50, 152, 194, 147, 199, 58, 179, 21, 81, 6, 26, 69, 229, 37, 158, 2, 240, 153, 46, 176, 172, 231, 71, 176, 251, 211, 119, 167, 63, 175, 90, 137, 93, 201, 85, 158, 251, 134, 248, 162, 148, 126, 118, 187, 40, 231, 244, 120, 147, 105, 103, 104, 97, 194, 254, 206, 21, 197, 34, 95, 220, 90, 233, 191, 1, 22, 75, 68, 233, 88, 184, 135, 98, 78, 126, 38, 167, 90, 56, 155, 76, 255, 68, 86, 89, 249, 67, 249, 127, 12, 247, 11, 132, 46, 248, 113, 82, 182, 6, 191, 183, 153, 105, 60, 142, 239, 190, 8, 105, 40, 247, 111, 120, 140, 47, 58, 66, 236, 62, 126, 144, 249, 169, 101, 247, 115, 119, 245, 174, 197, 150, 245, 16, 202, 225, 86, 147, 179, 211, 166, 83, 222, 9, 131, 16, 33, 134, 82, 55, 87, 180, 19, 58, 116, 178, 35, 36, 202, 112, 158, 191, 203, 178, 22, 60, 105, 120, 87, 228, 129, 67, 229, 19, 74, 24, 213, 222, 16, 157, 128, 105, 255, 16, 237, 63, 177, 190, 40, 3, 111, 193, 56, 5, 98, 98, 83, 146, 79, 58, 210, 124, 16, 230, 68, 190, 88, 125, 30, 26, 35, 162, 181, 201, 255, 143, 124, 145, 102, 4, 116, 246, 172, 82, 194, 250, 158, 166, 138, 135, 132, 92, 84, 124, 19, 82, 211, 88, 211, 205, 37, 24, 129, 227, 215, 139, 179, 0, 4, 6, 164, 222, 167, 25, 88, 19, 38, 11, 209, 82, 64, 229, 248, 167, 165, 245, 144, 177, 9, 48, 125, 183, 124, 26, 79, 122, 143, 188, 208, 146, 71, 204, 12, 59, 12, 135, 115, 71, 249, 186, 44, 124, 139, 134, 129, 196, 117, 201, 229, 223, 73, 83, 165, 106, 127, 63, 173, 38, 198, 213, 107, 24, 124, 89, 81, 79, 228, 108, 222, 197, 108, 223, 98, 75, 212, 30, 161, 40, 158, 89, 253, 32, 155, 214, 94, 211, 136, 78, 155, 148, 215, 56, 164, 36, 10, 90, 24, 146, 19, 65, 229, 247, 58, 164, 136, 118, 94, 99, 89, 48, 180, 215, 129, 146, 82, 193, 82, 75, 22, 225, 18, 166, 43, 16, 128, 70, 114, 19, 47, 128, 197, 203, 94, 161, 13, 74, 16, 78, 157, 204, 141, 48, 115, 61, 68, 142, 224, 249, 70, 47, 142, 244, 188, 244, 119, 253, 3, 152, 147, 182, 134, 102, 196, 212, 200, 45, 130, 161, 227, 168, 51, 96, 232, 176, 243, 46, 152, 125, 192, 255, 50, 158, 125, 71, 200, 59, 149, 211, 217, 48, 116, 51, 216, 2, 24, 42, 119, 148, 119, 50, 131, 48, 184, 6, 215, 114, 14, 253, 195, 94, 59, 33, 61, 244, 71, 40, 239, 128, 89, 12, 67, 105, 32, 122, 19, 231, 228, 223, 174, 116, 214, 239, 242, 237, 170, 95, 228, 157, 166, 254, 239, 130, 105, 104, 9, 163, 50, 248, 6, 242, 63, 88, 103, 254, 33, 155, 218, 29, 146, 235, 227, 78, 51, 180, 38, 204, 161, 126, 45, 251, 200, 91, 64, 40, 119, 184, 9, 113, 196, 212, 167, 143, 64, 219, 50, 251, 245, 32, 160, 216, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 160, 111, 16, 136, 222, 139, 85, 207, 105, 135, 190, 1, 77, 50, 146, 136, 64, 166, 61, 0, 137, 28, 228, 165, 32, 32, 8, 8, 2, 130, 64, 237, 8, 64, 205, 242, 171, 166, 144, 89, 255, 163, 233, 39, 62, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 208, 55, 8, 152, 151, 76, 85, 115, 223, 70, 223, 0, 36, 25, 201, 141, 128, 104, 0, 114, 67, 38, 17, 4, 1, 65, 64, 16, 232, 48, 2, 216, 123, 97, 238, 238, 157, 252, 179, 29, 78, 133, 136, 19, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 192, 18, 8, 122, 23, 1, 219, 182, 233, 251, 205, 134, 153, 226, 229, 226, 34, 158, 35, 150, 101, 93, 246, 220, 242, 232, 99, 4, 240, 253, 167, 35, 123, 51, 181, 44, 158, 193, 183, 167, 50, 32, 36, 8, 8, 2, 125, 138, 64, 68, 187, 127, 1, 245, 126, 180, 72, 118, 123, 114, 0, 48, 98, 219, 247, 162, 213, 187, 27, 25, 62, 229, 101, 250, 122, 60, 215, 1, 132, 131, 69, 64, 136, 139, 3, 160, 231, 225, 221, 247, 96, 246, 197, 133, 129, 255, 28, 24, 74, 199, 183, 97, 158, 66, 26, 222, 194, 179, 86, 66, 186, 214, 217, 74, 125, 30, 31, 111, 77, 140, 160, 22, 252, 31, 130, 249, 115, 164, 231, 66, 76, 152, 84, 239, 147, 182, 253, 48, 50, 183, 30, 1, 125, 156, 245, 56, 167, 225, 120, 19, 230, 239, 97, 190, 11, 57, 103, 244, 151, 85, 217, 199, 109, 123, 11, 70, 55, 31, 6, 191, 168, 52, 164, 137, 161, 114, 241, 227, 72, 219, 137, 180, 128, 177, 239, 49, 200, 66, 198, 94, 195, 40, 171, 136, 124, 192, 119, 234, 121, 203, 154, 251, 64, 44, 255, 156, 47, 240, 237, 23, 34, 202, 127, 69, 47, 127, 183, 63, 234, 11, 177, 56, 9, 247, 103, 96, 254, 164, 204, 183, 39, 158, 161, 239, 79, 88, 222, 156, 246, 157, 241, 189, 214, 33, 93, 127, 133, 176, 84, 103, 144, 255, 139, 15, 88, 214, 212, 231, 97, 47, 68, 103, 240, 253, 129, 125, 145, 239, 95, 254, 219, 135, 82, 60, 100, 219, 27, 22, 40, 245, 41, 120, 167, 148, 133, 179, 200, 247, 192, 187, 45, 75, 161, 154, 22, 167, 34, 248, 147, 52, 148, 17, 170, 179, 15, 195, 56, 233, 28, 199, 119, 155, 170, 20, 210, 99, 181, 224, 151, 139, 198, 108, 123, 45, 226, 126, 21, 145, 42, 249, 158, 89, 132, 35, 253, 107, 17, 238, 65, 152, 65, 47, 252, 0, 158, 219, 145, 254, 199, 60, 119, 228, 227, 60, 218, 43, 140, 136, 151, 226, 165, 223, 22, 145, 253, 119, 17, 239, 245, 200, 8, 49, 158, 151, 108, 123, 243, 36, 224, 165, 241, 129, 252, 11, 79, 91, 214, 85, 219, 98, 162, 180, 189, 145, 246, 123, 225, 88, 231, 197, 45, 36, 191, 205, 44, 100, 1, 239, 6, 188, 190, 4, 115, 91, 232, 21, 156, 52, 238, 159, 242, 8, 126, 126, 15, 249, 45, 220, 230, 155, 124, 83, 124, 144, 40, 203, 51, 192, 172, 51, 116, 16, 2, 77, 58, 68, 5, 190, 82, 106, 2, 112, 83, 78, 154, 207, 57, 10, 64, 21, 176, 114, 2, 223, 121, 199, 211, 196, 179, 247, 167, 225, 82, 133, 191, 203, 126, 219, 222, 193, 216, 37, 58, 198, 78, 224, 117, 229, 249, 222, 101, 219, 205, 68, 177, 233, 47, 27, 165, 62, 132, 109, 79, 34, 20, 139, 211, 174, 102, 41, 249, 90, 228, 83, 182, 253, 84, 206, 116, 108, 210, 162, 231, 182, 70, 124, 255, 70, 26, 147, 97, 52, 128, 60, 141, 173, 205, 105, 113, 146, 222, 151, 252, 254, 169, 233, 77, 146, 29, 126, 215, 50, 242, 198, 115, 26, 184, 202, 213, 59, 95, 110, 17, 252, 105, 0, 22, 164, 195, 183, 29, 79, 237, 184, 124, 153, 225, 39, 242, 188, 217, 231, 226, 62, 203, 125, 207, 48, 255, 40, 183, 41, 147, 36, 83, 203, 167, 226, 39, 172, 182, 61, 19, 121, 143, 160, 252, 233, 141, 46, 115, 41, 242, 189, 140, 152, 113, 223, 216, 18, 149, 199, 188, 126, 52, 17, 138, 200, 92, 156, 215, 234, 172, 252, 115, 119, 14, 144, 56, 9, 102, 3, 204, 11, 4, 56, 4, 93, 246, 12, 6, 78, 14, 189, 128, 223, 70, 214, 4, 228, 13, 119, 8, 51, 32, 26, 86, 153, 116, 225, 126, 211, 175, 156, 207, 98, 165, 48, 120, 206, 75, 87, 81, 132, 231, 108, 251, 112, 225, 74, 23, 37, 113, 212, 182, 151, 193, 255, 248, 188, 168, 151, 53, 249, 141, 229, 226, 59, 117, 46, 130, 35, 223, 71, 48, 104, 72, 168, 168, 185, 120, 42, 98, 148, 50, 219, 202, 201, 48, 127, 112, 155, 198, 214, 197, 9, 243, 225, 10, 104, 16, 3, 161, 171, 149, 250, 88, 62, 86, 123, 105, 22, 85, 152, 242, 125, 127, 87, 204, 217, 194, 210, 36, 98, 24, 129, 188, 248, 163, 221, 93, 141, 210, 246, 18, 231, 51, 252, 162, 101, 205, 223, 192, 253, 114, 185, 70, 114, 133, 174, 38, 112, 132, 76, 106, 249, 246, 253, 68, 28, 123, 140, 178, 55, 86, 83, 211, 226, 218, 28, 146, 127, 236, 163, 113, 242, 125, 127, 179, 189, 154, 17, 145, 23, 63, 116, 182, 39, 13, 170, 145, 183, 60, 117, 249, 251, 40, 11, 11, 179, 112, 207, 133, 25, 152, 110, 1, 211, 118, 66, 98, 34, 147, 122, 162, 105, 219, 35, 207, 42, 53, 235, 142, 178, 106, 176, 112, 38, 160, 142, 138, 249, 8, 43, 148, 109, 31, 90, 104, 89, 75, 134, 194, 113, 42, 118, 111, 13, 241, 131, 134, 82, 125, 4, 166, 193, 253, 23, 223, 110, 219, 199, 54, 90, 214, 53, 95, 225, 254, 249, 93, 104, 252, 103, 162, 96, 29, 136, 136, 249, 52, 252, 182, 192, 236, 245, 222, 65, 67, 169, 62, 126, 94, 169, 207, 57, 195, 16, 207, 179, 186, 135, 189, 19, 213, 227, 235, 224, 71, 121, 126, 15, 76, 132, 42, 106, 209, 26, 165, 14, 99, 184, 124, 237, 252, 170, 191, 189, 155, 143, 81, 168, 184, 103, 18, 166, 80, 203, 165, 18, 133, 57, 150, 26, 42, 87, 0, 71, 213, 70, 184, 103, 164, 235, 94, 203, 24, 48, 54, 24, 190, 255, 11, 75, 140, 242, 229, 224, 64, 117, 225, 101, 24, 234, 43, 102, 192, 188, 23, 150, 47, 78, 107, 135, 45, 55, 116, 1, 191, 9, 167, 119, 40, 69, 245, 141, 234, 215, 25, 47, 49, 103, 176, 216, 185, 17, 75, 128, 52, 224, 212, 41, 252, 77, 42, 255, 246, 43, 148, 250, 62, 4, 162, 93, 107, 167, 197, 151, 79, 131, 243, 136, 186, 224, 191, 174, 255, 137, 182, 121, 21, 164, 80, 250, 52, 58, 186, 211, 178, 22, 191, 95, 243, 232, 113, 171, 77, 125, 207, 134, 168, 76, 160, 125, 108, 247, 75, 81, 239, 171, 241, 59, 255, 101, 240, 41, 221, 158, 231, 73, 11, 77, 252, 80, 177, 31, 229, 113, 78, 192, 57, 143, 218, 223, 29, 48, 168, 238, 106, 35, 204, 19, 48, 26, 13, 30, 133, 3, 176, 84, 65, 182, 61, 229, 152, 109, 147, 138, 55, 142, 98, 222, 145, 178, 190, 184, 10, 58, 42, 233, 123, 218, 233, 32, 253, 67, 152, 134, 239, 141, 138, 83, 212, 143, 192, 231, 18, 118, 19, 224, 145, 132, 112, 3, 88, 179, 107, 242, 240, 217, 212, 70, 145, 12, 53, 79, 83, 21, 232, 228, 189, 161, 5, 49, 172, 72, 199, 38, 219, 166, 112, 197, 241, 223, 109, 44, 1, 28, 90, 24, 22, 4, 1, 11, 177, 78, 27, 177, 84, 176, 255, 169, 112, 216, 34, 110, 51, 13, 47, 83, 99, 219, 57, 194, 18, 23, 125, 197, 128, 226, 203, 64, 29, 137, 162, 117, 231, 64, 182, 111, 59, 153, 184, 220, 133, 80, 107, 221, 218, 241, 38, 181, 20, 133, 201, 196, 62, 93, 179, 7, 245, 109, 165, 75, 0, 81, 137, 255, 11, 148, 57, 31, 9, 247, 217, 217, 111, 18, 149, 38, 94, 70, 170, 89, 2, 200, 138, 191, 217, 78, 17, 42, 251, 75, 125, 123, 63, 143, 157, 248, 158, 190, 44, 255, 25, 200, 116, 75, 49, 229, 198, 181, 69, 227, 186, 29, 109, 47, 133, 1, 181, 251, 161, 32, 102, 254, 37, 128, 48, 238, 1, 47, 18, 49, 188, 222, 79, 103, 212, 51, 28, 215, 182, 243, 203, 215, 249, 54, 49, 248, 39, 169, 1, 29, 142, 252, 174, 209, 101, 32, 57, 173, 36, 39, 125, 9, 0, 42, 255, 35, 80, 133, 207, 103, 35, 110, 204, 49, 149, 186, 11, 230, 106, 108, 56, 32, 154, 71, 63, 112, 175, 196, 206, 48, 204, 208, 124, 90, 10, 203, 254, 191, 246, 93, 165, 159, 152, 9, 95, 215, 78, 199, 20, 98, 247, 8, 102, 3, 173, 128, 239, 233, 79, 7, 246, 58, 108, 246, 156, 56, 174, 200, 254, 25, 76, 73, 126, 196, 65, 166, 29, 136, 38, 101, 131, 244, 83, 152, 232, 195, 46, 55, 54, 251, 93, 160, 205, 88, 173, 36, 166, 120, 255, 36, 54, 133, 92, 133, 175, 114, 57, 41, 92, 190, 119, 215, 206, 10, 135, 135, 156, 161, 1, 203, 186, 5, 122, 250, 71, 248, 187, 229, 31, 67, 161, 37, 189, 89, 197, 116, 43, 148, 64, 19, 73, 241, 101, 160, 142, 84, 97, 70, 255, 12, 231, 187, 239, 217, 180, 77, 133, 248, 38, 175, 66, 13, 134, 111, 181, 234, 247, 120, 220, 254, 112, 253, 59, 119, 214, 163, 101, 166, 179, 223, 68, 19, 236, 90, 209, 70, 26, 126, 29, 242, 160, 37, 81, 84, 136, 3, 92, 220, 17, 180, 193, 215, 161, 201, 238, 117, 114, 218, 120, 119, 123, 155, 147, 21, 82, 234, 140, 253, 120, 56, 87, 104, 31, 63, 225, 249, 161, 9, 118, 201, 141, 233, 187, 202, 61, 61, 94, 94, 191, 118, 246, 185, 114, 220, 114, 196, 198, 196, 251, 90, 67, 179, 116, 245, 77, 81, 28, 102, 98, 3, 60, 166, 252, 159, 228, 239, 206, 37, 78, 20, 40, 108, 106, 193, 221, 15, 21, 234, 34, 198, 117, 252, 113, 203, 154, 129, 54, 198, 122, 18, 198, 87, 203, 57, 33, 224, 110, 205, 193, 96, 0, 3, 6, 82, 147, 121, 84, 93, 71, 128, 70, 237, 3, 161, 15, 251, 71, 144, 245, 53, 95, 18, 10, 253, 92, 219, 30, 156, 25, 184, 59, 108, 195, 17, 172, 65, 165, 160, 38, 247, 137, 20, 241, 83, 81, 62, 139, 211, 49, 119, 55, 191, 198, 128, 58, 128, 217, 175, 107, 30, 177, 86, 124, 143, 142, 237, 6, 157, 107, 89, 15, 28, 98, 131, 49, 74, 86, 179, 47, 59, 160, 88, 192, 43, 126, 129, 217, 255, 42, 26, 66, 7, 68, 213, 109, 197, 47, 6, 238, 120, 219, 82, 28, 11, 194, 247, 127, 44, 62, 132, 188, 169, 16, 1, 187, 66, 94, 153, 89, 209, 204, 23, 61, 222, 81, 222, 38, 162, 5, 82, 215, 94, 83, 207, 242, 91, 230, 164, 85, 24, 240, 40, 157, 113, 166, 201, 166, 71, 7, 67, 19, 13, 103, 19, 154, 55, 241, 115, 150, 188, 182, 58, 191, 126, 240, 234, 158, 222, 224, 130, 150, 154, 199, 214, 86, 199, 54, 158, 19, 190, 228, 79, 241, 165, 220, 189, 45, 203, 154, 121, 48, 46, 6, 246, 172, 253, 9, 207, 251, 156, 53, 208, 0, 243, 226, 17, 138, 156, 56, 0, 32, 85, 12, 122, 175, 246, 168, 10, 107, 187, 143, 88, 214, 180, 123, 66, 60, 12, 231, 181, 150, 181, 129, 138, 97, 64, 251, 126, 43, 176, 23, 183, 65, 187, 64, 71, 112, 60, 58, 163, 208, 192, 29, 68, 15, 247, 37, 223, 199, 61, 14, 63, 245, 3, 129, 187, 27, 108, 11, 48, 137, 43, 72, 152, 89, 96, 26, 23, 218, 248, 117, 249, 63, 22, 228, 214, 137, 104, 254, 72, 220, 147, 53, 253, 254, 78, 8, 237, 87, 25, 208, 38, 109, 225, 121, 59, 141, 193, 119, 149, 26, 29, 206, 93, 92, 189, 131, 0, 237, 11, 186, 89, 169, 211, 188, 131, 160, 101, 223, 101, 83, 251, 176, 140, 124, 45, 208, 123, 95, 115, 155, 222, 169, 61, 11, 45, 227, 202, 118, 31, 117, 152, 102, 233, 79, 37, 246, 120, 185, 63, 177, 211, 165, 222, 193, 102, 186, 234, 64, 71, 180, 0, 232, 219, 188, 129, 141, 159, 232, 25, 201, 3, 122, 76, 248, 48, 97, 39, 12, 60, 26, 192, 115, 232, 231, 125, 87, 212, 51, 126, 0, 128, 181, 79, 236, 58, 214, 54, 31, 180, 176, 155, 116, 201, 3, 81, 76, 162, 252, 166, 43, 245, 193, 192, 127, 252, 87, 2, 123, 65, 27, 212, 33, 88, 128, 94, 19, 196, 30, 114, 102, 218, 239, 82, 234, 13, 174, 118, 63, 173, 13, 18, 130, 208, 157, 176, 209, 136, 252, 122, 150, 70, 71, 42, 180, 227, 197, 104, 84, 169, 37, 92, 135, 78, 21, 124, 229, 222, 98, 220, 234, 143, 133, 217, 234, 203, 188, 162, 44, 197, 104, 217, 220, 55, 80, 127, 74, 250, 67, 2, 42, 103, 104, 240, 55, 247, 243, 253, 145, 51, 201, 69, 41, 4, 208, 22, 162, 227, 31, 161, 230, 61, 32, 170, 121, 139, 105, 201, 143, 79, 2, 131, 0, 61, 106, 155, 74, 19, 189, 51, 199, 218, 90, 101, 202, 245, 248, 79, 249, 153, 129, 62, 252, 127, 241, 237, 208, 5, 252, 49, 236, 80, 20, 87, 73, 206, 112, 226, 31, 135, 217, 18, 231, 74, 104, 154, 207, 174, 174, 82, 74, 20, 47, 72, 158, 195, 253, 103, 253, 61, 119, 155, 174, 169, 74, 125, 147, 251, 142, 252, 40, 119, 115, 87, 236, 0, 0, 40, 222, 30, 116, 62, 212, 197, 174, 140, 156, 89, 99, 157, 119, 45, 204, 23, 52, 179, 145, 70, 104, 11, 112, 28, 37, 40, 137, 86, 225, 78, 208, 79, 238, 62, 165, 110, 225, 5, 126, 238, 103, 156, 119, 80, 187, 99, 25, 160, 229, 135, 83, 106, 97, 170, 218, 35, 8, 155, 215, 22, 159, 15, 228, 191, 65, 35, 114, 62, 250, 220, 221, 66, 225, 13, 6, 175, 57, 197, 33, 95, 218, 32, 138, 34, 211, 242, 75, 185, 203, 69, 114, 38, 33, 95, 112, 220, 64, 136, 114, 179, 147, 71, 26, 184, 150, 187, 203, 186, 254, 97, 188, 44, 135, 114, 241, 167, 151, 46, 203, 153, 228, 163, 145, 231, 139, 184, 84, 7, 103, 191, 145, 41, 110, 109, 129, 210, 177, 135, 46, 28, 227, 86, 161, 122, 16, 0, 254, 152, 152, 161, 93, 24, 15, 218, 102, 146, 68, 101, 227, 236, 44, 180, 13, 152, 52, 246, 27, 185, 45, 234, 113, 247, 52, 136, 151, 185, 3, 237, 153, 241, 100, 92, 244, 19, 228, 248, 91, 143, 98, 43, 60, 111, 130, 131, 151, 37, 108, 255, 48, 237, 6, 92, 176, 195, 25, 12, 63, 195, 221, 21, 187, 160, 253, 69, 239, 175, 77, 120, 169, 55, 221, 209, 74, 147, 114, 9, 23, 38, 165, 133, 209, 223, 199, 130, 53, 130, 245, 4, 116, 226, 30, 157, 132, 234, 159, 143, 44, 209, 225, 13, 64, 37, 143, 126, 89, 95, 34, 112, 130, 223, 141, 187, 168, 168, 151, 186, 143, 198, 164, 110, 167, 125, 149, 150, 17, 143, 101, 206, 135, 165, 212, 255, 198, 163, 204, 215, 213, 48, 15, 225, 157, 167, 173, 32, 137, 99, 183, 96, 159, 208, 171, 60, 124, 21, 174, 27, 48, 184, 176, 195, 27, 43, 6, 208, 35, 109, 4, 247, 185, 124, 128, 66, 185, 159, 249, 99, 101, 164, 98, 51, 67, 131, 199, 191, 24, 234, 92, 249, 219, 238, 116, 13, 255, 28, 210, 245, 122, 117, 105, 91, 251, 3, 124, 3, 26, 229, 114, 184, 35, 5, 92, 134, 214, 106, 50, 149, 141, 10, 105, 57, 149, 129, 23, 50, 48, 68, 253, 189, 240, 95, 178, 220, 30, 22, 197, 171, 169, 212, 114, 174, 222, 29, 62, 25, 174, 131, 81, 241, 234, 245, 187, 233, 0, 242, 254, 52, 100, 196, 97, 127, 6, 93, 81, 72, 107, 81, 111, 138, 174, 28, 238, 212, 1, 220, 58, 31, 75, 171, 219, 23, 177, 76, 59, 173, 44, 142, 220, 46, 237, 219, 129, 23, 157, 100, 66, 251, 255, 61, 244, 55, 94, 193, 187, 150, 150, 1, 224, 103, 207, 89, 222, 238, 127, 6, 161, 41, 248, 213, 161, 151, 237, 187, 150, 49, 120, 42, 113, 44, 33, 53, 196, 5, 92, 242, 243, 236, 59, 49, 49, 118, 89, 174, 104, 224, 208, 87, 195, 178, 86, 182, 42, 17, 97, 50, 9, 221, 63, 66, 223, 121, 29, 186, 229, 100, 66, 197, 132, 178, 66, 167, 201, 191, 12, 87, 108, 27, 24, 61, 0, 192, 250, 18, 80, 108, 104, 108, 62, 171, 217, 49, 8, 181, 231, 161, 56, 30, 199, 18, 65, 12, 81, 97, 157, 242, 40, 181, 18, 142, 13, 159, 205, 249, 96, 69, 215, 47, 49, 234, 157, 198, 26, 150, 189, 248, 30, 141, 19, 190, 112, 44, 55, 124, 21, 118, 111, 0, 64, 190, 71, 104, 176, 240, 113, 178, 213, 64, 247, 135, 121, 66, 237, 18, 162, 243, 104, 36, 175, 254, 247, 104, 176, 75, 237, 192, 199, 39, 255, 21, 94, 217, 105, 103, 119, 119, 19, 70, 228, 143, 35, 133, 218, 183, 168, 58, 189, 206, 133, 67, 25, 59, 153, 253, 55, 65, 122, 108, 225, 47, 145, 178, 219, 178, 197, 61, 76, 234, 183, 109, 217, 194, 242, 80, 139, 49, 203, 227, 62, 237, 187, 30, 66, 222, 157, 116, 58, 253, 126, 34, 246, 124, 208, 210, 201, 180, 245, 187, 44, 167, 169, 254, 254, 18, 35, 155, 71, 176, 41, 248, 234, 118, 91, 104, 188, 238, 23, 15, 104, 23, 79, 160, 3, 70, 9, 68, 7, 76, 165, 204, 254, 241, 150, 82, 63, 25, 100, 239, 194, 35, 100, 199, 204, 175, 6, 106, 56, 60, 209, 249, 255, 207, 176, 64, 25, 225, 211, 229, 175, 195, 86, 143, 72, 95, 68, 251, 25, 221, 85, 183, 95, 123, 150, 55, 149, 250, 206, 173, 204, 243, 2, 38, 34, 241, 20, 185, 4, 48, 132, 217, 71, 32, 174, 137, 153, 7, 191, 92, 103, 55, 64, 8, 222, 19, 243, 209, 22, 126, 222, 7, 3, 45, 56, 157, 0, 8, 222, 6, 54, 188, 41, 72, 152, 13, 173, 224, 29, 225, 20, 234, 100, 218, 180, 4, 71, 209, 104, 117, 60, 160, 105, 56, 130, 86, 213, 37, 8, 1, 215, 236, 182, 169, 24, 63, 149, 63, 154, 132, 81, 111, 88, 221, 156, 58, 2, 204, 158, 70, 9, 217, 91, 8, 36, 87, 228, 222, 202, 139, 164, 182, 58, 4, 222, 137, 11, 199, 234, 95, 143, 174, 46, 189, 197, 57, 161, 61, 220, 170, 197, 254, 234, 10, 182, 73, 238, 218, 63, 210, 222, 213, 98, 165, 229, 220, 150, 82, 47, 6, 204, 73, 35, 220, 93, 123, 156, 242, 142, 70, 34, 251, 103, 244, 50, 235, 3, 245, 255, 228, 63, 14, 50, 12, 157, 63, 214, 252, 175, 211, 61, 212, 41, 44, 15, 176, 63, 59, 161, 139, 75, 214, 33, 200, 75, 44, 88, 9, 7, 150, 19, 126, 131, 71, 95, 244, 69, 238, 198, 226, 59, 6, 30, 24, 36, 96, 116, 72, 68, 195, 5, 27, 229, 195, 106, 145, 171, 98, 194, 0, 199, 185, 9, 140, 166, 67, 164, 151, 161, 169, 218, 207, 67, 11, 48, 151, 236, 46, 77, 166, 25, 34, 221, 13, 242, 30, 20, 154, 87, 125, 223, 242, 207, 69, 223, 40, 207, 163, 215, 57, 140, 159, 196, 209, 202, 237, 25, 114, 1, 5, 213, 53, 223, 206, 16, 46, 103, 16, 71, 167, 69, 106, 240, 52, 66, 249, 88, 246, 90, 90, 160, 184, 247, 24, 208, 254, 34, 10, 112, 58, 209, 69, 69, 216, 253, 52, 47, 54, 228, 177, 251, 44, 107, 193, 99, 177, 175, 115, 189, 160, 226, 62, 64, 229, 63, 150, 128, 206, 237, 145, 141, 74, 108, 12, 121, 81, 30, 129, 49, 92, 253, 10, 149, 120, 55, 239, 15, 42, 159, 73, 117, 189, 82, 255, 76, 211, 111, 175, 172, 55, 2, 150, 142, 70, 248, 96, 224, 174, 207, 6, 205, 28, 105, 150, 15, 4, 18, 198, 254, 2, 246, 13, 129, 123, 98, 109, 123, 149, 154, 79, 106, 199, 128, 166, 254, 32, 176, 155, 182, 184, 186, 170, 169, 154, 109, 54, 235, 68, 103, 247, 103, 1, 27, 210, 14, 220, 240, 64, 224, 118, 109, 232, 244, 182, 227, 130, 138, 71, 176, 251, 235, 254, 240, 187, 34, 110, 168, 41, 52, 62, 180, 225, 101, 198, 142, 48, 31, 20, 138, 63, 134, 159, 55, 0, 160, 183, 77, 26, 52, 24, 105, 163, 55, 197, 105, 15, 174, 214, 124, 71, 228, 199, 166, 101, 17, 164, 236, 235, 80, 78, 81, 231, 239, 211, 43, 182, 189, 29, 151, 37, 173, 115, 6, 10, 190, 103, 241, 231, 200, 143, 35, 110, 71, 10, 122, 241, 52, 214, 29, 243, 213, 155, 44, 235, 167, 39, 16, 131, 125, 84, 6, 234, 90, 94, 106, 131, 135, 10, 248, 124, 219, 145, 98, 137, 171, 196, 110, 180, 179, 90, 93, 78, 97, 148, 250, 250, 7, 203, 211, 176, 111, 226, 6, 202, 134, 113, 45, 105, 42, 99, 9, 144, 25, 1, 103, 0, 122, 39, 26, 148, 47, 211, 12, 196, 37, 234, 18, 247, 255, 13, 238, 65, 169, 189, 92, 250, 18, 39, 228, 105, 89, 54, 254, 9, 246, 105, 228, 22, 203, 80, 14, 14, 94, 50, 44, 93, 51, 80, 107, 210, 232, 194, 29, 220, 204, 186, 115, 121, 123, 131, 222, 245, 208, 192, 216, 116, 17, 94, 87, 44, 195, 96, 210, 64, 99, 36, 141, 198, 111, 210, 28, 134, 53, 114, 9, 0, 235, 184, 191, 28, 132, 156, 141, 21, 129, 56, 90, 254, 193, 184, 55, 88, 171, 250, 3, 250, 68, 101, 137, 192, 229, 51, 161, 97, 52, 192, 124, 67, 34, 201, 88, 0, 141, 3, 13, 13, 2, 154, 164, 13, 26, 2, 223, 114, 182, 120, 181, 62, 21, 0, 92, 143, 244, 254, 125, 237, 227, 42, 190, 164, 165, 15, 251, 182, 188, 79, 236, 123, 8, 81, 242, 145, 142, 80, 224, 62, 117, 94, 25, 55, 1, 162, 215, 102, 3, 111, 165, 98, 79, 31, 88, 83, 59, 246, 165, 211, 177, 183, 176, 243, 181, 99, 201, 185, 34, 5, 57, 90, 197, 175, 92, 80, 234, 14, 158, 125, 186, 112, 173, 51, 23, 212, 112, 185, 157, 117, 161, 243, 255, 67, 87, 162, 62, 236, 157, 246, 104, 39, 83, 129, 73, 222, 70, 46, 239, 64, 71, 229, 115, 217, 220, 101, 204, 140, 227, 219, 13, 39, 98, 228, 0, 96, 140, 241, 156, 249, 92, 219, 9, 117, 35, 62, 192, 154, 182, 91, 29, 28, 14, 236, 134, 237, 252, 57, 195, 43, 191, 7, 84, 26, 24, 237, 233, 116, 17, 255, 138, 106, 79, 135, 161, 251, 159, 3, 131, 109, 255, 208, 78, 104, 68, 55, 54, 213, 113, 21, 173, 38, 34, 194, 186, 223, 216, 124, 56, 247, 238, 162, 251, 17, 80, 201, 255, 149, 139, 152, 29, 234, 20, 248, 219, 110, 112, 217, 74, 221, 217, 13, 233, 232, 245, 52, 224, 168, 87, 168, 95, 191, 52, 39, 50, 79, 216, 28, 133, 6, 233, 102, 188, 123, 15, 12, 61, 59, 54, 27, 138, 76, 143, 120, 214, 136, 192, 241, 59, 113, 17, 219, 171, 36, 0, 255, 122, 182, 13, 122, 232, 157, 92, 216, 89, 104, 28, 211, 111, 119, 229, 113, 122, 203, 53, 91, 169, 31, 240, 169, 54, 169, 255, 249, 30, 181, 186, 115, 4, 236, 223, 66, 191, 212, 10, 228, 92, 75, 123, 206, 156, 129, 175, 57, 105, 11, 66, 117, 194, 182, 74, 169, 119, 113, 57, 49, 237, 134, 23, 40, 114, 0, 192, 25, 204, 208, 27, 34, 75, 31, 119, 241, 131, 2, 60, 22, 92, 147, 102, 24, 94, 133, 60, 54, 243, 88, 13, 82, 177, 211, 100, 159, 78, 133, 48, 19, 168, 196, 252, 24, 123, 67, 131, 7, 223, 191, 190, 231, 58, 92, 90, 193, 55, 36, 58, 136, 97, 98, 148, 159, 16, 115, 59, 143, 117, 137, 54, 55, 116, 53, 93, 54, 46, 175, 152, 253, 90, 87, 39, 184, 75, 19, 119, 16, 87, 112, 115, 13, 218, 124, 28, 59, 138, 110, 220, 161, 125, 122, 29, 230, 85, 122, 62, 81, 235, 9, 140, 46, 5, 235, 138, 73, 214, 140, 239, 232, 89, 197, 94, 172, 159, 230, 101, 4, 211, 51, 181, 247, 27, 122, 152, 176, 182, 215, 232, 0, 0, 64, 0, 73, 68, 65, 84, 190, 179, 99, 25, 0, 185, 164, 73, 198, 35, 174, 89, 241, 193, 137, 200, 35, 52, 206, 154, 6, 134, 218, 248, 61, 127, 68, 233, 224, 147, 231, 82, 41, 11, 245, 181, 78, 55, 236, 252, 36, 113, 61, 139, 63, 0, 225, 239, 103, 124, 137, 187, 185, 43, 114, 0, 128, 89, 156, 54, 219, 56, 23, 76, 172, 49, 219, 64, 231, 214, 10, 88, 12, 39, 13, 120, 46, 151, 214, 0, 96, 166, 191, 44, 101, 148, 17, 164, 37, 210, 22, 26, 60, 68, 134, 169, 220, 19, 31, 65, 27, 153, 211, 55, 27, 196, 36, 45, 63, 153, 235, 192, 23, 31, 204, 207, 165, 131, 49, 160, 33, 194, 8, 125, 13, 151, 56, 243, 13, 238, 22, 87, 22, 4, 214, 225, 102, 23, 190, 113, 132, 134, 183, 246, 53, 105, 113, 255, 157, 241, 71, 57, 105, 49, 228, 125, 239, 32, 192, 38, 99, 216, 227, 108, 141, 30, 96, 247, 228, 83, 78, 104, 77, 122, 16, 197, 167, 127, 9, 3, 221, 175, 192, 60, 224, 153, 231, 39, 34, 167, 179, 49, 216, 6, 246, 216, 144, 236, 211, 18, 104, 122, 237, 73, 232, 80, 79, 249, 62, 165, 158, 232, 107, 209, 143, 180, 2, 30, 212, 133, 12, 173, 8, 220, 209, 54, 76, 192, 110, 224, 111, 206, 37, 106, 141, 35, 7, 0, 104, 106, 180, 81, 195, 104, 194, 8, 107, 148, 70, 97, 145, 116, 76, 169, 95, 162, 38, 171, 12, 189, 173, 212, 135, 104, 108, 85, 156, 150, 209, 172, 105, 122, 241, 248, 85, 196, 164, 15, 87, 236, 15, 129, 22, 98, 56, 207, 247, 53, 208, 213, 186, 157, 95, 214, 200, 138, 2, 122, 250, 155, 184, 138, 226, 4, 162, 206, 28, 204, 26, 95, 194, 105, 8, 96, 166, 131, 150, 228, 69, 205, 7, 214, 99, 31, 229, 110, 113, 93, 233, 8, 172, 196, 159, 178, 29, 98, 29, 5, 33, 50, 251, 37, 180, 123, 229, 154, 206, 43, 29, 216, 12, 249, 199, 94, 185, 13, 65, 48, 103, 142, 119, 63, 102, 206, 164, 149, 174, 132, 48, 129, 14, 13, 38, 70, 214, 167, 49, 70, 135, 254, 17, 30, 38, 105, 15, 95, 204, 191, 1, 66, 176, 166, 197, 62, 125, 171, 206, 16, 153, 222, 26, 184, 157, 29, 144, 107, 3, 183, 107, 163, 59, 241, 177, 32, 242, 229, 176, 127, 94, 55, 74, 240, 3, 161, 56, 116, 215, 0, 13, 90, 104, 90, 29, 101, 232, 175, 139, 159, 13, 226, 80, 29, 120, 251, 67, 129, 187, 51, 54, 62, 11, 166, 121, 220, 194, 61, 133, 36, 227, 246, 41, 244, 158, 154, 54, 129, 184, 116, 239, 63, 236, 161, 240, 127, 158, 231, 115, 228, 233, 126, 63, 154, 196, 243, 91, 173, 11, 3, 232, 79, 113, 142, 39, 31, 229, 110, 113, 117, 9, 2, 33, 117, 237, 217, 86, 217, 75, 192, 242, 228, 235, 123, 74, 209, 233, 32, 141, 104, 234, 213, 252, 150, 230, 33, 214, 26, 16, 192, 63, 110, 110, 15, 205, 110, 62, 55, 143, 157, 68, 43, 39, 20, 235, 198, 159, 225, 28, 46, 221, 205, 221, 33, 23, 52, 16, 243, 153, 198, 156, 22, 136, 22, 60, 29, 10, 197, 156, 145, 26, 128, 5, 252, 12, 63, 219, 241, 184, 18, 218, 1, 154, 215, 105, 132, 141, 39, 246, 102, 24, 218, 152, 55, 9, 102, 253, 123, 49, 10, 162, 241, 16, 137, 47, 76, 224, 5, 125, 39, 173, 247, 123, 68, 29, 169, 245, 143, 80, 251, 216, 48, 23, 99, 140, 13, 21, 200, 103, 253, 24, 238, 115, 74, 120, 16, 193, 95, 87, 236, 162, 123, 18, 248, 44, 216, 17, 128, 100, 21, 35, 236, 163, 248, 13, 30, 243, 186, 251, 129, 49, 202, 89, 119, 209, 5, 219, 222, 184, 132, 125, 47, 74, 223, 197, 223, 237, 174, 84, 246, 86, 106, 80, 15, 255, 95, 42, 245, 1, 189, 3, 26, 160, 99, 172, 62, 6, 239, 196, 86, 37, 2, 168, 99, 180, 193, 120, 83, 22, 158, 251, 208, 1, 115, 109, 231, 104, 150, 104, 149, 133, 185, 29, 39, 144, 142, 225, 234, 117, 206, 176, 129, 235, 114, 135, 83, 103, 140, 60, 142, 184, 242, 34, 48, 77, 219, 11, 160, 245, 119, 218, 210, 64, 94, 142, 65, 120, 12, 46, 190, 25, 184, 200, 118, 61, 46, 30, 138, 63, 101, 131, 227, 122, 191, 192, 203, 225, 126, 186, 62, 28, 123, 201, 227, 41, 114, 0, 128, 163, 4, 173, 32, 51, 244, 207, 71, 90, 135, 131, 14, 24, 66, 104, 38, 174, 211, 231, 224, 32, 109, 245, 37, 152, 231, 104]);
fileData8.push.apply(fileData8, [222, 77, 228, 63, 93, 87, 190, 223, 179, 74, 253, 24, 207, 204, 169, 200, 227, 127, 97, 174, 75, 149, 122, 37, 72, 59, 189, 117, 254, 62, 50, 50, 159, 225, 184, 233, 110, 43, 164, 146, 225, 49, 128, 211, 106, 168, 237, 95, 225, 190, 206, 29, 238, 133, 7, 0, 230, 40, 147, 80, 61, 129, 75, 134, 146, 151, 54, 144, 150, 198, 184, 125, 26, 143, 232, 141, 99, 60, 141, 89, 93, 230, 159, 193, 64, 192, 20, 152, 135, 81, 17, 66, 26, 31, 250, 35, 164, 149, 173, 172, 156, 179, 135, 59, 60, 146, 61, 108, 143, 135, 164, 235, 79, 153, 198, 141, 242, 51, 255, 203, 192, 123, 117, 92, 206, 254, 91, 165, 251, 144, 226, 164, 76, 172, 191, 153, 199, 228, 122, 89, 36, 181, 45, 52, 28, 136, 247, 132, 109, 143, 111, 163, 50, 158, 196, 3, 51, 181, 63, 227, 239, 147, 47, 95, 225, 97, 171, 113, 45, 176, 172, 199, 14, 176, 53, 105, 226, 59, 235, 185, 180, 118, 162, 128, 244, 43, 167, 254, 101, 0, 135, 78, 99, 248, 234, 114, 173, 144, 204, 205, 16, 53, 53, 8, 109, 40, 231, 203, 59, 36, 97, 48, 52, 40, 240, 216, 160, 140, 98, 173, 251, 25, 206, 116, 210, 239, 113, 183, 233, 210, 210, 28, 188, 36, 193, 184, 236, 224, 228, 242, 246, 237, 118, 135, 137, 81, 123, 38, 141, 63, 156, 134, 150, 223, 166, 65, 192, 75, 65, 44, 195, 214, 130, 79, 195, 245, 37, 109, 125, 62, 58, 172, 212, 127, 126, 7, 139, 114, 233, 113, 230, 140, 115, 64, 109, 62, 100, 219, 45, 204, 70, 27, 110, 16, 26, 70, 156, 253, 49, 172, 139, 189, 30, 23, 37, 187, 255, 82, 250, 35, 152, 245, 90, 120, 127, 137, 254, 214, 113, 247, 95, 169, 230, 146, 230, 131, 211, 74, 40, 68, 202, 17, 6, 53, 55, 130, 195, 155, 1, 23, 82, 0, 140, 159, 199, 55, 191, 19, 150, 111, 64, 27, 226, 140, 242, 144, 54, 26, 232, 188, 19, 163, 176, 47, 226, 121, 91, 228, 199, 197, 139, 226, 116, 235, 31, 64, 198, 95, 33, 62, 37, 224, 39, 96, 62, 12, 179, 6, 38, 68, 52, 111, 45, 247, 71, 72, 33, 134, 154, 243, 218, 191, 240, 210, 128, 85, 166, 84, 162, 48, 127, 7, 124, 90, 169, 33, 187, 52, 0, 118, 253, 108, 197, 178, 214, 131, 33, 173, 18, 110, 126, 179, 183, 34, 201, 184, 133, 211, 34, 176, 105, 111, 8, 250, 33, 181, 2, 115, 207, 111, 147, 187, 95, 8, 249, 90, 139, 188, 220, 164, 229, 135, 166, 215, 159, 208, 220, 176, 58, 245, 114, 19, 247, 115, 102, 74, 127, 238, 215, 141, 208, 187, 84, 231, 226, 246, 127, 49, 76, 185, 29, 129, 199, 145, 142, 71, 240, 36, 237, 226, 48, 120, 218, 196, 0, 126, 3, 152, 168, 188, 196, 151, 252, 232, 205, 194, 95, 167, 223, 78, 19, 234, 251, 42, 200, 244, 251, 35, 88, 169, 53, 218, 255, 93, 92, 16, 116, 75, 117, 105, 89, 72, 218, 222, 97, 240, 203, 82, 255, 72, 44, 133, 195, 191, 152, 90, 124, 94, 70, 111, 250, 132, 80, 32, 239, 66, 86, 158, 168, 41, 59, 84, 214, 181, 126, 118, 9, 52, 59, 227, 219, 48, 189, 198, 145, 80, 139, 234, 2, 149, 195, 85, 152, 40, 188, 201, 39, 204, 212, 44, 52, 178, 245, 153, 196, 36, 76, 199, 160, 210, 5, 99, 143, 206, 225, 105, 206, 56, 225, 73, 106, 255, 135, 97, 240, 63, 13, 68, 84, 79, 236, 23, 96, 168, 210, 82, 194, 238, 133, 161, 2, 115, 111, 152, 127, 154, 251, 8, 34, 113, 202, 126, 231, 50, 226, 146, 76, 141, 118, 61, 149, 38, 47, 234, 253, 168, 109, 47, 211, 152, 20, 176, 158, 217, 18, 197, 183, 136, 31, 169, 216, 227, 19, 48, 238, 34, 111, 4, 40, 167, 1, 216, 109, 219, 59, 12, 150, 169, 30, 116, 3, 242, 96, 214, 198, 33, 21, 138, 98, 105, 208, 19, 185, 183, 220, 55, 160, 171, 118, 117, 118, 246, 174, 102, 106, 162, 43, 14, 48, 136, 63, 231, 162, 26, 152, 64, 94, 253, 139, 10, 209, 218, 92, 52, 57, 17, 216, 55, 210, 120, 181, 220, 58, 175, 37, 164, 184, 124, 146, 5, 126, 77, 141, 89, 78, 235, 16, 117, 136, 133, 40, 165, 238, 19, 222, 49, 152, 239, 9, 173, 144, 22, 18, 239, 68, 42, 130, 63, 218, 190, 45, 38, 72, 67, 27, 138, 166, 194, 252, 158, 38, 247, 116, 159, 124, 223, 129, 203, 204, 215, 134, 153, 223, 45, 127, 249, 203, 141, 187, 209, 70, 232, 136, 228, 151, 31, 254, 86, 135, 109, 155, 180, 80, 17, 228, 244, 183, 17, 254, 228, 53, 190, 46, 204, 39, 202, 29, 171, 26, 191, 70, 169, 191, 117, 166, 22, 78, 44, 26, 73, 30, 254, 219, 48, 3, 26, 93, 195, 208, 113, 12, 186, 10, 17, 4, 221, 0, 110, 195, 131, 121, 149, 194, 226, 249, 24, 204, 67, 244, 12, 199, 77, 114, 55, 161, 190, 94, 196, 2, 208, 95, 61, 102, 191, 236, 1, 35, 161, 80, 135, 63, 64, 23, 53, 208, 12, 169, 67, 228, 32, 135, 255, 1, 24, 216, 82, 149, 192, 233, 56, 250, 2, 94, 31, 140, 230, 55, 37, 102, 185, 37, 191, 230, 69, 231, 63, 77, 119, 100, 179, 99, 70, 138, 127, 38, 173, 240, 175, 73, 11, 164, 33, 148, 82, 126, 149, 117, 232, 101, 38, 103, 245, 154, 148, 76, 98, 219, 129, 176, 12, 52, 138, 94, 101, 86, 66, 207, 18, 163, 114, 28, 125, 22, 179, 128, 135, 219, 140, 114, 90, 202, 99, 159, 83, 96, 68, 240, 201, 198, 78, 232, 136, 64, 177, 94, 11, 198, 98, 95, 165, 188, 192, 90, 95, 82, 92, 194, 59, 2, 115, 170, 247, 87, 45, 75, 97, 157, 249, 117, 17, 252, 23, 91, 214, 150, 65, 67, 194, 220, 103, 170, 28, 148, 27, 236, 83, 61, 138, 127, 135, 84, 214, 53, 4, 200, 141, 59, 52, 66, 88, 227, 13, 237, 193, 168, 46, 97, 215, 90, 214, 6, 190, 20, 224, 243, 142, 107, 153, 70, 241, 255, 31, 153, 254, 47, 37, 97, 125, 24, 235, 143, 168, 1, 90, 166, 22, 227, 124, 105, 117, 51, 90, 63, 11, 81, 207, 171, 217, 223, 60, 82, 136, 115, 79, 71, 133, 139, 243, 195, 244, 115, 240, 40, 123, 137, 189, 145, 106, 251, 108, 230, 149, 193, 145, 210, 8, 132, 57, 180, 224, 65, 106, 194, 149, 248, 123, 78, 116, 130, 85, 254, 9, 144, 43, 10, 60, 159, 135, 109, 22, 76, 22, 213, 206, 139, 104, 140, 110, 44, 179, 27, 25, 58, 59, 64, 16, 75, 39, 241, 102, 39, 12, 169, 162, 233, 6, 186, 201, 72, 223, 3, 120, 86, 74, 24, 194, 236, 47, 201, 176, 244, 154, 37, 215, 93, 86, 191, 222, 156, 37, 127, 52, 8, 160, 161, 21, 194, 222, 137, 229, 38, 194, 62, 129, 108, 250, 46, 248, 246, 179, 54, 32, 134, 163, 174, 78, 8, 28, 251, 42, 226, 251, 167, 98, 137, 193, 247, 48, 103, 152, 124, 12, 137, 135, 53, 93, 104, 88, 75, 124, 127, 237, 14, 19, 147, 117, 162, 15, 253, 195, 40, 2, 80, 195, 177, 213, 95, 231, 75, 140, 224, 212, 201, 171, 81, 7, 150, 58, 106, 217, 148, 176, 153, 94, 23, 193, 159, 24, 163, 221, 94, 201, 5, 80, 71, 113, 254, 143, 184, 95, 54, 23, 26, 155, 18, 248, 183, 101, 164, 150, 155, 118, 72, 88, 80, 96, 53, 12, 121, 237, 211, 195, 69, 217, 205, 54, 219, 166, 239, 152, 139, 204, 65, 103, 122, 57, 90, 160, 212, 159, 70, 15, 208, 7, 246, 230, 18, 30, 19, 24, 245, 159, 190, 233, 93, 201, 104, 140, 181, 16, 134, 234, 125, 230, 9, 55, 53, 40, 137, 4, 117, 12, 253, 173, 158, 70, 103, 177, 158, 51, 112, 143, 230, 33, 214, 9, 66, 0, 159, 102, 33, 68, 211, 231, 241, 103, 35, 212, 49, 80, 129, 59, 134, 190, 162, 240, 198, 67, 196, 23, 234, 114, 4, 240, 237, 105, 153, 229, 29, 48, 88, 174, 86, 51, 96, 168, 253, 57, 0, 179, 79, 190, 61, 80, 168, 152, 128, 247, 116, 176, 196, 214, 34, 181, 28, 198, 223, 234, 67, 245, 109, 55, 116, 157, 180, 219, 186, 240, 64, 11, 60, 132, 4, 129, 204, 8, 160, 44, 206, 67, 224, 31, 131, 161, 231, 57, 152, 35, 48, 187, 81, 239, 181, 129, 19, 124, 42, 33, 20, 124, 190, 6, 10, 241, 182, 227, 227, 172, 243, 87, 34, 67, 152, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 64, 71, 17, 72, 213, 0, 56, 169, 193, 32, 0, 67, 140, 243, 139, 162, 147, 134, 117, 70, 245, 53, 152, 93, 48, 208, 192, 56, 127, 71, 72, 235, 103, 180, 148, 66, 139, 208, 167, 48, 50, 137, 214, 142, 224, 165, 144, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 116, 57, 2, 216, 137, 252, 20, 205, 255, 243, 209, 155, 210, 249, 119, 249, 119, 149, 228, 9, 2, 130, 128, 32, 32, 8, 8, 2, 169, 8, 160, 243, 159, 7, 147, 99, 32, 208, 249, 99, 83, 169, 153, 144, 0, 130, 128, 32, 32, 8, 8, 2, 130, 192, 21, 142, 64, 182, 37, 128, 24, 144, 48, 16, 160, 77, 104, 107, 96, 222, 13, 131, 13, 163, 206, 69, 20, 250, 49, 152, 211, 74, 93, 120, 211, 178, 174, 170, 124, 119, 56, 100, 9, 9, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 32, 8, 116, 41, 2, 86, 151, 166, 75, 146, 37, 8, 8, 2, 130, 128, 32, 16, 131, 192, 160, 109, 207, 92, 162, 212, 31, 225, 245, 153, 136, 32, 3, 240, 251, 188, 101, 89, 175, 71, 188, 235, 73, 47, 219, 182, 31, 78, 72, 248, 30, 228, 245, 177, 132, 247, 242, 74, 16, 16, 4, 4, 1, 65, 64, 16, 232, 15, 4, 154, 182, 221, 64, 167, 152, 64, 173, 205, 253, 145, 83, 228, 194, 182, 39, 157, 78, 200, 169, 109, 183, 154, 125, 147, 215, 14, 103, 100, 74, 135, 229, 85, 34, 14, 101, 129, 52, 23, 179, 97, 252, 244, 95, 192, 8, 112, 180, 18, 230, 61, 192, 4, 249, 159, 132, 100, 206, 241, 242, 127, 17, 79, 50, 231, 128, 1, 61, 133, 4, 1, 65, 160, 207, 17, 88, 172, 212, 120, 114, 22, 173, 89, 201, 239, 123, 235, 237, 212, 196, 228, 74, 179, 151, 8, 79, 194, 75, 191, 3, 141, 13, 50, 110, 219, 91, 16, 232, 195, 8, 112, 42, 38, 16, 117, 68, 68, 251, 97, 254, 10, 230, 217, 186, 58, 99, 116, 124, 13, 240, 255, 18, 204, 109, 48, 140, 108, 155, 234, 195, 148, 71, 240, 243, 123, 144, 127, 129, 189, 44, 232, 56, 131, 188, 99, 148, 145, 37, 239, 223, 133, 8, 228, 221, 122, 217, 178, 212, 229, 130, 226, 82, 163, 33, 255, 171, 109, 23, 227, 53, 81, 129, 61, 12, 158, 198, 59, 82, 135, 33, 45, 86, 161, 180, 64, 206, 60, 196, 255, 30, 204, 62, 152, 10, 232, 44, 202, 200, 192, 187, 129, 13, 146, 159, 157, 134, 108, 123, 195, 2, 165, 62, 133, 24, 84, 246, 174, 135, 249, 73, 228, 105, 40, 137, 67, 232, 155, 81, 156, 31, 71, 156, 19, 73, 113, 140, 119, 182, 61, 101, 68, 169, 183, 103, 182, 243, 159, 47, 253, 192, 111, 33, 120, 254, 19, 12, 225, 135, 188, 31, 255, 174, 101, 93, 115, 143, 33, 39, 202, 195, 182, 167, 67, 246, 15, 3, 217, 71, 15, 90, 214, 226, 143, 71, 5, 77, 244, 195, 32, 25, 149, 224, 181, 105, 46, 118, 249, 210, 0, 198, 231, 108, 123, 211, 85, 74, 253, 175, 176, 18, 246, 185, 226, 163, 205, 88, 135, 54, 131, 218, 2, 175, 252, 12, 43, 203, 90, 248, 126, 184, 51, 145, 25, 255, 196, 105, 203, 154, 191, 33, 83, 100, 4, 218, 110, 219, 3, 63, 163, 212, 247, 97, 245, 228, 143, 161, 28, 76, 251, 209, 220, 237, 2, 48, 132, 126, 253, 53, 180, 1, 113, 109, 95, 150, 36, 101, 42, 183, 89, 24, 165, 132, 185, 15, 239, 255, 14, 6, 159, 92, 77, 71, 117, 217, 157, 18, 62, 241, 181, 89, 134, 199, 62, 99, 89, 211, 191, 146, 24, 169, 174, 151, 104, 199, 174, 178, 237, 27, 117, 246, 71, 149, 122, 115, 145, 238, 209, 65, 187, 183, 252, 242, 101, 136, 28, 132, 161, 229, 150, 65, 148, 173, 7, 58, 152, 132, 206, 137, 218, 101, 219, 77, 20, 134, 188, 180, 13, 17, 208, 134, 85, 71, 52, 16, 201, 145, 136, 213, 85, 72, 46, 152, 247, 234, 85, 111, 232, 144, 208, 177, 237, 200, 145, 127, 4, 61, 14, 163, 10, 237, 241, 24, 181, 237, 101, 249, 100, 165, 133, 38, 5, 158, 154, 148, 247, 155, 180, 108, 251, 222, 16, 231, 70, 26, 143, 136, 111, 150, 26, 199, 224, 137, 134, 159, 208, 11, 17, 117, 234, 153, 8, 233, 222, 204, 227, 238, 221, 150, 41, 34, 5, 194, 183, 70, 231, 171, 209, 174, 66, 234, 77, 106, 164, 80, 103, 52, 202, 167, 38, 141, 46, 3, 67, 171, 82, 243, 17, 169, 174, 29, 190, 55, 53, 158, 22, 128, 58, 112, 158, 118, 202, 198, 224, 58, 45, 72, 162, 181, 105, 219, 47, 104, 25, 135, 53, 95, 222, 219, 204, 35, 243, 194, 57, 103, 116, 53, 218, 60, 43, 178, 152, 223, 231, 229, 101, 21, 177, 118, 217, 24, 229, 240, 8, 178, 90, 172, 61, 169, 52, 93, 30, 179, 221, 172, 61, 44, 86, 71, 138, 166, 235, 96, 228, 71, 63, 153, 180, 71, 161, 168, 168, 218, 227, 165, 54, 202, 232, 65, 138, 140, 126, 111, 71, 202, 71, 128, 211, 218, 42, 114, 48, 140, 142, 0, 51, 138, 7, 115, 240, 250, 62, 100, 103, 110, 176, 227, 248, 22, 204, 251, 231, 220, 206, 119, 176, 154, 1, 16, 102, 132, 167, 161, 238, 195, 44, 100, 77, 92, 58, 163, 253, 29, 229, 78, 161, 1, 192, 17, 165, 146, 53, 110, 209, 2, 187, 194, 183, 224, 55, 227, 105, 183, 44, 251, 24, 52, 89, 220, 243, 216, 47, 112, 119, 162, 43, 212, 225, 45, 217, 154, 24, 154, 191, 188, 132, 239, 173, 209, 252, 70, 145, 134, 119, 174, 82, 243, 156, 18, 208, 230, 52, 227, 75, 109, 107, 6, 203, 76, 203, 58, 120, 88, 169, 71, 120, 208, 145, 55, 185, 219, 116, 29, 82, 234, 115, 52, 37, 10, 232, 192, 73, 203, 90, 64, 26, 169, 204, 180, 206, 178, 206, 160, 209, 161, 25, 173, 70, 246, 75, 154, 35, 214, 74, 29, 99, 195, 208, 16, 78, 255, 201, 216, 8, 125, 243, 226, 214, 106, 235, 44, 150, 19, 81, 14, 181, 114, 75, 243, 237, 33, 106, 215, 175, 104, 194, 192, 250, 133, 165, 145, 8, 204, 185, 223, 182, 207, 111, 136, 124, 213, 197, 158, 188, 141, 200, 148, 80, 123, 39, 84, 221, 95, 15, 5, 253, 89, 184, 111, 11, 249, 193, 121, 241, 21, 52, 94, 87, 65, 245, 91, 88, 37, 79, 21, 122, 134, 82, 143, 114, 222, 39, 224, 156, 247, 30, 252, 236, 128, 33, 149, 215, 70, 152, 39, 96, 52, 26, 60, 10, 135, 165, 121, 84, 97, 125, 17, 76, 190, 173, 49, 66, 191, 172, 62, 2, 211, 208, 252, 96, 157, 7, 211, 60, 232, 89, 248, 171, 156, 46, 232, 152, 254, 31, 222, 160, 18, 131, 75, 72, 199, 228, 95, 131, 101, 143, 199, 14, 16, 57, 3, 132, 223, 193, 179, 116, 37, 109, 40, 117, 12, 124, 40, 175, 148, 135, 40, 162, 36, 105, 114, 104, 13, 110, 202, 211, 81, 1, 93, 191, 1, 168, 128, 235, 91, 26, 137, 151, 91, 252, 205, 44, 165, 62, 139, 216, 90, 30, 79, 145, 58, 252, 201, 84, 142, 152, 57, 97, 125, 182, 17, 132, 59, 15, 235, 12, 42, 167, 217, 8, 131, 143, 49, 155, 234, 152, 63, 224, 43, 80, 69, 17, 249, 178, 82, 243, 185, 192, 115, 84, 31, 114, 209, 18, 165, 54, 31, 87, 234, 126, 42, 205, 46, 173, 128, 130, 162, 185, 201, 178, 86, 62, 233, 251, 232, 79, 12, 186, 41, 232, 253, 186, 159, 82, 215, 220, 196, 221, 217, 92, 11, 176, 171, 27, 115, 206, 71, 169, 219, 113, 105, 105, 162, 108, 63, 20, 50, 185, 125, 133, 239, 112, 158, 7, 31, 183, 172, 229, 67, 204, 43, 171, 3, 170, 231, 1, 219, 78, 40, 215, 6, 35, 82, 9, 135, 242, 79, 97, 206, 165, 172, 215, 27, 124, 186, 194, 3, 229, 248, 15, 145, 240, 7, 131, 18, 56, 242, 12, 18, 86, 117, 155, 218, 21, 121, 205, 146, 8, 148, 199, 45, 40, 143, 17, 253, 156, 31, 123, 250, 51, 168, 3, 43, 177, 28, 208, 242, 125, 122, 254, 201, 85, 45, 200, 158, 125, 40, 114, 102, 141, 23, 211, 161, 186, 12, 169, 222, 40, 252, 254, 167, 202, 128, 208, 52, 120, 30, 166, 222, 223, 32, 83, 37, 70, 178, 135, 215, 27, 1, 115, 120, 152, 121, 143, 86, 179, 65, 208, 194, 99, 182, 125, 130, 36, 114, 42, 39, 31, 107, 224, 171, 56, 63, 199, 149, 168, 85, 65, 136, 41, 48, 91, 108, 155, 20, 201, 249, 213, 238, 89, 225, 225, 42, 242, 221, 217, 59, 184, 172, 2, 16, 174, 85, 96, 9, 192, 252, 102, 118, 35, 135, 200, 32, 168, 91, 158, 29, 192, 221, 159, 108, 203, 24, 103, 105, 159, 6, 163, 252, 234, 201, 67, 56, 242, 196, 88, 20, 208, 102, 145, 214, 44, 196, 163, 16, 14, 152, 241, 172, 227, 124, 28, 28, 130, 62, 33, 64, 140, 190, 87, 147, 135, 61, 244, 176, 246, 58, 183, 53, 70, 118, 172, 214, 18, 3, 167, 181, 92, 126, 124, 90, 115, 39, 38, 99, 132, 195, 70, 59, 80, 174, 253, 139, 19, 27, 209, 222, 53, 226, 194, 150, 241, 199, 146, 218, 83, 28, 211, 236, 75, 49, 101, 228, 166, 197, 229, 245, 60, 127, 29, 75, 227, 31, 126, 143, 250, 180, 158, 227, 16, 231, 114, 22, 240, 166, 135, 227, 247, 172, 155, 3, 237, 100, 186, 145, 148, 25, 84, 218, 208, 32, 32, 91, 195, 25, 201, 211, 88, 135, 34, 249, 163, 177, 107, 93, 24, 161, 133, 214, 94, 247, 151, 234, 152, 114, 229, 29, 235, 198, 180, 74, 198, 169, 156, 124, 179, 3, 204, 126, 180, 7, 233, 136, 109, 40, 35, 177, 206, 227, 9, 222, 124, 0, 80, 79, 5, 52, 243, 159, 222, 153, 231, 250, 102, 41, 121, 54, 59, 180, 116, 249, 102, 231, 61, 188, 41, 69, 140, 241, 218, 204, 119, 179, 97, 4, 74, 241, 48, 235, 130, 51, 59, 79, 137, 21, 253, 218, 196, 244, 192, 23, 194, 33, 205, 206, 154, 106, 67, 249, 217, 162, 249, 13, 142, 108, 9, 203, 246, 221, 230, 218, 236, 49, 210, 12, 118, 140, 14, 216, 246, 23, 120, 253, 119, 246, 225, 212, 82, 15, 59, 53, 0, 160, 253, 24, 60, 79, 123, 34, 39, 96, 29, 3, 217, 19, 196, 203, 100, 61, 237, 143, 159, 167, 8, 172, 1, 137, 91, 190, 223, 48, 6, 252, 132, 86, 203, 246, 227, 246, 252, 147, 3, 237, 20, 133, 70, 82, 166, 168, 192, 240, 13, 60, 206, 76, 52, 114, 198, 144, 196, 135, 222, 153, 141, 74, 202, 102, 30, 204, 218, 184, 236, 114, 51, 128, 188, 121, 55, 71, 137, 229, 6, 0, 40, 98, 218, 232, 155, 114, 86, 209, 190, 130, 52, 224, 211, 222, 27, 155, 228, 234, 169, 128, 102, 71, 152, 222, 1, 231, 253, 102, 73, 89, 53, 229, 239, 221, 146, 20, 158, 222, 237, 55, 102, 128, 249, 59, 94, 124, 232, 134, 83, 211, 218, 63, 67, 27, 210, 228, 134, 223, 35, 29, 218, 166, 209, 18, 131, 112, 48, 70, 61, 12, 109, 40, 164, 132, 105, 154, 64, 163, 60, 208, 251, 179, 171, 195, 105, 42, 226, 198, 128, 106, 33, 113, 11, 40, 186, 30, 64, 3, 183, 49, 8, 67, 182, 206, 54, 194, 77, 227, 155, 81, 26, 198, 18, 181, 117, 69, 240, 240, 227, 68, 116, 74, 13, 255, 93, 213, 79, 228, 45, 52, 169, 203, 176, 25, 180, 234, 68, 132, 248, 241, 122, 94, 79, 251, 227, 136, 196, 36, 148, 106, 15, 39, 167, 62, 181, 103, 249, 102, 187, 79, 161, 7, 95, 8, 37, 185, 43, 157, 149, 143, 78, 177, 85, 247, 236, 25, 150, 85, 28, 38, 82, 246, 114, 230, 149, 209, 129, 141, 3, 159, 230, 65, 103, 60, 198, 221, 33, 23, 142, 255, 237, 87, 234, 100, 224, 75, 75, 213, 67, 63, 31, 184, 235, 181, 189, 165, 212, 27, 92, 194, 172, 53, 101, 212, 240, 99, 74, 253, 155, 128, 31, 161, 186, 244, 92, 224, 22, 91, 221, 8, 160, 134, 127, 149, 203, 176, 127, 133, 187, 67, 46, 116, 148, 215, 42, 53, 55, 240, 221, 139, 189, 15, 57, 143, 32, 34, 50, 54, 223, 141, 4, 60, 200, 54, 242, 163, 186, 155, 58, 100, 180, 48, 91, 96, 72, 227, 229, 24, 253, 189, 105, 31, 198, 70, 188, 226, 123, 48, 150, 226, 142, 141, 83, 198, 166, 188, 11, 255, 228, 203, 57, 130, 117, 226, 96, 159, 0, 249, 238, 195, 81, 224, 217, 175, 251, 239, 203, 60, 151, 224, 216, 39, 54, 162, 60, 30, 240, 160, 185, 196, 248, 151, 3, 55, 108, 208, 72, 77, 85, 138, 251, 169, 89, 55, 178, 48, 53, 59, 166, 97, 211, 15, 23, 177, 11, 24, 76, 123, 149, 251, 245, 166, 235, 144, 82, 31, 231, 41, 63, 245, 127, 115, 119, 255, 186, 208, 159, 12, 81, 47, 18, 16, 237, 233, 25, 184, 90, 223, 215, 134, 253, 42, 207, 99, 175, 204, 157, 65, 24, 178, 45, 185, 13, 90, 130, 45, 220, 175, 7, 93, 124, 164, 133, 230, 198, 61, 139, 159, 152, 147, 136, 89, 80, 35, 49, 66, 204, 75, 62, 139, 33, 209, 233, 179, 10, 196, 209, 102, 205, 20, 39, 187, 218, 60, 156, 140, 188, 121, 55, 71, 229, 229, 102, 94, 102, 254, 39, 126, 228, 237, 96, 100, 204, 248, 234, 25, 129, 155, 51, 240, 206, 106, 0, 40, 175, 92, 173, 236, 104, 179, 218, 35, 255, 112, 121, 49, 103, 2, 123, 12, 85, 121, 56, 78, 164, 27, 248, 242, 89, 7, 87, 185, 55, 113, 70, 159, 74, 118, 64, 142, 222, 43, 72, 151, 113, 124, 173, 154, 61, 26, 248, 30, 33, 218, 183, 22, 157, 239, 116, 238, 233, 148, 249, 66, 26, 191, 72, 44, 200, 51, 114, 22, 22, 44, 5, 238, 53, 142, 8, 55, 59, 58, 251, 130, 166, 110, 11, 199, 160, 62, 213, 191, 143, 145, 217, 214, 164, 215, 13, 63, 110, 145, 167, 217, 22, 5, 248, 23, 225, 87, 54, 14, 111, 155, 235, 105, 127, 176, 159, 131, 142, 179, 135, 40, 62, 223, 168, 255, 225, 125, 55, 136, 59, 158, 249, 248, 106, 89, 76, 138, 196, 175, 92, 3, 128, 202, 106, 205, 97, 179, 32, 74, 86, 129, 93, 176, 104, 196, 192, 103, 77, 144, 41, 218, 105, 190, 163, 21, 184, 163, 109, 151, 176, 11, 56, 250, 77, 253, 190, 123, 141, 157, 215, 199, 91, 101, 102, 94, 151, 149, 250, 58, 79, 245, 164, 239, 162, 68, 5, 13, 61, 127, 41, 174, 26, 16, 192, 98, 158, 54, 251, 36, 109, 214, 190, 88, 213, 54, 212, 51, 191, 202, 147, 176, 232, 243, 220, 157, 209, 133, 147, 0, 152, 113, 107, 154, 172, 243, 31, 210, 99, 162, 38, 124, 68, 119, 187, 23, 98, 142, 172, 210, 252, 108, 170, 45, 1, 77, 254, 155, 192, 94, 220, 134, 147, 17, 55, 242, 216, 215, 189, 130, 93, 226, 52, 37, 210, 104, 198, 7, 81, 230, 185, 120, 237, 109, 33, 43, 142, 164, 65, 78, 104, 134, 53, 232, 214, 115, 104, 67, 150, 178, 35, 194, 36, 122, 122, 199, 180, 126, 180, 68, 129, 157, 225, 15, 242, 124, 205, 126, 79, 153, 122, 207, 121, 117, 135, 11, 37, 63, 180, 159, 226, 72, 169, 205, 221, 221, 145, 171, 248, 84, 140, 160, 51, 95, 204, 78, 1, 57, 97, 111, 180, 172, 153, 80, 72, 69, 19, 157, 92, 57, 203, 142, 78, 82, 184, 41, 47, 161, 205, 142, 220, 56, 31, 205, 165, 179, 190, 149, 15, 0, 6, 149, 250, 25, 174, 50, 33, 213, 245, 204, 67, 5, 178, 21, 106, 196, 136, 207, 186, 144, 106, 212, 228, 10, 217, 195, 220, 119, 242, 47, 115, 119, 125, 46, 12, 88, 232, 152, 140, 70, 246, 62, 205, 145, 219, 138, 6, 55, 52, 152, 153, 79, 234, 229, 243, 40, 80, 52, 210, 148, 129, 64, 110, 68, 243, 71, 0, 224, 161, 78, 252, 226, 175, 197, 113, 65, 101, 250, 88, 240, 142, 202, 235, 236, 127, 9, 220, 249, 108, 99, 74, 97, 60, 233, 211, 36, 250, 238, 109, 66, 25, 95, 231, 58, 244, 126, 118, 228, 231, 252, 0, 163, 88, 43, 226, 42, 249, 89, 63, 244, 223, 149, 121, 46, 180, 172, 183, 118, 133, 238, 71, 224, 83, 253, 3, 59, 45, 107, 234, 243, 101, 100, 196, 197, 189, 198, 178, 190, 162, 1, 130, 96, 239, 104, 160, 14, 172, 218, 131, 63, 196, 225, 105, 24, 220, 106, 89, 75, 1, 65, 103, 8, 95, 224, 45, 46, 169, 127, 84, 255, 122, 190, 232, 219, 99, 141, 67, 27, 148, 54, 160, 226, 126, 150, 23, 51, 61, 66, 15, 219, 233, 36, 207, 76, 227, 232, 249, 56, 6, 117, 86, 232, 91, 155, 153, 28, 176, 172, 45, 88, 14, 120, 156, 191, 57, 115, 180, 204, 82, 48, 231, 213, 97, 23, 87, 181, 160, 202, 217, 205, 70, 92, 18, 104, 3, 32, 87, 93, 82, 120, 119, 183, 100, 92, 156, 88, 127, 67, 205, 156, 77, 157, 254, 178, 113, 139, 93, 113, 245, 144, 153, 247, 216, 99, 128, 116, 123, 91, 104, 233, 33, 25, 171, 216, 124, 135, 94, 224, 24, 78, 18, 209, 209, 67, 218, 121, 188, 30, 166, 115, 149, 209, 248, 54, 197, 49, 14, 101, 151, 57, 91, 166, 74, 173, 193, 2, 68, 56, 204, 111, 86, 82, 53, 106, 168, 211, 119, 65, 41, 96, 18, 225, 15, 163, 81, 57, 53, 52, 242, 78, 107, 251, 30, 105, 101, 31, 3, 63, 90, 136, 128, 106, 209, 123, 231, 63, 130, 13, 167, 166, 122, 56, 190, 206, 154, 57, 73, 241, 137, 84, 199, 251, 233, 217, 206, 199, 254, 41, 172, 242, 190, 142, 57, 22, 235, 3, 128, 103, 193, 182, 38, 111, 66, 188, 240, 166, 202, 183, 126, 213, 191, 159, 84, 243, 27, 151, 44, 231, 62, 227, 132, 39, 246, 158, 132, 142, 132, 238, 154, 48, 45, 0, 175, 231, 21, 183, 63, 104, 223, 80, 152, 22, 106, 38, 119, 185, 214, 226, 18, 159, 206, 181, 205, 9, 223, 47, 234, 85, 1, 13, 192, 66, 3, 12, 100, 144, 214, 1, 239, 253, 25, 165, 78, 27, 47, 213, 148, 59, 161, 14, 139, 108, 52, 163, 18, 84, 214, 239, 150, 178, 12, 18, 227, 223, 250, 16, 242, 185, 41, 100, 168, 18, 140, 67, 69, 166, 205, 254, 136, 201, 225, 71, 112, 97, 74, 139, 108, 101, 8, 35, 209, 89, 39, 226, 25, 208, 204, 240, 110, 152, 231, 96, 208, 250, 56, 195, 175, 245, 241, 193, 229, 77, 110, 4, 112, 25, 12, 110, 145, 217, 25, 196, 163, 203, 112, 204, 211, 24, 24, 245, 127, 48, 8, 67, 182, 217, 165, 206, 192, 163, 194, 64, 172, 79, 83, 201, 226, 212, 85, 120, 174, 160, 133, 8, 87, 237, 239, 88, 188, 159, 105, 180, 225, 212, 34, 7, 54, 229, 105, 105, 33, 13, 253, 202, 34, 26, 56, 143, 111, 232, 1, 117, 252, 1, 99, 67, 32, 133, 217, 133, 242, 190, 142, 212, 30, 181, 17, 205, 66, 91, 238, 5, 85, 49, 50, 38, 211, 242, 67, 71, 218, 26, 154, 236, 92, 99, 204, 18, 167, 221, 220, 111, 170, 127, 29, 104, 108, 6, 221, 206, 181, 48, 43, 62, 134, 50, 215, 127, 154, 72, 44, 193, 97, 182, 63, 164, 153, 220, 229, 90, 139, 75, 124, 18, 154, 112, 29, 225, 206, 219, 11, 12, 0, 102, 125, 31, 29, 32, 35, 36, 155, 90, 153, 71, 205, 228, 239, 198, 46, 232, 107, 190, 98, 250, 215, 231, 131, 2, 26, 186, 1, 173, 82, 89, 212, 201, 63, 17, 50, 161, 142, 223, 145, 135, 65, 207, 146, 7, 170, 144, 76, 59, 176, 231, 163, 4, 129, 215, 35, 233, 252, 156, 225, 215, 115, 182, 125, 6, 71, 192, 218, 255, 148, 152, 30, 77, 66, 36, 34, 0, 240, 63, 19, 4, 32, 133, 243, 180, 159, 14, 220, 174, 237, 52, 235, 20, 73, 53, 63, 254, 173, 112, 152, 60, 110, 172, 63, 210, 160, 206, 35, 234, 242, 221, 147, 52, 72, 139, 62, 192, 219, 138, 53, 71, 111, 112, 130, 149, 104, 101, 59, 75, 5, 8, 131, 113, 163, 79, 216, 153, 128, 196, 248, 174, 42, 158, 88, 154, 138, 88, 99, 191, 234, 61, 85, 240, 78, 227, 113, 16, 235, 178, 132, 174, 73, 123, 177, 223, 102, 65, 45, 203, 15, 166, 44, 165, 150, 187, 127, 54, 164, 189, 58, 240, 116, 85, 39, 31, 52, 166, 93, 103, 197, 183, 191, 35, 72, 20, 213, 133, 61, 159, 14, 220, 98, 235, 53, 4, 10, 12, 0, 178, 102, 241, 44, 26, 166, 119, 58, 83, 151, 172, 49, 170, 8, 183, 2, 51, 225, 42, 248, 228, 228, 161, 173, 141, 29, 154, 133, 254, 186, 242, 65, 15, 120, 210, 128, 2, 245, 79, 125, 18, 166, 5, 147, 64, 179, 177, 121, 242, 52, 116, 196, 125, 56, 58, 79, 200, 117, 93, 175, 6, 149, 250, 38, 231, 125, 226, 183, 152, 219, 221, 248, 122, 91, 224, 119, 24, 199, 238, 202, 173, 67, 163, 64, 157, 224, 29, 221, 240, 52, 226, 63, 198, 55, 195, 61, 137, 1, 128, 214, 233, 29, 251, 9, 10, 131, 225, 130, 214, 65, 151, 219, 136, 74, 252, 116, 162, 245, 209, 235, 205, 205, 81, 8, 66, 107, 194, 233, 167, 116, 116, 94, 69, 236, 244, 63, 1, 248, 30, 91, 205, 184, 43, 126, 210, 244, 171, 199, 135, 238, 28, 64, 59, 211, 8, 184, 211, 4, 239, 186, 127, 31, 184, 251, 215, 182, 16, 123, 64, 142, 178, 236, 45, 192, 29, 248, 245, 221, 56, 202, 68, 137, 163, 114, 4, 106, 24, 0, 56, 247, 152, 67, 21, 54, 112, 11, 230, 173, 188, 13, 171, 60, 249, 38, 195, 29, 166, 87, 133, 62, 78, 118, 90, 96, 232, 27, 159, 55, 205, 188, 78, 186, 153, 157, 140, 13, 164, 245, 204, 190, 49, 8, 24, 133, 121, 8, 102, 37, 228, 209, 183, 163, 105, 223, 29, 208, 121, 106, 42, 106, 248, 56, 68, 218, 128, 189, 127, 235, 57, 228, 81, 2, 1, 234, 116, 160, 246, 214, 6, 121, 51, 111, 215, 217, 141, 26, 155, 238, 46, 255, 177, 254, 190, 136, 125, 41, 142, 206, 56, 115, 247, 118, 228, 161, 95, 36, 235, 228, 246, 93, 228, 164, 116, 179, 246, 65, 55, 249, 247, 237, 32, 106, 252, 231, 200, 62, 130, 222, 40, 240, 155, 250, 131, 192, 94, 210, 134, 129, 14, 120, 127, 63, 158, 203, 169, 132, 119, 241, 177, 242, 190, 193, 72, 232, 81, 30, 103, 55, 102, 255, 201, 127, 19, 205, 195, 151, 112, 225, 212, 193, 213, 198, 157, 3, 253, 173, 250, 103, 104, 65, 61, 142, 50, 120, 87, 224, 71, 237, 204, 240, 175, 7, 110, 177, 245, 18, 2, 69, 6, 0, 52, 250, 190, 25, 230, 61, 154, 121, 31, 236, 55, 194, 224, 143, 127, 38, 161, 227, 183, 94, 135, 125, 66, 104, 149, 82, 239, 170, 79, 240, 129, 149, 212, 249, 106, 198, 130, 172, 155, 169, 41, 6, 205, 37, 133, 152, 219, 39, 239, 127, 213, 177, 214, 248, 131, 52, 248, 235, 84, 219, 38, 89, 214, 45, 36, 24, 106, 104, 173, 147, 34, 225, 215, 223, 142, 181, 154, 121, 53, 38, 163, 86, 214, 24, 216, 160, 111, 237, 14, 66, 167, 163, 117, 234, 244, 199, 52, 1, 174, 72, 164, 211, 57, 7, 41, 189, 252, 100, 96, 47, 104, 195, 247, 133, 42, 171, 165, 197, 30, 129, 208, 233, 243, 219, 30, 238, 229, 62, 111, 41, 245, 207, 109, 47, 117, 225, 35, 100, 71, 3, 189, 38, 240, 179, 95, 12, 236, 229, 108, 135, 148, 122, 136, 70, 156, 1, 145, 150, 79, 61, 29, 184, 9, 151, 35, 155, 3, 119, 61, 182, 57, 238, 31, 128, 105, 204, 167, 159, 210, 28, 181, 90, 113, 49, 204, 203, 110, 61, 247, 197, 92, 25, 170, 127, 63, 183, 244, 92, 160, 212, 95, 98, 224, 169, 209, 165, 71, 49, 233, 161, 182, 80, 168, 223, 16, 224, 187, 45, 105, 233, 63, 122, 39, 124, 229, 249, 54, 118, 95, 39, 95, 194, 226, 203, 111, 25, 59, 199, 139, 239, 198, 54, 243, 30, 189, 211, 246, 89, 116, 6, 225, 61, 217, 101, 255, 136, 200, 207, 79, 174, 39, 102, 104, 180, 15, 154, 83, 13, 151, 7, 65, 14, 237, 119, 14, 168, 226, 93, 184, 94, 166, 205, 111, 25, 141, 191, 142, 81, 214, 111, 166, 199, 201, 98, 111, 26, 87, 189, 6, 247, 204, 227, 164, 6, 94, 251, 84, 221, 78, 116, 48, 213, 174, 96, 109, 146, 93, 251, 163, 33, 111, 7, 54, 251, 230, 206, 87, 153, 201, 203, 64, 53, 215, 209, 70, 236, 58, 71, 114, 240, 183, 151, 168, 167, 238, 169, 4, 63, 255, 84, 19, 234, 61, 13, 96, 166, 165, 158, 242, 23, 46, 23, 230, 69, 79, 157, 219, 245, 31, 78, 139, 137, 65, 122, 221, 8, 243, 40, 227, 54, 47, 95, 218, 179, 177, 12, 191, 188, 113, 121, 61, 239, 204, 247, 207, 155, 198, 94, 8, 95, 64, 3, 80, 241, 255, 78, 199, 161, 132, 221, 215, 88, 223, 108, 5, 175, 105, 35, 212, 16, 150, 222, 146, 233, 178, 82, 55, 240, 16, 214, 179, 220, 93, 189, 235, 118, 236, 242, 196, 204, 224, 78, 206, 249, 130, 182, 137, 139, 191, 169, 205, 133, 89, 35, 102, 163, 154, 122, 142, 36, 141, 132, 102, 167, 181, 73, 239, 107, 198, 43, 177, 158, 114, 130, 229, 240, 244, 125, 142, 19, 199, 226, 48, 43, 110, 4, 175, 206, 227, 10, 216, 106, 118, 162, 99, 74, 245, 229, 128, 47, 41, 120, 148, 163, 226, 119, 253, 230, 184, 51, 111, 124, 243, 75, 237, 157, 241, 206, 38, 208, 15, 204, 8, 34, 193, 118, 112, 152, 57, 11, 58, 142, 41, 21, 90, 74, 56, 186, 21, 249, 60, 129, 93, 190, 151, 143, 176, 13, 144, 52, 63, 94, 242, 82, 65, 49, 221, 27, 13, 223, 25, 27, 112, 66, 117, 250, 10, 82, 253, 135, 190, 12, 26, 226, 63, 244, 52, 159, 222, 155, 233, 90, 89, 13, 5, 22, 103, 215, 34, 80, 96, 0, 208, 185, 188, 96, 13, 52, 164, 218, 27, 89, 159, 38, 29, 25, 114, 212, 160, 65, 184, 5, 218, 26, 105, 224, 91, 181, 237, 6, 227, 162, 18, 82, 135, 230, 255, 19, 151, 178, 233, 194, 48, 233, 191, 151, 229, 209, 189, 241, 91, 5, 146, 230, 110, 158, 43, 16, 145, 71, 65, 71, 11, 181, 167, 54, 152, 156, 115, 27, 5, 216, 129, 1, 167, 211, 237, 182, 67, 47, 253, 108, 219, 90, 210, 178, 140, 173, 183, 59, 251, 14, 62, 23, 176, 92, 176, 221, 183, 99, 99, 160, 215, 248, 58, 202, 233, 191, 12, 210, 67, 138, 218, 149, 251, 252, 112, 69, 159, 152, 249, 110, 90, 206, 110, 247, 164, 109, 96, 139, 183, 250, 252, 26, 184, 1, 13, 27, 243, 52, 186, 1, 71, 18, 171, 209, 60, 104, 76, 39, 212, 218, 84, 234, 91, 52, 5, 9, 232, 202, 83, 253, 7, 121, 135, 13, 255, 187, 130, 65, 225, 227, 129, 31, 181, 119, 221, 241, 87, 193, 65, 154, 196, 150, 134, 64, 87, 15, 0, 176, 217, 230, 191, 240, 12, 92, 186, 155, 187, 67, 46, 168, 35, 177, 70, 218, 8, 124, 105, 91, 222, 142, 86, 224, 174, 215, 54, 155, 157, 191, 38, 89, 99, 207, 212, 43, 209, 228, 142, 117, 243, 27, 185, 239, 236, 17, 238, 238, 101, 215, 192, 191, 205, 151, 122, 154, 163, 140, 31, 200, 23, 39, 62, 52, 102, 128, 218, 62, 0, 210, 126, 219, 243, 230, 178, 245, 127, 146, 55, 245, 149, 120, 14, 249, 222, 140, 183, 255, 96, 198, 221, 94, 74, 177, 93, 27, 117, 192, 86, 123, 191, 7, 190, 249, 223, 121, 156, 201, 15, 73, 242, 201, 89, 169, 197, 235, 18, 132, 77, 111, 88, 115, 127, 130, 115, 152, 135, 91, 209, 184, 150, 99, 161, 187, 39, 72, 11, 118, 226, 149, 126, 89, 23, 30, 179, 237, 181, 141, 246, 230, 75, 202, 34, 233, 130, 174, 140, 93, 255, 148, 219, 56, 106, 41, 245, 0, 127, 119, 126, 27, 119, 139, 171, 219, 17, 232, 234, 1, 0, 26, 192, 111, 5, 77, 31, 65, 121, 61, 93, 118, 50, 51, 14, 212, 33, 165, 126, 33, 152, 253, 80, 168, 131, 24, 168, 214, 123, 57, 137, 158, 22, 250, 87, 40, 62, 19, 42, 167, 5, 64, 7, 51, 5, 102, 186, 46, 35, 205, 14, 204, 126, 135, 135, 185, 198, 239, 28, 184, 119, 15, 184, 208, 225, 62, 207, 147, 121, 250, 86, 238, 54, 93, 24, 132, 173, 9, 124, 129, 134, 90, 202, 53, 149, 193, 203, 220, 182, 5, 74, 189, 196, 203, 163, 250, 24, 6, 169, 191, 28, 48, 58, 210, 66, 199, 120, 33, 112, 151, 179, 161, 160, 31, 113, 186, 112, 237, 80, 137, 51, 199, 87, 151, 94, 212, 59, 224, 149, 248, 131, 2, 55, 92, 88, 222, 57, 74, 79, 169, 1, 128, 185, 233, 173, 5, 217, 230, 191, 220, 77, 179, 172, 87, 247, 178, 37, 59, 44, 140, 168, 35, 15, 134, 83, 212, 115, 110, 76, 42, 206, 42, 21, 26, 212, 93, 185, 170, 127, 253, 251, 209, 233, 24, 168, 151, 52, 173, 216, 202, 185, 157, 56, 10, 170, 167, 65, 236, 229, 16, 232, 234, 1, 0, 93, 130, 131, 139, 63, 90, 65, 22, 169, 249, 27, 252, 102, 224, 214, 108, 232, 44, 209, 83, 134, 102, 220, 179, 239, 210, 66, 116, 196, 138, 214, 255, 78, 46, 168, 184, 22, 0, 13, 234, 111, 131, 151, 119, 247, 127, 250, 46, 91, 4, 220, 112, 189, 121, 70, 187, 103, 53, 0, 111, 42, 117, 136, 119, 184, 43, 239, 182, 237, 248, 127, 227, 194, 230, 183, 205, 212, 237, 4, 84, 237, 25, 120, 82, 123, 98, 144, 217, 10, 248, 171, 71, 231, 177, 1, 135, 122, 72, 123, 87, 133, 245, 210, 185, 54, 23, 29, 137, 49, 190, 222, 138, 117, 120, 239, 196, 0, 205, 254, 219, 154, 1, 92, 27, 241, 181, 118, 244, 2, 22, 218, 244, 182, 156, 229, 143, 210, 16, 255, 71, 59, 168, 127, 63, 201, 197, 44, 122, 144, 180, 36, 220, 175, 183, 92, 24, 0, 253, 53, 207, 0, 221, 240, 89, 205, 95, 29, 247, 22, 18, 209, 169, 197, 233, 152, 95, 229, 111, 14, 135, 218, 96, 254, 86, 92, 221, 133, 64, 87, 15, 0, 8, 42, 156, 135, 254, 40, 135, 140, 254, 103, 121, 156, 254, 166, 177, 173, 9, 128, 125, 21, 26, 192, 113, 62, 251, 39, 53, 233, 130, 47, 241, 184, 245, 187, 110, 192, 127, 200, 147, 130, 48, 160, 82, 90, 0, 191, 243, 126, 20, 183, 188, 93, 70, 62, 31, 134, 105, 192, 176, 239, 6, 55, 221, 55, 189, 205, 28, 0, 237, 193, 159, 179, 116, 232, 124, 116, 144, 225, 202, 108, 222, 12, 99, 39, 103, 56, 245, 0, 242, 186, 65, 199, 0, 246, 153, 48, 15, 163, 243, 255, 28, 15, 59, 235, 55, 185, 187, 188, 11, 235, 237, 143, 197, 115, 153, 254, 213, 248, 119, 5, 222, 96, 223, 1, 228, 121, 249, 119, 231, 254, 46, 151, 21, 127, 23, 230, 134, 205, 175, 126, 103, 175, 45, 1, 76, 221, 19, 14, 151, 217, 141, 50, 134, 198, 253, 57, 30, 254, 224, 125, 73, 23, 28, 45, 65, 89, 195, 122, 203, 211, 60, 206, 129, 111, 115, 119, 239, 184, 232, 210, 35, 12, 128, 62, 198, 83, 124, 45, 45, 253, 108, 132, 217, 148, 195, 172, 227, 60, 250, 199, 69, 223, 28, 133, 76, 171, 163, 244, 39, 77, 241, 131, 244, 254, 201, 249, 21, 146, 19, 126, 220, 2, 69, 30, 29, 80, 167, 179, 142, 35, 39, 17, 255, 203, 76, 73, 49, 15, 223, 145, 175, 75, 229, 55, 164, 20, 205, 123, 203, 56, 138, 120, 176, 144, 26, 214, 228, 227, 231, 173, 253, 164, 63, 3, 138, 161, 26, 143, 99, 117, 232, 24, 32, 149, 51, 250, 187, 213, 152, 12, 146, 119, 66, 254, 91, 133, 48, 79, 43, 219, 241, 233, 41, 246, 141, 211, 228, 97, 180, 67, 127, 246, 164, 145, 243, 199, 64, 250, 104, 192, 97, 65, 235, 212, 90, 32, 223, 218, 72, 227, 31, 247, 30, 255, 255, 30, 250, 115, 171, 140, 120, 182, 255, 172, 200, 79, 2, 61, 171, 253, 79, 116, 243, 8, 92, 61, 199, 192, 80, 255, 54, 235, 185, 40, 110, 127, 147, 207, 9, 226, 64, 207, 225, 111, 98, 208, 249, 118, 217, 79, 174, 249, 39, 77, 197, 143, 94, 251, 60, 211, 158, 188, 109, 174, 231, 251, 167, 165, 161, 31, 222, 179, 153, 100, 84, 134, 48, 11, 152, 112, 90, 97, 89, 27, 48, 159, 215, 70, 153, 126, 146, 140, 118, 208, 123, 113, 22, 71, 148, 150, 110, 247, 67, 21, 125, 22, 205, 123, 67, 169, 63, 229, 107, 178, 165, 180, 0, 73, 201, 215, 102, 123, 122, 48, 146, 62, 101, 101, 157, 251, 31, 226, 144, 215, 83, 81, 133, 157, 102, 24, 224, 115, 115, 12, 175, 152, 252, 31, 135, 26, 220, 251, 207, 156, 152, 136, 69, 189, 41, 61, 164, 91, 50, 201, 214, 118, 68, 155, 111, 139, 250, 64, 233, 30, 42, 247, 206, 178, 6, 233, 226, 25, 225, 172, 223, 191, 26, 158, 234, 176, 175, 65, 98, 97, 211, 28, 212, 160, 47, 55, 102, 190, 43, 86, 166, 197, 115, 222, 99, 153, 4, 66, 239, 227, 97, 207, 224, 63, 209, 123, 242, 186, 216, 66, 248, 241, 188, 147, 107, 50, 202, 99, 221, 212, 170, 91, 64, 44, 127, 250, 147, 166, 67, 108, 105, 140, 174, 133, 238, 237, 165, 159, 216, 204, 246, 217, 139, 212, 1, 0, 46, 243, 199, 50, 24, 163, 138, 42, 5, 227, 153, 234, 88, 236, 222, 118, 119, 151, 217, 200, 133, 163, 190, 134, 123, 216, 7, 182, 132, 125, 139, 184, 47, 27, 121, 63, 71, 187, 202, 210, 9, 107, 178, 88, 187, 253, 36, 15, 120, 250, 83, 220, 157, 238, 106, 224, 120, 21, 66, 45, 130, 217, 10, 147, 161, 17, 113, 246, 187, 225, 143, 136, 174, 134, 230, 223, 106, 33, 78, 109, 196, 191, 131, 117, 170, 54, 65, 96, 140, 188, 188, 142, 7, 253, 175, 68, 74, 39, 235, 228, 255, 46, 252, 1, 213, 60, 196, 169, 108, 51, 94, 56, 111, 40, 4, 17, 233, 152, 251, 249, 112, 184, 42, 220, 179, 140, 141, 144, 51, 34, 151, 181, 104, 191, 204, 49, 86, 70, 104, 210, 185, 164, 208, 29, 0, 200, 223, 23, 121, 218, 143, 63, 158, 167, 60, 97, 51, 108, 232, 88, 224, 60, 176, 27, 250, 5, 206, 179, 184, 107, 134, 113, 67, 228, 204, 125, 197, 185, 197, 199, 196, 146, 98, 33, 252, 76, 142, 147, 107, 73, 31, 151, 211, 112, 86, 64, 209, 241, 90, 48, 169, 237, 58, 143, 91, 222, 133, 246, 224, 163, 156, 203, 238, 71, 185, 187, 156, 203, 207, 151, 159, 55, 148, 129, 57, 229, 56, 74, 108, 66, 192, 234, 69, 24, 80, 8, 168, 69, 249, 49, 24, 58, 154, 251, 171, 48, 161, 117, 186, 243, 232, 4, 102, 60, 9, 255, 190, 34, 228, 155, 38, 222, 139, 97, 150, 192, 208, 236, 23, 245, 192, 49, 131, 120, 254, 11, 26, 233, 202, 85, 141, 224, 219, 93, 68, 13, 156, 115, 27, 169, 123, 245, 180, 151, 184, 35, 120, 98, 199, 187, 197, 21, 47, 221, 149, 114, 73, 141, 32, 80, 25, 2, 180, 4, 128, 202, 127, 32, 158, 225, 222, 79, 90, 86, 227, 161, 248, 247, 213, 191, 193, 146, 137, 189, 162, 205, 150, 166, 8, 83, 241, 199, 104, 21, 92, 231, 141, 58, 127, 90, 169, 203, 206, 8, 167, 205, 95, 183, 208, 127, 65, 188, 115, 165, 238, 35, 246, 43, 8, 1, 236, 254, 14, 173, 87, 162, 36, 218, 35, 247, 94, 65, 16, 72, 86, 5, 1, 65, 224, 10, 66, 32, 98, 15, 0, 53, 122, 26, 181, 54, 119, 26, 142, 183, 221, 205, 185, 90, 26, 246, 60, 92, 73, 26, 160, 209, 160, 157, 47, 241, 36, 123, 0, 42, 193, 185, 151, 153, 28, 142, 220, 40, 24, 220, 215, 222, 203, 121, 147, 180, 11, 2, 130, 128, 32, 160, 35, 16, 191, 25, 213, 239, 38, 135, 55, 233, 225, 59, 101, 231, 255, 67, 225, 252, 127, 75, 249, 229, 8, 104, 0, 56, 95, 63, 143, 254, 115, 240, 133, 78, 229, 175, 19, 114, 144, 171, 1, 24, 58, 217, 84, 149, 33, 126, 157, 218, 182, 213, 9, 136, 162, 101, 12, 178, 63, 79, 161, 35, 115, 189, 185, 196, 17, 157, 59, 241, 21, 4, 4, 1, 65, 160, 187, 17, 240, 58, 175, 101, 120, 58, 166, 187, 83, 219, 125, 169, 75, 215, 236, 0, 217, 66, 84, 253, 73, 148, 238, 67, 15, 41, 2, 54, 116, 108, 106, 85, 87, 38, 78, 18, 37, 8, 8, 2, 130, 128, 32, 32, 8, 196, 32, 80, 223, 0, 96, 255, 142, 40, 145, 125, 167, 22, 192, 70, 176, 123, 162, 50, 42, 126, 130, 128, 32, 32, 8, 8, 2, 130, 64, 55, 35, 128, 221, 204, 83, 27, 181, 36, 112, 52, 216, 159, 169, 241, 239, 201, 83, 0, 90, 250, 197, 42, 8, 8, 2, 130, 128, 32, 32, 8, 244, 13, 2, 208, 96, 47, 67, 102, 112, 9, 104, 165, 116, 94, 78, 73, 85, 138, 167, 48, 19, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 16, 4, 4, 1, 65, 64, 16, 40, 134, 128, 149, 41, 154, 109, 91, 182, 82, 63, 130, 176, 99, 94, 248, 17, 203, 178, 134, 50, 197, 149, 64, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 208, 163, 8, 216, 246, 148, 115, 118, 152, 70, 151, 245, 104, 110, 36, 217, 130, 128, 32, 32, 8, 8, 2, 130, 128, 32, 144, 21, 1, 116, 255, 243, 198, 217, 24, 224, 56, 92, 106, 82, 214, 248, 189, 26, 238, 176, 109, 111, 67, 70, 79, 184, 230, 240, 182, 94, 205, 71, 71, 210, 13, 77, 209, 17, 183, 140, 156, 112, 203, 202, 177, 141, 29, 145, 59, 129, 66, 144, 221, 85, 48, 90, 25, 241, 203, 10, 61, 7, 95, 152, 192, 164, 85, 34, 122, 47, 203, 91, 179, 171, 242, 51, 100, 219, 27, 128, 125, 19, 102, 135, 109, 159, 129, 81, 217, 52, 154, 149, 32, 163, 212, 49, 219, 254, 2, 100, 123, 109, 195, 49, 60, 107, 144, 143, 58, 5, 57, 158, 12, 122, 30, 121, 170, 162, 228, 103, 99, 3, 249, 212, 210, 39, 211, 254, 29, 217, 152, 73, 168, 110, 67, 96, 74, 214, 4, 65, 229, 79, 133, 240, 70, 132, 127, 211, 141, 51, 15, 143, 193, 111, 43, 181, 244, 253, 89, 121, 244, 98, 184, 113, 165, 174, 67, 186, 231, 186, 105, 63, 123, 83, 47, 230, 161, 147, 105, 158, 225, 10, 155, 235, 22, 172, 51, 43, 58, 41, 187, 163, 178, 168, 97, 84, 234, 53, 200, 92, 19, 47, 119, 244, 250, 248, 119, 189, 241, 6, 35, 124, 173, 252, 95, 234, 170, 252, 140, 32, 109, 11, 148, 106, 184, 72, 98, 145, 82, 57, 29, 176, 99, 113, 253, 234, 253, 29, 85, 234, 189, 243, 219, 109, 195, 212, 186, 228, 91, 224, 236, 181, 63, 36, 226, 204, 173, 245, 230, 202, 224, 110, 165, 119, 18, 23, 230, 24, 177, 196, 163, 39, 16, 200, 53, 131, 199, 32, 224, 173, 11, 74, 221, 17, 228, 108, 201, 109, 182, 61, 188, 41, 112, 247, 159, 205, 223, 244, 208, 127, 57, 171, 39, 71, 23, 235, 97, 219, 117, 92, 223, 86, 234, 25, 12, 129, 19, 58, 127, 74, 242, 37, 173, 225, 238, 186, 44, 100, 74, 144, 148, 255, 120, 152, 58, 132, 141, 61, 193, 117, 106, 162, 229, 199, 127, 0, 121, 83, 26, 129, 92, 3, 0, 146, 118, 149, 101, 109, 59, 170, 212, 214, 64, 242, 53, 79, 216, 182, 236, 7, 8, 240, 16, 91, 223, 35, 96, 219, 51, 27, 74, 221, 30, 202, 231, 35, 112, 47, 135, 89, 228, 61, 97, 95, 117, 67, 40, 140, 56, 251, 8, 1, 168, 26, 250, 127, 230, 107, 89, 246, 124, 204, 252, 240, 217, 168, 175, 112, 12, 156, 214, 94, 165, 90, 125, 244, 41, 175, 216, 172, 164, 107, 119, 34, 160, 89, 108, 89, 91, 176, 54, 254, 19, 139, 219, 141, 224, 249, 3, 88, 255, 154, 138, 98, 50, 193, 131, 213, 136, 196, 138, 151, 32, 80, 49, 2, 111, 40, 245, 14, 94, 113, 142, 221, 103, 89, 11, 30, 171, 88, 140, 176, 75, 65, 0, 187, 144, 223, 66, 144, 157, 48, 167, 148, 114, 84, 240, 29, 83, 255, 83, 210, 222, 225, 78, 132, 62, 2, 235, 25, 165, 102, 41, 180, 127, 151, 201, 191, 31, 9, 125, 62, 195, 246, 146, 131, 121, 63, 230, 244, 202, 202, 19, 111, 199, 114, 228, 253, 90, 203, 218, 48, 130, 13, 66, 51, 149, 186, 90, 169, 121, 24, 9, 143, 221, 162, 212, 180, 87, 115, 176, 144, 160, 130, 64, 79, 34, 128, 125, 14, 63, 199, 19, 62, 243, 27, 220, 45, 174, 78, 32, 128, 25, 199, 243, 144, 131, 118, 103, 98, 8, 157, 226, 147, 144, 76, 70, 72, 16, 232, 73, 4, 10, 15, 0, 40, 183, 179, 48, 8, 232, 201, 92, 75, 162, 5, 129, 114, 8, 96, 255, 153, 79, 152, 252, 169, 171, 7, 125, 151, 60, 5, 1, 65, 64, 16, 232, 21, 4, 74, 13, 0, 58, 157, 73, 156, 66, 88, 8, 153, 180, 241, 106, 29, 204, 18, 152, 1, 24, 162, 215, 96, 190, 13, 179, 3, 163, 242, 142, 44, 67, 32, 45, 171, 32, 239, 227, 48, 244, 164, 116, 80, 79, 240, 24, 228, 111, 199, 179, 118, 242, 176, 216, 4, 65, 239, 134, 241, 229, 83, 71, 244, 79, 48, 207, 33, 29, 39, 240, 172, 150, 108, 123, 18, 244, 128, 191, 4, 166, 159, 128, 161, 252, 18, 17, 246, 79, 66, 158, 115, 49, 84, 237, 5, 10, 187, 239, 145, 134, 159, 129, 76, 74, 195, 82, 24, 74, 7, 229, 255, 159, 97, 190, 136, 116, 28, 196, 179, 50, 2, 206, 211, 193, 108, 154, 198, 112, 12, 187, 255, 169, 12, 122, 68, 170, 103, 123, 41, 150, 192, 78, 251, 62, 218, 243, 18, 210, 131, 205, 226, 21, 81, 6, 252, 189, 244, 122, 2, 173, 49, 168, 165, 153, 234, 182, 162, 148, 40, 200, 129, 242, 79, 109, 132, 161, 93, 233, 132, 63, 153, 23, 97, 254, 4, 121, 198, 94, 225, 106, 9, 242, 104, 253, 217, 209, 243, 199, 113, 174, 67, 174, 47, 11, 242, 41, 127, 137, 4, 249, 126, 157, 72, 12, 87, 235, 75, 183, 126, 204, 214, 101, 116, 69, 186, 244, 4, 101, 180, 235, 152, 83, 30, 224, 94, 141, 168, 191, 1, 67, 223, 130, 218, 186, 79, 195, 223, 105, 231, 240, 14, 43, 66, 234, 183, 97, 168, 77, 32, 251, 195, 120, 183, 13, 207, 82, 4, 190, 122, 253, 111, 215, 103, 248, 119, 180, 252, 251, 153, 128, 220, 121, 176, 127, 16, 230, 3, 48, 126, 219, 71, 207, 175, 195, 252, 35, 242, 220, 145, 254, 15, 178, 58, 67, 148, 97, 152, 167, 96, 50, 210, 37, 132, 173, 238, 60, 238, 110, 231, 140, 177, 47, 186, 249, 2, 108, 3, 201, 231, 98, 157, 183, 244, 145, 106, 33, 200, 95, 118, 193, 61, 251, 236, 39, 42, 230, 57, 70, 199, 54, 215, 86, 149, 8, 240, 90, 23, 35, 200, 243, 62, 130, 115, 216, 246, 116, 239, 30, 0, 207, 175, 181, 185, 42, 249, 196, 7, 76, 55, 122, 140, 19, 30, 39, 155, 120, 73, 149, 179, 18, 122, 221, 61, 131, 157, 32, 47, 233, 213, 155, 149, 13, 194, 32, 37, 5, 255, 33, 42, 155, 83, 78, 179, 228, 148, 199, 159, 151, 255, 221, 59, 8, 212, 83, 233, 245, 113, 125, 37, 224, 107, 76, 90, 182, 189, 153, 101, 205, 112, 208, 85, 101, 245, 220, 75, 210, 180, 237, 134, 33, 206, 240, 168, 73, 190, 113, 14, 127, 87, 83, 131, 133, 91, 241, 253, 121, 253, 163, 68, 182, 106, 25, 0, 242, 114, 145, 144, 38, 158, 194, 204, 174, 166, 137, 57, 181, 47, 81, 180, 250, 188, 123, 31, 68, 196, 187, 242, 119, 38, 240, 250, 255, 186, 83, 159, 39, 162, 252, 35, 115, 3, 88, 114, 111, 70, 100, 50, 228, 53, 246, 133, 204, 32, 247, 66, 192, 244, 138, 31, 202, 191, 227, 164, 106, 160, 42, 153, 140, 242, 130, 30, 37, 43, 214, 175, 81, 53, 190, 151, 82, 27, 193, 112, 90, 170, 233, 128, 208, 180, 109, 10, 115, 206, 230, 46, 223, 1, 57, 24, 162, 17, 196, 23, 141, 107, 0, 34, 146, 226, 92, 67, 84, 9, 254, 251, 115, 201, 13, 39, 165, 154, 134, 113, 56, 59, 254, 52, 232, 211, 168, 60, 254, 188, 252, 95, 160, 111, 64, 151, 30, 101, 160, 113]);
fileData8.push.apply(fileData8, [210, 210, 85, 70, 104, 7, 238, 77, 22, 74, 67, 159, 137, 28, 0, 212, 36, 63, 235, 0, 0, 131, 111, 115, 98, 50, 24, 63, 88, 40, 249, 101, 120, 185, 168, 166, 156, 235, 73, 26, 197, 68, 199, 253, 222, 252, 250, 185, 228, 50, 16, 245, 118, 176, 84, 57, 228, 249, 156, 152, 242, 143, 92, 121, 88, 68, 229, 47, 202, 239, 48, 218, 129, 108, 147, 224, 74, 58, 73, 253, 195, 213, 96, 215, 214, 91, 137, 59, 105, 56, 166, 60, 139, 31, 82, 55, 226, 52, 138, 90, 1, 115, 47, 76, 3, 198, 35, 58, 137, 181, 7, 42, 233, 27, 106, 155, 137, 123, 130, 182, 226, 249, 207, 48, 116, 36, 236, 110, 207, 207, 123, 156, 111, 226, 35, 224, 212, 164, 170, 68, 29, 138, 99, 22, 95, 128, 14, 52, 36, 195, 17, 69, 88, 252, 21, 12, 205, 122, 111, 61, 143, 48, 87, 57, 222, 244, 51, 147, 240, 41, 69, 251, 160, 69, 0, 191, 39, 56, 19, 231, 27, 124, 18, 126, 63, 132, 161, 52, 81, 254, 107, 163, 253, 74, 29, 199, 23, 157, 203, 5, 140, 159, 132, 70, 248, 51, 240, 163, 52, 132, 240, 167, 98, 125, 17, 248, 15, 98, 155, 202, 210, 81, 30, 47, 159, 11, 186, 198, 231, 189, 24, 167, 252, 152, 200, 253, 109, 161, 138, 179, 19, 239, 218, 239, 189, 112, 115, 148, 90, 252, 93, 63, 78, 209, 231, 89, 168, 61, 103, 25, 248, 59, 220, 30, 193, 239, 11, 48, 122, 222, 67, 24, 21, 149, 26, 25, 15, 120, 79, 91, 131, 55, 100, 124, 122, 28, 150, 157, 152, 98, 222, 109, 113, 127, 120, 31, 124, 9, 63, 240, 174, 134, 240, 29, 134, 193, 9, 105, 112, 140, 195, 20, 223, 161, 17, 250, 14, 213, 8, 11, 113, 193, 154, 210, 177, 134, 123, 236, 109, 95, 232, 213, 109, 33, 247, 132, 56, 7, 161, 241, 154, 173, 212, 8, 48, 210, 232, 232, 78, 148, 253, 91, 52, 143, 30, 181, 58, 117, 25, 105, 119, 190, 52, 149, 183, 111, 193, 124, 217, 204, 140, 211, 38, 221, 137, 99, 24, 31, 70, 59, 249, 177, 224, 253, 248, 239, 192, 190, 61, 112, 23, 182, 77, 76, 249, 199, 192, 14, 109, 250, 129, 160, 77, 111, 167, 159, 218, 253, 111, 146, 11, 13, 220, 167, 209, 248, 207, 109, 191, 81, 139, 97, 223, 253, 26, 206, 169, 244, 254, 247, 215, 52, 0, 116, 237, 38, 237, 1, 136, 36, 188, 91, 101, 254, 95, 193, 208, 170, 200, 192, 57, 60, 249, 8, 16, 82, 28, 114, 20, 109, 180, 54, 212, 38, 120, 47, 51, 229, 31, 122, 184, 29, 160, 132, 5, 87, 158, 210, 117, 179, 33, 138, 87, 117, 35, 224, 106, 87, 21, 92, 94, 3, 176, 43, 36, 213, 182, 247, 211, 232, 18, 117, 44, 32, 146, 103, 4, 115, 60, 202, 207, 64, 129, 116, 148, 234, 119, 99, 32, 221, 181, 65, 220, 20, 44, 18, 134, 180, 4, 245, 92, 93, 251, 175, 108, 54, 234, 204, 252, 42, 235, 232, 194, 249, 130, 6, 34, 52, 171, 167, 43, 103, 157, 117, 201, 118, 80, 184, 151, 69, 207, 147, 202, 227, 31, 93, 254, 143, 54, 9, 239, 118, 2, 96, 129, 59, 106, 137, 162, 161, 135, 169, 218, 206, 181, 2, 53, 205, 192, 19, 18, 205, 177, 169, 73, 126, 138, 6, 0, 184, 15, 152, 237, 206, 16, 13, 12, 107, 37, 158, 247, 58, 53, 0, 200, 161, 67, 129, 58, 159, 6, 197, 190, 111, 240, 12, 238, 162, 241, 174, 111, 247, 94, 237, 63, 81, 6, 8, 158, 79, 95, 90, 231, 202, 255, 33, 219, 126, 216, 151, 170, 61, 87, 135, 243, 132, 250, 191, 69, 123, 239, 89, 203, 247, 127, 97, 57, 29, 119, 35, 39, 83, 96, 50, 173, 233, 98, 36, 28, 106, 132, 246, 148, 94, 15, 49, 11, 128, 83, 209, 89, 231, 239, 131, 210, 52, 214, 173, 72, 41, 87, 126, 22, 132, 134, 14, 172, 117, 26, 76, 175, 224, 104, 56, 16, 99, 147, 159, 182, 34, 207, 64, 13, 231, 203, 118, 150, 86, 88, 231, 239, 243, 29, 131, 166, 192, 15, 21, 60, 75, 118, 64, 216, 248, 69, 104, 135, 200, 40, 252, 126, 26, 232, 105, 118, 152, 241, 131, 70, 61, 94, 30, 123, 167, 58, 30, 19, 127, 167, 60, 177, 142, 215, 79, 119, 244, 32, 177, 36, 254, 96, 110, 150, 255, 248, 53, 101, 115, 176, 86, 94, 190, 159, 191, 168, 103, 167, 190, 67, 148, 108, 242, 227, 203, 67, 157, 31, 0, 160, 94, 132, 254, 159, 133, 106, 202, 241, 210, 27, 223, 226, 242, 171, 251, 243, 114, 209, 137, 1, 128, 221, 104, 203, 71, 219, 198, 219, 133, 61, 172, 147, 127, 155, 237, 9, 40, 247, 93, 120, 62, 9, 223, 14, 150, 127, 99, 240, 71, 242, 207, 198, 182, 127, 164, 37, 166, 16, 1, 237, 77, 45, 11, 145, 141, 121, 27, 232, 46, 176, 208, 174, 70, 152, 76, 106, 92, 108, 255, 252, 14, 109, 135, 12, 104, 210, 135, 2, 123, 85, 182, 115, 159, 140, 83, 235, 175, 180, 172, 214, 30, 247, 98, 18, 79, 24, 173, 64, 140, 211, 142, 245, 194, 68, 157, 0, 214, 56, 26, 1, 3, 202, 225, 210, 159, 13, 220, 49, 54, 92, 220, 1, 220, 158, 140, 121, 155, 201, 251, 152, 82, 15, 241, 128, 163, 119, 197, 93, 118, 50, 205, 178, 94, 109, 106, 234, 89, 30, 175, 152, 11, 242, 127, 105, 128, 69, 61, 248, 56, 242, 244, 58, 243, 10, 57, 160, 42, 123, 47, 247, 218, 187, 137, 187, 123, 199, 101, 226, 127, 153, 240, 39, 93, 167, 65, 11, 113, 77, 247, 238, 142, 220, 206, 54, 155, 118, 32, 71, 210, 219, 74, 253, 41, 79, 220, 236, 208, 242, 93, 100, 180, 158, 245, 28, 155, 192, 148, 83, 187, 0, 172, 143, 243, 209, 224, 209, 167, 45, 107, 254, 134, 9, 76, 86, 77, 162, 169, 84, 125, 7, 213, 193, 35, 180, 109, 56, 137, 211, 242, 157, 74, 93, 134, 122, 62, 32, 172, 253, 126, 47, 112, 85, 109, 235, 92, 249, 71, 62, 110, 167, 30, 36, 160, 221, 45, 203, 154, 29, 219, 254, 45, 87, 234, 62, 44, 23, 104, 52, 239, 118, 76, 64, 121, 17, 209, 222, 146, 181, 235, 7, 0, 161, 244, 38, 59, 81, 48, 176, 80, 168, 21, 134, 201, 225, 117, 217, 228, 248, 153, 222, 14, 60, 149, 20, 12, 183, 34, 253, 23, 254, 254, 224, 173, 220, 157, 207, 133, 145, 207, 47, 242, 24, 195, 143, 196, 117, 194, 60, 92, 121, 23, 26, 184, 127, 19, 112, 161, 74, 120, 240, 107, 129, 219, 180, 33, 239, 191, 109, 250, 22, 247, 193, 176, 254, 179, 60, 246, 228, 223, 231, 110, 211, 69, 29, 225, 81, 230, 61, 249, 151, 153, 179, 135, 28, 38, 254, 63, 76, 196, 31, 141, 5, 173, 119, 214, 72, 52, 248, 92, 240, 255, 197, 9, 88, 167, 212, 89, 10, 17, 208, 233, 27, 2, 187, 216, 170, 65, 96, 246, 15, 48, 195, 91, 134, 243, 144, 7, 120, 203, 126, 28, 131, 227, 197, 31, 175, 70, 70, 183, 113, 161, 82, 181, 142, 13, 38, 47, 177, 61, 55, 147, 88, 189, 168, 111, 225, 187, 179, 229, 31, 25, 190, 142, 127, 137, 121, 201, 245, 27, 147, 101, 180, 153, 47, 6, 113, 6, 96, 181, 49, 46, 136, 167, 158, 26, 0, 160, 224, 211, 90, 56, 169, 57, 66, 235, 162, 240, 241, 104, 37, 219, 12, 81, 245, 191, 84, 81, 1, 152, 121, 40, 30, 78, 186, 16, 180, 218, 209, 231, 89, 67, 152, 245, 121, 195, 171, 38, 143, 201, 108, 99, 151, 83, 9, 205, 228, 104, 178, 177, 78, 243, 156, 230, 172, 193, 122, 237, 209, 232, 181, 110, 255, 235, 187, 207, 69, 53, 72, 158, 8, 150, 208, 102, 172, 9, 228, 98, 206, 163, 214, 37, 226, 255, 38, 166, 73, 65, 248, 218, 108, 216, 103, 149, 149, 38, 223, 152, 53, 164, 132, 203, 132, 0, 38, 55, 139, 111, 71, 200, 80, 231, 127, 20, 215, 16, 95, 115, 79, 38, 14, 61, 25, 136, 15, 117, 204, 44, 92, 13, 197, 107, 199, 168, 99, 229, 31, 83, 46, 140, 169, 117, 58, 253, 79, 186, 43, 202, 142, 73, 67, 104, 131, 228, 185, 241, 168, 112, 190, 95, 79, 12, 0, 208, 172, 175, 117, 86, 114, 220, 191, 34, 190, 27, 137, 159, 235, 103, 32, 249, 57, 121, 95, 242, 251, 188, 111, 207, 81, 4, 108, 122, 142, 39, 212, 208, 19, 92, 13, 115, 241, 222, 248, 208, 233, 111, 48, 210, 165, 252, 122, 132, 34, 161, 26, 53, 104, 53, 124, 254, 218, 19, 235, 239, 248, 171, 83, 141, 78, 96, 87, 113, 114, 222, 143, 164, 92, 212, 162, 49, 75, 183, 66, 62, 58, 242, 70, 56, 96, 90, 83, 16, 14, 143, 43, 170, 77, 175, 94, 240, 65, 254, 105, 252, 30, 208, 88, 42, 254, 75, 170, 196, 63, 16, 172, 217, 142, 67, 5, 153, 231, 190, 251, 241, 155, 180, 200, 98, 45, 143, 64, 76, 187, 183, 72, 217, 246, 216, 218, 242, 236, 123, 149, 195, 89, 204, 187, 226, 200, 153, 5, 95, 31, 247, 54, 159, 127, 103, 203, 255, 116, 166, 129, 165, 9, 216, 202, 3, 25, 210, 27, 194, 98, 244, 93, 73, 113, 186, 126, 0, 64, 103, 160, 145, 129, 87, 120, 99, 152, 148, 37, 253, 93, 213, 255, 95, 158, 222, 8, 47, 85, 138, 247, 255, 106, 122, 133, 29, 54, 21, 2, 11, 99, 140, 142, 144, 77, 195, 141, 128, 198, 180, 217, 104, 224, 171, 219, 80, 96, 143, 134, 50, 175, 191, 206, 107, 15, 201, 207, 27, 221, 15, 127, 17, 91, 40, 122, 146, 66, 249, 79, 215, 102, 65, 251, 117, 136, 127, 179, 170, 243, 93, 199, 146, 90, 213, 105, 188, 82, 249, 93, 122, 5, 235, 189, 168, 130, 66, 245, 33, 208, 217, 242, 31, 49, 117, 73, 213, 62, 44, 80, 234, 239, 121, 254, 207, 190, 155, 187, 185, 171, 171, 7, 0, 152, 249, 207, 187, 198, 56, 3, 77, 157, 160, 186, 19, 6, 75, 206, 206, 30, 6, 202, 3, 153, 201, 216, 32, 214, 13, 127, 83, 105, 115, 157, 75, 122, 195, 141, 180, 199, 210, 52, 243, 141, 101, 122, 117, 194, 103, 70, 43, 77, 10, 102, 160, 211, 35, 206, 171, 166, 69, 139, 125, 207, 103, 251, 7, 104, 224, 131, 85, 137, 188, 102, 21, 87, 100, 196, 74, 235, 246, 23, 233, 3, 201, 67, 168, 19, 28, 179, 170, 243, 84, 174, 44, 87, 157, 154, 43, 156, 223, 29, 88, 239, 221, 25, 96, 64, 53, 175, 245, 195, 192, 45, 182, 234, 17, 232, 254, 242, 143, 9, 216, 226, 60, 249, 238, 234, 1, 192, 62, 165, 126, 139, 103, 230, 208, 139, 150, 117, 53, 245, 243, 95, 129, 57, 3, 67, 59, 221, 125, 115, 25, 122, 48, 11, 163, 130, 6, 143, 83, 165, 107, 214, 154, 240, 25, 248, 48, 119, 172, 15, 204, 229, 218, 138, 169, 63, 8, 135, 201, 227, 198, 144, 15, 247, 224, 248, 52, 15, 150, 81, 244, 179, 29, 33, 43, 111, 103, 130, 5, 18, 108, 3, 168, 142, 248, 108, 118, 14, 212, 159, 22, 214, 58, 173, 203, 57, 77, 226, 146, 77, 117, 169, 173, 157, 83, 170, 38, 99, 14, 255, 207, 130, 218, 19, 36, 2, 38, 12, 129, 247, 160, 14, 108, 195, 200, 246, 189, 92, 227, 182, 162, 97, 219, 71, 54, 79, 88, 170, 68, 112, 165, 8, 160, 225, 66, 149, 246, 9, 219, 62, 213, 96, 234, 252, 10, 155, 132, 86, 249, 49, 220, 231, 130, 144, 70, 128, 191, 237, 234, 1, 0, 18, 247, 225, 32, 185, 84, 212, 151, 126, 32, 112, 79, 132, 45, 189, 75, 52, 59, 65, 251, 155, 101, 82, 138, 66, 16, 138, 63, 18, 90, 227, 41, 195, 61, 33, 46, 58, 90, 108, 59, 107, 5, 33, 230, 163, 113, 73, 62, 53, 82, 233, 30, 0, 12, 236, 248, 12, 199, 25, 14, 244, 75, 103, 30, 192, 26, 103, 67, 254, 177, 11, 88, 155, 225, 45, 152, 155, 118, 164, 7, 131, 197, 62, 209, 118, 196, 129, 34, 254, 184, 225, 20, 123, 65, 172, 87, 29, 36, 240, 167, 75, 104, 145, 222, 199, 81, 89, 244, 57, 104, 78, 27, 220, 175, 110, 151, 117, 170, 110, 9, 87, 34, 127, 76, 36, 191, 20, 228, 155, 250, 254, 37, 89, 246, 55, 135, 250, 135, 33, 71, 101, 30, 240, 225, 182, 174, 30, 0, 240, 53, 144, 97, 218, 4, 197, 39, 133, 60, 47, 10, 163, 159, 155, 104, 142, 92, 31, 209, 220, 126, 232, 157, 73, 252, 143, 26, 199, 246, 232, 96, 64, 113, 154, 237, 220, 244, 168, 199, 63, 254, 69, 221, 85, 167, 157, 131, 77, 121, 183, 177, 34, 19, 79, 152, 254, 111, 138, 127, 91, 246, 13, 125, 217, 161, 31, 41, 203, 165, 119, 227, 83, 3, 176, 239, 150, 164, 244, 31, 86, 234, 63, 39, 189, 151, 119, 253, 128, 128, 173, 205, 10, 177, 235, 19, 255, 62, 122, 64, 169, 167, 255, 255, 246, 238, 53, 102, 142, 234, 190, 227, 248, 108, 240, 5, 30, 204, 197, 128, 77, 48, 23, 175, 73, 98, 130, 18, 135, 52, 130, 54, 23, 135, 164, 45, 173, 20, 53, 160, 74, 85, 169, 72, 20, 197, 84, 21, 47, 64, 170, 84, 17, 72, 211, 23, 205, 195, 139, 244, 5, 9, 47, 42, 133, 72, 144, 42, 208, 86, 50, 13, 81, 164, 166, 208, 246, 69, 165, 32, 136, 101, 41, 202, 69, 4, 26, 40, 215, 125, 108, 227, 187, 141, 141, 177, 13, 190, 224, 233, 239, 63, 187, 243, 204, 57, 115, 102, 119, 118, 118, 103, 158, 235, 247, 72, 179, 59, 51, 59, 115, 230, 156, 207, 220, 206, 156, 57, 51, 235, 231, 236, 80, 167, 172, 176, 238, 79, 95, 125, 200, 191, 53, 121, 246, 117, 213, 99, 96, 142, 50, 1, 93, 76, 234, 116, 226, 134, 109, 127, 238, 14, 21, 245, 235, 34, 224, 239, 252, 241, 109, 127, 48, 55, 52, 167, 11, 0, 126, 90, 79, 149, 86, 129, 234, 0, 248, 31, 254, 60, 77, 12, 189, 53, 57, 40, 86, 221, 164, 254, 150, 255, 251, 234, 205, 254, 112, 181, 33, 21, 130, 30, 247, 79, 196, 235, 111, 140, 227, 39, 155, 45, 231, 244, 146, 168, 83, 254, 247, 252, 212, 110, 191, 203, 31, 246, 135, 148, 206, 111, 250, 99, 198, 27, 186, 170, 251, 215, 159, 78, 36, 71, 30, 119, 6, 22, 124, 239, 57, 81, 244, 53, 63, 147, 167, 254, 201, 31, 118, 134, 186, 79, 77, 220, 230, 140, 161, 119, 145, 8, 232, 97, 241, 47, 251, 103, 10, 59, 60, 236, 122, 170, 201, 236, 107, 95, 127, 43, 139, 223, 158, 66, 160, 1, 98, 230, 81, 79, 223, 154, 238, 95, 187, 187, 145, 221, 239, 14, 228, 251, 159, 84, 155, 57, 53, 4, 214, 173, 210, 52, 216, 86, 97, 205, 226, 250, 135, 57, 93, 0, 80, 125, 175, 83, 218, 93, 167, 42, 208, 78, 187, 95, 86, 244, 87, 137, 119, 126, 160, 209, 251, 255, 233, 146, 63, 112, 91, 191, 42, 182, 131, 250, 187, 218, 43, 188, 21, 240, 154, 238, 89, 79, 236, 76, 231, 28, 229, 123, 141, 222, 130, 184, 43, 138, 158, 244, 231, 189, 193, 222, 9, 59, 176, 197, 175, 126, 63, 47, 142, 223, 26, 171, 240, 241, 138, 222, 236, 230, 47, 119, 205, 55, 21, 111, 97, 225, 195, 94, 3, 171, 13, 182, 214, 96, 87, 55, 254, 129, 237, 106, 181, 193, 56, 118, 231, 48, 11, 81, 58, 87, 169, 123, 104, 152, 105, 231, 234, 52, 151, 68, 209, 79, 253, 250, 187, 254, 249, 215, 54, 242, 148, 213, 209, 16, 22, 161, 128, 110, 23, 105, 221, 235, 208, 227, 134, 203, 116, 161, 112, 96, 147, 59, 166, 230, 254, 71, 178, 248, 236, 214, 232, 225, 220, 133, 79, 246, 43, 125, 163, 9, 216, 219, 85, 181, 95, 59, 97, 173, 10, 90, 253, 143, 127, 159, 8, 222, 65, 115, 76, 47, 135, 26, 252, 232, 246, 156, 46, 0, 104, 179, 202, 93, 129, 190, 191, 163, 131, 250, 122, 71, 68, 32, 241, 18, 253, 25, 198, 230, 137, 40, 122, 208, 29, 223, 80, 255, 225, 110, 188, 167, 45, 29, 27, 220, 101, 104, 248, 86, 221, 128, 253, 161, 59, 46, 138, 86, 254, 133, 63, 60, 218, 208, 142, 40, 250, 146, 63, 167, 221, 10, 58, 173, 191, 193, 142, 55, 250, 227, 147, 63, 101, 89, 174, 241, 118, 146, 60, 162, 42, 243, 79, 229, 127, 175, 50, 188, 81, 13, 45, 95, 247, 238, 67, 219, 142, 254, 174, 21, 62, 218, 110, 60, 239, 233, 228, 175, 20, 221, 239, 142, 171, 171, 95, 153, 184, 197, 143, 107, 226, 193, 56, 62, 253, 180, 210, 16, 20, 68, 52, 206, 242, 126, 211, 9, 149, 20, 53, 207, 62, 165, 245, 142, 166, 171, 66, 253, 180, 213, 60, 164, 118, 24, 135, 162, 232, 62, 63, 86, 203, 255, 59, 155, 149, 79, 109, 242, 201, 250, 94, 105, 127, 130, 116, 153, 254, 161, 208, 159, 110, 225, 12, 41, 175, 246, 191, 22, 94, 103, 185, 83, 13, 137, 115, 123, 109, 169, 198, 196, 103, 231, 167, 179, 225, 133, 35, 209, 63, 39, 19, 173, 214, 206, 131, 122, 21, 172, 63, 197, 197, 143, 196, 241, 238, 85, 254, 184, 122, 134, 116, 85, 243, 99, 63, 166, 11, 238, 238, 109, 151, 86, 240, 94, 169, 206, 190, 173, 75, 182, 83, 127, 90, 134, 134, 21, 208, 19, 101, 185, 117, 106, 251, 255, 169, 73, 119, 126, 25, 47, 223, 167, 99, 158, 142, 1, 109, 119, 188, 222, 27, 240, 183, 254, 240, 124, 27, 234, 158, 220, 149, 191, 124, 56, 105, 111, 2, 180, 131, 160, 157, 8, 138, 66, 239, 77, 129, 227, 255, 73, 133, 243, 103, 16, 189, 56, 189, 197, 117, 52, 100, 233, 40, 248, 109, 188, 127, 161, 202, 175, 42, 157, 237, 111, 246, 150, 60, 61, 144, 188, 27, 207, 28, 172, 203, 165, 99, 199, 179, 249, 120, 170, 14, 111, 81, 77, 66, 159, 183, 239, 117, 180, 188, 205, 225, 63, 145, 105, 243, 212, 15, 221, 80, 207, 159, 193, 168, 118, 193, 140, 139, 130, 229, 215, 254, 159, 254, 217, 108, 153, 238, 100, 227, 253, 17, 72, 63, 171, 169, 240, 223, 0, 27, 45, 72, 239, 210, 206, 237, 230, 106, 248, 254, 241, 253, 157, 237, 95, 139, 45, 217, 159, 116, 178, 181, 210, 97, 22, 74, 166, 239, 7, 236, 142, 87, 156, 254, 31, 191, 100, 177, 15, 223, 55, 117, 167, 27, 101, 93, 253, 190, 77, 51, 219, 154, 174, 112, 42, 153, 106, 219, 236, 248, 46, 59, 85, 145, 218, 76, 208, 159, 33, 245, 219, 47, 157, 36, 140, 246, 143, 164, 254, 31, 97, 133, 182, 190, 189, 191, 157, 251, 243, 38, 73, 105, 143, 42, 224, 47, 167, 100, 123, 174, 184, 174, 134, 77, 147, 214, 105, 65, 72, 142, 120, 118, 236, 235, 115, 14, 28, 238, 159, 104, 27, 61, 112, 13, 155, 193, 190, 211, 233, 221, 198, 106, 250, 116, 67, 248, 251, 82, 187, 207, 113, 155, 186, 252, 85, 143, 61, 27, 107, 213, 229, 206, 125, 144, 112, 238, 42, 99, 150, 101, 19, 43, 78, 251, 15, 122, 183, 101, 124, 82, 226, 178, 116, 228, 150, 103, 21, 55, 87, 14, 108, 48, 151, 69, 59, 92, 223, 217, 122, 236, 71, 83, 94, 163, 123, 111, 185, 96, 87, 229, 137, 131, 89, 228, 210, 113, 124, 109, 110, 226, 202, 131, 86, 11, 160, 37, 172, 43, 152, 177, 173, 113, 183, 89, 211, 52, 39, 60, 105, 207, 106, 36, 41, 114, 70, 142, 219, 123, 105, 171, 101, 53, 32, 183, 23, 196, 99, 249, 181, 87, 163, 94, 87, 188, 76, 187, 42, 156, 255, 65, 183, 129, 214, 169, 58, 227, 55, 131, 115, 98, 242, 209, 58, 191, 202, 112, 240, 28, 195, 252, 234, 108, 255, 195, 76, 94, 249, 209, 209, 33, 34, 109, 13, 49, 77, 217, 36, 78, 77, 65, 217, 164, 115, 239, 247, 226, 109, 187, 56, 157, 237, 40, 250, 112, 178, 37, 76, 255, 188, 70, 101, 136, 29, 155, 167, 7, 107, 236, 185, 82, 251, 229, 241, 224, 246, 100, 126, 1, 103, 217, 49, 179, 246, 80, 113, 187, 28, 121, 249, 21, 151, 211, 196, 246, 111, 39, 153, 165, 218, 255, 115, 33, 217, 42, 236, 216, 151, 63, 7, 106, 148, 253, 41, 212, 101, 185, 246, 67, 185, 217, 123, 131, 115, 187, 0, 160, 68, 246, 30, 121, 185, 72, 27, 218, 84, 113, 22, 108, 236, 113, 219, 200, 62, 102, 207, 198, 170, 101, 138, 94, 5, 144, 134, 137, 237, 105, 223, 168, 223, 58, 225, 42, 202, 52, 236, 124, 78, 203, 88, 167, 29, 44, 215, 234, 54, 253, 221, 190, 79, 233, 190, 203, 229, 154, 172, 202, 43, 83, 221, 249, 251, 247, 43, 210, 151, 117, 74, 83, 59, 195, 124, 181, 112, 225, 60, 15, 235, 145, 208, 203, 11, 127, 169, 56, 82, 203, 157, 210, 44, 231, 10, 194, 190, 251, 133, 219, 53, 221, 205, 170, 178, 119, 194, 138, 253, 206, 192, 88, 189, 138, 251, 81, 69, 96, 235, 54, 215, 30, 162, 48, 218, 41, 141, 85, 129, 225, 236, 115, 155, 88, 15, 186, 223, 122, 32, 91, 106, 88, 36, 203, 126, 171, 175, 79, 133, 160, 143, 43, 182, 91, 252, 131, 187, 197, 159, 44, 255, 1, 85, 136, 47, 253, 79, 109, 171, 117, 183, 195, 240, 183, 255, 210, 199, 189, 98, 181, 92, 118, 194, 138, 255, 117, 6, 70, 237, 205, 197, 57, 74, 52, 113, 109, 219, 161, 187, 116, 149, 76, 198, 46, 96, 187, 241, 245, 235, 175, 100, 170, 71, 3, 117, 17, 148, 123, 52, 240, 10, 181, 91, 106, 230, 86, 128, 118, 176, 155, 149, 110, 187, 72, 235, 83, 64, 29, 237, 24, 172, 99, 205, 201, 204, 35, 217, 198, 189, 154, 12, 127, 187, 140, 142, 101, 211, 38, 7, 236, 220, 188, 123, 188, 223, 221, 105, 203, 250, 253, 229, 204, 202, 246, 111, 39, 193, 211, 218, 255, 173, 32, 124, 223, 224, 244, 38, 23, 168, 127, 84, 229, 79, 161, 44, 210, 121, 19, 84, 221, 161, 99, 111, 242, 119, 175, 186, 253, 151, 132, 221, 250, 124, 73, 54, 126, 91, 169, 222, 143, 77, 126, 41, 45, 86, 4, 187, 86, 221, 165, 234, 44, 61, 182, 159, 110, 85, 90, 84, 86, 153, 129, 160, 234, 38, 237, 17, 118, 0, 218, 208, 91, 154, 45, 223, 10, 66, 219, 148, 134, 70, 14, 120, 182, 28, 229, 123, 149, 190, 62, 105, 253, 10, 182, 76, 21, 178, 90, 175, 104, 243, 244, 118, 208, 228, 215, 134, 62, 28, 123, 243, 183, 52, 76, 231, 93, 253, 7, 149, 255, 51, 13, 45, 122, 78, 68, 219, 203, 191, 165, 37, 121, 41, 82, 154, 168, 173, 250, 151, 184, 79, 233, 143, 98, 210, 97, 21, 70, 245, 194, 152, 101, 191, 204, 134, 233, 171, 83, 192, 170, 219, 181, 3, 182, 187, 113, 218, 33, 232, 124, 189, 141, 180, 254, 130, 127, 157, 105, 38, 174, 249, 47, 208, 59, 6, 95, 163, 156, 164, 21, 176, 123, 213, 255, 218, 140, 157, 123, 230, 63, 33, 57, 64, 96, 225, 9, 236, 15, 219, 137, 180, 23, 94, 46, 231, 78, 142, 116, 15, 252, 89, 29, 140, 123, 97, 106, 198, 10, 192, 115, 71, 128, 148, 32, 128, 0, 2, 8, 204, 9, 1, 157, 144, 156, 70, 160, 214, 60, 115, 23, 45, 176, 155, 90, 51, 106, 121, 237, 55, 60, 45, 105, 32, 214, 84, 58, 136, 23, 1, 4, 16, 64, 96, 225, 10, 236, 233, 62, 233, 48, 169, 51, 122, 223, 19, 186, 61, 10, 155, 94, 139, 118, 191, 95, 109, 164, 225, 215, 194, 85, 174, 144, 51, 221, 254, 179, 199, 174, 124, 239, 225, 90, 93, 87, 88, 10, 147, 34, 128, 0, 2, 8, 44, 118, 1, 191, 170, 57, 57, 241, 220, 163, 147, 207, 70, 117, 235, 213, 109, 42, 122, 20, 51, 142, 183, 88, 123, 25, 194, 152, 2, 178, 181, 199, 172, 172, 170, 63, 237, 10, 30, 187, 178, 186, 0, 106, 91, 198, 164, 102, 118, 4, 16, 64, 0, 129, 188, 64, 174, 0, 160, 147, 77, 105, 184, 62, 31, 7, 195, 35, 8, 232, 245, 202, 195, 189, 131, 224, 192, 157, 35, 196, 206, 44, 8, 32, 128, 0, 2, 8, 12, 22, 232, 221, 2, 40, 61, 235, 199, 241, 9, 187, 74, 229, 202, 127, 48, 231, 240, 191, 170, 0, 80, 92, 187, 146, 174, 138, 164, 21, 192, 198, 225, 35, 100, 74, 4, 230, 150, 192, 188, 122, 12, 112, 110, 209, 145, 26, 4, 102, 78, 64, 167, 28, 123, 236, 244, 106, 117, 246, 62, 128, 223, 85, 103, 39, 250, 180, 123, 70, 253, 143, 54, 249, 248, 167, 226, 95, 148, 65, 238, 86, 155, 146, 62, 110, 149, 26, 172, 84, 143, 61, 126, 252, 114, 58, 130, 111, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 22, 137, 64, 28, 199, 75, 212, 109, 82, 247, 180, 186, 67, 234, 156, 208, 105, 207, 119, 134, 227, 113, 124, 185, 147, 33, 235, 181, 60, 90, 94, 45, 207, 75, 230, 123, 254, 72, 63, 2, 8, 32, 128, 0, 2, 149, 5, 116, 2, 92, 175, 110, 80, 104, 87, 142, 180, 194, 12, 90, 112, 43, 237, 42, 204, 86, 105, 210, 130, 2, 64, 62, 191, 235, 43, 69, 200, 196, 158, 192, 251, 188, 33, 6, 16, 64, 0, 1, 4, 230, 133, 192, 182, 40, 122, 105, 112, 66, 167, 6, 255, 60, 198, 175, 187, 227, 120, 149, 102, 63, 147, 118, 113, 124, 252, 242, 49, 162, 27, 99, 214, 109, 37, 6, 99, 68, 205, 172, 8, 32, 128, 0, 2, 8, 204, 53, 1, 59, 1, 251, 151, 194, 167, 108, 240, 86, 117, 51, 82, 45, 94, 112, 101, 222, 110, 218, 200, 242, 102, 121, 76, 114, 170, 158, 44, 204, 86, 225, 163, 233, 28, 55, 31, 63, 53, 0, 205, 27, 47, 168, 37, 188, 27, 199, 55, 107, 199, 235, 168, 123, 54, 142, 223, 86, 23, 181, 22, 84, 6, 201, 12, 2, 243, 64, 64, 103, 249, 79, 250, 201, 220, 121, 87, 171, 213, 122, 92, 221, 105, 127, 252, 194, 25, 178, 188, 89, 30, 119, 70, 209, 93, 126, 174, 142, 95, 235, 15, 51, 52, 172, 0, 5, 128, 97, 165, 152, 46, 17, 216, 19, 69, 87, 170, 167, 173, 238, 186, 40, 138, 213, 81, 0, 144, 1, 1, 129, 25, 21, 56, 214, 221, 15, 157, 101, 174, 254, 137, 51, 176, 160, 123, 119, 69, 81, 46, 175, 71, 127, 103, 65, 103, 184, 193, 204, 81, 0, 104, 16, 151, 168, 17, 64, 0, 129, 153, 17, 56, 103, 233, 204, 44, 103, 246, 151, 242, 241, 217, 79, 194, 130, 73, 1, 5, 128, 5, 179, 42, 201, 8, 2, 8, 32, 128, 0, 2, 195, 11, 80, 0, 24, 222, 138, 41, 3, 129, 228, 118, 99, 28, 140, 102, 4, 2, 8, 32, 128, 192, 156, 23, 40, 109, 49, 170, 198, 94, 19, 202, 197, 89, 189, 156, 156, 84, 35, 140, 19, 214, 175, 241, 27, 244, 245, 85, 117, 107, 212, 157, 167, 78, 183, 102, 162, 239, 235, 247, 95, 234, 187, 177, 160, 229, 218, 115, 159, 95, 82, 183, 66, 221, 81, 117, 251, 212, 253, 72, 203, 221, 175, 111, 75, 151, 229, 41, 77, 239, 41, 141, 183, 71, 85, 106, 9, 138, 123, 185, 34, 90, 214, 139, 108, 218, 194, 134, 157, 116, 89, 250, 44, 152, 199, 191, 235, 22, 249, 214, 86, 43, 121, 92, 38, 25, 57, 238, 135, 150, 99, 214, 95, 80, 247, 167, 78, 92, 111, 171, 255, 85, 117, 79, 169, 123, 65, 121, 62, 238, 252, 54, 114, 175, 150, 229, 174, 123, 139, 231, 164, 86, 254, 213, 89, 132, 150, 148, 120, 141, 26, 2, 30, 201, 198, 101, 125, 74, 135, 165, 107, 172, 160, 52, 216, 250, 76, 205, 223, 83, 156, 201, 246, 215, 47, 82, 77, 111, 235, 40, 93, 255, 182, 142, 70, 107, 20, 101, 207, 56, 119, 183, 177, 116, 81, 71, 21, 215, 80, 133, 157, 188, 91, 85, 7, 205, 111, 176, 105, 120, 103, 212, 60, 228, 210, 225, 109, 175, 105, 228, 131, 190, 115, 233, 136, 134, 202, 71, 215, 237, 66, 197, 155, 186, 87, 94, 110, 154, 166, 220, 242, 135, 118, 208, 124, 118, 97, 115, 110, 26, 143, 190, 135, 94, 119, 206, 60, 211, 189, 138, 207, 30, 121, 27, 37, 28, 26, 117, 221, 141, 178, 48, 230, 65, 160, 225, 118, 194, 64, 0, 0, 26, 103, 73, 68, 65, 84, 118, 129, 151, 188, 183, 75, 189, 208, 177, 157, 242, 136, 62, 250, 135, 131, 122, 83, 211, 46, 59, 113, 212, 26, 118, 233, 100, 116, 208, 75, 75, 62, 5, 251, 58, 26, 115, 222, 94, 111, 244, 75, 135, 234, 76, 132, 111, 209, 141, 91, 139, 219, 240, 142, 183, 204, 162, 129, 83, 27, 199, 77, 135, 98, 157, 56, 221, 125, 3, 86, 209, 2, 114, 227, 222, 212, 240, 248, 235, 192, 207, 111, 110, 17, 67, 13, 238, 79, 11, 67, 35, 103, 255, 213, 238, 19, 7, 189, 165, 149, 172, 79, 157, 124, 252, 117, 241, 252, 200, 235, 127, 123, 28, 95, 239, 103, 241, 245, 239, 12, 155, 137, 157, 222, 140, 150, 162, 104, 248, 154, 54, 173, 103, 111, 246, 120, 248, 229, 230, 211, 55, 229, 69, 244, 226, 80, 133, 151, 233, 56, 100, 25, 238, 231, 229, 219, 177, 246, 83, 123, 75, 155, 19, 94, 122, 122, 58, 206, 10, 61, 225, 99, 102, 47, 116, 134, 157, 93, 219, 204, 102, 39, 1, 234, 45, 79, 119, 191, 184, 59, 113, 220, 246, 227, 170, 50, 244, 226, 100, 191, 120, 199, 29, 175, 117, 123, 103, 46, 37, 237, 113, 227, 172, 50, 127, 184, 126, 226, 25, 91, 126, 184, 236, 169, 123, 170, 164, 157, 105, 51, 129, 210, 3, 147, 46, 191, 244, 190, 137, 52, 92, 219, 86, 223, 17, 247, 242, 36, 253, 37, 251, 190, 72, 165, 255, 85, 199, 180, 113, 174, 204, 198, 141, 215, 167, 184, 86, 169, 8, 126, 236, 162, 40, 178, 43, 139, 62, 97, 85, 91, 63, 28, 89, 237, 253, 58, 225, 164, 221, 251, 97, 164, 1, 223, 98, 217, 115, 74, 215, 6, 69, 244, 220, 217, 165, 177, 237, 252, 84, 233, 36, 3, 38, 232, 89, 30, 211, 101, 237, 141, 3, 38, 115, 126, 50, 250, 203, 124, 10, 231, 215, 97, 123, 85, 138, 27, 211, 239, 146, 147, 195, 46, 171, 223, 116, 173, 40, 122, 43, 251, 173, 124, 125, 190, 147, 77, 172, 190, 11, 71, 78, 255, 85, 81, 244, 107, 191, 244, 176, 252, 110, 47, 234, 62, 3, 91, 245, 234, 82, 171, 18, 203, 194, 190, 39, 43, 213, 0, 169, 246, 198, 170, 142, 178, 112, 230, 207, 178, 254, 10, 125, 170, 9, 185, 212, 155, 252, 194, 7, 188, 193, 178, 1, 213, 118, 104, 63, 95, 231, 79, 118, 250, 103, 131, 10, 150, 42, 160, 223, 122, 153, 183, 141, 90, 229, 220, 53, 159, 247, 227, 24, 110, 104, 162, 213, 218, 233, 175, 188, 15, 233, 68, 60, 68, 161, 86, 5, 23, 29, 39, 110, 203, 150, 98, 107, 113, 233, 214, 108, 184, 209, 190, 195, 126, 236, 231, 168, 177, 254, 76, 133, 119, 78, 205, 212, 146, 230, 222, 114, 86, 204, 160, 243, 220, 203, 253, 56, 41, 178, 234, 213, 17, 131, 213, 240, 45, 185, 79, 31, 191, 82, 103, 59, 156, 179, 211, 89, 180, 135, 116, 25, 26, 157, 85, 233, 224, 167, 185, 130, 160, 42, 96, 213, 35, 239, 211, 193, 40, 31, 158, 212, 136, 31, 171, 251, 99, 117, 206, 178, 221, 201, 78, 92, 224, 14, 213, 219, 223, 182, 147, 241, 115, 185, 56, 237, 0, 176, 69, 221, 71, 213, 181, 213, 213, 18, 116, 32, 252, 245, 218, 48, 166, 103, 52, 234, 17, 117, 7, 213, 125, 88, 221, 23, 213, 13, 89, 64, 208, 148, 67, 4, 21, 0, 126, 222, 155, 204, 57, 9, 71, 31, 211, 56, 183, 32, 54, 165, 225, 237, 189, 233, 220, 47, 157, 67, 163, 154, 119, 204, 170, 235, 179, 234, 244, 78, 242, 117, 235, 72, 165, 216, 199, 84, 148, 234, 109, 91, 107, 34, 21, 196, 218, 170, 210, 157, 114, 166, 10, 122, 223, 31, 69, 127, 227, 143, 108, 217, 62, 82, 41, 232, 254, 141, 109, 219, 182, 62, 21, 46, 210, 137, 207, 106, 223, 163, 74, 87, 240, 186, 31, 182, 214, 47, 152, 94, 252, 111, 221, 248, 134, 255, 180, 188, 234, 74, 243, 94, 109, 123, 247, 119, 231, 178, 24, 223, 213, 99, 216, 145, 88, 252, 208, 43, 164, 254, 208, 31, 187, 122, 117, 213, 116, 251, 243, 39, 207, 123, 63, 216, 29, 103, 199, 148, 101, 155, 244, 241, 189, 238, 112, 241, 167, 10, 79, 159, 241, 19, 119, 248, 225, 113, 142, 65, 109, 237, 95, 58, 179, 30, 86, 19, 123, 237, 134, 3, 195, 91, 250, 53, 183, 255, 181, 220, 219, 16, 3, 103, 174, 250, 163, 238, 115, 93, 157, 205, 163, 35, 100, 116, 254, 238, 108, 120, 97, 247, 233, 184, 180, 219, 238, 57, 102, 231, 132, 83, 142, 197, 194, 206, 251, 140, 231, 238, 181, 228, 133, 47, 218, 189, 189, 96, 213, 252, 145, 87, 120, 208, 207, 237, 240, 13, 77, 227, 87, 205, 188, 30, 199, 223, 241, 22, 29, 39, 75, 89, 239, 66, 232, 247, 149, 78, 117, 165, 243, 135, 24, 175, 118, 220, 233, 198, 237, 119, 44, 156, 101, 88, 234, 14, 119, 244, 177, 42, 31, 191, 198, 109, 232, 166, 107, 219, 100, 254, 183, 97, 135, 195, 55, 126, 37, 49, 250, 199, 184, 52, 50, 187, 255, 26, 199, 55, 117, 171, 193, 59, 237, 116, 116, 157, 223, 47, 120, 85, 143, 150, 150, 102, 223, 3, 224, 152, 107, 89, 37, 235, 83, 249, 183, 155, 31, 89, 40, 153, 190, 4, 102, 127, 240, 174, 245, 215, 31, 42, 153, 37, 242, 171, 255, 45, 53, 213, 125, 180, 92, 123, 217, 146, 19, 118, 7, 219, 86, 89, 58, 14, 120, 235, 201, 246, 153, 33, 174, 158, 251, 68, 186, 35, 56, 6, 236, 157, 204, 79, 234, 231, 219, 146, 126, 96, 83, 126, 154, 202, 195, 170, 197, 240, 143, 41, 83, 165, 133, 32, 127, 123, 73, 8, 43, 219, 85, 78, 167, 102, 8, 171, 165, 147, 101, 183, 71, 137, 107, 152, 121, 252, 91, 157, 201, 126, 248, 190, 97, 230, 171, 107, 154, 130, 252, 182, 235, 138, 187, 52, 30, 181, 241, 232, 30, 87, 19, 99, 125, 236, 45, 221, 46, 74, 227, 236, 51, 129, 34, 95, 174, 110, 179, 179, 29, 218, 177, 127, 83, 159, 201, 23, 222, 232, 112, 135, 74, 14, 106, 222, 201, 63, 205, 117, 120, 192, 44, 223, 97, 211, 121, 251, 125, 251, 7, 116, 209, 119, 27, 1, 6, 147, 107, 252, 74, 103, 37, 37, 19, 150, 158, 48, 130, 88, 6, 143, 200, 89, 244, 10, 1, 111, 15, 62, 41, 116, 79, 202, 133, 94, 131, 151, 214, 253, 53, 220, 209, 14, 220, 52, 204, 124, 77, 77, 163, 43, 66, 231, 222, 99, 243, 7, 30, 223, 188, 228, 132, 94, 115, 1, 192, 12, 253, 3, 173, 13, 245, 63, 161, 119, 130, 251, 197, 111, 12, 222, 54, 250, 172, 36, 219, 150, 123, 27, 112, 239, 107, 255, 205, 125, 38, 237, 59, 218, 119, 27, 115, 63, 84, 45, 156, 127, 192, 181, 100, 29, 221, 144, 46, 60, 188, 231, 222, 121, 58, 253, 109, 220, 239, 78, 208, 166, 96, 64, 193, 86, 237, 39, 252, 99, 192, 235, 254, 93, 156, 113, 19, 211, 111, 126, 157, 36, 252, 182, 39, 230, 115, 226, 214, 126, 147, 143, 59, 254, 237, 56, 158, 180, 37, 100, 97, 199, 204, 228, 211, 73, 120, 120, 92, 138, 219, 206, 207, 141, 247, 234, 194, 48, 119, 17, 246, 246, 100, 221, 11, 149, 239, 250, 204, 56, 223, 103, 109, 206, 250, 31, 11, 234, 78, 203, 172, 197, 231, 31, 72, 12, 97, 234, 206, 65, 137, 209, 9, 66, 48, 94, 24, 185, 4, 174, 6, 69, 27, 189, 152, 226, 215, 158, 29, 180, 236, 55, 226, 248, 33, 127, 250, 146, 19, 198, 160, 200, 10, 126, 11, 45, 154, 223, 241, 194, 29, 109, 192, 1, 176, 32, 205, 117, 143, 90, 108, 5, 128, 176, 6, 170, 127, 195, 198, 112, 251, 27, 241, 160, 24, 22, 100, 54, 231, 215, 163, 182, 115, 219, 55, 172, 166, 224, 86, 117, 193, 31, 177, 248, 5, 151, 29, 193, 252, 249, 248, 202, 134, 195, 194, 125, 82, 248, 107, 133, 141, 37, 7, 23, 146, 202, 150, 147, 255, 253, 69, 213, 162, 41, 127, 78, 120, 181, 111, 94, 252, 109, 211, 102, 57, 216, 216, 73, 216, 77, 231, 158, 224, 100, 52, 190, 119, 26, 191, 50, 113, 121, 175, 179, 119, 255, 111, 60, 17, 30, 95, 53, 58, 43, 140, 165, 243, 53, 253, 29, 30, 151, 70, 220, 214, 71, 76, 232, 209, 96, 187, 16, 67, 124, 162, 163, 15, 219, 47, 204, 42, 113, 27, 49, 250, 232, 201, 160, 16, 174, 24, 131, 80, 94, 192, 212, 44, 246, 84, 210, 252, 13, 225, 73, 111, 112, 227, 190, 78, 247, 127, 154, 29, 170, 3, 3, 11, 12, 131, 100, 194, 29, 122, 240, 149, 80, 120, 144, 106, 186, 0, 208, 252, 213, 184, 60, 219, 14, 166, 122, 167, 106, 189, 173, 49, 200, 191, 232, 55, 127, 157, 44, 252, 26, 128, 240, 22, 76, 159, 131, 123, 112, 210, 222, 57, 86, 181, 164, 10, 191, 78, 107, 250, 92, 65, 83, 85, 160, 254, 21, 167, 223, 210, 126, 139, 158, 134, 241, 183, 153, 193, 251, 77, 209, 122, 46, 26, 167, 83, 251, 61, 126, 188, 69, 67, 245, 255, 49, 139, 127, 123, 161, 255, 54, 167, 154, 8, 39, 152, 144, 127, 155, 178, 40, 79, 227, 142, 147, 201, 102, 103, 161, 234, 205, 173, 171, 113, 22, 16, 172, 103, 119, 73, 73, 93, 135, 93, 240, 100, 183, 194, 199, 89, 86, 197, 121, 103, 187, 0, 96, 201, 181, 188, 171, 123, 200, 223, 23, 242, 70, 21, 158, 192, 113, 12, 194, 219, 94, 73, 225, 226, 9, 55, 246, 110, 127, 255, 90, 62, 93, 60, 88, 225, 92, 225, 189, 123, 156, 168, 231, 87, 175, 95, 0, 232, 191, 243, 165, 185, 10, 55, 140, 209, 219, 1, 132, 87, 84, 37, 87, 191, 58, 8, 91, 10, 179, 208, 100, 1, 160, 220, 34, 53, 25, 231, 91, 121, 201, 85, 7, 91, 238, 146, 157, 223, 170, 226, 103, 124, 231, 95, 108, 5, 0, 91, 119, 254, 137, 37, 185, 5, 22, 220, 111, 13, 175, 84, 71, 111, 247, 97, 203, 244, 157, 253, 147, 89, 88, 208, 245, 175, 186, 195, 154, 179, 193, 133, 118, 91, 222, 176, 33, 60, 48, 218, 246, 152, 134, 26, 238, 251, 23, 36, 68, 22, 185, 130, 71, 88, 240, 14, 143, 59, 219, 158, 40, 136, 170, 214, 81, 106, 103, 177, 41, 205, 121, 247, 59, 57, 38, 212, 119, 197, 23, 220, 235, 118, 151, 102, 127, 196, 85, 223, 122, 173, 10, 19, 122, 207, 108, 13, 64, 154, 94, 51, 56, 237, 21, 150, 93, 163, 209, 142, 209, 97, 222, 246, 78, 215, 58, 41, 246, 245, 238, 18, 186, 253, 197, 181, 130, 126, 193, 245, 197, 201, 52, 205, 115, 233, 59, 56, 144, 13, 78, 220, 155, 83, 101, 45, 106, 247, 234, 153, 27, 63, 142, 209, 31, 209, 208, 37, 212, 239, 101, 113, 89, 75, 215, 117, 219, 179, 225, 226, 190, 244, 237, 35, 197, 191, 214, 57, 118, 102, 150, 164, 150, 216, 135, 94, 237, 182, 10, 119, 18, 159, 52, 41, 120, 80, 35, 210, 242, 78, 71, 27, 162, 53, 150, 220, 232, 76, 68, 111, 77, 2, 122, 228, 225, 174, 44, 42, 107, 127, 185, 253, 19, 217, 112, 183, 111, 69, 20, 125, 195, 31, 183, 204, 214, 207, 200, 65, 219, 254, 127, 101, 51, 91, 235, 251, 248, 138, 116, 88, 123, 194, 29, 105, 127, 247, 123, 181, 190, 142, 79, 63, 125, 248, 174, 247, 146, 168, 125, 250, 173, 101, 79, 167, 212, 18, 244, 79, 80, 215, 23, 223, 112, 222, 171, 199, 29, 47, 121, 180, 150, 133, 228, 34, 89, 22, 69, 15, 250, 123, 219, 225, 239, 231, 38, 137, 246, 68, 209, 223, 251, 227, 38, 238, 246, 135, 235, 29, 178, 66, 216, 197, 221, 167, 112, 156, 136, 207, 91, 167, 227, 227, 9, 103, 196, 120, 189, 122, 18, 69, 37, 252, 199, 20, 201, 195, 234, 30, 80, 55, 165, 206, 130, 214, 231, 138, 235, 244, 173, 210, 232, 155, 139, 243, 31, 57, 187, 53, 110, 118, 75, 248, 205, 222, 227, 209, 189, 109, 252, 184, 125, 155, 151, 186, 243, 204, 174, 114, 77, 220, 193, 40, 250, 182, 230, 235, 5, 219, 218, 47, 253, 114, 58, 164, 227, 241, 203, 218, 22, 63, 155, 14, 119, 191, 87, 232, 149, 41, 91, 188, 139, 49, 43, 28, 78, 239, 144, 201, 68, 31, 126, 212, 159, 103, 158, 12, 249, 53, 0, 59, 12, 124, 112, 8, 26, 226, 12, 190, 111, 63, 40, 50, 127, 217, 254, 85, 80, 225, 124, 65, 53, 108, 147, 53, 0, 67, 88, 20, 38, 114, 180, 145, 202, 125, 174, 170, 177, 91, 246, 12, 63, 205, 41, 121, 91, 226, 104, 11, 42, 153, 203, 191, 50, 29, 173, 132, 93, 178, 8, 239, 103, 127, 27, 40, 89, 159, 13, 173, 255, 176, 74, 61, 119, 117, 25, 92, 169, 213, 80, 13, 28, 196, 153, 181, 189, 209, 85, 184, 26, 64, 37, 181, 64, 206, 234, 207, 106, 218, 180, 142, 58, 217, 15, 245, 53, 200, 75, 87, 204, 175, 130, 182, 54, 182, 180, 31, 140, 220, 214, 39, 141, 119, 208, 183, 191, 29, 216, 242, 156, 3, 110, 176, 222, 199, 108, 244, 56, 40, 33, 246, 219, 12, 55, 250, 115, 147, 163, 140, 231, 94, 80, 101, 22, 229, 79, 167, 184, 113, 212, 209, 31, 94, 37, 207, 108, 13, 128, 170, 215, 115, 237, 189, 204, 161, 134, 11, 32, 109, 75, 233, 85, 85, 18, 99, 92, 124, 11, 91, 117, 110, 147, 221, 223, 211, 207, 228, 184, 187, 193, 108, 53, 38, 183, 142, 102, 246, 92, 81, 199, 250, 157, 142, 195, 223, 241, 202, 51, 18, 54, 158, 24, 253, 0, 228, 47, 59, 41, 0, 12, 174, 177, 8, 14, 4, 37, 39, 140, 233, 92, 14, 215, 227, 167, 167, 222, 184, 135, 73, 129, 54, 172, 182, 58, 231, 222, 112, 186, 241, 21, 125, 159, 188, 126, 152, 56, 171, 78, 51, 181, 200, 158, 2, 72, 125, 148, 239, 78, 166, 236, 23, 124, 78, 6, 59, 124, 118, 178, 78, 231, 31, 229, 219, 95, 102, 111, 63, 242, 11, 216, 207, 106, 217, 189, 214, 208, 189, 182, 33, 3, 10, 14, 163, 164, 33, 63, 143, 21, 134, 146, 67, 93, 134, 209, 235, 107, 182, 109, 74, 65, 99, 195, 233, 251, 170, 225, 45, 143, 226, 131, 118, 62, 47, 163, 14, 55, 217, 232, 111, 152, 52, 133, 22, 254, 246, 56, 76, 28, 227, 78, 51, 171, 5, 128, 224, 36, 109, 155, 96, 125, 199, 59, 69, 54, 161, 109, 92, 199, 89, 43, 100, 247, 111, 71, 162, 237, 110, 200, 99, 241, 236, 221, 170, 41, 91, 207, 131, 79, 168, 225, 220, 107, 195, 81, 254, 152, 63, 136, 34, 189, 167, 193, 13, 173, 220, 203, 65, 220, 223, 6, 247, 171, 234, 207, 9, 122, 29, 71, 52, 90, 131, 14, 39, 146, 121, 221, 107, 47, 102, 81, 247, 57, 117, 45, 101, 196, 94, 50, 98, 47, 229, 121, 192, 175, 30, 77, 179, 184, 235, 23, 105, 223, 194, 249, 94, 110, 47, 91, 153, 149, 112, 38, 138, 190, 158, 45, 216, 106, 251, 78, 125, 58, 29, 222, 217, 173, 158, 237, 13, 218, 218, 88, 246, 104, 250, 219, 56, 223, 90, 201, 255, 156, 205, 191, 236, 70, 235, 127, 57, 138, 62, 237, 60, 83, 250, 21, 85, 240, 63, 222, 157, 230, 82, 21, 14, 163, 37, 63, 136, 162, 139, 189, 186, 200, 168, 222, 255, 137, 255, 160, 238, 127, 216, 13, 137, 48, 172, 213, 242, 247, 78, 134, 227, 235, 25, 115, 149, 254, 99, 196, 110, 102, 100, 225, 244, 253, 105, 255, 59, 81, 244, 221, 180, 191, 251, 23, 4, 39, 31, 205, 134, 235, 237, 179, 70, 127, 151, 122, 47, 194, 122, 227, 112, 171, 117, 229, 151, 234, 93, 202, 224, 216, 204, 226, 141, 228, 54, 192, 224, 233, 22, 242, 175, 254, 49, 207, 214, 193, 178, 95, 214, 149, 95, 29, 94, 143, 159, 163, 227, 172, 94, 116, 119, 174, 142, 180, 254, 162, 156, 133, 172, 209, 52, 186, 229, 221, 187, 245, 224, 252, 224, 245, 30, 188, 75, 241, 21, 223, 53, 243, 166, 155, 157, 129, 138, 5, 128, 11, 46, 212, 65, 102, 224, 60, 97, 27, 0, 239, 79, 57, 42, 229, 82, 7, 192, 159, 103, 51, 216, 97, 173, 115, 69, 54, 92, 216, 215, 114, 14, 142, 133, 19, 44, 148, 145, 182, 145, 170, 123, 94, 221, 215, 150, 234, 67, 249, 186, 215, 207, 219, 218, 40, 142, 235, 111, 145, 237, 47, 163, 249, 33, 149, 114, 118, 100, 75, 57, 85, 90, 0, 205, 166, 173, 183, 239, 234, 40, 250, 137, 238, 173, 59, 97, 255, 183, 146, 1, 61, 35, 175, 183, 255, 37, 39, 231, 238, 143, 219, 84, 72, 91, 115, 220, 153, 112, 228, 94, 221, 99, 254, 113, 54, 243, 106, 173, 207, 120, 185, 118, 190, 191, 236, 142, 179, 212, 180, 126, 171, 18, 209, 191, 118, 135, 237, 180, 124, 244, 90, 221, 156, 252, 100, 119, 216, 62, 213, 90, 32, 154, 216, 157, 13, 143, 215, 103, 141, 114, 253, 147, 95, 62, 190, 213, 223, 108, 242, 145, 52, 229, 248, 190, 108, 137, 246, 102, 198, 255, 110, 235, 99, 201, 85, 81, 100, 247, 195, 123, 97, 251, 111, 234, 242, 79, 99, 76, 191, 237, 190, 174, 90, 91, 220, 150, 14, 119, 125, 175, 212, 234, 159, 249, 240, 94, 20, 253, 67, 182, 212, 115, 212, 187, 197, 46, 8, 22, 69, 136, 85, 0, 179, 150, 56, 89, 88, 230, 88, 100, 99, 199, 237, 179, 99, 108, 89, 28, 239, 111, 181, 86, 106, 47, 123, 166, 120, 186, 99, 247, 170, 93, 204, 247, 138, 127, 155, 27, 99, 117, 60, 169, 18, 146, 147, 176, 246, 183, 254, 65, 17, 110, 242, 127, 93, 177, 223, 31, 30, 126, 72, 69, 175, 223, 228, 166, 254, 124, 110, 216, 27, 60, 26, 69, 31, 177, 20, 46, 198, 160, 141, 245, 219, 186, 18, 125, 216, 207, 251, 57, 185, 6, 153, 254, 175, 243, 97, 72, 235, 244, 163, 89, 58, 47, 25, 88, 0, 213, 222, 186, 198, 63, 48, 100, 115, 142, 221, 167, 127, 33, 220, 229, 109, 143, 43, 111, 180, 194, 240, 111, 117, 194, 245, 175, 136, 47, 248, 235, 177, 151, 213, 139, 64, 13, 11, 95, 182, 211, 124, 55, 36, 69, 219, 207, 42, 127, 95, 232, 14, 239, 76, 26, 228, 126, 36, 138, 126, 145, 93, 162, 156, 251, 85, 149, 144, 190, 152, 206, 161, 246, 81, 201, 52, 217, 240, 232, 125, 58, 249, 221, 164, 151, 13, 220, 145, 197, 112, 40, 210, 54, 215, 250, 191, 110, 45, 84, 54, 58, 58, 235, 57, 185, 44, 119, 70, 212, 214, 251, 124, 20, 253, 163, 31, 217, 134, 111, 232, 100, 240, 5, 191, 208, 127, 229, 95, 249, 211, 212, 51, 164, 194, 87, 91, 5, 178, 71, 252, 216, 106, 110, 244, 231, 71, 94, 54, 116, 44, 155, 192, 4, 62, 163, 228, 45, 142, 48, 21, 69, 23, 248, 57, 85, 29, 208, 44, 134, 243, 147, 218, 130, 104, 157, 146, 96, 5, 84, 59, 6, 223, 171, 238, 162, 86, 107, 197, 183, 245, 61, 191, 131, 127, 223, 91, 187, 65, 73, 131, 147, 41, 155, 196, 15, 35, 31, 147, 195, 123, 123, 131, 239, 51, 190, 18, 199, 185, 231, 52, 235, 189, 79, 239, 91, 212, 27, 119, 29, 91, 73, 39, 120, 44, 41, 110, 215, 17, 175, 27, 135, 214, 175, 243, 38, 192, 164, 93, 134, 127, 252, 117, 39, 174, 161, 95, 13, 222, 156, 198, 143, 118, 79, 206, 105, 252, 149, 139, 95, 207, 236, 219, 147, 16, 78, 168, 119, 29, 133, 219, 99, 188, 81, 247, 131, 157, 109, 174, 126, 143, 110, 131, 63, 39, 75, 211, 189, 89, 59, 3, 173, 147, 206, 244, 104, 175, 103, 219, 100, 142, 104, 164, 65, 187, 239, 159, 111, 114, 24, 199, 217, 163, 79, 161, 123, 249, 11, 82, 70, 74, 136, 102, 210, 35, 153, 125, 242, 106, 25, 247, 31, 135, 28, 117, 25, 193, 124, 179, 216, 232, 47, 72, 75, 111, 132, 191, 31, 38, 43, 189, 221, 111, 218, 38, 198, 207, 102, 27, 128, 112, 217, 89, 3, 216, 38, 242, 186, 144, 227, 172, 88, 3, 96, 20, 235, 238, 232, 87, 181, 108, 85, 100, 186, 2, 113, 66, 71, 247, 102, 70, 191, 255, 161, 123, 44, 91, 252, 251, 126, 118, 159, 177, 248, 175, 61, 117, 84, 104, 127, 208, 187, 250, 113, 146, 49, 143, 123, 181, 107, 95, 174, 110, 168, 6, 125, 186, 236, 186, 61, 151, 85, 231, 42, 33, 247, 203, 232, 131, 78, 85, 163, 93, 251, 30, 112, 174, 10, 71, 143, 180, 223, 156, 170, 234, 220, 146, 253, 102, 101, 141, 15, 221, 157, 13, 103, 125, 50, 90, 117, 73, 20, 21, 254, 150, 77, 53, 94, 223, 154, 40, 218, 250, 182, 31, 197, 207, 84, 37, 238, 92, 113, 239, 121, 102, 208, 61, 67, 127, 214, 225, 134, 90, 211, 247, 248, 243, 247, 26, 151, 255, 40, 141, 65, 53, 5, 222, 149, 70, 86, 35, 112, 177, 115, 11, 33, 157, 186, 250, 183, 238, 187, 29, 241, 75, 121, 251, 238, 107, 181, 86, 189, 156, 198, 116, 153, 110, 67, 189, 225, 221, 11, 93, 167, 154, 154, 221, 223, 73, 127, 175, 243, 123, 34, 138, 190, 210, 63, 190, 99, 15, 200, 95, 149, 2, 245, 6, 221, 131, 218, 227, 215, 242, 188, 241, 88, 171, 181, 252, 241, 122, 151, 66, 108, 8, 204, 65, 1, 255, 170, 55, 109, 113, 156, 92, 15, 172, 119, 147, 171, 3, 240, 38, 117, 185, 48, 254, 27, 200, 84, 166, 207, 189, 4, 36, 89, 196, 198, 220, 178, 215, 59, 87, 40, 206, 59, 162, 235, 189, 2, 244, 45, 234, 141, 219, 205, 143, 219, 175, 146, 126, 47, 255, 39, 45, 95, 102, 28, 220, 229, 208, 184, 229, 239, 121, 87, 202, 102, 148, 188, 176, 70, 231, 143, 122, 67, 248, 18, 26, 91, 86, 242, 72, 140, 189, 149, 235, 125, 234, 150, 164, 93, 29, 75, 14, 75, 251, 138, 93, 181, 16, 110, 220, 26, 222, 152, 140, 13, 62, 234, 95, 71, 175, 120, 87, 252, 249, 5, 214, 215, 18, 57, 205, 159, 85, 189, 59, 75, 233, 109, 219, 254, 91, 6, 221, 183, 21, 102, 251, 65, 82, 27, 49, 118, 85, 188, 95, 3, 99, 41, 41, 190, 186, 47, 174, 37, 168, 223, 35, 10, 158, 244, 113, 116, 26, 120, 49, 142, 246, 63, 167, 198, 203, 150, 101, 174, 241, 132, 186, 229, 37, 157, 166, 105, 238, 93, 241, 97, 186, 234, 175, 237, 75, 183, 193, 162, 239, 130, 253, 178, 93, 52, 93, 19, 227, 194, 101, 83, 3, 208, 132, 115, 18, 167, 115, 210, 115, 78, 172, 182, 15, 36, 161, 163, 207, 39, 146, 93, 162, 59, 236, 124, 22, 31, 40, 42, 39, 180, 255, 14, 111, 203, 182, 42, 95, 189, 8, 195, 66, 118, 232, 211, 64, 47, 173, 245, 158, 0, 28, 11, 45, 162, 222, 184, 251, 185, 20, 236, 232, 105, 94, 45, 223, 86, 253, 220, 81, 87, 16, 154, 123, 15, 186, 255, 102, 188, 130, 69, 103, 163, 218, 253, 242, 85, 101, 188, 12, 10, 66, 178, 190, 159, 206, 214, 122, 81, 95, 253, 235, 232, 197, 194, 119, 144, 91, 242, 138, 223, 16, 88, 37, 159, 69, 211, 218, 137, 53, 204, 124, 248, 250, 81, 171, 252, 246, 195, 248, 239, 34, 200, 21, 62, 20, 189, 237, 233, 253, 255, 85, 80, 133, 195, 155, 253, 52, 216, 244, 249, 167, 130, 138, 114, 89, 109, 92, 120, 203, 193, 150, 186, 171, 83, 45, 150, 225, 166, 46, 222, 255, 252, 92, 246, 31, 106, 238, 196, 20, 166, 171, 211, 30, 46, 71, 245, 76, 21, 158, 132, 103, 174, 0, 178, 181, 91, 43, 234, 176, 55, 231, 92, 143, 214, 220, 141, 165, 202, 45, 128, 11, 245, 95, 224, 145, 30, 198, 115, 31, 123, 104, 43, 107, 95, 244, 171, 199, 44, 179, 123, 53, 205, 213, 245, 52, 74, 105, 181, 98, 53, 132, 58, 55, 87, 245, 106, 11, 105, 171, 179, 42, 223, 94, 11, 96, 175, 146, 82, 105, 173, 63, 44, 171, 63, 202, 97, 98, 116, 170, 220, 211, 201, 147, 188, 90, 190, 173, 250, 185, 157, 142, 205, 190, 223, 212, 127, 160, 95, 220, 88, 21, 229, 7, 212, 192, 165, 96, 125, 100, 139, 175, 185, 79, 0, 215, 132, 81, 38, 6, 55, 102, 107, 61, 233, 187, 235, 144, 38, 204, 198, 133, 115, 141, 59, 230, 90, 61, 121, 177, 175, 48, 146, 99, 170, 22, 142, 206, 20, 254, 52, 198, 200, 141, 173, 214, 219, 187, 130, 249, 47, 252, 110, 126, 148, 214, 199, 99, 254, 184, 83, 99, 173, 127, 29, 93, 87, 170, 165, 213, 255, 248, 113, 46, 249, 236, 160, 22, 246, 171, 90, 173, 39, 182, 123, 111, 173, 180, 35, 195, 235, 106, 155, 90, 111, 80, 179, 251, 111, 133, 49, 190, 251, 245, 112, 220, 98, 26, 179, 92, 119, 106, 22, 71, 80, 70, 47, 203, 229, 180, 137, 91, 157, 185, 69, 44, 210, 65, 255, 170, 247, 69, 187, 234, 108, 233, 90, 203, 105, 248, 228, 20, 196, 186, 189, 141, 220, 251, 139, 84, 189, 172, 235, 137, 1, 47, 94, 120, 211, 210, 180, 220, 191, 18, 170, 247, 10, 80, 141, 192, 156, 229, 239, 122, 122, 38, 54, 9, 229, 201, 170, 27, 173, 26, 178, 163, 174, 36, 156, 176, 245, 211, 158, 137, 116, 217, 50, 180, 172, 141, 103, 166, 107, 96, 138, 146, 86, 223, 99, 136, 138, 253, 114, 123, 221, 73, 113, 72, 126, 217, 96, 105, 242, 215, 255, 158, 39, 108, 92, 221, 225, 245, 160, 177, 161, 165, 42, 107, 20, 87, 247, 242, 182, 121, 251, 155, 229, 53, 44, 227, 28, 13, 106, 38, 118, 121, 183, 201, 170, 166, 169, 227, 109, 235, 150, 191, 176, 214, 161, 48, 78, 29, 31, 14, 78, 215, 192, 217, 124, 22, 198, 191, 21, 152, 95, 150, 255, 158, 245, 164, 166, 161, 145, 114, 159, 181, 107, 234, 230, 97, 148, 207, 3, 155, 242, 233, 174, 107, 184, 211, 125, 41, 152, 147, 168, 61, 86, 235, 217, 136, 65, 81, 154, 103, 171, 6, 192, 242, 120, 56, 60, 22, 182, 139, 210, 200, 184, 114, 129, 210, 123, 196, 86, 0, 184, 122, 250, 42, 251, 53, 61, 86, 244, 193, 117, 22, 173, 86, 132, 221, 95, 180, 131, 174, 93, 109, 219, 131, 168, 118, 241, 245, 11, 53, 250, 171, 239, 93, 216, 138, 48, 31, 180, 220, 85, 26, 247, 39, 234, 38, 212, 217, 115, 154, 111, 168, 219, 170, 229, 30, 87, 162, 90, 71, 162, 200, 222, 159, 221, 11, 89, 122, 211, 49, 243, 249, 91, 121, 183, 26, 27, 93, 152, 69, 86, 218, 87, 251, 179, 196, 93, 95, 209, 148, 186, 151, 155, 182, 183, 5, 205, 118, 144, 129, 181, 61, 249, 184, 58, 123, 246, 199, 182, 185, 151, 148, 239, 253, 250, 38, 44, 18, 1, 59, 249, 232, 128, 99, 251, 125, 47, 76, 169, 241, 229, 186, 207, 165, 67, 139, 226, 91, 39, 66, 29, 235, 78, 101, 199, 186, 233, 92, 63, 163, 190, 167, 212, 217, 85, 242, 215, 180, 111, 52, 82, 89, 23, 174, 131, 104, 157, 150, 53, 165, 101, 214, 26, 180, 191, 91, 22, 237, 162, 114, 183, 186, 223, 87, 119, 163, 58, 39, 88, 246, 206, 215, 171, 80, 250, 191, 176, 199, 153, 152, 222, 170, 2, 126, 13, 64, 189, 87, 212, 85, 211, 82, 58, 125, 208, 94, 96, 142]);
fileData8.push.apply(fileData8, [167, 183, 52, 67, 76, 128, 0, 2, 121, 1, 191, 70, 68, 167, 136, 248, 168, 93, 136, 44, 186, 32, 135, 73, 203, 253, 128, 208, 110, 10, 101, 166, 106, 0, 58, 65, 77, 71, 62, 183, 123, 39, 155, 202, 227, 98, 136, 215, 174, 40, 9, 8, 32, 128, 192, 188, 16, 176, 39, 30, 174, 242, 30, 189, 220, 166, 23, 18, 173, 120, 126, 94, 36, 190, 230, 68, 174, 109, 181, 38, 21, 229, 45, 217, 203, 162, 242, 11, 56, 48, 75, 205, 150, 242, 233, 104, 98, 56, 201, 245, 45, 173, 214, 165, 147, 77, 196, 190, 88, 226, 156, 177, 123, 70, 139, 5, 148, 124, 34, 128, 64, 51, 2, 186, 246, 155, 80, 131, 200, 92, 27, 204, 248, 246, 102, 150, 54, 63, 98, 85, 181, 251, 19, 74, 105, 75, 54, 118, 44, 183, 151, 174, 89, 103, 183, 103, 21, 46, 121, 181, 251, 61, 127, 63, 117, 191, 121, 187, 94, 236, 96, 255, 121, 98, 193, 110, 47, 219, 109, 191, 35, 173, 214, 57, 141, 222, 106, 182, 133, 45, 134, 64, 1, 96, 49, 172, 101, 242, 136, 192, 60, 21, 176, 6, 199, 189, 131, 212, 249, 202, 194, 141, 122, 25, 147, 19, 236, 92, 176, 238, 95, 156, 17, 139, 182, 87, 5, 129, 211, 202, 188, 181, 133, 89, 88, 237, 97, 90, 173, 51, 173, 40, 90, 148, 53, 60, 51, 177, 49, 87, 44, 0, 204, 222, 191, 177, 141, 134, 49, 223, 210, 59, 90, 46, 153, 11, 129, 5, 41, 96, 79, 254, 168, 186, 191, 160, 161, 91, 47, 187, 43, 110, 104, 226, 209, 203, 5, 105, 73, 166, 16, 40, 16, 40, 109, 3, 160, 98, 229, 218, 108, 190, 227, 78, 127, 54, 118, 14, 245, 181, 236, 113, 132, 44, 204, 249, 244, 102, 73, 165, 15, 1, 4, 2, 129, 165, 193, 24, 27, 145, 220, 255, 213, 201, 191, 190, 191, 128, 45, 92, 12, 35, 17, 88, 224, 2, 165, 53, 0, 122, 230, 202, 30, 187, 176, 71, 207, 20, 214, 231, 238, 191, 117, 199, 206, 153, 79, 85, 23, 157, 29, 199, 183, 40, 61, 86, 14, 208, 99, 130, 235, 231, 253, 61, 176, 57, 99, 75, 66, 16, 152, 105, 129, 238, 254, 124, 131, 22, 235, 190, 107, 172, 163, 251, 191, 181, 191, 92, 104, 166, 179, 54, 223, 151, 183, 55, 138, 150, 182, 189, 76, 44, 228, 6, 135, 94, 70, 23, 212, 128, 110, 175, 16, 16, 64, 0, 1, 4, 16, 168, 32, 160, 71, 174, 213, 56, 239, 15, 53, 135, 85, 199, 88, 1, 237, 167, 106, 135, 112, 166, 66, 12, 76, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 208, 176, 192, 255, 3, 127, 247, 162, 107, 248, 198, 64, 132, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'font.png', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 6, 0, 0, 0, 92, 114, 168, 102, 0, 0, 0, 4, 115, 66, 73, 84, 8, 8, 8, 8, 124, 8, 100, 136, 0, 0, 9, 24, 73, 68, 65, 84, 120, 156, 237, 221, 219, 142, 163, 70, 20, 5, 80, 59, 202, 255, 255, 178, 243, 16, 145, 32, 15, 216, 166, 78, 65, 1, 123, 45, 169, 53, 51, 82, 215, 133, 75, 109, 46, 238, 233, 243, 124, 189, 94, 175, 7, 16, 233, 175, 209, 19, 0, 198, 17, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 124, 240, 124, 62, 71, 79, 1, 118, 181, 107, 0, 84, 22, 208, 212, 182, 181, 143, 121, 187, 150, 62, 42, 227, 63, 159, 207, 197, 118, 91, 250, 90, 235, 99, 235, 60, 170, 122, 28, 195, 74, 91, 33, 220, 199, 218, 126, 116, 7, 176, 224, 249, 124, 62, 166, 255, 35, 245, 122, 189, 54, 47, 220, 215, 235, 245, 71, 187, 121, 159, 173, 125, 28, 109, 203, 156, 151, 84, 230, 63, 181, 173, 140, 47, 60, 254, 245, 105, 63, 158, 54, 0, 230, 11, 112, 171, 249, 213, 163, 199, 149, 164, 250, 31, 38, 171, 39, 114, 171, 43, 255, 71, 207, 105, 159, 89, 196, 53, 223, 206, 189, 191, 15, 156, 203, 97, 222, 175, 30, 71, 46, 192, 249, 73, 219, 122, 21, 123, 239, 35, 81, 143, 11, 192, 252, 239, 71, 239, 199, 247, 224, 58, 235, 113, 188, 101, 0, 84, 205, 23, 96, 235, 2, 158, 183, 237, 113, 18, 142, 186, 139, 184, 162, 17, 193, 191, 54, 135, 145, 126, 217, 254, 211, 62, 2, 84, 244, 120, 4, 104, 125, 7, 48, 159, 195, 252, 14, 96, 75, 63, 103, 121, 7, 192, 117, 253, 26, 126, 187, 6, 192, 232, 244, 157, 22, 209, 214, 185, 244, 120, 251, 222, 107, 219, 123, 188, 12, 75, 213, 99, 159, 221, 61, 128, 79, 251, 49, 224, 72, 149, 71, 128, 247, 239, 159, 250, 218, 210, 207, 188, 141, 151, 97, 185, 42, 31, 129, 255, 252, 137, 147, 223, 9, 184, 206, 149, 183, 182, 15, 174, 190, 255, 174, 62, 255, 95, 8, 0, 8, 118, 203, 151, 128, 192, 111, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 91, 173, 13, 56, 47, 74, 80, 249, 189, 240, 173, 237, 171, 227, 143, 156, 255, 82, 65, 135, 74, 31, 87, 27, 191, 71, 123, 106, 126, 45, 78, 186, 24, 0, 239, 5, 17, 90, 11, 36, 84, 235, 234, 181, 142, 223, 99, 254, 213, 138, 60, 61, 11, 129, 110, 157, 255, 251, 247, 110, 221, 134, 51, 236, 255, 51, 25, 49, 255, 222, 5, 89, 214, 250, 59, 101, 117, 224, 234, 206, 174, 182, 63, 219, 9, 171, 170, 240, 56, 173, 23, 143, 119, 173, 37, 226, 247, 62, 118, 95, 3, 96, 116, 77, 186, 106, 18, 62, 30, 227, 110, 65, 207, 48, 126, 143, 59, 183, 214, 147, 183, 170, 199, 2, 24, 81, 218, 108, 116, 97, 216, 45, 223, 255, 49, 0, 70, 23, 166, 172, 158, 0, 149, 58, 241, 243, 109, 174, 60, 66, 244, 24, 127, 244, 237, 103, 245, 36, 28, 241, 24, 85, 237, 227, 44, 119, 78, 213, 59, 129, 111, 23, 161, 143, 47, 1, 71, 238, 128, 145, 227, 247, 60, 249, 71, 205, 97, 244, 241, 187, 186, 202, 194, 235, 241, 8, 48, 239, 107, 207, 182, 171, 31, 3, 94, 121, 241, 159, 225, 177, 37, 217, 93, 182, 191, 245, 238, 247, 245, 122, 253, 241, 213, 162, 215, 29, 240, 199, 49, 214, 170, 3, 247, 186, 5, 29, 245, 18, 101, 228, 252, 123, 140, 95, 253, 24, 176, 199, 179, 115, 235, 248, 61, 218, 79, 125, 156, 225, 133, 238, 213, 62, 5, 216, 210, 135, 242, 224, 220, 150, 199, 160, 239, 252, 36, 32, 183, 101, 241, 127, 39, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 127, 148, 6, 251, 84, 9, 229, 168, 2, 21, 191, 214, 54, 255, 181, 143, 106, 97, 146, 163, 11, 155, 140, 46, 140, 210, 171, 188, 122, 235, 248, 213, 62, 122, 150, 135, 223, 106, 169, 22, 223, 150, 34, 177, 107, 223, 219, 82, 162, 125, 242, 169, 221, 98, 109, 192, 165, 6, 173, 53, 230, 123, 84, 88, 29, 81, 159, 126, 116, 125, 192, 158, 213, 140, 70, 20, 200, 232, 81, 222, 186, 71, 31, 163, 183, 189, 165, 192, 110, 143, 130, 160, 191, 30, 255, 213, 71, 128, 231, 243, 249, 223, 87, 101, 2, 35, 171, 11, 79, 210, 11, 68, 164, 110, 255, 232, 2, 179, 87, 168, 76, 244, 177, 60, 248, 232, 210, 224, 243, 121, 92, 205, 150, 219, 190, 61, 218, 87, 141, 14, 237, 170, 43, 44, 190, 79, 142, 10, 144, 143, 1, 48, 157, 4, 173, 119, 1, 21, 163, 111, 97, 171, 70, 62, 2, 76, 42, 33, 186, 244, 12, 123, 37, 87, 185, 2, 127, 114, 196, 54, 172, 6, 64, 207, 19, 248, 138, 39, 208, 29, 76, 199, 32, 117, 255, 143, 14, 129, 43, 132, 207, 98, 0, 172, 157, 48, 87, 216, 160, 37, 87, 191, 18, 164, 113, 188, 254, 183, 247, 99, 248, 31, 1, 112, 150, 29, 95, 189, 125, 29, 93, 223, 190, 199, 71, 153, 173, 122, 108, 127, 213, 252, 241, 177, 114, 252, 122, 220, 137, 246, 248, 56, 122, 228, 186, 104, 253, 20, 97, 254, 239, 53, 207, 215, 89, 86, 60, 112, 56, 63, 9, 8, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 76, 0, 64, 48, 1, 0, 193, 4, 0, 4, 19, 0, 16, 236, 167, 202, 64, 71, 23, 198, 232, 61, 126, 165, 182, 125, 75, 31, 149, 242, 220, 107, 223, 251, 75, 31, 223, 190, 167, 210, 71, 101, 27, 42, 181, 237, 39, 149, 115, 160, 229, 248, 247, 172, 205, 216, 171, 204, 247, 30, 126, 170, 13, 216, 114, 0, 223, 191, 127, 107, 31, 61, 199, 111, 29, 251, 234, 37, 170, 42, 85, 121, 70, 22, 103, 93, 58, 119, 122, 245, 117, 164, 74, 89, 175, 105, 159, 239, 189, 239, 35, 30, 1, 174, 180, 136, 151, 78, 154, 17, 11, 176, 87, 105, 175, 234, 220, 71, 132, 240, 222, 245, 248, 206, 228, 150, 1, 48, 29, 192, 233, 43, 197, 210, 194, 107, 93, 136, 213, 171, 79, 143, 171, 215, 232, 202, 190, 163, 206, 157, 249, 118, 31, 94, 28, 116, 62, 137, 201, 200, 226, 146, 173, 227, 143, 188, 133, 173, 154, 47, 158, 171, 205, 157, 186, 247, 227, 61, 228, 17, 224, 245, 122, 253, 247, 85, 209, 154, 94, 243, 4, 228, 120, 239, 119, 16, 163, 198, 31, 41, 225, 81, 96, 247, 71, 128, 202, 85, 172, 245, 0, 220, 225, 160, 181, 238, 183, 247, 118, 45, 253, 28, 121, 11, 250, 109, 252, 209, 238, 30, 2, 171, 143, 0, 21, 75, 245, 201, 171, 33, 208, 242, 252, 58, 255, 247, 145, 70, 143, 95, 177, 180, 175, 71, 60, 138, 244, 248, 40, 152, 239, 158, 47, 123, 150, 155, 170, 126, 14, 127, 213, 241, 183, 252, 28, 133, 0, 128, 96, 183, 252, 24, 16, 248, 141, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 171, 1, 48, 178, 26, 202, 217, 42, 177, 140, 222, 23, 35, 42, 243, 92, 189, 159, 30, 99, 159, 237, 60, 220, 195, 199, 218, 128, 9, 59, 224, 204, 166, 106, 60, 87, 45, 221, 208, 107, 222, 87, 221, 254, 43, 248, 248, 8, 80, 9, 129, 30, 229, 185, 43, 237, 171, 227, 247, 154, 123, 101, 252, 249, 159, 173, 227, 247, 234, 163, 181, 125, 15, 213, 126, 142, 188, 144, 205, 247, 249, 210, 223, 91, 251, 104, 153, 199, 47, 237, 191, 214, 6, 108, 73, 223, 247, 58, 114, 45, 117, 229, 230, 109, 42, 197, 45, 171, 237, 91, 111, 63, 171, 219, 95, 169, 199, 87, 157, 255, 82, 31, 87, 189, 10, 143, 152, 251, 218, 190, 219, 50, 151, 163, 206, 255, 93, 94, 2, 246, 216, 225, 61, 15, 90, 165, 175, 214, 182, 243, 4, 30, 185, 120, 90, 199, 190, 234, 130, 159, 27, 181, 239, 207, 118, 254, 127, 178, 75, 117, 224, 199, 35, 227, 5, 202, 39, 119, 88, 64, 87, 55, 162, 170, 241, 213, 236, 114, 7, 48, 127, 121, 85, 185, 130, 246, 156, 207, 136, 182, 61, 251, 184, 226, 216, 103, 224, 101, 246, 103, 187, 220, 1, 188, 239, 244, 150, 36, 158, 247, 209, 250, 252, 60, 255, 119, 107, 251, 150, 19, 168, 58, 126, 85, 117, 254, 103, 224, 202, 221, 110, 203, 249, 167, 60, 120, 128, 171, 46, 166, 214, 11, 0, 191, 243, 147, 128, 55, 116, 197, 43, 254, 146, 43, 255, 12, 196, 85, 236, 246, 18, 144, 113, 70, 63, 130, 112, 29, 2, 224, 166, 44, 122, 126, 225, 17, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 224, 131, 187, 252, 122, 237, 84, 35, 171, 27, 87, 199, 62, 138, 223, 10, 204, 45, 141, 46, 134, 114, 149, 202, 202, 139, 119, 0, 61, 235, 147, 207, 251, 219, 210, 182, 215, 248, 173, 125, 180, 206, 125, 169, 77, 235, 246, 39, 183, 175, 30, 63, 126, 179, 122, 7, 208, 171, 62, 249, 136, 250, 244, 61, 82, 247, 14, 149, 101, 91, 231, 63, 223, 246, 17, 251, 224, 125, 188, 196, 0, 120, 47, 139, 182, 215, 113, 88, 125, 7, 208, 107, 176, 30, 245, 233, 91, 139, 123, 94, 245, 234, 49, 175, 236, 51, 178, 198, 125, 53, 64, 30, 143, 250, 252, 91, 218, 159, 41, 184, 91, 138, 179, 206, 171, 107, 79, 231, 240, 94, 219, 115, 219, 119, 0, 243, 29, 118, 166, 19, 130, 223, 245, 184, 131, 25, 173, 101, 30, 149, 139, 223, 86, 171, 119, 0, 189, 174, 156, 35, 174, 192, 189, 199, 28, 241, 38, 185, 199, 21, 184, 210, 199, 188, 125, 139, 234, 34, 60, 203, 2, 190, 187, 213, 59, 128, 247, 26, 243, 91, 140, 174, 79, 223, 171, 56, 102, 235, 73, 60, 122, 251, 171, 230, 219, 60, 226, 106, 186, 244, 2, 86, 24, 236, 227, 249, 90, 216, 179, 189, 15, 184, 52, 207, 115, 134, 99, 222, 122, 1, 155, 183, 175, 180, 173, 140, 125, 148, 219, 190, 3, 96, 156, 51, 44, 254, 199, 163, 190, 248, 42, 237, 207, 176, 253, 191, 88, 188, 3, 0, 50, 248, 81, 96, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 38, 0, 32, 152, 0, 128, 96, 2, 0, 130, 9, 0, 8, 246, 15, 127, 185, 94, 133, 221, 82, 249, 18, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'sign.png', fileData9, true, true, false);
var fileData10 = [];
fileData10.push.apply(fileData10, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 4, 0, 0, 0, 4, 0, 8, 6, 0, 0, 0, 127, 29, 43, 131, 0, 0, 10, 65, 105, 67, 67, 80, 73, 67, 67, 32, 80, 114, 111, 102, 105, 108, 101, 0, 0, 72, 13, 157, 150, 119, 84, 83, 217, 22, 135, 207, 189, 55, 189, 208, 18, 34, 32, 37, 244, 26, 122, 9, 32, 210, 59, 72, 21, 4, 81, 137, 73, 128, 80, 2, 134, 132, 38, 118, 68, 5, 70, 20, 17, 41, 86, 100, 84, 192, 1, 71, 135, 34, 99, 69, 20, 11, 131, 130, 98, 215, 9, 242, 16, 80, 198, 193, 81, 68, 69, 229, 221, 140, 107, 9, 239, 173, 53, 243, 222, 154, 253, 199, 89, 223, 217, 231, 183, 215, 217, 103, 239, 125, 215, 186, 0, 80, 252, 130, 4, 194, 116, 88, 1, 128, 52, 161, 88, 20, 238, 235, 193, 92, 18, 19, 203, 196, 247, 2, 24, 16, 1, 14, 88, 1, 192, 225, 102, 102, 4, 71, 248, 68, 2, 212, 252, 189, 61, 153, 153, 168, 72, 198, 179, 246, 238, 46, 128, 100, 187, 219, 44, 191, 80, 38, 115, 214, 255, 127, 145, 34, 55, 67, 36, 6, 0, 10, 69, 213, 54, 60, 126, 38, 23, 229, 2, 148, 83, 179, 197, 25, 50, 255, 4, 202, 244, 149, 41, 50, 134, 49, 50, 22, 161, 9, 162, 172, 34, 227, 196, 175, 108, 246, 167, 230, 43, 187, 201, 152, 151, 38, 228, 161, 26, 89, 206, 25, 188, 52, 158, 140, 187, 80, 222, 154, 37, 225, 163, 140, 4, 161, 92, 152, 37, 224, 103, 163, 124, 7, 101, 189, 84, 73, 154, 0, 229, 247, 40, 211, 211, 248, 156, 76, 0, 48, 20, 153, 95, 204, 231, 38, 161, 108, 137, 50, 69, 20, 25, 238, 137, 242, 2, 0, 8, 148, 196, 57, 188, 114, 14, 139, 249, 57, 104, 158, 0, 120, 166, 103, 228, 138, 4, 137, 73, 98, 166, 17, 215, 152, 105, 229, 232, 200, 102, 250, 241, 179, 83, 249, 98, 49, 43, 148, 195, 77, 225, 136, 120, 76, 207, 244, 180, 12, 142, 48, 23, 128, 175, 111, 150, 69, 1, 37, 89, 109, 153, 104, 145, 237, 173, 28, 237, 237, 89, 214, 230, 104, 249, 191, 217, 223, 30, 126, 83, 253, 61, 200, 122, 251, 85, 241, 38, 236, 207, 158, 65, 140, 158, 89, 223, 108, 236, 172, 47, 189, 22, 0, 246, 36, 90, 155, 29, 179, 190, 149, 85, 0, 180, 109, 6, 64, 229, 225, 172, 79, 239, 32, 0, 242, 5, 0, 180, 222, 156, 243, 30, 134, 108, 94, 146, 196, 226, 12, 39, 11, 139, 236, 236, 108, 115, 1, 159, 107, 46, 43, 232, 55, 251, 159, 130, 111, 202, 191, 134, 57, 247, 153, 203, 238, 251, 86, 59, 166, 23, 63, 129, 35, 73, 21, 51, 101, 69, 229, 166, 167, 166, 75, 68, 204, 204, 12, 14, 151, 207, 100, 253, 247, 16, 255, 227, 192, 57, 105, 205, 201, 195, 44, 156, 159, 192, 23, 241, 133, 232, 85, 81, 232, 148, 9, 132, 137, 104, 187, 133, 60, 129, 88, 144, 46, 100, 10, 132, 127, 213, 225, 127, 24, 54, 39, 7, 25, 126, 157, 107, 20, 104, 117, 95, 0, 125, 133, 57, 80, 184, 73, 7, 200, 111, 61, 0, 67, 35, 3, 36, 110, 63, 122, 2, 125, 235, 91, 16, 49, 10, 200, 190, 188, 104, 173, 145, 175, 115, 143, 50, 122, 254, 231, 250, 31, 11, 92, 138, 110, 225, 76, 65, 34, 83, 230, 246, 12, 143, 100, 114, 37, 162, 44, 25, 163, 223, 132, 108, 193, 2, 18, 144, 7, 116, 160, 10, 52, 129, 46, 48, 2, 44, 96, 13, 28, 128, 51, 112, 3, 222, 32, 0, 132, 128, 72, 16, 3, 150, 3, 46, 72, 2, 105, 64, 4, 178, 65, 62, 216, 0, 10, 65, 49, 216, 1, 118, 131, 106, 112, 0, 212, 129, 122, 208, 4, 78, 130, 54, 112, 6, 92, 4, 87, 192, 13, 112, 11, 12, 128, 71, 64, 10, 134, 193, 75, 48, 1, 222, 129, 105, 8, 130, 240, 16, 21, 162, 65, 170, 144, 22, 164, 15, 153, 66, 214, 16, 27, 90, 8, 121, 67, 65, 80, 56, 20, 3, 197, 67, 137, 144, 16, 146, 64, 249, 208, 38, 168, 24, 42, 131, 170, 161, 67, 80, 61, 244, 35, 116, 26, 186, 8, 93, 131, 250, 160, 7, 208, 32, 52, 6, 253, 1, 125, 132, 17, 152, 2, 211, 97, 13, 216, 0, 182, 128, 217, 176, 59, 28, 8, 71, 194, 203, 224, 68, 120, 21, 156, 7, 23, 192, 219, 225, 74, 184, 22, 62, 14, 183, 194, 23, 225, 27, 240, 0, 44, 133, 95, 194, 147, 8, 64, 200, 8, 3, 209, 70, 88, 8, 27, 241, 68, 66, 144, 88, 36, 1, 17, 33, 107, 145, 34, 164, 2, 169, 69, 154, 144, 14, 164, 27, 185, 141, 72, 145, 113, 228, 3, 6, 135, 161, 97, 152, 24, 22, 198, 25, 227, 135, 89, 140, 225, 98, 86, 97, 214, 98, 74, 48, 213, 152, 99, 152, 86, 76, 23, 230, 54, 102, 16, 51, 129, 249, 130, 165, 98, 213, 177, 166, 88, 39, 172, 63, 118, 9, 54, 17, 155, 141, 45, 196, 86, 96, 143, 96, 91, 176, 151, 177, 3, 216, 97, 236, 59, 28, 14, 199, 192, 25, 226, 28, 112, 126, 184, 24, 92, 50, 110, 53, 174, 4, 183, 15, 215, 140, 187, 128, 235, 195, 13, 225, 38, 241, 120, 188, 42, 222, 20, 239, 130, 15, 193, 115, 240, 98, 124, 33, 190, 10, 127, 28, 127, 30, 223, 143, 31, 198, 191, 39, 144, 9, 90, 4, 107, 130, 15, 33, 150, 32, 36, 108, 36, 84, 16, 26, 8, 231, 8, 253, 132, 17, 194, 52, 81, 129, 168, 79, 116, 34, 134, 16, 121, 196, 92, 98, 41, 177, 142, 216, 65, 188, 73, 28, 38, 78, 147, 20, 73, 134, 36, 23, 82, 36, 41, 153, 180, 129, 84, 73, 106, 34, 93, 38, 61, 38, 189, 33, 147, 201, 58, 100, 71, 114, 24, 89, 64, 94, 79, 174, 36, 159, 32, 95, 37, 15, 146, 63, 80, 148, 40, 38, 20, 79, 74, 28, 69, 66, 217, 78, 57, 74, 185, 64, 121, 64, 121, 67, 165, 82, 13, 168, 110, 212, 88, 170, 152, 186, 157, 90, 79, 189, 68, 125, 74, 125, 47, 71, 147, 51, 151, 243, 151, 227, 201, 173, 147, 171, 145, 107, 149, 235, 151, 123, 37, 79, 148, 215, 151, 119, 151, 95, 46, 159, 39, 95, 33, 127, 74, 254, 166, 252, 184, 2, 81, 193, 64, 193, 83, 129, 163, 176, 86, 161, 70, 225, 180, 194, 61, 133, 73, 69, 154, 162, 149, 98, 136, 98, 154, 98, 137, 98, 131, 226, 53, 197, 81, 37, 188, 146, 129, 146, 183, 18, 79, 169, 64, 233, 176, 210, 37, 165, 33, 26, 66, 211, 165, 121, 210, 184, 180, 77, 180, 58, 218, 101, 218, 48, 29, 71, 55, 164, 251, 211, 147, 233, 197, 244, 31, 232, 189, 244, 9, 101, 37, 101, 91, 229, 40, 229, 28, 229, 26, 229, 179, 202, 82, 6, 194, 48, 96, 248, 51, 82, 25, 165, 140, 147, 140, 187, 140, 143, 243, 52, 230, 185, 207, 227, 207, 219, 54, 175, 105, 94, 255, 188, 41, 149, 249, 42, 110, 42, 124, 149, 34, 149, 102, 149, 1, 149, 143, 170, 76, 85, 111, 213, 20, 213, 157, 170, 109, 170, 79, 212, 48, 106, 38, 106, 97, 106, 217, 106, 251, 213, 46, 171, 141, 207, 167, 207, 119, 158, 207, 157, 95, 52, 255, 228, 252, 135, 234, 176, 186, 137, 122, 184, 250, 106, 245, 195, 234, 61, 234, 147, 26, 154, 26, 190, 26, 25, 26, 85, 26, 151, 52, 198, 53, 25, 154, 110, 154, 201, 154, 229, 154, 231, 52, 199, 180, 104, 90, 11, 181, 4, 90, 229, 90, 231, 181, 94, 48, 149, 153, 238, 204, 84, 102, 37, 179, 139, 57, 161, 173, 174, 237, 167, 45, 209, 62, 164, 221, 171, 61, 173, 99, 168, 179, 88, 103, 163, 78, 179, 206, 19, 93, 146, 46, 91, 55, 65, 183, 92, 183, 83, 119, 66, 79, 75, 47, 88, 47, 95, 175, 81, 239, 161, 62, 81, 159, 173, 159, 164, 191, 71, 191, 91, 127, 202, 192, 208, 32, 218, 96, 139, 65, 155, 193, 168, 161, 138, 161, 191, 97, 158, 97, 163, 225, 99, 35, 170, 145, 171, 209, 42, 163, 90, 163, 59, 198, 56, 99, 182, 113, 138, 241, 62, 227, 91, 38, 176, 137, 157, 73, 146, 73, 141, 201, 77, 83, 216, 212, 222, 84, 96, 186, 207, 180, 207, 12, 107, 230, 104, 38, 52, 171, 53, 187, 199, 162, 176, 220, 89, 89, 172, 70, 214, 160, 57, 195, 60, 200, 124, 163, 121, 155, 249, 43, 11, 61, 139, 88, 139, 157, 22, 221, 22, 95, 44, 237, 44, 83, 45, 235, 44, 31, 89, 41, 89, 5, 88, 109, 180, 234, 176, 250, 195, 218, 196, 154, 107, 93, 99, 125, 199, 134, 106, 227, 99, 179, 206, 166, 221, 230, 181, 173, 169, 45, 223, 118, 191, 237, 125, 59, 154, 93, 176, 221, 22, 187, 78, 187, 207, 246, 14, 246, 34, 251, 38, 251, 49, 7, 61, 135, 120, 135, 189, 14, 247, 216, 116, 118, 40, 187, 132, 125, 213, 17, 235, 232, 225, 184, 206, 241, 140, 227, 7, 39, 123, 39, 177, 211, 73, 167, 223, 157, 89, 206, 41, 206, 13, 206, 163, 11, 12, 23, 240, 23, 212, 45, 24, 114, 209, 113, 225, 184, 28, 114, 145, 46, 100, 46, 140, 95, 120, 112, 161, 212, 85, 219, 149, 227, 90, 235, 250, 204, 77, 215, 141, 231, 118, 196, 109, 196, 221, 216, 61, 217, 253, 184, 251, 43, 15, 75, 15, 145, 71, 139, 199, 148, 167, 147, 231, 26, 207, 11, 94, 136, 151, 175, 87, 145, 87, 175, 183, 146, 247, 98, 239, 106, 239, 167, 62, 58, 62, 137, 62, 141, 62, 19, 190, 118, 190, 171, 125, 47, 248, 97, 253, 2, 253, 118, 250, 221, 243, 215, 240, 231, 250, 215, 251, 79, 4, 56, 4, 172, 9, 232, 10, 164, 4, 70, 4, 86, 7, 62, 11, 50, 9, 18, 5, 117, 4, 195, 193, 1, 193, 187, 130, 31, 47, 210, 95, 36, 92, 212, 22, 2, 66, 252, 67, 118, 133, 60, 9, 53, 12, 93, 21, 250, 115, 24, 46, 44, 52, 172, 38, 236, 121, 184, 85, 120, 126, 120, 119, 4, 45, 98, 69, 68, 67, 196, 187, 72, 143, 200, 210, 200, 71, 139, 141, 22, 75, 22, 119, 70, 201, 71, 197, 69, 213, 71, 77, 69, 123, 69, 151, 69, 75, 151, 88, 44, 89, 179, 228, 70, 140, 90, 140, 32, 166, 61, 22, 31, 27, 21, 123, 36, 118, 114, 169, 247, 210, 221, 75, 135, 227, 236, 226, 10, 227, 238, 46, 51, 92, 150, 179, 236, 218, 114, 181, 229, 169, 203, 207, 174, 144, 95, 193, 89, 113, 42, 30, 27, 31, 29, 223, 16, 255, 137, 19, 194, 169, 229, 76, 174, 244, 95, 185, 119, 229, 4, 215, 147, 187, 135, 251, 146, 231, 198, 43, 231, 141, 241, 93, 248, 101, 252, 145, 4, 151, 132, 178, 132, 209, 68, 151, 196, 93, 137, 99, 73, 174, 73, 21, 73, 227, 2, 79, 65, 181, 224, 117, 178, 95, 242, 129, 228, 169, 148, 144, 148, 163, 41, 51, 169, 209, 169, 205, 105, 132, 180, 248, 180, 211, 66, 37, 97, 138, 176, 43, 93, 51, 61, 39, 189, 47, 195, 52, 163, 48, 67, 186, 202, 105, 213, 238, 85, 19, 162, 64, 209, 145, 76, 40, 115, 89, 102, 187, 152, 142, 254, 76, 245, 72, 140, 36, 155, 37, 131, 89, 11, 179, 106, 178, 222, 103, 71, 101, 159, 202, 81, 204, 17, 230, 244, 228, 154, 228, 110, 203, 29, 201, 243, 201, 251, 126, 53, 102, 53, 119, 117, 103, 190, 118, 254, 134, 252, 193, 53, 238, 107, 14, 173, 133, 214, 174, 92, 219, 185, 78, 119, 93, 193, 186, 225, 245, 190, 235, 143, 109, 32, 109, 72, 217, 240, 203, 70, 203, 141, 101, 27, 223, 110, 138, 222, 212, 81, 160, 81, 176, 190, 96, 104, 179, 239, 230, 198, 66, 185, 66, 81, 225, 189, 45, 206, 91, 14, 108, 197, 108, 21, 108, 237, 221, 102, 179, 173, 106, 219, 151, 34, 94, 209, 245, 98, 203, 226, 138, 226, 79, 37, 220, 146, 235, 223, 89, 125, 87, 249, 221, 204, 246, 132, 237, 189, 165, 246, 165, 251, 119, 224, 118, 8, 119, 220, 221, 233, 186, 243, 88, 153, 98, 89, 94, 217, 208, 174, 224, 93, 173, 229, 204, 242, 162, 242, 183, 187, 87, 236, 190, 86, 97, 91, 113, 96, 15, 105, 143, 100, 143, 180, 50, 168, 178, 189, 74, 175, 106, 71, 213, 167, 234, 164, 234, 129, 26, 143, 154, 230, 189, 234, 123, 183, 237, 157, 218, 199, 219, 215, 191, 223, 109, 127, 211, 1, 141, 3, 197, 7, 62, 30, 20, 28, 188, 127, 200, 247, 80, 107, 173, 65, 109, 197, 97, 220, 225, 172, 195, 207, 235, 162, 234, 186, 191, 103, 127, 95, 127, 68, 237, 72, 241, 145, 207, 71, 133, 71, 165, 199, 194, 143, 117, 213, 59, 212, 215, 55, 168, 55, 148, 54, 194, 141, 146, 198, 177, 227, 113, 199, 111, 253, 224, 245, 67, 123, 19, 171, 233, 80, 51, 163, 185, 248, 4, 56, 33, 57, 241, 226, 199, 248, 31, 239, 158, 12, 60, 217, 121, 138, 125, 170, 233, 39, 253, 159, 246, 182, 208, 90, 138, 90, 161, 214, 220, 214, 137, 182, 164, 54, 105, 123, 76, 123, 223, 233, 128, 211, 157, 29, 206, 29, 45, 63, 155, 255, 124, 244, 140, 246, 153, 154, 179, 202, 103, 75, 207, 145, 206, 21, 156, 155, 57, 159, 119, 126, 242, 66, 198, 133, 241, 139, 137, 23, 135, 58, 87, 116, 62, 186, 180, 228, 210, 157, 174, 176, 174, 222, 203, 129, 151, 175, 94, 241, 185, 114, 169, 219, 189, 251, 252, 85, 151, 171, 103, 174, 57, 93, 59, 125, 157, 125, 189, 237, 134, 253, 141, 214, 30, 187, 158, 150, 95, 236, 126, 105, 233, 181, 239, 109, 189, 233, 112, 179, 253, 150, 227, 173, 142, 190, 5, 125, 231, 250, 93, 251, 47, 222, 246, 186, 125, 229, 142, 255, 157, 27, 3, 139, 6, 250, 238, 46, 190, 123, 255, 94, 220, 61, 233, 125, 222, 253, 209, 7, 169, 15, 94, 63, 204, 122, 56, 253, 104, 253, 99, 236, 227, 162, 39, 10, 79, 42, 158, 170, 63, 173, 253, 213, 248, 215, 102, 169, 189, 244, 236, 160, 215, 96, 207, 179, 136, 103, 143, 134, 184, 67, 47, 255, 149, 249, 175, 79, 195, 5, 207, 169, 207, 43, 70, 180, 70, 234, 71, 173, 71, 207, 140, 249, 140, 221, 122, 177, 244, 197, 240, 203, 140, 151, 211, 227, 133, 191, 41, 254, 182, 247, 149, 209, 171, 159, 126, 119, 251, 189, 103, 98, 201, 196, 240, 107, 209, 235, 153, 63, 74, 222, 168, 190, 57, 250, 214, 246, 109, 231, 100, 232, 228, 211, 119, 105, 239, 166, 167, 138, 222, 171, 190, 63, 246, 129, 253, 161, 251, 99, 244, 199, 145, 233, 236, 79, 248, 79, 149, 159, 141, 63, 119, 124, 9, 252, 242, 120, 38, 109, 102, 230, 223, 247, 132, 243, 251, 50, 58, 89, 126, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 19, 0, 0, 11, 19, 1, 0, 154, 156, 24, 0, 0, 2, 48, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 52, 46, 48, 34, 62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 116, 105, 102, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47, 49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 65, 99, 111, 114, 110, 32, 118, 101, 114, 115, 105, 111, 110, 32, 52, 46, 50, 46, 51, 60, 47, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 62, 53, 60, 47, 116, 105, 102, 102, 58, 67, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 55, 50, 60, 47, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 55, 50, 60, 47, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 2, 138, 30, 61, 0, 0, 64, 0, 73, 68, 65, 84, 120, 1, 236, 189, 205, 186, 235, 56, 174, 109, 185, 119, 102, 156, 251, 85, 167, 222, 255, 61, 171, 83, 213, 200, 147, 171, 48, 1, 78, 9, 162, 37, 219, 235, 223, 150, 7, 29, 18, 72, 16, 0, 193, 225, 21, 50, 37, 75, 222, 127, 255, 207, 255, 245, 127, 191, 253, 249, 19, 255, 101, 121, 251, 243, 150, 213, 209, 142, 70, 53, 221, 31, 150, 101, 176, 216, 219, 111, 40, 166, 254, 217, 94, 86, 107, 172, 244, 185, 104, 94, 40, 28, 122, 200, 169, 127, 234, 165, 121, 139, 192, 223, 171, 6, 127, 47, 186, 39, 197, 100, 48, 245, 254, 249, 179, 233, 255, 59, 154, 205, 234, 106, 255, 214, 254, 111, 218, 74, 55, 252, 67, 102, 109, 163, 95, 251, 255, 254, 253, 87, 140, 175, 20, 66, 70, 37, 253, 228, 211, 237, 221, 14, 27, 233, 101, 91, 118, 146, 171, 238, 79, 214, 215, 246, 223, 127, 141, 254, 33, 255, 44, 237, 127, 15, 63, 251, 43, 7, 109, 202, 116, 108, 111, 127, 243, 175, 94, 255, 235, 252, 55, 182, 148, 255, 181, 172, 255, 231, 254, 59, 181, 101, 243, 22, 126, 42, 146, 149, 107, 229, 251, 175, 127, 253, 251, 207, 191, 255, 173, 237, 159, 63, 255, 252, 251, 127, 254, 252, 243, 79, 200, 127, 254, 207, 159, 255, 249, 231, 127, 254, 252, 207, 255, 132, 140, 237, 255, 88, 74, 63, 234, 255, 168, 63, 54, 217, 203, 247, 95, 17, 67, 177, 254, 254, 171, 226, 235, 255, 44, 253, 31, 255, 95, 109, 111, 255, 253, 243, 191, 218, 254, 251, 191, 127, 254, 243, 246, 191, 37, 163, 158, 109, 203, 212, 151, 221, 127, 163, 254, 223, 72, 90, 126, 218, 116, 156, 200, 151, 38, 50, 226, 102, 133, 29, 4, 32, 0, 1, 8, 64, 0, 2, 167, 35, 80, 107, 45, 45, 127, 98, 77, 17, 179, 91, 215, 45, 127, 255, 252, 107, 172, 189, 36, 255, 21, 107, 14, 201, 127, 15, 169, 118, 213, 255, 85, 50, 214, 87, 251, 237, 97, 167, 254, 140, 211, 100, 143, 25, 253, 125, 156, 172, 183, 241, 151, 188, 148, 227, 120, 23, 188, 94, 201, 181, 75, 44, 212, 114, 45, 19, 11, 179, 255, 198, 246, 191, 255, 27, 235, 155, 33, 85, 191, 181, 253, 103, 178, 249, 207, 127, 254, 147, 62, 255, 249, 79, 249, 206, 253, 199, 241, 52, 190, 124, 42, 15, 229, 176, 108, 90, 103, 69, 158, 153, 239, 88, 103, 105, 5, 215, 75, 205, 179, 38, 233, 250, 34, 181, 70, 14, 102, 217, 150, 137, 248, 228, 18, 186, 100, 172, 104, 171, 95, 132, 244, 95, 242, 107, 178, 194, 134, 66, 139, 85, 141, 170, 157, 242, 169, 197, 172, 228, 91, 228, 187, 149, 255, 91, 253, 214, 231, 90, 113, 216, 104, 205, 152, 237, 144, 234, 31, 177, 242, 156, 115, 232, 163, 35, 108, 52, 158, 165, 124, 212, 30, 50, 125, 156, 199, 86, 159, 54, 153, 166, 250, 179, 242, 231, 255, 251, 127, 255, 159, 81, 31, 194, 93, 139, 246, 66, 177, 244, 156, 161, 242, 207, 25, 38, 193, 28, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 179, 18, 200, 203, 10, 49, 185, 60, 35, 213, 41, 234, 230, 34, 67, 157, 164, 222, 171, 203, 40, 138, 84, 165, 159, 235, 41, 124, 180, 151, 209, 116, 242, 171, 81, 199, 69, 132, 155, 82, 121, 173, 222, 242, 156, 182, 26, 146, 61, 4, 126, 147, 0, 23, 0, 126, 147, 62, 99, 67, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 63, 72, 64, 39, 229, 107, 137, 115, 251, 165, 232, 75, 229, 56, 219, 95, 55, 245, 116, 131, 197, 146, 10, 4, 158, 151, 0, 23, 0, 158, 247, 189, 35, 115, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 60, 49, 1, 127, 67, 174, 41, 248, 76, 188, 203, 234, 175, 239, 213, 219, 254, 222, 111, 228, 143, 236, 218, 104, 113, 247, 248, 82, 242, 220, 95, 143, 94, 250, 37, 127, 189, 142, 226, 188, 87, 239, 184, 55, 165, 82, 50, 135, 37, 189, 161, 219, 211, 119, 27, 213, 187, 141, 235, 179, 156, 125, 104, 191, 10, 1, 46, 0, 188, 202, 59, 125, 231, 60, 219, 49, 48, 61, 124, 168, 184, 211, 253, 124, 102, 2, 240, 100, 16, 156, 110, 151, 158, 198, 53, 233, 55, 207, 126, 115, 187, 244, 245, 65, 40, 40, 107, 173, 90, 245, 12, 88, 225, 90, 255, 142, 228, 149, 151, 211, 29, 14, 9, 1, 8, 64, 0, 2, 16, 128, 192, 233, 8, 180, 213, 67, 158, 69, 199, 122, 32, 84, 199, 155, 79, 170, 109, 163, 182, 234, 179, 172, 254, 92, 139, 105, 8, 111, 23, 252, 220, 81, 178, 214, 40, 30, 99, 150, 219, 48, 235, 154, 101, 232, 35, 196, 154, 119, 207, 103, 142, 19, 237, 105, 53, 116, 145, 214, 172, 216, 166, 185, 38, 114, 161, 63, 26, 247, 45, 17, 212, 110, 14, 190, 182, 157, 191, 52, 59, 161, 71, 214, 202, 94, 253, 91, 217, 61, 182, 253, 195, 86, 207, 72, 100, 137, 94, 215, 173, 26, 61, 136, 199, 38, 192, 5, 128, 199, 126, 127, 200, 14, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 39, 37, 224, 211, 83, 77, 79, 117, 149, 46, 171, 191, 78, 82, 219, 62, 47, 20, 68, 251, 67, 178, 70, 240, 40, 53, 230, 186, 255, 88, 204, 59, 115, 25, 167, 219, 109, 38, 7, 154, 206, 97, 205, 237, 122, 230, 179, 157, 219, 158, 233, 44, 221, 143, 124, 53, 2, 92, 0, 120, 181, 119, 156, 249, 66, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 101, 9, 248, 68, 184, 0, 244, 86, 125, 145, 45, 141, 55, 217, 116, 139, 242, 97, 15, 129, 103, 38, 192, 5, 128, 103, 126, 247, 200, 29, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 79, 79, 192, 39, 217, 37, 235, 27, 114, 159, 134, 235, 219, 245, 168, 127, 232, 219, 254, 131, 111, 230, 131, 151, 71, 236, 232, 164, 251, 210, 113, 110, 228, 60, 38, 166, 65, 47, 182, 253, 60, 226, 17, 0, 253, 51, 209, 190, 245, 126, 73, 62, 254, 201, 233, 248, 5, 67, 133, 233, 37, 231, 19, 10, 203, 222, 183, 212, 237, 99, 185, 116, 80, 57, 43, 1, 46, 0, 156, 245, 157, 101, 94, 15, 70, 224, 35, 71, 85, 251, 72, 30, 111, 235, 135, 164, 107, 101, 45, 0, 249, 65, 48, 92, 245, 65, 226, 15, 152, 245, 67, 101, 181, 145, 153, 31, 225, 90, 70, 83, 37, 138, 227, 108, 100, 118, 100, 247, 180, 27, 78, 169, 85, 196, 30, 121, 50, 165, 9, 1, 8, 64, 0, 2, 16, 128, 192, 243, 19, 240, 71, 127, 46, 20, 52, 29, 41, 214, 205, 107, 16, 175, 63, 180, 176, 112, 189, 164, 214, 26, 210, 149, 44, 215, 108, 84, 152, 84, 220, 137, 73, 195, 202, 62, 115, 41, 169, 216, 106, 47, 99, 94, 9, 181, 216, 200, 94, 47, 203, 106, 109, 246, 57, 198, 110, 127, 165, 173, 84, 246, 54, 15, 191, 215, 103, 157, 109, 182, 50, 122, 117, 242, 175, 139, 0, 155, 162, 147, 255, 85, 87, 115, 24, 6, 210, 171, 75, 121, 170, 218, 165, 212, 249, 106, 82, 253, 101, 46, 229, 118, 139, 230, 67, 21, 229, 167, 226, 5, 108, 181, 216, 223, 32, 192, 5, 128, 27, 128, 232, 134, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 190, 147, 128, 207, 228, 74, 174, 39, 165, 227, 196, 52, 212, 117, 226, 170, 147, 216, 27, 155, 78, 104, 243, 36, 118, 149, 161, 72, 157, 100, 110, 49, 21, 143, 216, 103, 149, 186, 41, 254, 226, 99, 223, 38, 111, 230, 50, 197, 154, 237, 223, 31, 155, 59, 0, 250, 251, 69, 253, 99, 4, 254, 245, 49, 55, 188, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 60, 24, 1, 159, 217, 55, 217, 170, 203, 151, 218, 247, 102, 45, 223, 163, 237, 222, 24, 216, 65, 224, 145, 8, 112, 7, 192, 35, 189, 27, 228, 2, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 92, 33, 112, 121, 58, 175, 111, 214, 245, 109, 250, 252, 205, 191, 219, 238, 91, 190, 113, 143, 232, 142, 210, 7, 74, 157, 227, 12, 185, 248, 140, 49, 122, 123, 254, 70, 255, 254, 118, 166, 123, 120, 97, 65, 121, 236, 110, 153, 147, 31, 175, 28, 153, 199, 179, 255, 89, 212, 215, 254, 233, 229, 163, 249, 109, 244, 155, 198, 136, 135, 56, 61, 129, 235, 23, 0, 244, 71, 209, 255, 198, 92, 31, 127, 103, 167, 167, 243, 130, 19, 252, 238, 227, 192, 151, 199, 87, 192, 12, 26, 59, 203, 189, 247, 109, 231, 160, 157, 14, 233, 63, 124, 179, 94, 241, 22, 243, 8, 170, 151, 63, 56, 170, 85, 134, 163, 39, 135, 93, 236, 29, 67, 57, 168, 62, 149, 84, 197, 255, 63, 178, 215, 241, 218, 114, 50, 219, 54, 123, 156, 94, 223, 90, 45, 45, 155, 116, 185, 87, 95, 28, 162, 162, 126, 255, 239, 109, 91, 247, 187, 189, 39, 165, 155, 55, 249, 217, 214, 49, 144, 16, 128, 0, 4, 32, 0, 1, 8, 156, 151, 128, 63, 247, 115, 77, 16, 187, 190, 46, 202, 122, 76, 61, 251, 98, 191, 174, 159, 84, 147, 62, 94, 233, 35, 121, 207, 166, 248, 246, 169, 177, 68, 86, 177, 178, 184, 146, 50, 3, 231, 24, 99, 164, 180, 179, 137, 93, 174, 73, 217, 30, 109, 215, 252, 174, 247, 141, 136, 53, 241, 154, 196, 61, 117, 253, 208, 95, 188, 222, 114, 213, 54, 70, 144, 159, 138, 23, 150, 217, 8, 93, 253, 215, 88, 45, 138, 149, 119, 216, 42, 94, 13, 173, 154, 82, 89, 219, 25, 99, 105, 175, 182, 57, 196, 102, 87, 171, 200, 37, 47, 5, 138, 226, 212, 170, 18, 121, 167, 34, 58, 243, 55, 12, 114, 180, 176, 242, 10, 84, 115, 219, 47, 178, 120, 87, 57, 10, 244, 174, 32, 231, 53, 190, 126, 1, 224, 188, 243, 102, 102, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 211, 17, 240, 217, 157, 79, 32, 117, 194, 26, 245, 60, 81, 213, 73, 108, 181, 75, 234, 164, 53, 74, 117, 87, 99, 156, 149, 166, 126, 154, 123, 217, 14, 255, 17, 47, 79, 94, 71, 252, 185, 126, 223, 5, 139, 109, 188, 245, 4, 123, 164, 83, 233, 101, 158, 26, 255, 234, 150, 121, 212, 69, 128, 37, 117, 238, 0, 88, 80, 80, 185, 143, 0, 191, 1, 112, 31, 39, 172, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 167, 34, 176, 119, 58, 253, 84, 19, 32, 89, 8, 124, 57, 1, 238, 0, 248, 114, 164, 4, 132, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 126, 134, 64, 126, 111, 31, 67, 13, 57, 190, 225, 119, 83, 114, 123, 25, 64, 247, 6, 44, 214, 173, 18, 213, 184, 215, 188, 110, 68, 183, 69, 222, 71, 16, 246, 215, 95, 75, 64, 187, 93, 42, 54, 40, 150, 104, 227, 46, 131, 187, 239, 36, 200, 187, 229, 195, 187, 223, 19, 175, 49, 85, 66, 231, 106, 222, 13, 33, 93, 40, 42, 37, 141, 184, 150, 210, 185, 111, 213, 207, 53, 219, 205, 122, 218, 207, 77, 128, 11, 0, 207, 253, 254, 125, 32, 251, 126, 196, 144, 123, 63, 28, 124, 32, 220, 143, 187, 124, 245, 161, 200, 243, 159, 229, 189, 19, 115, 62, 183, 228, 189, 241, 190, 207, 206, 51, 212, 8, 219, 108, 171, 71, 251, 250, 208, 171, 91, 203, 252, 225, 36, 235, 250, 216, 88, 63, 60, 220, 190, 253, 247, 83, 81, 111, 219, 125, 223, 188, 137, 12, 1, 8, 64, 0, 2, 16, 128, 192, 79, 18, 216, 174, 50, 188, 234, 200, 219, 244, 149, 70, 116, 231, 58, 66, 50, 111, 105, 175, 246, 234, 21, 189, 163, 239, 190, 19, 227, 138, 179, 248, 104, 8, 157, 88, 235, 53, 228, 8, 168, 14, 13, 182, 45, 125, 105, 156, 227, 14, 179, 81, 79, 123, 249, 92, 217, 198, 104, 26, 177, 94, 23, 113, 70, 46, 202, 199, 57, 40, 222, 59, 139, 92, 55, 143, 250, 135, 127, 123, 2, 96, 68, 27, 129, 29, 127, 25, 79, 99, 107, 110, 75, 71, 217, 71, 187, 76, 214, 254, 217, 78, 30, 185, 45, 190, 213, 94, 209, 169, 87, 45, 91, 86, 232, 195, 189, 204, 84, 214, 0, 213, 118, 152, 106, 237, 236, 237, 184, 211, 117, 85, 53, 15, 116, 213, 248, 244, 157, 92, 0, 56, 253, 91, 204, 4, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 86, 2, 62, 41, 28, 210, 39, 169, 77, 173, 234, 186, 197, 137, 238, 104, 39, 17, 219, 73, 23, 231, 137, 143, 124, 7, 128, 78, 152, 243, 4, 190, 159, 207, 58, 255, 141, 174, 230, 168, 137, 214, 92, 71, 59, 39, 108, 221, 42, 135, 250, 66, 148, 239, 133, 26, 197, 147, 19, 224, 55, 0, 158, 252, 13, 36, 125, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 61, 4, 184, 3, 224, 30, 74, 216, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 231, 39, 224, 175, 189, 239, 145, 131, 134, 190, 95, 223, 190, 214, 111, 215, 51, 76, 220, 149, 144, 143, 35, 88, 78, 214, 91, 223, 227, 150, 190, 206, 255, 171, 127, 66, 79, 65, 93, 252, 205, 127, 254, 48, 192, 218, 177, 220, 8, 225, 74, 142, 105, 215, 213, 78, 97, 212, 218, 106, 28, 28, 121, 70, 2, 92, 0, 56, 227, 187, 202, 156, 190, 143, 128, 143, 144, 150, 223, 55, 210, 187, 35, 235, 248, 158, 199, 120, 201, 240, 126, 207, 150, 131, 217, 47, 111, 47, 11, 127, 75, 197, 82, 95, 6, 28, 21, 213, 85, 82, 102, 199, 104, 184, 35, 123, 99, 167, 79, 37, 233, 252, 233, 100, 61, 18, 2, 16, 128, 0, 4, 32, 0, 129, 211, 16, 200, 69, 66, 204, 38, 23, 12, 146, 71, 91, 157, 8, 203, 174, 158, 133, 95, 101, 249, 134, 99, 198, 216, 151, 62, 137, 182, 77, 111, 207, 241, 220, 183, 43, 71, 122, 33, 54, 37, 135, 142, 19, 236, 187, 95, 203, 60, 34, 204, 102, 206, 83, 254, 155, 81, 102, 219, 203, 182, 242, 80, 188, 25, 69, 62, 239, 175, 190, 190, 172, 82, 91, 69, 23, 6, 220, 145, 1, 162, 57, 250, 138, 193, 104, 43, 103, 85, 37, 163, 34, 57, 20, 75, 59, 251, 51, 129, 242, 73, 219, 168, 170, 168, 207, 197, 245, 158, 142, 251, 190, 86, 254, 220, 72, 95, 155, 247, 99, 70, 227, 2, 192, 99, 190, 47, 100, 5, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 252, 52, 129, 58, 251, 29, 39, 197, 49, 248, 181, 246, 200, 237, 242, 130, 193, 228, 150, 39, 219, 58, 225, 30, 91, 4, 253, 208, 43, 114, 225, 14, 128, 159, 254, 131, 56, 223, 120, 252, 6, 192, 249, 222, 83, 102, 4, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 32, 192, 29, 0, 23, 72, 80, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 175, 72, 224, 218, 23, 254, 115, 223, 114, 119, 192, 4, 106, 249, 166, 127, 249, 198, 223, 119, 4, 140, 239, 253, 173, 127, 175, 140, 113, 242, 150, 253, 105, 188, 165, 233, 39, 47, 101, 39, 165, 238, 24, 72, 169, 59, 15, 84, 169, 162, 122, 111, 91, 143, 124, 13, 2, 92, 0, 120, 141, 247, 185, 205, 178, 253, 223, 223, 180, 84, 95, 131, 128, 222, 253, 189, 205, 179, 119, 159, 219, 146, 252, 197, 116, 26, 212, 33, 0, 1, 8, 64, 0, 2, 16, 232, 4, 188, 78, 240, 26, 194, 178, 219, 44, 139, 137, 110, 220, 13, 236, 52, 201, 229, 68, 245, 134, 222, 118, 117, 226, 173, 147, 91, 157, 240, 214, 73, 239, 218, 87, 39, 189, 217, 142, 177, 157, 202, 166, 22, 63, 128, 148, 255, 12, 224, 174, 83, 120, 76, 250, 113, 58, 223, 198, 171, 113, 251, 212, 178, 190, 248, 109, 6, 190, 48, 251, 180, 98, 157, 212, 58, 45, 141, 157, 101, 229, 225, 206, 74, 203, 122, 205, 111, 76, 49, 42, 233, 230, 246, 8, 177, 132, 138, 120, 82, 229, 111, 18, 140, 250, 208, 228, 72, 85, 255, 91, 44, 27, 233, 209, 137, 248, 101, 2, 92, 0, 248, 229, 55, 128, 225, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 199, 32, 160, 19, 219, 123, 183, 197, 112, 74, 125, 189, 0, 81, 23, 4, 214, 120, 209, 214, 43, 206, 164, 63, 180, 41, 183, 126, 22, 62, 141, 155, 191, 1, 168, 193, 162, 164, 136, 93, 73, 141, 87, 250, 236, 147, 190, 181, 215, 30, 106, 175, 64, 128, 223, 0, 120, 133, 119, 153, 57, 66, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 203, 19, 224, 14, 128, 151, 255, 19, 0, 192, 61, 4, 184, 72, 122, 15, 37, 108, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 235, 16, 208, 250, 48, 183, 216, 233, 27, 117, 111, 51, 129, 252, 214, 95, 223, 252, 219, 254, 150, 140, 64, 21, 87, 223, 220, 183, 45, 158, 241, 207, 59, 0, 142, 254, 221, 61, 57, 141, 162, 92, 84, 74, 86, 188, 108, 75, 55, 114, 57, 106, 75, 79, 57, 47, 129, 247, 93, 0, 208, 31, 82, 251, 113, 137, 196, 114, 244, 7, 120, 94, 102, 79, 62, 179, 249, 13, 107, 71, 138, 95, 158, 217, 246, 64, 85, 201, 88, 119, 119, 106, 154, 142, 167, 228, 186, 219, 163, 203, 77, 197, 182, 137, 226, 187, 158, 82, 125, 109, 115, 167, 109, 22, 251, 102, 99, 251, 101, 124, 25, 69, 233, 255, 44, 107, 42, 20, 68, 165, 203, 94, 175, 222, 117, 239, 255, 231, 186, 77, 212, 251, 120, 170, 171, 72, 228, 214, 250, 109, 151, 54, 139, 65, 55, 84, 44, 61, 167, 37, 223, 120, 242, 45, 234, 127, 227, 161, 174, 244, 11, 229, 198, 101, 196, 149, 50, 245, 187, 65, 35, 144, 138, 243, 150, 164, 64, 0, 2, 16, 128, 0, 4, 32, 112, 78, 2, 90, 16, 120, 97, 144, 171, 131, 209, 174, 149, 66, 245, 245, 186, 215, 14, 185, 208, 104, 11, 139, 176, 89, 94, 209, 151, 39, 186, 195, 38, 215, 38, 67, 119, 189, 30, 153, 164, 157, 164, 235, 21, 107, 227, 55, 178, 82, 166, 181, 96, 169, 154, 108, 212, 46, 95, 251, 91, 94, 198, 89, 12, 251, 252, 52, 139, 204, 97, 149, 107, 247, 152, 239, 24, 96, 182, 115, 91, 217, 84, 46, 149, 151, 247, 233, 230, 245, 149, 149, 77, 234, 153, 124, 217, 44, 197, 117, 201, 185, 190, 180, 163, 146, 253, 150, 106, 42, 247, 242, 201, 49, 101, 144, 255, 245, 193, 139, 147, 198, 218, 44, 245, 108, 50, 148, 10, 227, 226, 46, 183, 21, 51, 203, 176, 29, 98, 233, 62, 172, 76, 126, 135, 118, 116, 236, 18, 120, 223, 5, 128, 221, 16, 40, 33, 112, 126, 2, 62, 206, 156, 127, 166, 204, 16, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 30, 2, 90, 31, 230, 22, 187, 60, 81, 30, 114, 246, 205, 19, 234, 176, 92, 236, 237, 119, 36, 35, 88, 197, 213, 137, 248, 186, 233, 76, 59, 47, 12, 28, 157, 41, 107, 124, 15, 62, 42, 202, 75, 90, 235, 37, 213, 186, 214, 118, 8, 228, 57, 9, 240, 27, 0, 231, 124, 95, 153, 21, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 96, 67, 128, 59, 0, 54, 56, 104, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 167, 38, 224, 175, 191, 53, 201, 254, 109, 186, 244, 173, 109, 51, 201, 251, 182, 250, 110, 189, 127, 107, 95, 245, 240, 143, 0, 151, 250, 176, 111, 223, 240, 47, 117, 125, 67, 191, 163, 87, 18, 249, 221, 189, 146, 217, 43, 121, 135, 64, 235, 72, 251, 104, 103, 172, 210, 103, 30, 82, 13, 51, 203, 209, 68, 188, 0, 1, 46, 0, 188, 192, 155, 124, 206, 41, 234, 112, 245, 200, 135, 172, 200, 77, 71, 88, 29, 166, 245, 65, 50, 82, 77, 161, 131, 243, 80, 197, 211, 83, 81, 115, 105, 134, 123, 159, 62, 50, 235, 230, 118, 179, 116, 208, 102, 227, 106, 239, 58, 170, 59, 182, 242, 205, 15, 135, 33, 51, 188, 157, 148, 98, 20, 199, 117, 221, 221, 146, 203, 44, 70, 35, 127, 3, 65, 134, 20, 8, 64, 0, 2, 16, 128, 0, 4, 78, 69, 192, 235, 129, 229, 164, 50, 20, 89, 191, 38, 131, 192, 98, 175, 186, 219, 205, 199, 144, 178, 111, 175, 127, 116, 92, 142, 165, 19, 103, 197, 223, 63, 129, 94, 244, 99, 220, 28, 71, 177, 70, 169, 53, 219, 234, 171, 96, 242, 25, 65, 239, 144, 17, 168, 197, 115, 220, 82, 238, 118, 172, 38, 173, 166, 33, 85, 36, 250, 102, 157, 100, 47, 99, 121, 150, 105, 46, 122, 15, 103, 185, 116, 68, 37, 231, 52, 20, 209, 95, 92, 170, 157, 230, 57, 239, 181, 157, 12, 134, 219, 240, 42, 17, 3, 215, 186, 79, 94, 94, 1, 110, 7, 116, 110, 27, 191, 185, 177, 117, 153, 123, 47, 219, 119, 5, 189, 116, 67, 83, 4, 184, 0, 192, 95, 2, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 58, 4, 250, 9, 103, 63, 153, 244, 121, 236, 32, 97, 51, 201, 251, 182, 184, 96, 160, 87, 158, 64, 119, 57, 206, 185, 47, 244, 221, 166, 213, 119, 99, 68, 6, 249, 95, 201, 221, 55, 203, 231, 224, 238, 180, 105, 63, 161, 31, 186, 16, 89, 44, 237, 130, 60, 63, 1, 126, 3, 224, 252, 239, 49, 51, 132, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 252, 225, 14, 0, 254, 8, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 243, 17, 240, 215, 219, 146, 125, 235, 51, 29, 54, 217, 61, 190, 65, 143, 47, 204, 235, 118, 250, 38, 243, 219, 247, 209, 118, 255, 161, 156, 134, 187, 188, 35, 160, 125, 219, 159, 223, 206, 223, 215, 190, 121, 7, 128, 230, 165, 137, 180, 162, 28, 85, 172, 150, 236, 183, 252, 87, 204, 52, 97, 247, 34, 4, 184, 0, 240, 34, 111, 244, 189, 211, 236, 119, 65, 201, 199, 7, 139, 123, 253, 127, 222, 46, 15, 99, 45, 211, 222, 238, 245, 123, 50, 243, 108, 175, 249, 245, 190, 107, 245, 62, 158, 227, 118, 157, 235, 51, 113, 235, 237, 211, 229, 254, 120, 241, 145, 177, 188, 228, 157, 173, 241, 97, 162, 79, 175, 124, 110, 107, 184, 234, 67, 224, 104, 91, 70, 150, 77, 164, 149, 118, 241, 0, 255, 230, 181, 196, 11, 173, 250, 100, 148, 15, 249, 143, 1, 210, 186, 158, 2, 91, 226, 185, 130, 132, 0, 4, 32, 0, 1, 8, 64, 224, 116, 4, 180, 2, 208, 234, 163, 202, 42, 55, 235, 135, 236, 47, 77, 46, 48, 212, 110, 11, 146, 175, 58, 65, 190, 136, 163, 117, 137, 214, 46, 243, 75, 195, 143, 140, 253, 179, 75, 185, 34, 147, 178, 173, 107, 228, 39, 75, 191, 202, 171, 116, 87, 235, 109, 110, 53, 95, 15, 118, 191, 116, 126, 125, 52, 121, 91, 127, 87, 164, 48, 78, 123, 49, 24, 142, 150, 246, 223, 237, 191, 176, 95, 253, 237, 151, 82, 241, 223, 222, 6, 66, 69, 58, 90, 215, 110, 188, 162, 33, 219, 190, 169, 223, 109, 197, 112, 44, 75, 245, 127, 182, 56, 150, 228, 107, 23, 46, 0, 188, 246, 251, 207, 236, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 78, 2, 62, 215, 147, 236, 91, 159, 237, 176, 201, 238, 113, 238, 169, 147, 228, 60, 81, 110, 82, 254, 214, 223, 148, 211, 112, 23, 23, 38, 34, 192, 189, 58, 13, 106, 219, 204, 161, 118, 125, 6, 219, 186, 38, 210, 138, 114, 85, 233, 234, 138, 87, 250, 91, 225, 134, 21, 226, 68, 4, 248, 13, 128, 19, 189, 153, 76, 5, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 17, 129, 126, 33, 224, 200, 6, 253, 185, 9, 112, 7, 192, 185, 223, 95, 102, 7, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 12, 2, 58, 1, 246, 73, 176, 165, 186, 246, 110, 94, 175, 254, 248, 6, 126, 241, 113, 109, 95, 202, 50, 95, 209, 93, 119, 9, 68, 75, 223, 224, 47, 175, 26, 123, 223, 91, 125, 227, 229, 111, 253, 163, 253, 101, 119, 0, 104, 80, 21, 133, 172, 154, 155, 87, 165, 58, 187, 125, 26, 179, 123, 106, 2, 223, 126, 1, 96, 254, 131, 217, 251, 159, 235, 169, 9, 158, 44, 249, 249, 253, 58, 217, 244, 30, 124, 58, 162, 223, 255, 15, 241, 187, 97, 89, 7, 96, 181, 86, 205, 245, 41, 217, 246, 150, 84, 20, 125, 80, 229, 232, 218, 201, 97, 200, 244, 141, 93, 126, 144, 133, 46, 219, 195, 94, 54, 210, 171, 88, 47, 55, 10, 4, 32, 0, 1, 8, 64, 0, 2, 47, 68, 96, 172, 5, 150, 197, 128, 23, 5, 77, 230, 122, 33, 218, 185, 158, 216, 200, 56, 233, 205, 182, 228, 247, 111, 94, 184, 40, 181, 94, 212, 206, 28, 99, 18, 206, 67, 138, 212, 105, 55, 234, 163, 154, 250, 185, 190, 204, 127, 173, 212, 16, 25, 92, 33, 214, 216, 251, 245, 193, 103, 36, 166, 248, 241, 136, 253, 84, 20, 108, 91, 254, 198, 130, 236, 45, 199, 188, 48, 222, 26, 70, 43, 189, 51, 143, 209, 21, 138, 210, 173, 237, 154, 92, 181, 149, 131, 74, 73, 53, 214, 49, 46, 115, 75, 211, 47, 223, 141, 20, 150, 184, 107, 6, 139, 138, 202, 59, 8, 124, 251, 5, 128, 119, 228, 130, 41, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 111, 35, 160, 147, 73, 159, 80, 90, 106, 176, 189, 147, 202, 234, 143, 147, 246, 197, 199, 181, 125, 41, 203, 124, 69, 183, 78, 152, 151, 147, 124, 235, 71, 156, 125, 111, 229, 101, 255, 144, 58, 73, 215, 75, 114, 108, 209, 212, 127, 99, 167, 202, 78, 73, 131, 85, 175, 60, 84, 44, 151, 24, 165, 174, 120, 234, 63, 104, 75, 237, 190, 97, 130, 120, 114, 2, 252, 6, 192, 147, 191, 129, 164, 15, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 135, 0, 119, 0, 220, 67, 9, 27, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 169, 9, 244, 111, 178, 123, 221, 147, 146, 110, 190, 19, 160, 219, 169, 126, 109, 235, 113, 54, 118, 209, 208, 55, 240, 254, 38, 255, 88, 218, 70, 227, 140, 111, 254, 219, 63, 201, 172, 193, 245, 79, 53, 103, 18, 30, 204, 242, 64, 175, 60, 84, 44, 231, 250, 94, 91, 186, 239, 40, 202, 97, 230, 251, 29, 227, 16, 243, 58, 129, 135, 187, 0, 208, 255, 56, 149, 58, 127, 36, 215, 223, 192, 247, 247, 206, 132, 223, 31, 225, 43, 61, 230, 108, 54, 109, 55, 110, 201, 123, 18, 82, 140, 190, 201, 167, 183, 231, 250, 78, 76, 153, 216, 167, 14, 226, 209, 12, 229, 188, 45, 71, 216, 116, 216, 6, 242, 65, 91, 50, 253, 44, 135, 173, 116, 155, 50, 254, 7, 72, 219, 77, 199, 146, 138, 83, 186, 45, 119, 114, 117, 238, 206, 185, 62, 108, 226, 41, 50, 125, 216, 68, 103, 230, 155, 227, 42, 49, 5, 40, 145, 201, 235, 223, 201, 85, 128, 246, 239, 229, 150, 193, 148, 40, 77, 8, 64, 0, 2, 16, 128, 0, 4, 78, 78, 64, 11, 4, 149, 46, 85, 191, 103, 235, 126, 170, 215, 242, 66, 75, 140, 92, 122, 132, 116, 148, 236, 108, 253, 94, 199, 220, 43, 123, 60, 197, 82, 92, 239, 85, 123, 139, 133, 79, 173, 133, 198, 58, 40, 3, 135, 69, 72, 109, 75, 34, 78, 104, 209, 169, 79, 54, 41, 106, 231, 134, 228, 226, 168, 81, 174, 21, 217, 170, 84, 172, 172, 101, 204, 49, 126, 174, 27, 99, 55, 214, 135, 105, 26, 59, 53, 115, 152, 172, 88, 59, 164, 252, 85, 93, 67, 87, 199, 104, 167, 159, 186, 123, 59, 26, 110, 203, 47, 187, 114, 231, 1, 166, 4, 210, 98, 232, 70, 156, 84, 245, 122, 140, 145, 75, 199, 26, 189, 246, 115, 152, 222, 215, 234, 119, 154, 53, 143, 235, 85, 167, 101, 171, 175, 142, 239, 184, 143, 42, 31, 238, 2, 192, 163, 130, 34, 47, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 121, 9, 244, 19, 191, 94, 247, 140, 164, 155, 79, 6, 187, 157, 234, 215, 182, 30, 103, 99, 23, 13, 157, 80, 251, 66, 194, 177, 180, 141, 198, 241, 73, 191, 106, 117, 97, 66, 223, 204, 232, 75, 154, 76, 194, 131, 89, 42, 113, 13, 186, 83, 102, 245, 173, 246, 78, 136, 47, 81, 105, 220, 153, 239, 151, 4, 38, 200, 187, 8, 240, 27, 0, 239, 194, 133, 49, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 159, 36, 224, 83, 118, 203, 159, 28, 155, 177, 206, 70, 128, 59, 0, 206, 246, 142, 50, 31, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 156, 128, 192, 79, 158, 238, 250, 219, 105, 201, 190, 9, 163, 219, 227, 107, 252, 80, 132, 38, 55, 117, 170, 94, 70, 203, 55, 251, 161, 168, 215, 210, 101, 147, 27, 82, 94, 242, 137, 87, 196, 205, 150, 164, 190, 249, 215, 56, 186, 19, 32, 101, 84, 123, 185, 248, 246, 191, 125, 207, 62, 210, 203, 192, 242, 153, 219, 82, 41, 116, 43, 83, 179, 245, 80, 61, 3, 129, 113, 1, 64, 111, 179, 255, 114, 142, 164, 166, 219, 251, 206, 48, 253, 87, 156, 67, 59, 32, 228, 244, 95, 237, 127, 113, 205, 183, 111, 130, 144, 135, 215, 229, 184, 152, 88, 150, 93, 183, 253, 12, 171, 61, 223, 247, 255, 255, 52, 103, 163, 3, 246, 221, 91, 206, 116, 59, 123, 199, 203, 233, 42, 150, 108, 34, 173, 140, 105, 41, 157, 199, 145, 206, 113, 164, 107, 54, 25, 99, 236, 100, 227, 18, 38, 7, 108, 109, 129, 132, 0, 4, 32, 0, 1, 8, 64, 224, 89, 9, 228, 103, 190, 214, 4, 49, 129, 101, 189, 160, 246, 180, 201, 64, 186, 117, 33, 97, 27, 157, 224, 170, 46, 89, 70, 189, 174, 78, 183, 191, 76, 142, 52, 58, 243, 92, 175, 196, 88, 146, 26, 211, 155, 115, 202, 60, 134, 223, 58, 13, 175, 33, 37, 165, 29, 101, 49, 88, 227, 56, 222, 117, 25, 254, 57, 118, 139, 83, 9, 133, 194, 43, 170, 84, 12, 131, 18, 114, 121, 219, 168, 91, 46, 27, 203, 157, 134, 77, 135, 84, 44, 21, 171, 171, 238, 224, 210, 190, 21, 163, 180, 56, 202, 73, 118, 215, 54, 199, 83, 244, 185, 212, 24, 229, 191, 31, 95, 22, 189, 228, 207, 81, 109, 20, 189, 65, 125, 38, 192, 29, 0, 51, 17, 218, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 175, 19, 152, 79, 244, 190, 51, 161, 126, 218, 169, 186, 55, 141, 185, 212, 219, 133, 129, 229, 68, 221, 39, 236, 97, 180, 92, 160, 8, 15, 95, 18, 176, 239, 125, 178, 46, 35, 164, 111, 196, 205, 150, 36, 119, 0, 124, 231, 91, 255, 114, 177, 249, 13, 128, 151, 123, 203, 153, 48, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 34, 1, 238, 0, 120, 197, 119, 157, 57, 67, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 5, 9, 248, 155, 120, 77, 93, 117, 151, 107, 55, 165, 219, 198, 190, 55, 101, 24, 212, 205, 2, 250, 246, 94, 227, 140, 87, 126, 155, 47, 221, 29, 155, 124, 228, 28, 247, 183, 215, 75, 89, 168, 166, 50, 101, 155, 118, 190, 93, 62, 13, 110, 236, 38, 255, 27, 214, 116, 159, 139, 64, 187, 0, 160, 63, 39, 255, 225, 236, 201, 115, 77, 252, 117, 103, 83, 135, 141, 199, 157, 191, 242, 115, 142, 150, 223, 153, 173, 199, 152, 229, 209, 152, 178, 187, 181, 201, 183, 219, 92, 139, 229, 255, 215, 100, 51, 215, 143, 252, 142, 245, 158, 197, 108, 145, 217, 196, 78, 159, 15, 123, 155, 145, 151, 93, 124, 184, 196, 131, 100, 105, 215, 62, 116, 150, 190, 232, 80, 95, 126, 32, 41, 94, 164, 157, 125, 177, 175, 151, 159, 13, 83, 22, 210, 168, 45, 11, 10, 4, 32, 0, 1, 8, 64, 0, 2, 231, 36, 224, 207, 249, 46, 107, 117, 208, 87, 9, 181, 46, 240, 122, 193, 253, 65, 36, 23, 29, 146, 85, 237, 140, 50, 226, 48, 77, 51, 217, 148, 233, 42, 165, 187, 115, 243, 146, 68, 49, 122, 201, 152, 67, 121, 20, 107, 29, 48, 60, 211, 97, 150, 161, 148, 243, 210, 169, 17, 164, 27, 42, 53, 111, 20, 153, 102, 25, 110, 249, 124, 123, 247, 79, 131, 197, 170, 108, 245, 3, 0, 57, 174, 214, 146, 83, 25, 113, 50, 7, 117, 101, 219, 202, 178, 77, 87, 187, 185, 43, 100, 22, 183, 213, 208, 162, 111, 121, 224, 94, 99, 213, 42, 47, 131, 46, 147, 180, 99, 122, 179, 123, 64, 2, 237, 2, 192, 3, 102, 71, 74, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 190, 136, 128, 78, 79, 125, 138, 106, 169, 208, 59, 167, 206, 23, 35, 218, 247, 166, 12, 131, 186, 136, 16, 23, 59, 84, 247, 43, 26, 119, 125, 251, 47, 59, 189, 36, 219, 151, 49, 21, 105, 39, 91, 13, 146, 191, 2, 168, 204, 238, 41, 247, 204, 246, 158, 56, 216, 60, 35, 1, 126, 3, 224, 25, 223, 53, 114, 134, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 147, 0, 119, 0, 188, 19, 24, 230, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 227, 18, 240, 247, 224, 146, 125, 187, 149, 177, 108, 253, 221, 248, 94, 140, 217, 191, 199, 182, 125, 183, 169, 126, 125, 147, 63, 238, 8, 136, 206, 217, 103, 109, 235, 59, 255, 250, 142, 63, 101, 236, 22, 169, 59, 1, 198, 237, 247, 150, 125, 156, 204, 122, 185, 11, 96, 12, 210, 13, 20, 168, 149, 169, 217, 122, 168, 190, 2, 1, 46, 0, 188, 194, 187, 124, 146, 57, 250, 96, 245, 89, 153, 56, 28, 100, 98, 35, 117, 118, 197, 110, 57, 88, 15, 229, 94, 91, 198, 210, 143, 35, 118, 202, 108, 183, 184, 249, 168, 84, 255, 52, 81, 93, 62, 33, 51, 166, 100, 53, 23, 217, 220, 223, 93, 157, 210, 201, 152, 10, 178, 167, 183, 46, 7, 137, 70, 182, 91, 94, 82, 164, 46, 18, 173, 31, 162, 113, 58, 245, 97, 150, 207, 129, 45, 0, 52, 49, 21, 121, 80, 32, 0, 1, 8, 64, 0, 2, 16, 120, 25, 2, 94, 252, 212, 162, 225, 250, 162, 35, 109, 130, 76, 200, 92, 7, 105, 141, 145, 77, 201, 241, 146, 174, 111, 214, 91, 246, 190, 244, 95, 60, 211, 66, 129, 115, 221, 18, 114, 12, 146, 114, 137, 57, 222, 24, 141, 219, 203, 91, 198, 146, 105, 60, 219, 190, 19, 99, 241, 223, 233, 171, 49, 203, 215, 118, 145, 76, 40, 60, 194, 54, 151, 158, 87, 213, 101, 43, 155, 33, 85, 81, 59, 31, 1, 208, 175, 41, 41, 167, 144, 209, 150, 220, 22, 217, 141, 5, 220, 182, 99, 29, 95, 113, 85, 102, 41, 149, 117, 163, 95, 79, 246, 239, 217, 149, 161, 127, 217, 73, 78, 202, 195, 82, 206, 81, 162, 153, 217, 73, 173, 77, 101, 150, 105, 80, 93, 159, 218, 143, 184, 23, 56, 90, 208, 157, 12, 91, 239, 107, 86, 185, 0, 240, 154, 239, 59, 179, 134, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 41, 9, 244, 243, 77, 213, 189, 221, 154, 172, 236, 124, 110, 186, 23, 99, 246, 119, 92, 203, 253, 126, 93, 140, 136, 28, 180, 133, 193, 241, 166, 83, 124, 245, 15, 105, 251, 84, 42, 70, 157, 252, 235, 135, 248, 116, 17, 96, 91, 34, 235, 188, 88, 48, 178, 159, 187, 167, 246, 212, 220, 134, 162, 117, 122, 2, 252, 6, 192, 233, 223, 98, 38, 8, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 248, 243, 135, 59, 0, 248, 43, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 94, 138, 192, 252, 45, 184, 218, 190, 93, 188, 215, 59, 20, 233, 251, 214, 251, 84, 95, 190, 189, 95, 236, 234, 219, 252, 242, 154, 173, 123, 187, 125, 235, 31, 3, 228, 35, 4, 138, 17, 223, 234, 215, 183, 253, 186, 237, 62, 94, 186, 215, 93, 143, 4, 236, 221, 243, 238, 228, 195, 111, 220, 7, 176, 12, 160, 156, 41, 16, 48, 129, 127, 242, 175, 216, 45, 255, 225, 204, 127, 53, 238, 71, 158, 128, 192, 252, 230, 114, 72, 248, 250, 55, 117, 102, 58, 183, 143, 70, 148, 157, 223, 31, 213, 237, 231, 250, 7, 228, 184, 231, 108, 249, 32, 25, 81, 151, 72, 81, 145, 137, 135, 202, 170, 116, 145, 70, 186, 58, 157, 48, 201, 98, 91, 73, 245, 89, 86, 47, 123, 8, 64, 0, 2, 16, 128, 0, 4, 94, 154, 128, 22, 6, 42, 125, 193, 176, 214, 117, 18, 171, 190, 245, 25, 249, 104, 167, 202, 114, 184, 42, 68, 47, 229, 182, 172, 89, 198, 242, 230, 98, 24, 235, 135, 249, 54, 180, 134, 240, 54, 98, 203, 206, 37, 151, 53, 161, 200, 165, 207, 176, 83, 128, 202, 181, 228, 26, 176, 12, 60, 15, 203, 234, 143, 136, 125, 160, 168, 87, 115, 157, 183, 237, 87, 57, 124, 150, 0, 110, 71, 54, 49, 84, 5, 136, 186, 110, 253, 31, 23, 1, 66, 187, 45, 178, 203, 228, 203, 124, 211, 169, 62, 23, 133, 80, 125, 210, 185, 91, 250, 227, 126, 229, 147, 191, 16, 16, 99, 141, 220, 236, 56, 198, 238, 161, 155, 202, 86, 91, 233, 28, 110, 26, 110, 221, 104, 125, 142, 0, 119, 0, 124, 142, 31, 222, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 147, 17, 240, 185, 167, 211, 86, 91, 231, 161, 146, 189, 238, 126, 73, 247, 89, 246, 190, 234, 247, 37, 14, 219, 86, 187, 90, 179, 117, 111, 15, 191, 8, 188, 92, 44, 136, 238, 188, 64, 144, 207, 251, 115, 7, 64, 167, 69, 253, 115, 4, 248, 13, 128, 207, 241, 195, 27, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2]);
fileData10.push.apply(fileData10, [16, 128, 0, 4, 32, 240, 20, 4, 184, 3, 224, 41, 222, 38, 146, 132, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 244, 237, 187, 139, 191, 137, 183, 180, 254, 72, 118, 223, 61, 27, 245, 251, 110, 244, 180, 141, 157, 100, 125, 43, 127, 233, 145, 125, 234, 31, 91, 89, 168, 181, 45, 238, 191, 148, 250, 230, 127, 124, 251, 63, 106, 75, 59, 6, 213, 205, 246, 26, 91, 187, 252, 87, 0, 66, 163, 71, 0, 202, 163, 141, 225, 91, 23, 156, 124, 235, 170, 234, 97, 199, 133, 37, 138, 243, 19, 224, 2, 192, 249, 223, 227, 7, 154, 161, 142, 96, 42, 150, 189, 222, 117, 105, 244, 129, 221, 181, 24, 234, 187, 214, 63, 231, 114, 143, 253, 181, 20, 237, 239, 49, 45, 175, 249, 248, 232, 45, 155, 251, 14, 212, 142, 218, 71, 59, 172, 71, 135, 63, 192, 22, 25, 35, 57, 134, 42, 233, 27, 67, 103, 191, 165, 108, 236, 43, 93, 190, 164, 139, 90, 254, 16, 141, 117, 213, 147, 49, 52, 5, 10, 4, 32, 0, 1, 8, 64, 0, 2, 167, 39, 160, 207, 125, 45, 20, 242, 243, 95, 50, 215, 12, 146, 87, 182, 177, 154, 144, 87, 190, 174, 217, 78, 125, 57, 214, 208, 141, 193, 114, 252, 174, 63, 26, 123, 177, 81, 202, 59, 239, 204, 155, 226, 230, 116, 226, 212, 59, 235, 57, 153, 97, 29, 125, 59, 185, 244, 28, 162, 123, 52, 183, 182, 221, 102, 91, 119, 104, 57, 186, 158, 9, 196, 110, 200, 241, 8, 64, 25, 104, 125, 40, 67, 201, 86, 172, 146, 220, 41, 202, 123, 41, 174, 90, 170, 99, 250, 81, 193, 93, 251, 180, 139, 145, 115, 45, 24, 82, 254, 185, 27, 29, 219, 9, 40, 232, 59, 182, 30, 163, 207, 49, 7, 25, 113, 108, 35, 233, 50, 113, 176, 250, 66, 246, 56, 247, 250, 92, 4, 57, 141, 130, 11, 0, 167, 121, 43, 153, 8, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 206, 77, 64, 167, 114, 46, 243, 41, 166, 245, 71, 178, 251, 238, 217, 248, 52, 81, 125, 105, 27, 59, 73, 159, 216, 207, 62, 217, 55, 108, 211, 62, 13, 214, 154, 237, 103, 187, 181, 157, 151, 63, 198, 169, 178, 235, 146, 26, 83, 146, 59, 0, 204, 16, 249, 117, 4, 248, 13, 128, 175, 99, 73, 36, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 195, 18, 224, 2, 192, 195, 190, 53, 36, 6, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 124, 37, 1, 127, 251, 174, 175, 217, 243, 155, 253, 8, 46, 93, 150, 165, 98, 197, 86, 218, 215, 114, 219, 91, 113, 220, 119, 35, 212, 236, 122, 87, 219, 49, 251, 24, 93, 119, 87, 16, 140, 94, 158, 192, 187, 31, 1, 240, 31, 153, 201, 241, 20, 133, 73, 60, 139, 156, 223, 193, 103, 201, 251, 157, 121, 250, 200, 56, 185, 117, 181, 235, 27, 34, 67, 185, 234, 74, 49, 110, 198, 90, 162, 101, 127, 236, 186, 92, 110, 15, 75, 229, 98, 122, 89, 113, 191, 228, 119, 253, 15, 20, 177, 251, 135, 154, 134, 218, 221, 134, 157, 63, 249, 210, 70, 186, 200, 43, 253, 37, 243, 53, 100, 40, 107, 158, 33, 135, 205, 120, 8, 204, 33, 46, 231, 139, 6, 2, 16, 128, 0, 4, 32, 0, 129, 243, 18, 208, 226, 65, 197, 178, 90, 139, 42, 215, 22, 173, 59, 205, 134, 178, 214, 20, 229, 218, 237, 22, 125, 40, 63, 93, 215, 216, 138, 211, 114, 80, 67, 237, 44, 163, 146, 34, 127, 219, 168, 223, 118, 239, 241, 107, 253, 179, 9, 164, 24, 17, 184, 111, 183, 250, 187, 109, 213, 183, 241, 47, 251, 35, 254, 72, 86, 125, 90, 54, 90, 142, 236, 151, 41, 100, 95, 87, 246, 250, 50, 217, 161, 236, 109, 215, 45, 101, 50, 253, 38, 192, 10, 75, 125, 177, 105, 176, 185, 216, 191, 75, 219, 238, 73, 249, 59, 142, 125, 70, 123, 106, 206, 35, 209, 254, 36, 1, 238, 0, 248, 36, 64, 220, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 231, 32, 160, 147, 203, 60, 193, 140, 221, 222, 133, 129, 107, 179, 176, 175, 229, 108, 107, 189, 229, 220, 255, 217, 182, 226, 170, 56, 190, 165, 117, 217, 201, 14, 2, 55, 8, 112, 1, 224, 6, 32, 186, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 103, 32, 192, 5, 128, 51, 188, 139, 204, 1, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 155, 128, 191, 77, 183, 131, 219, 95, 249, 173, 186, 99, 221, 35, 149, 199, 156, 131, 253, 230, 62, 231, 140, 132, 192, 71, 8, 188, 251, 55, 0, 62, 50, 8, 62, 175, 66, 160, 31, 182, 60, 103, 235, 220, 110, 210, 93, 150, 234, 234, 245, 102, 250, 225, 170, 226, 121, 83, 16, 215, 39, 153, 183, 128, 133, 110, 82, 215, 173, 97, 210, 123, 83, 136, 61, 187, 22, 90, 195, 108, 139, 162, 86, 113, 77, 82, 155, 31, 125, 90, 123, 173, 177, 133, 122, 92, 95, 101, 61, 17, 166, 182, 122, 253, 218, 177, 12, 147, 37, 247, 43, 245, 28, 98, 111, 36, 249, 72, 111, 223, 72, 175, 70, 27, 202, 124, 86, 46, 234, 101, 53, 164, 218, 20, 8, 64, 0, 2, 16, 128, 0, 4, 94, 134, 128, 22, 10, 42, 203, 34, 201, 11, 135, 15, 202, 177, 174, 240, 10, 199, 114, 187, 222, 208, 152, 99, 27, 11, 149, 221, 103, 232, 163, 239, 82, 159, 217, 166, 119, 237, 106, 77, 166, 71, 223, 223, 150, 88, 57, 161, 242, 13, 163, 187, 94, 211, 88, 235, 2, 234, 54, 7, 229, 40, 123, 203, 197, 87, 35, 71, 151, 242, 210, 108, 45, 107, 6, 119, 238, 229, 216, 75, 111, 187, 110, 169, 213, 169, 6, 236, 171, 212, 165, 175, 7, 153, 234, 94, 194, 54, 207, 123, 220, 54, 81, 134, 131, 67, 29, 249, 187, 191, 167, 184, 137, 211, 26, 138, 33, 251, 163, 88, 205, 244, 101, 170, 220, 1, 240, 50, 111, 53, 19, 133, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 68, 96, 62, 33, 116, 91, 178, 215, 63, 67, 203, 177, 238, 145, 61, 167, 217, 126, 238, 251, 76, 78, 248, 66, 128, 11, 0, 252, 13, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 94, 128, 0, 143, 0, 188, 192, 155, 204, 20, 33, 176, 71, 160, 95, 93, 86, 63, 183, 71, 237, 81, 66, 7, 1, 8, 64, 0, 2, 16, 128, 192, 163, 17, 232, 107, 152, 189, 186, 242, 149, 254, 189, 69, 62, 190, 189, 220, 254, 61, 254, 94, 188, 91, 253, 123, 62, 159, 213, 57, 183, 123, 227, 120, 78, 247, 218, 99, 119, 110, 2, 92, 0, 56, 247, 251, 123, 254, 217, 249, 168, 171, 153, 190, 247, 104, 248, 8, 116, 156, 191, 115, 183, 28, 211, 241, 73, 185, 30, 197, 202, 46, 73, 85, 118, 182, 180, 25, 253, 75, 125, 223, 116, 23, 149, 66, 46, 227, 237, 248, 133, 106, 59, 182, 141, 245, 59, 0, 227, 227, 82, 53, 167, 38, 123, 10, 4, 32, 0, 1, 8, 64, 0, 2, 231, 38, 144, 235, 18, 125, 254, 231, 26, 164, 75, 213, 231, 173, 214, 18, 94, 43, 148, 12, 155, 64, 164, 253, 242, 186, 240, 139, 158, 166, 27, 131, 173, 193, 50, 194, 202, 89, 185, 72, 37, 121, 184, 173, 230, 75, 45, 150, 52, 25, 73, 62, 89, 15, 89, 138, 57, 158, 243, 153, 251, 173, 183, 60, 26, 223, 253, 119, 200, 72, 160, 230, 19, 82, 153, 70, 227, 125, 39, 244, 111, 225, 34, 207, 230, 149, 129, 20, 108, 148, 77, 219, 182, 86, 190, 133, 103, 215, 181, 56, 246, 71, 62, 21, 1, 46, 0, 60, 213, 219, 69, 178, 16, 248, 58, 2, 58, 148, 123, 83, 84, 159, 207, 127, 221, 8, 68, 130, 0, 4, 32, 0, 1, 8, 64, 0, 2, 95, 79, 192, 235, 151, 35, 169, 17, 213, 247, 222, 34, 31, 159, 222, 218, 191, 143, 177, 23, 239, 86, 255, 158, 207, 103, 117, 206, 237, 222, 56, 158, 211, 189, 246, 216, 157, 155, 0, 191, 1, 112, 238, 247, 151, 217, 65, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 146, 0, 23, 0, 248, 67, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 78, 67, 192, 223, 144, 247, 111, 231, 93, 255, 204, 36, 29, 163, 203, 30, 207, 250, 174, 163, 14, 129, 71, 35, 192, 35, 0, 143, 246, 142, 188, 84, 62, 58, 76, 170, 204, 178, 180, 219, 253, 87, 30, 82, 231, 241, 122, 108, 247, 109, 71, 95, 91, 182, 125, 175, 92, 35, 244, 218, 28, 69, 125, 206, 64, 207, 91, 169, 94, 207, 93, 149, 101, 105, 180, 191, 243, 21, 110, 122, 236, 235, 214, 150, 3, 109, 70, 27, 241, 195, 49, 95, 146, 218, 242, 121, 255, 166, 83, 91, 169, 141, 124, 214, 27, 231, 164, 163, 64, 0, 2, 16, 128, 0, 4, 32, 112, 122, 2, 185, 14, 136, 89, 90, 94, 153, 176, 86, 16, 185, 102, 240, 186, 34, 165, 214, 41, 181, 158, 208, 154, 226, 253, 155, 125, 37, 107, 83, 144, 124, 238, 125, 39, 216, 50, 214, 94, 158, 127, 107, 245, 85, 190, 81, 31, 113, 42, 140, 146, 83, 250, 150, 85, 95, 109, 86, 253, 58, 236, 154, 83, 183, 187, 236, 159, 25, 200, 111, 232, 180, 198, 138, 188, 164, 200, 167, 255, 213, 241, 222, 50, 187, 76, 237, 247, 60, 34, 32, 87, 217, 87, 8, 7, 146, 84, 118, 37, 171, 119, 212, 149, 175, 127, 80, 97, 145, 215, 38, 32, 63, 143, 208, 229, 158, 143, 108, 239, 41, 239, 153, 225, 61, 241, 158, 219, 134, 59, 0, 158, 251, 253, 35, 123, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 160, 17, 240, 105, 161, 228, 188, 53, 179, 119, 87, 231, 88, 30, 199, 129, 220, 239, 54, 18, 2, 143, 72, 128, 11, 0, 143, 248, 174, 144, 19, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 139, 9, 112, 1, 224, 139, 129, 18, 14, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 120, 76, 2, 253, 91, 122, 215, 231, 111, 242, 63, 155, 185, 227, 190, 39, 142, 115, 176, 236, 190, 214, 89, 246, 62, 234, 16, 120, 47, 129, 127, 54, 127, 72, 106, 248, 81, 11, 69, 114, 189, 61, 54, 209, 170, 239, 29, 11, 123, 8, 76, 4, 250, 31, 216, 252, 199, 55, 153, 222, 219, 84, 152, 246, 71, 221, 155, 235, 35, 83, 227, 249, 174, 205, 31, 248, 148, 75, 119, 236, 99, 59, 182, 251, 119, 228, 58, 78, 119, 172, 122, 186, 199, 46, 221, 98, 247, 246, 145, 255, 161, 50, 200, 20, 59, 3, 134, 206, 114, 233, 182, 98, 149, 122, 130, 108, 126, 25, 90, 145, 81, 107, 78, 76, 254, 81, 52, 185, 12, 21, 187, 229, 57, 174, 209, 87, 29, 101, 199, 30, 2, 16, 128, 0, 4, 32, 0, 129, 23, 34, 48, 214, 2, 99, 157, 80, 207, 208, 135, 46, 219, 59, 114, 89, 51, 200, 239, 142, 254, 97, 239, 245, 203, 88, 140, 132, 118, 188, 98, 156, 122, 198, 94, 67, 74, 103, 11, 181, 71, 125, 12, 227, 78, 217, 244, 146, 237, 244, 213, 179, 255, 209, 163, 250, 240, 217, 196, 78, 93, 31, 79, 166, 110, 151, 180, 227, 214, 127, 107, 179, 231, 35, 93, 141, 107, 91, 229, 30, 171, 178, 140, 175, 83, 51, 233, 123, 214, 189, 62, 173, 101, 151, 181, 156, 98, 186, 79, 246, 81, 207, 32, 243, 90, 175, 197, 154, 199, 104, 109, 71, 186, 240, 214, 48, 10, 209, 164, 150, 138, 153, 134, 101, 27, 226, 91, 171, 153, 72, 27, 225, 48, 233, 102, 243, 66, 85, 238, 0, 120, 161, 55, 155, 169, 66, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 149, 9, 232, 220, 208, 231, 135, 174, 187, 253, 85, 92, 28, 247, 61, 241, 156, 131, 101, 247, 181, 206, 178, 247, 81, 135, 192, 123, 9, 112, 1, 224, 189, 196, 176, 135, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 60, 33, 1, 46, 0, 60, 225, 155, 70, 202, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 199, 9, 204, 223, 166, 171, 221, 55, 69, 118, 251, 163, 163, 124, 214, 255, 163, 227, 226, 7, 129, 107, 4, 254, 185, 214, 73, 31, 4, 32, 240, 85, 4, 244, 17, 176, 83, 252, 201, 16, 82, 213, 124, 172, 126, 49, 179, 207, 120, 14, 44, 44, 230, 231, 197, 170, 29, 190, 242, 207, 173, 158, 13, 91, 219, 214, 95, 151, 57, 120, 140, 171, 17, 55, 155, 98, 74, 39, 57, 215, 123, 123, 246, 139, 182, 203, 197, 51, 98, 238, 64, 66, 0, 2, 16, 128, 0, 4, 32, 240, 212, 4, 180, 70, 208, 66, 65, 114, 89, 43, 100, 99, 219, 238, 125, 143, 82, 31, 169, 75, 100, 201, 245, 74, 78, 40, 154, 154, 211, 152, 135, 235, 251, 121, 123, 109, 182, 63, 95, 67, 217, 247, 221, 247, 89, 108, 149, 134, 242, 24, 11, 169, 150, 90, 37, 60, 237, 251, 99, 238, 178, 237, 235, 47, 251, 150, 139, 126, 233, 201, 214, 210, 232, 55, 15, 182, 30, 249, 236, 126, 25, 231, 222, 254, 246, 234, 177, 155, 217, 237, 170, 135, 113, 64, 203, 41, 224, 129, 122, 137, 239, 126, 43, 38, 119, 171, 145, 7, 4, 184, 3, 224, 0, 12, 106, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 156, 4, 230, 147, 72, 181, 251, 166, 89, 187, 253, 81, 2, 159, 245, 255, 232, 184, 248, 65, 224, 26, 1, 46, 0, 92, 163, 67, 31, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 36, 4, 184, 0, 112, 146, 55, 146, 105, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 21, 8, 252, 196, 55, 235, 26, 195, 229, 39, 198, 243, 88, 72, 8, 124, 55, 129, 79, 254, 6, 128, 254, 119, 240, 211, 32, 74, 213, 117, 158, 196, 248, 238, 55, 238, 28, 241, 125, 104, 157, 101, 159, 221, 124, 200, 157, 219, 221, 246, 222, 250, 60, 94, 143, 233, 190, 123, 99, 125, 206, 206, 35, 75, 214, 255, 61, 122, 46, 171, 151, 110, 113, 95, 61, 158, 70, 107, 175, 245, 246, 181, 107, 222, 30, 241, 154, 205, 69, 95, 40, 244, 92, 90, 254, 14, 65, 100, 189, 142, 90, 99, 58, 38, 18, 2, 16, 128, 0, 4, 32, 0, 129, 243, 18, 208, 250, 32, 31, 86, 207, 41, 102, 107, 89, 19, 104, 69, 240, 161, 87, 60, 147, 190, 255, 187, 71, 165, 207, 241, 110, 216, 44, 254, 202, 64, 182, 155, 87, 75, 185, 47, 188, 114, 109, 83, 150, 185, 46, 27, 126, 199, 227, 85, 156, 101, 172, 139, 156, 70, 191, 199, 190, 232, 31, 185, 133, 94, 99, 232, 21, 149, 122, 73, 167, 86, 200, 183, 236, 207, 150, 186, 119, 139, 212, 153, 115, 147, 187, 134, 27, 43, 89, 236, 252, 38, 64, 14, 98, 48, 107, 255, 90, 115, 100, 143, 90, 109, 123, 184, 247, 199, 228, 204, 228, 215, 18, 249, 177, 25, 127, 106, 32, 238, 0, 248, 20, 62, 156, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 159, 36, 160, 243, 189, 249, 156, 239, 171, 199, 239, 241, 127, 98, 188, 175, 206, 159, 120, 16, 56, 34, 192, 5, 128, 35, 50, 232, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 39, 34, 240, 201, 71, 0, 78, 68, 130, 169, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 167, 36, 208, 191, 209, 247, 4, 103, 157, 111, 161, 151, 222, 117, 219, 34, 33, 112, 22, 2, 92, 0, 56, 203, 59, 249, 107, 243, 152, 15, 157, 115, 251, 227, 137, 57, 146, 165, 34, 245, 250, 125, 145, 229, 177, 122, 249, 233, 42, 235, 220, 46, 171, 245, 201, 43, 245, 231, 75, 207, 99, 109, 182, 232, 9, 227, 122, 20, 75, 125, 195, 82, 54, 237, 149, 29, 209, 86, 239, 186, 85, 77, 170, 212, 198, 46, 31, 81, 26, 38, 18, 250, 119, 87, 37, 215, 82, 157, 203, 179, 107, 26, 71, 54, 95, 188, 121, 208, 26, 109, 228, 23, 74, 143, 171, 1, 85, 87, 79, 74, 213, 51, 217, 33, 51, 0, 31, 149, 235, 251, 70, 13, 2, 16, 128, 0, 4, 32, 240, 34, 4, 180, 60, 208, 58, 64, 50, 23, 40, 150, 210, 29, 109, 182, 153, 101, 217, 231, 250, 35, 124, 75, 42, 140, 234, 107, 184, 26, 107, 109, 247, 190, 163, 122, 166, 216, 98, 200, 110, 46, 82, 105, 121, 99, 91, 203, 163, 152, 107, 158, 83, 46, 21, 34, 220, 199, 107, 26, 247, 50, 158, 231, 39, 217, 55, 101, 232, 182, 235, 146, 151, 165, 86, 97, 111, 203, 133, 139, 92, 99, 94, 154, 133, 70, 201, 244, 53, 91, 252, 142, 83, 194, 176, 135, 126, 115, 96, 234, 151, 79, 68, 174, 95, 124, 82, 205, 197, 118, 53, 193, 200, 116, 132, 151, 125, 86, 107, 103, 179, 69, 170, 191, 109, 105, 238, 118, 140, 147, 111, 194, 58, 74, 6, 219, 219, 165, 95, 116, 220, 50, 149, 221, 50, 246, 94, 160, 215, 210, 113, 1, 224, 181, 222, 111, 102, 11, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 151, 35, 224, 115, 197, 62, 241, 89, 231, 115, 196, 126, 190, 216, 237, 169, 67, 224, 12, 4, 248, 13, 128, 51, 188, 139, 204, 1, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 131, 0, 23, 0, 110, 0, 162, 27, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 120, 28, 2, 250, 134, 126, 254, 246, 126, 206, 206, 253, 221, 214, 117, 203, 217, 135, 54, 4, 94, 129, 0, 143, 0, 188, 194, 187, 204, 28, 191, 144, 128, 63, 50, 36, 85, 44, 171, 117, 123, 191, 181, 239, 209, 124, 219, 153, 31, 99, 82, 95, 61, 107, 165, 39, 170, 238, 127, 41, 39, 189, 44, 183, 158, 214, 86, 230, 30, 63, 243, 214, 51, 103, 26, 49, 18, 40, 31, 61, 19, 22, 245, 108, 111, 237, 211, 207, 125, 146, 57, 218, 86, 102, 76, 118, 16, 128, 0, 4, 32, 0, 1, 8, 156, 154, 128, 214, 0, 90, 8, 244, 181, 128, 39, 236, 190, 108, 15, 131, 92, 91, 104, 205, 33, 31, 203, 92, 121, 172, 49, 236, 95, 126, 90, 149, 216, 86, 126, 233, 40, 197, 142, 255, 106, 235, 126, 201, 185, 238, 100, 21, 183, 23, 173, 131, 108, 251, 55, 22, 64, 235, 243, 248, 30, 191, 203, 52, 117, 248, 33, 157, 147, 243, 140, 232, 57, 252, 86, 191, 198, 181, 190, 226, 150, 109, 249, 84, 30, 227, 153, 254, 156, 107, 228, 22, 207, 198, 43, 175, 124, 158, 125, 155, 120, 234, 222, 100, 23, 250, 176, 72, 217, 77, 214, 122, 205, 113, 13, 162, 89, 119, 143, 90, 125, 110, 250, 53, 102, 68, 252, 251, 230, 124, 162, 41, 213, 50, 154, 234, 171, 71, 181, 62, 177, 159, 223, 152, 163, 80, 153, 195, 81, 39, 250, 35, 2, 220, 1, 112, 68, 6, 61, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 112, 4, 116, 126, 120, 235, 28, 209, 253, 221, 214, 117, 203, 135, 155, 24, 9, 65, 224, 7, 8, 112, 1, 224, 7, 32, 51, 4, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 183, 9, 112, 1, 224, 183, 223, 1, 198, 135, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 190, 156, 128, 239, 2, 184, 55, 240, 158, 125, 215, 249, 206, 129, 35, 121, 239, 56, 216, 65, 224, 55, 9, 240, 27, 0, 191, 73, 159, 177, 63, 65, 96, 62, 244, 42, 148, 15, 209, 189, 239, 19, 67, 124, 196, 213, 67, 103, 58, 163, 161, 127, 203, 84, 213, 216, 229, 99, 91, 106, 198, 51, 75, 122, 36, 45, 255, 157, 83, 245, 73, 23, 66, 255, 238, 170, 164, 90, 245, 180, 85, 54, 70, 191, 158, 251, 186, 181, 133, 105, 218, 72, 222, 191, 141, 65, 83, 164, 95, 102, 16, 254, 35, 9, 233, 50, 160, 210, 113, 224, 156, 87, 116, 228, 191, 213, 154, 6, 234, 165, 64, 0, 2, 16, 128, 0, 4, 32, 240, 74, 4, 180, 4, 208, 10, 34, 151, 2, 37, 189, 94, 209, 154, 33, 95, 150, 101, 180, 177, 173, 117, 133, 66, 28, 172, 113, 178, 75, 81, 118, 220, 52, 92, 250, 237, 201, 145, 86, 218, 100, 248, 26, 170, 181, 195, 98, 83, 242, 233, 119, 173, 197, 90, 46, 61, 175, 139, 0, 97, 215, 117, 209, 26, 24, 230, 185, 12, 51, 247, 23, 149, 117, 78, 217, 150, 77, 247, 27, 109, 89, 141, 156, 106, 157, 24, 107, 68, 13, 212, 203, 88, 87, 198, 194, 50, 180, 234, 180, 148, 145, 158, 219, 183, 78, 109, 215, 29, 164, 230, 91, 62, 213, 63, 255, 38, 192, 234, 163, 126, 202, 179, 19, 224, 14, 128, 103, 127, 7, 201, 31, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 32, 224, 83, 220, 139, 142, 3, 197, 158, 125, 215, 169, 126, 109, 59, 8, 139, 26, 2, 15, 69, 128, 11, 0, 15, 245, 118, 144, 12, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 123, 8, 112, 1, 224, 123, 184, 18, 21, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 80, 4, 248, 13, 128, 135, 122, 59, 72, 230, 38, 1, 223, 119, 37, 195, 126, 79, 214, 77, 199, 59, 13, 122, 252, 59, 93, 110, 153, 85, 154, 181, 207, 127, 159, 53, 30, 203, 202, 103, 183, 242, 241, 44, 53, 122, 132, 62, 169, 168, 103, 83, 59, 213, 199, 214, 235, 93, 151, 198, 122, 70, 174, 236, 242, 57, 178, 108, 149, 110, 127, 175, 200, 142, 95, 195, 233, 185, 255, 12, 107, 169, 209, 61, 188, 116, 149, 205, 98, 35, 197, 18, 163, 79, 133, 58, 4, 32, 0, 1, 8, 64, 0, 2, 231, 39, 160, 133, 65, 45, 6, 198, 34, 33, 23, 6, 109, 193, 80, 221, 94, 64, 212, 154, 34, 86, 14, 50, 139, 93, 151, 91, 27, 245, 207, 54, 181, 226, 200, 142, 30, 54, 237, 108, 127, 167, 84, 218, 42, 225, 187, 20, 175, 125, 28, 79, 221, 170, 75, 186, 238, 190, 239, 144, 30, 163, 143, 23, 57, 169, 120, 124, 173, 27, 149, 211, 126, 81, 71, 24, 44, 11, 77, 89, 41, 81, 5, 177, 147, 235, 146, 85, 214, 154, 53, 200, 51, 19, 224, 14, 128, 51, 191, 187, 204, 13, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 48, 8, 112, 1, 128, 63, 5, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 11, 16, 224, 2, 192, 11, 188, 201, 76, 241, 153, 9, 248, 118, 45, 75, 205, 69, 245, 185, 125, 223, 28, 187, 215, 125, 30, 88, 65, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 103, 33, 16, 191, 1, 160, 83, 130, 7, 126, 242, 99, 62, 99, 121, 224, 84, 159, 242, 143, 98, 230, 59, 79, 98, 234, 159, 154, 219, 243, 208, 240, 189, 232, 239, 241, 220, 105, 169, 190, 189, 186, 117, 147, 244, 243, 78, 86, 119, 247, 241, 68, 88, 132, 243, 179, 97, 17, 90, 134, 222, 84, 233, 1, 172, 159, 165, 130, 70, 89, 124, 179, 145, 170, 138, 53, 218, 234, 223, 62, 183, 22, 227, 134, 82, 91, 57, 43, 200, 240, 107, 66, 143, 96, 233, 177, 172, 245, 57, 123, 249, 52, 151, 141, 207, 104, 164, 131, 108, 52, 183, 213, 222, 227, 149, 191, 244, 222, 52, 180, 94, 195, 103, 196, 151, 157, 148, 101, 191, 149, 105, 92, 221, 21, 39, 254, 29, 217, 140, 23, 99, 175, 175, 41, 94, 204, 37, 99, 73, 218, 183, 201, 168, 82, 32, 0, 1, 8, 64, 0, 2, 16, 56, 57, 1, 173, 1, 84, 106, 45, 48, 214, 31, 109, 245, 176, 174, 35, 122, 77, 246, 221, 214, 237, 208, 105, 61, 163, 151, 100, 110, 209, 183, 200, 94, 119, 255, 71, 164, 198, 219, 41, 161, 140, 104, 49, 222, 88, 7, 169, 157, 155, 116, 95, 53, 246, 141, 124, 251, 220, 197, 181, 6, 174, 241, 149, 117, 253, 119, 145, 188, 78, 145, 254, 198, 57, 93, 100, 190, 200, 50, 170, 185, 172, 231, 123, 17, 32, 207, 253, 36, 71, 105, 213, 181, 79, 17, 183, 101, 44, 73, 255, 196, 50, 49, 243, 216, 244, 58, 47, 73, 197, 179, 148, 209, 70, 225, 142, 200, 54, 244, 122, 85, 192, 77, 180, 209, 80, 160, 62, 152, 218, 210, 108, 115, 43, 109, 118, 93, 236, 236, 189, 120, 236, 25, 207, 186, 197, 248, 34, 220, 41, 20, 220, 1, 112, 138, 183, 145, 73, 156, 151, 128, 143, 72, 150, 154, 169, 234, 115, 251, 62, 2, 221, 235, 62, 15, 172, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 179, 16, 224, 2, 192, 89, 222, 73, 230, 1, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 66, 128, 127, 6, 240, 10, 28, 186, 32, 240, 243, 4, 250, 119, 244, 174, 119, 233, 250, 199, 51, 83, 132, 121, 115, 180, 207, 71, 119, 36, 36, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 104, 4, 126, 225, 2, 192, 124, 138, 113, 242, 135, 44, 30, 237, 29, 159, 158, 153, 217, 222, 74, 254, 5, 201, 206, 111, 239, 23, 132, 60, 10, 225, 161, 102, 121, 100, 255, 83, 250, 202, 71, 251, 218, 244, 44, 214, 194, 57, 159, 129, 218, 54, 179, 87, 59, 169, 135, 172, 86, 106, 170, 170, 103, 164, 162, 175, 54, 213, 63, 190, 45, 233, 204, 99, 57, 135, 248, 95, 50, 199, 177, 28, 121, 229, 152, 210, 249, 165, 28, 244, 27, 1, 50, 206, 98, 57, 154, 8, 8, 64, 0, 2, 16, 128, 0, 4, 206, 79, 32, 63, 254, 99, 39, 153, 11, 8, 75, 233, 174, 109, 182, 91, 165, 221, 51, 86, 168, 179, 120, 157, 209, 98, 109, 215, 65, 94, 155, 204, 82, 43, 150, 43, 41, 141, 240, 27, 161, 116, 211, 71, 235, 27, 255, 14, 128, 234, 138, 51, 226, 133, 69, 218, 200, 110, 222, 210, 110, 140, 217, 235, 182, 235, 186, 155, 245, 145, 67, 248, 42, 129, 204, 71, 35, 42, 47, 233, 118, 139, 122, 116, 110, 101, 41, 163, 250, 101, 128, 210, 169, 61, 22, 120, 23, 231, 4, 234, 83, 169, 49, 86, 251, 210, 142, 158, 124, 92, 95, 60, 86, 119, 53, 106, 91, 215, 188, 171, 110, 47, 206, 26, 113, 175, 230, 224, 179, 220, 179, 69, 247, 17, 2, 191, 112, 1, 224, 35, 105, 226, 3, 129, 87, 33, 160, 131, 157, 139, 235, 93, 186, 110, 155, 247, 75, 69, 152, 55, 71, 249, 124, 116, 71, 66, 66, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 143, 70, 128, 223, 0, 120, 180, 119, 132, 124, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 223, 64, 128, 11, 0, 223, 0, 149, 144, 16, 248, 58, 2, 254, 78, 222, 82, 145, 143, 190, 191, 255, 186, 81, 137, 4, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 156, 143, 0, 143, 0, 156, 239, 61, 189, 62, 163, 124, 104, 231, 186, 201, 103, 122, 243, 223, 5, 109, 1, 190, 121, 184, 54, 210, 227, 86, 215, 83, 119, 61, 131, 165, 211, 119, 203, 245, 41, 45, 219, 172, 207, 211, 107, 62, 139, 54, 171, 235, 243, 110, 209, 140, 174, 117, 211, 115, 97, 7, 219, 136, 162, 72, 187, 219, 136, 227, 161, 210, 70, 186, 241, 120, 88, 74, 165, 50, 74, 190, 159, 14, 212, 30, 49, 179, 170, 75, 251, 32, 33, 0, 1, 8, 64, 0, 2, 16, 56, 47, 1, 125, 246, 171, 244, 53, 192, 181, 122, 89, 79, 251, 201, 97, 93, 227, 140, 184, 209, 63, 153, 108, 219, 234, 63, 218, 148, 219, 158, 191, 2, 170, 104, 61, 227, 34, 59, 173, 129, 162, 157, 155, 218, 170, 75, 230, 166, 245, 150, 234, 94, 119, 117, 189, 117, 33, 237, 111, 185, 216, 219, 230, 192, 239, 194, 78, 177, 52, 224, 24, 51, 226, 41, 1, 197, 191, 191, 180, 5, 91, 58, 201, 219, 186, 17, 165, 5, 124, 139, 62, 141, 32, 185, 91, 118, 220, 151, 112, 7, 46, 187, 113, 186, 210, 227, 127, 212, 191, 199, 162, 126, 147, 0, 119, 0, 220, 68, 132, 1, 4, 126, 147, 128, 143, 136, 150, 202, 69, 245, 190, 253, 102, 126, 140, 13, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 60, 11, 1, 46, 0, 60, 203, 59, 69, 158, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 79, 16, 224, 2, 192, 39, 224, 225, 10, 129, 199, 33, 208, 239, 8, 232, 119, 11, 60, 78, 134, 100, 2, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 252, 46, 129, 79, 254, 6, 128, 31, 212, 176, 212, 100, 122, 253, 119, 39, 199, 232, 231, 38, 160, 191, 52, 157, 234, 206, 242, 158, 89, 251, 116, 249, 30, 219, 247, 219, 244, 19, 240, 168, 199, 179, 90, 127, 222, 74, 87, 207, 84, 13, 85, 4, 214, 51, 100, 249, 127, 140, 93, 134, 157, 198, 44, 91, 249, 151, 221, 250, 188, 89, 244, 92, 60, 35, 38, 155, 190, 237, 217, 236, 232, 114, 20, 13, 62, 198, 81, 45, 18, 202, 248, 150, 178, 241, 120, 145, 223, 242, 146, 78, 109, 13, 156, 197, 114, 52, 17, 16, 128, 0, 4, 32, 0, 1, 8, 156, 159, 64, 126, 252, 215, 58, 162, 22, 35, 49, 229, 237, 162, 100, 211, 94, 214, 20, 94, 91, 188, 91, 142, 117, 138, 134, 188, 177, 201, 224, 114, 188, 213, 111, 239, 205, 185, 21, 115, 219, 239, 248, 35, 166, 166, 158, 211, 183, 222, 210, 253, 209, 190, 246, 218, 228, 43, 159, 178, 214, 226, 172, 234, 185, 56, 203, 49, 246, 114, 191, 79, 167, 149, 167, 178, 148, 220, 174, 163, 213, 206, 30, 113, 85, 35, 202, 214, 122, 79, 145, 102, 236, 158, 136, 0, 119, 0, 60, 209, 155, 69, 170, 16, 56, 38, 160, 195, 116, 223, 142, 45, 233, 129, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 94, 147, 0, 23, 0, 94, 243, 125, 103, 214, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 98, 4, 184, 0, 240, 98, 111, 56, 211, 125, 100, 2, 190, 217, 106, 254, 38, 191, 183, 143, 234, 143, 60, 47, 114, 131, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 184, 69, 96, 94, 9, 202, 222, 186, 91, 190, 244, 67, 224, 94, 2, 159, 252, 13, 0, 253, 73, 250, 201, 16, 13, 233, 122, 61, 83, 114, 111, 18, 216, 157, 135, 192, 79, 30, 164, 60, 214, 44, 31, 130, 166, 147, 114, 50, 217, 46, 165, 158, 230, 122, 139, 255, 69, 212, 122, 203, 103, 187, 162, 62, 236, 245, 124, 215, 182, 12, 159, 16, 234, 58, 222, 14, 158, 40, 11, 135, 229, 217, 183, 8, 172, 104, 123, 155, 199, 236, 125, 214, 33, 33, 0, 1, 8, 64, 0, 2, 16, 128, 192, 71, 8, 104, 93, 225, 210, 235, 214, 125, 72, 122, 173, 116, 188, 40, 90, 22, 76, 251, 38, 90, 27, 213, 122, 40, 199, 239, 137, 105, 125, 22, 157, 229, 215, 214, 80, 169, 219, 107, 123, 168, 185, 239, 94, 189, 237, 74, 106, 145, 166, 177, 107, 177, 166, 152, 111, 113, 118, 229, 216, 82, 87, 226, 61, 229, 133, 97, 158, 126, 141, 115, 176, 93, 131, 178, 148, 133, 186, 135, 101, 198, 28, 163, 164, 193, 101, 191, 108, 149, 197, 35, 157, 233, 121, 130, 158, 69, 166, 206, 238, 78, 2, 220, 1, 112, 39, 40, 204, 32, 240, 253, 4, 124, 48, 147, 244, 166, 81, 93, 191, 38, 191, 63, 59, 70, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 248, 62, 2, 90, 233, 169, 120, 197, 231, 122, 42, 217, 65, 224, 139, 8, 112, 1, 224, 139, 64, 18, 6, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 200, 4, 62, 249, 8, 192, 35, 79, 141, 220, 32, 240, 232, 4, 250, 117, 94, 231, 58, 235, 124, 13, 120, 150, 178, 183, 173, 125, 145, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 220, 4, 188, 250, 233, 114, 94, 37, 221, 219, 158, 73, 249, 246, 247, 238, 47, 27, 183, 103, 251, 185, 109, 187, 35, 57, 219, 247, 118, 222, 250, 31, 10, 75, 245, 169, 174, 199, 70, 93, 20, 215, 57, 90, 215, 101, 254, 107, 210, 205, 190, 247, 81, 135, 128, 9, 112, 1, 192, 36, 144, 47, 68, 64, 135, 79, 149, 46, 85, 191, 189, 217, 226, 208, 93, 49, 242, 191, 146, 178, 203, 103, 183, 242, 136, 44, 111, 21, 61, 203, 181, 212, 74, 147, 109, 235, 87, 187, 178, 10, 143, 80, 109, 183, 178, 93, 158, 239, 143, 206, 109, 125, 216, 231, 104, 26, 113, 245, 175, 70, 239, 136, 79, 138, 52, 208, 104, 235, 167, 134, 158, 59, 139, 95, 43, 216, 248, 110, 114, 112, 204, 37, 84, 228, 176, 212, 163, 66, 129, 0, 4, 32, 0, 1, 8, 64, 224, 244, 4, 180, 54, 208, 66, 162, 214, 8, 93, 206, 107, 147, 143, 182, 181, 134, 113, 220, 194, 89, 99, 214, 242, 229, 58, 224, 190, 50, 113, 125, 120, 100, 222, 91, 111, 197, 205, 149, 80, 51, 245, 88, 178, 180, 122, 149, 145, 87, 190, 70, 46, 50, 222, 108, 118, 42, 253, 186, 86, 179, 217, 202, 68, 17, 212, 111, 185, 214, 101, 171, 190, 177, 166, 76, 169, 108, 46, 75, 44, 221, 228, 94, 101, 93, 210, 93, 26, 110, 52, 118, 218, 119, 168, 94, 173, 8, 43, 244, 165, 85, 229, 188, 14, 28, 237, 84, 13, 153, 142, 81, 95, 214, 194, 234, 164, 252, 38, 1, 46, 0, 252, 38, 125, 198, 126, 113, 2, 62, 0, 90, 10, 135, 235, 93, 170, 62, 111, 221, 86, 117, 10, 4, 32, 0, 1, 8, 64, 0, 2, 16, 56, 63, 129, 190, 66, 210, 108, 231, 21, 210, 123, 218, 51, 45, 159, 228, 246, 24, 125, 140, 217, 126, 110, 119, 191, 189, 250, 108, 223, 219, 121, 238, 31, 10, 75, 245, 229, 73, 127, 59, 227, 86, 76, 231, 168, 254, 185, 112, 7, 192, 76, 132, 246, 30, 1, 126, 3, 96, 143, 10, 58, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 201, 8, 112, 1, 224, 100, 111, 40, 211, 121, 102, 2, 186, 174, 171, 50, 164, 46, 251, 122, 179, 126, 185, 44, 220, 109, 85, 119, 59, 13, 217, 65, 0, 2, 16, 128, 0, 4, 32, 0, 129, 83, 16, 240, 10, 167, 175, 118, 186, 238, 43, 39, 233, 184, 61, 230, 158, 174, 247, 191, 167, 238, 57, 236, 201, 107, 113, 108, 47, 155, 195, 124, 220, 209, 101, 119, 188, 54, 0, 125, 47, 69, 128, 71, 0, 94, 234, 237, 126, 236, 201, 246, 227, 149, 51, 181, 206, 237, 143, 202, 245, 248, 231, 136, 37, 251, 115, 91, 182, 217, 200, 104, 100, 123, 200, 186, 47, 171, 188, 118, 247, 105, 183, 24, 71, 186, 178, 26, 143, 61, 101, 242, 106, 149, 46, 101, 222, 214, 229, 118, 104, 250, 9, 126, 191, 229, 43, 244, 121, 45, 64, 222, 174, 47, 82, 58, 235, 101, 55, 111, 163, 63, 71, 142, 250, 142, 12, 85, 150, 189, 190, 141, 46, 199, 169, 120, 229, 224, 94, 181, 90, 194, 75, 180, 107, 55, 170, 165, 17, 59, 8, 64, 0, 2, 16, 128, 0, 4, 158, 157, 128, 22, 34, 89, 186, 244, 26, 97, 72, 173, 79, 194, 38, 183, 121, 173, 146, 107, 35, 245, 143, 53, 140, 165, 226, 14, 219, 177, 216, 201, 117, 78, 215, 93, 174, 123, 70, 140, 244, 171, 53, 203, 8, 51, 66, 168, 191, 173, 101, 70, 230, 18, 186, 133, 190, 114, 80, 127, 197, 241, 88, 110, 95, 151, 30, 175, 231, 208, 198, 243, 192, 59, 242, 56, 174, 242, 202, 196, 50, 183, 202, 113, 94, 115, 41, 249, 216, 100, 231, 165, 87, 55, 9, 245, 81, 153, 205, 101, 106, 221, 234, 211, 131, 173, 218, 165, 230, 97, 99, 252, 204, 47, 118, 21, 195, 191, 38, 181, 88, 30, 84, 52, 170, 55, 143, 126, 99, 204, 131, 72, 199, 234, 253, 153, 29, 219, 159, 183, 135, 59, 0, 206, 251, 222, 50, 179, 167, 35, 160, 3, 147, 202, 144, 253, 195, 193, 122, 233, 92, 95, 164, 116, 214, 87, 47, 123, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 6, 2, 94, 225, 244, 213, 78, 215, 125, 229, 28, 29, 183, 199, 220, 211, 245, 254, 247, 212, 61, 135, 61, 121, 45, 142, 237, 101, 115, 152, 143, 59, 186, 236, 142, 215, 6, 160, 239, 165, 8, 112, 1, 224, 165, 222, 110, 38, 11, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 175, 74, 128, 71, 0, 94, 245, 157, 103, 222, 143, 69, 192, 87, 107, 151, 219, 159, 34, 61, 221, 67, 229, 182, 239, 6, 80, 219, 245, 144, 205, 98, 169, 107, 98, 75, 56, 53, 40, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 5, 8, 236, 173, 139, 174, 233, 102, 36, 190, 249, 188, 251, 200, 166, 183, 175, 213, 231, 120, 180, 33, 240, 136, 4, 184, 0, 240, 136, 239, 10, 57, 61, 49, 1, 125, 44, 168, 248, 227, 161, 215, 173, 107, 54, 89, 141, 93, 62, 230, 84, 39, 244, 233, 30, 187, 122, 198, 171, 90, 139, 103, 84, 150, 122, 134, 150, 98, 187, 233, 25, 178, 163, 231, 213, 74, 127, 225, 82, 65, 35, 94, 198, 150, 187, 63, 1, 175, 60, 126, 149, 182, 246, 73, 185, 189, 32, 177, 62, 65, 118, 37, 136, 230, 64, 129, 0, 4, 32, 0, 1, 8, 64, 224, 105, 9, 104, 217, 161, 50, 45, 71, 46, 219, 105, 163, 231, 225, 183, 235, 133, 101, 237, 161, 245, 135, 54, 199, 146, 220, 219, 186, 141, 234, 109, 187, 116, 104, 157, 139, 97, 11, 26, 213, 94, 100, 50, 150, 100, 203, 224, 210, 93, 198, 221, 215, 173, 207, 241, 59, 175, 49, 223, 8, 178, 246, 189, 183, 174, 177, 228, 163, 52, 114, 87, 178, 39, 254, 238, 250, 241, 218, 76, 61, 90, 7, 30, 91, 188, 123, 48, 28, 30, 140, 0, 23, 0, 30, 236, 13, 33, 157, 23, 37, 160, 15, 151, 44, 254, 148, 137, 6, 119, 0, 12, 38, 8, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 155, 128, 87, 81, 247, 202, 57, 98, 158, 252, 134, 178, 251, 203, 166, 183, 175, 213, 231, 120, 180, 33, 240, 136, 4, 248, 13, 128, 71, 124, 87, 200, 9, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 197, 4, 184, 3, 224, 139, 129, 18, 14, 2, 239, 35, 224, 235, 200, 242, 114, 93, 82, 173, 181, 237, 186, 100, 127, 109, 125, 236, 151, 238, 233, 93, 53, 246, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 223, 77, 96, 93, 185, 93, 174, 208, 106, 149, 118, 156, 193, 53, 95, 223, 20, 154, 183, 230, 135, 97, 62, 170, 121, 28, 106, 252, 19, 124, 220, 198, 127, 5, 209, 75, 119, 253, 192, 5, 128, 249, 207, 157, 39, 74, 94, 250, 47, 238, 171, 39, 239, 163, 165, 226, 206, 127, 106, 31, 25, 203, 241, 62, 42, 71, 30, 153, 74, 207, 199, 247, 148, 45, 57, 213, 0, 54, 177, 92, 186, 163, 178, 249, 63, 101, 60, 251, 149, 115, 172, 135, 192, 114, 190, 89, 13, 231, 85, 86, 99, 253, 29, 0, 245, 197, 37, 131, 141, 77, 183, 175, 186, 226, 110, 198, 139, 241, 67, 85, 190, 209, 179, 248, 135, 214, 207, 176, 165, 133, 140, 210, 82, 146, 2, 1, 8, 64, 0, 2, 16, 128, 192, 203, 17, 240, 90, 160, 22, 14, 94, 64, 104, 17, 113, 247, 230, 181, 197, 207, 200, 53, 173, 124, 175, 218, 2, 72, 41, 235, 17, 204, 156, 138, 215, 60, 150, 209, 121, 43, 191, 91, 115, 190, 230, 127, 236, 27, 249, 142, 156, 222, 148, 67, 228, 43, 121, 173, 252, 141, 181, 155, 166, 117, 108, 53, 245, 52, 6, 25, 119, 186, 194, 240, 150, 87, 32, 230, 17, 103, 167, 214, 95, 0, 43, 1, 213, 175, 152, 54, 175, 53, 225, 123, 237, 237, 236, 233, 188, 215, 207, 254, 47, 38, 127, 224, 2, 192, 139, 17, 101, 186, 16, 120, 23, 1, 31, 33, 229, 228, 122, 29, 197, 252, 241, 35, 189, 235, 85, 91, 247, 91, 31, 251, 85, 2, 213, 122, 87, 50, 24, 67, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 124, 144, 64, 95, 201, 237, 213, 175, 133, 221, 179, 183, 142, 59, 0, 174, 145, 163, 239, 189, 4, 248, 13, 128, 247, 18, 195, 30, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 132, 4, 184, 0, 240, 132, 111, 26, 41, 127, 128, 128, 46, 161, 170, 88, 86, 235, 129, 246, 190, 198, 219, 164, 110, 239, 242, 230, 187, 3, 242, 150, 175, 102, 99, 253, 174, 124, 232, 9, 63, 16, 123, 82, 129, 0, 4, 32, 0, 1, 8, 64, 0, 2, 251, 203, 68, 173, 186, 126, 187, 120, 229, 167, 60, 238, 201, 199, 54, 179, 252, 237, 121, 48, 254, 99, 16, 224, 17, 128, 199, 120, 31, 206, 147, 133, 143, 52, 191, 53, 35, 141, 191, 183, 245, 124, 246, 250, 173, 235, 118, 239, 174, 71, 16, 197, 81, 89, 158, 205, 26, 129, 213, 246, 253, 91, 50, 26, 39, 242, 235, 173, 253, 229, 182, 238, 183, 246, 50, 207, 231, 198, 194, 183, 234, 21, 226, 122, 125, 141, 94, 15, 13, 132, 143, 82, 91, 7, 217, 212, 220, 247, 85, 114, 19, 156, 6, 4, 32, 0, 1, 8, 64, 0, 2, 167, 36, 224, 117, 197, 103, 214, 15, 2, 211, 227, 184, 157, 186, 88, 236, 88, 106, 17, 164, 181, 207, 42, 179, 250, 142, 181, 81, 179, 215, 32, 42, 30, 56, 170, 111, 241, 12, 121, 61, 167, 239, 223, 63, 138, 78, 253, 151, 227, 214, 216, 85, 151, 174, 111, 234, 115, 255, 108, 223, 237, 122, 221, 246, 93, 58, 78, 151, 122, 158, 95, 131, 41, 167, 122, 186, 95, 242, 162, 232, 249, 119, 169, 67, 106, 201, 153, 191, 21, 96, 149, 218, 205, 65, 243, 220, 148, 233, 153, 255, 249, 153, 125, 15, 151, 126, 99, 140, 141, 255, 173, 134, 124, 188, 201, 214, 201, 88, 94, 228, 51, 2, 122, 78, 163, 121, 40, 142, 252, 237, 224, 56, 179, 157, 251, 95, 76, 114, 7, 192, 139, 189, 225, 47, 59, 93, 31, 96, 44, 31, 14, 132, 18, 155, 54, 29, 109, 189, 185, 47, 143, 192, 147, 157, 251, 46, 164, 38, 41, 91, 10, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 45, 2, 123, 171, 166, 61, 221, 173, 56, 95, 221, 239, 149, 159, 226, 222, 147, 143, 109, 102, 249, 213, 121, 17, 239, 57, 9, 112, 1, 224, 57, 223, 55, 178, 134, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 139, 0, 143, 0, 188, 11, 23, 198, 16, 248, 30, 2, 113, 163, 87, 4, 142, 173, 125, 195, 95, 255, 228, 202, 170, 175, 219, 189, 234, 150, 48, 217, 213, 173, 102, 147, 28, 215, 133, 251, 21, 223, 17, 193, 35, 228, 4, 220, 255, 61, 179, 33, 42, 4, 32, 0, 1, 8, 64, 0, 2, 16, 56, 31, 129, 121, 77, 53, 183, 111, 205, 120, 182, 239, 237, 91, 190, 244, 67, 224, 171, 8, 252, 192, 5, 0, 30, 182, 248, 170, 55, 139, 56, 239, 39, 224, 3, 171, 61, 231, 182, 245, 63, 33, 125, 2, 95, 55, 111, 57, 147, 146, 203, 255, 37, 75, 101, 92, 11, 24, 137, 201, 74, 37, 175, 15, 72, 46, 167, 243, 238, 201, 238, 12, 157, 227, 140, 11, 4, 233, 32, 167, 28, 166, 100, 245, 87, 172, 236, 202, 190, 242, 119, 117, 145, 229, 178, 132, 73, 43, 119, 42, 104, 62, 51, 38, 69, 75, 124, 164, 82, 131, 74, 175, 126, 10, 4, 32, 0, 1, 8, 64, 0, 2, 167, 36, 144, 31, 243, 90, 19, 196, 236, 54, 107, 14, 233, 238, 219, 230, 181, 139, 219, 242, 87, 8, 203, 94, 47, 93, 197, 151, 125, 247, 25, 201, 200, 177, 124, 67, 218, 70, 49, 114, 219, 123, 51, 212, 151, 195, 217, 94, 182, 174, 219, 241, 88, 118, 219, 189, 122, 13, 108, 255, 154, 151, 185, 45, 121, 185, 123, 145, 81, 209, 175, 0, 100, 30, 181, 174, 146, 237, 231, 202, 180, 110, 203, 223, 169, 90, 35, 78, 205, 24, 190, 236, 183, 195, 86, 94, 242, 242, 106, 239, 154, 92, 163, 83, 251, 109, 2, 63, 112, 1, 224, 183, 167, 200, 248, 16, 120, 124, 2, 241, 209, 18, 73, 198, 150, 71, 244, 170, 115, 7, 192, 227, 191, 111, 100, 8, 1, 8, 64, 0, 2, 16, 128, 192, 235, 16, 24, 171, 53, 175, 218, 46, 228, 45, 18, 215, 252, 111, 249, 210, 15, 129, 175, 34, 192, 111, 0, 124, 21, 73, 226, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 30, 152, 0, 119, 0, 60, 240, 155, 67, 106, 103, 38, 48, 95, 3, 246, 92, 87, 189, 110, 245, 26, 55, 162, 229, 109, 95, 186, 59, 32, 117, 146, 23, 215, 156, 135, 173, 93, 122, 56, 215, 135, 148, 137, 138, 77, 221, 158, 110, 6, 43, 35, 246, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 119, 17, 240, 218, 202, 198, 110, 91, 90, 127, 36, 189, 38, 235, 246, 170, 123, 141, 230, 186, 237, 142, 226, 216, 254, 168, 255, 81, 244, 158, 207, 163, 228, 243, 42, 121, 112, 1, 224, 85, 222, 105, 207, 115, 254, 135, 63, 243, 36, 211, 157, 200, 91, 4, 116, 160, 234, 7, 93, 183, 183, 178, 78, 207, 151, 83, 108, 49, 142, 135, 169, 234, 223, 112, 45, 75, 237, 253, 156, 84, 141, 233, 8, 107, 6, 235, 91, 101, 159, 38, 163, 170, 176, 181, 233, 194, 192, 168, 231, 165, 1, 181, 199, 166, 124, 179, 111, 213, 105, 132, 80, 69, 81, 6, 235, 71, 132, 116, 181, 41, 83, 235, 45, 101, 175, 254, 254, 146, 157, 94, 150, 246, 119, 252, 242, 97, 15, 1, 8, 64, 0, 2, 16, 128, 192, 121, 9, 212, 154, 66, 235, 1, 175, 19, 44, 251, 154, 193, 117, 175, 21, 220, 222, 147, 246, 239, 182, 214, 201, 222, 117, 247, 239, 200, 48, 90, 215, 70, 233, 176, 251, 6, 84, 238, 173, 75, 126, 177, 244, 169, 49, 134, 148, 110, 132, 168, 245, 85, 180, 189, 206, 90, 164, 116, 50, 146, 113, 228, 88, 98, 105, 91, 113, 233, 39, 219, 117, 43, 223, 225, 60, 244, 122, 30, 95, 179, 86, 204, 55, 233, 98, 152, 139, 103, 244, 151, 41, 212, 186, 173, 172, 22, 101, 95, 238, 149, 82, 65, 54, 101, 187, 222, 91, 150, 129, 195, 102, 234, 221, 120, 222, 211, 184, 24, 174, 197, 61, 234, 219, 139, 235, 60, 102, 31, 235, 247, 124, 208, 93, 18, 224, 2, 192, 37, 19, 52, 16, 248, 1, 2, 58, 116, 245, 205, 67, 174, 58, 125, 32, 216, 38, 235, 227, 131, 32, 63, 28, 54, 190, 171, 221, 162, 238, 225, 92, 31, 82, 214, 42, 205, 43, 219, 28, 60, 19, 3, 59, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 33, 2, 94, 91, 217, 217, 109, 75, 235, 143, 164, 236, 84, 186, 189, 234, 94, 163, 185, 110, 187, 52, 222, 217, 217, 126, 167, 235, 161, 84, 158, 207, 67, 37, 245, 2, 201, 240, 27, 0, 47, 240, 38, 51, 69, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 23, 0, 248, 27, 128, 192, 67, 16, 208, 53, 208, 131, 173, 221, 9, 144, 247, 127, 201, 78, 186, 189, 45, 250, 234, 182, 175, 85, 86, 220, 135, 152, 36, 73, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 151, 37, 176, 183, 116, 91, 116, 131, 138, 86, 131, 46, 174, 75, 246, 186, 251, 145, 16, 248, 8, 1, 30, 1, 248, 8, 181, 103, 246, 209, 81, 134, 146, 7, 209, 111, 39, 209, 7, 8, 238, 213, 212, 126, 125, 106, 62, 127, 23, 32, 218, 221, 180, 222, 158, 178, 171, 195, 125, 244, 203, 63, 99, 52, 153, 126, 229, 187, 88, 143, 74, 190, 205, 81, 151, 172, 173, 197, 80, 156, 101, 171, 17, 52, 230, 18, 163, 215, 229, 31, 247, 145, 57, 78, 230, 102, 67, 59, 165, 146, 29, 4, 32, 0, 1, 8, 64, 0, 2, 47, 73, 64, 235, 2, 21, 175, 15, 222, 33, 151, 245, 69, 248, 168, 174, 24, 93, 186, 255, 91, 100, 174, 163, 124, 179, 188, 6, 175, 242, 55, 22, 62, 53, 158, 214, 75, 170, 75, 86, 94, 159, 149, 30, 99, 140, 228, 17, 61, 112, 142, 165, 193, 188, 78, 171, 186, 30, 1, 80, 2, 202, 161, 126, 165, 73, 121, 188, 175, 120, 158, 195, 235, 122, 243, 34, 180, 135, 155, 220, 46, 236, 80, 60, 7, 1, 238, 0, 120, 142, 247, 137, 44, 79, 79, 64, 135, 214, 131, 45, 143, 242, 163, 207, 117, 201, 189, 45, 63, 204, 202, 54, 62, 62, 90, 204, 211, 3, 100, 130, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 161, 9, 236, 45, 221, 22, 221, 200, 92, 171, 55, 23, 215, 189, 162, 147, 222, 58, 219, 32, 33, 240, 94, 2, 92, 0, 120, 47, 49, 236, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 79, 72, 128, 71, 0, 158, 240, 77, 35, 229, 51, 17, 24, 215, 116, 117, 249, 87, 215, 116, 227, 223, 117, 209, 237, 93, 243, 221, 0, 190, 21, 76, 223, 234, 103, 93, 242, 226, 37, 47, 249, 82, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 126, 139, 128, 87, 114, 239, 29, 223, 171, 184, 188, 43, 32, 156, 125, 119, 128, 254, 105, 104, 215, 21, 51, 151, 138, 33, 47, 110, 201, 151, 34, 130, 232, 241, 205, 101, 73, 24, 245, 252, 103, 3, 47, 140, 195, 134, 242, 146, 4, 184, 0, 240, 146, 111, 251, 55, 78, 122, 62, 184, 248, 72, 246, 141, 67, 126, 38, 116, 63, 64, 187, 238, 148, 123, 219, 245, 143, 141, 117, 25, 177, 78, 212, 67, 239, 46, 115, 139, 182, 14, 242, 107, 177, 141, 12, 85, 111, 114, 84, 51, 70, 214, 213, 47, 147, 136, 190, 108, 229, 34, 183, 163, 205, 254, 25, 162, 70, 177, 106, 125, 254, 63, 114, 74, 127, 203, 28, 74, 227, 232, 169, 180, 101, 54, 171, 223, 58, 1, 106, 16, 128, 0, 4, 32, 0, 1, 8, 156, 152, 128, 214, 7, 177, 74, 24, 235, 140, 46, 85, 191, 190, 13, 167, 180, 83, 125, 207, 190, 98, 175, 171, 148, 176, 170, 241, 114, 253, 161, 214, 123, 95, 138, 168, 117, 77, 69, 154, 207, 162, 151, 104, 97, 180, 214, 163, 150, 246, 139, 102, 237, 219, 169, 141, 17, 118, 231, 147, 17, 142, 230, 58, 244, 233, 31, 245, 58, 115, 175, 92, 107, 125, 168, 204, 215, 178, 109, 133, 94, 138, 88, 171, 109, 78, 248, 67, 183, 185, 32, 176, 186, 223, 87, 235, 241, 70, 252, 114, 140, 14, 202, 83, 18, 224, 2, 192, 83, 190, 109, 36, 125, 30, 2, 58, 146, 234, 200, 60, 36, 119, 0, 156, 231, 173, 101, 38, 16, 128, 0, 4, 32, 0, 1, 8, 188, 36, 129, 177, 170, 123, 247, 220, 229, 167, 162, 101, 182, 107, 250, 46, 0, 0, 64, 0, 73, 68, 65, 84, 97, 198, 144, 140, 141, 59, 0, 138, 11, 251, 175, 33, 192, 111, 0, 124, 13, 71, 162, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 30, 154, 0, 119, 0, 60, 244, 219, 67, 114, 231, 38, 160, 107, 187, 42, 121, 141, 183, 164, 111, 247, 242, 29, 1, 209, 119, 237, 86, 177, 126, 171, 92, 93, 46, 30, 151, 138, 125, 233, 56, 99, 231, 32, 236, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 238, 36, 224, 85, 154, 204, 189, 82, 187, 211, 245, 186, 89, 15, 220, 44, 189, 244, 75, 41, 189, 236, 198, 93, 246, 210, 109, 31, 17, 45, 199, 131, 80, 118, 43, 35, 246, 16, 152, 8, 112, 1, 96, 2, 114, 250, 230, 124, 244, 88, 142, 50, 167, 159, 249, 7, 39, 168, 67, 235, 39, 182, 113, 52, 215, 73, 252, 101, 28, 165, 212, 15, 221, 81, 215, 129, 62, 143, 242, 123, 246, 214, 217, 175, 251, 94, 70, 175, 11, 7, 10, 23, 53, 109, 99, 180, 89, 42, 154, 202, 238, 147, 92, 50, 206, 156, 38, 153, 209, 220, 33, 111, 10, 4, 32, 0, 1, 8, 64, 0, 2, 175, 75, 192, 107, 18, 175, 55, 106, 181, 145, 107, 145, 88, 51, 92, 190, 246, 214, 45, 165, 211, 190, 162, 141, 24, 217, 8, 93, 200, 218, 92, 151, 60, 218, 108, 123, 69, 198, 155, 53, 66, 111, 222, 54, 143, 227, 37, 153, 218, 105, 184, 140, 191, 23, 243, 40, 143, 29, 189, 230, 183, 147, 183, 6, 209, 43, 165, 250, 245, 74, 59, 157, 252, 171, 174, 113, 213, 95, 227, 75, 238, 174, 221, 66, 153, 102, 238, 148, 75, 78, 70, 30, 59, 197, 125, 33, 223, 70, 68, 141, 173, 226, 246, 142, 215, 80, 201, 238, 214, 38, 211, 138, 55, 156, 118, 124, 156, 236, 106, 113, 95, 205, 113, 63, 234, 127, 223, 40, 103, 179, 226, 2, 192, 217, 222, 81, 230, 243, 68, 4, 124, 208, 106, 7, 78, 29, 177, 245, 203, 45, 121, 228, 46, 253, 250, 1, 224, 15, 130, 125, 57, 62, 25, 202, 87, 254, 114, 191, 56, 224, 62, 17, 30, 82, 133, 0, 4, 32, 0, 1, 8, 64, 0, 2, 191, 68, 32, 151, 81, 99, 236, 90, 145, 125, 81, 34, 61, 112, 11, 233, 165, 95, 74, 233, 101, 55, 206, 107, 165, 155, 191, 195, 179, 137, 228, 92, 56, 29, 158, 137, 208, 238, 4, 248, 13, 128, 78, 131, 58, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 164, 4, 184, 0, 112, 210, 55, 150, 105, 61, 50, 1, 95, 71, 190, 148, 117, 203, 85, 126, 231, 31, 23, 126, 199, 43, 46, 251, 230, 75, 151, 127, 85, 31, 210, 117, 183, 235, 54, 177, 97, 155, 151, 141, 21, 159, 2, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 27, 4, 46, 87, 122, 245, 197, 254, 123, 245, 191, 145, 59, 99, 158, 151, 0, 143, 0, 156, 247, 189, 125, 241, 153, 29, 29, 90, 133, 229, 239, 242, 132, 83, 65, 170, 147, 102, 253, 139, 246, 62, 44, 75, 83, 237, 178, 240, 94, 22, 239, 43, 138, 164, 59, 184, 42, 118, 182, 174, 4, 209, 45, 91, 101, 175, 81, 108, 24, 82, 39, 253, 209, 46, 141, 100, 189, 202, 166, 215, 135, 155, 92, 84, 29, 23, 12, 108, 47, 169, 82, 251, 172, 46, 245, 188, 174, 160, 190, 72, 34, 235, 146, 106, 199, 46, 117, 209, 42, 42, 33, 67, 241, 55, 159, 71, 243, 204, 134, 237, 136, 221, 227, 215, 40, 236, 33, 0, 1, 8, 64, 0, 2, 16, 56, 35, 1, 173, 19, 84, 114, 189, 160, 53, 195, 179, 108, 202, 57, 51, 223, 238, 156, 191, 180, 174, 111, 165, 214, 65, 234, 155, 101, 183, 87, 223, 87, 129, 80, 158, 235, 88, 206, 107, 155, 245, 199, 90, 126, 198, 95, 241, 151, 18, 235, 191, 55, 45, 252, 226, 191, 44, 234, 82, 189, 203, 234, 169, 125, 239, 235, 250, 31, 173, 183, 252, 15, 199, 245, 132, 14, 13, 94, 166, 131, 59, 0, 94, 230, 173, 102, 162, 143, 67, 64, 7, 169, 253, 173, 14, 192, 121, 152, 215, 161, 190, 94, 250, 128, 209, 107, 124, 144, 88, 234, 211, 167, 62, 124, 34, 86, 171, 15, 235, 49, 198, 227, 204, 154, 76, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 43, 17, 216, 95, 237, 29, 173, 2, 143, 245, 175, 196, 140, 185, 126, 63, 1, 46, 0, 124, 63, 99, 70, 128]);
fileData10.push.apply(fileData10, [0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 252, 58, 1, 30, 1, 248, 245, 183, 128, 4, 94, 155, 64, 187, 54, 172, 111, 248, 167, 127, 1, 32, 175, 5, 75, 63, 238, 0, 240, 55, 254, 93, 102, 95, 244, 111, 175, 27, 111, 91, 151, 189, 107, 255, 107, 243, 103, 246, 16, 128, 0, 4, 32, 0, 1, 8, 156, 133, 192, 188, 222, 185, 167, 61, 207, 221, 62, 210, 187, 126, 40, 163, 35, 251, 36, 93, 111, 126, 115, 236, 143, 182, 115, 140, 17, 87, 49, 212, 86, 225, 166, 246, 226, 192, 254, 125, 4, 254, 169, 191, 32, 253, 25, 197, 159, 80, 158, 124, 72, 142, 32, 67, 189, 249, 43, 179, 238, 125, 227, 96, 13, 129, 79, 18, 208, 31, 158, 182, 71, 41, 35, 151, 60, 218, 71, 125, 71, 230, 173, 250, 202, 57, 250, 244, 170, 252, 175, 72, 159, 252, 75, 54, 251, 237, 45, 253, 238, 51, 135, 232, 29, 170, 109, 10, 161, 220, 42, 54, 237, 204, 109, 244, 87, 189, 141, 40, 215, 56, 6, 100, 183, 50, 113, 93, 122, 181, 55, 242, 114, 102, 206, 12, 9, 1, 8, 64, 0, 2, 16, 128, 192, 139, 16, 208, 226, 32, 75, 151, 185, 106, 168, 133, 131, 86, 16, 99, 221, 113, 75, 102, 168, 216, 173, 230, 174, 75, 246, 250, 101, 200, 182, 124, 138, 206, 72, 104, 119, 83, 46, 35, 221, 165, 226, 147, 31, 251, 200, 64, 11, 32, 183, 15, 100, 168, 151, 16, 174, 55, 159, 117, 14, 97, 22, 250, 117, 155, 231, 49, 207, 205, 237, 178, 203, 95, 92, 202, 184, 218, 69, 217, 138, 210, 109, 246, 109, 62, 77, 159, 90, 77, 75, 254, 217, 168, 64, 254, 45, 128, 52, 13, 149, 126, 231, 201, 99, 164, 157, 237, 45, 135, 97, 250, 89, 39, 233, 173, 15, 175, 193, 212, 246, 228, 29, 59, 117, 161, 119, 159, 156, 151, 53, 176, 6, 136, 182, 125, 151, 100, 52, 128, 74, 31, 160, 52, 185, 191, 209, 93, 9, 30, 248, 182, 48, 103, 175, 114, 7, 192, 217, 223, 97, 230, 247, 224, 4, 116, 164, 26, 91, 30, 228, 162, 46, 105, 157, 15, 126, 33, 235, 67, 239, 82, 202, 86, 175, 141, 207, 212, 186, 236, 93, 173, 195, 148, 2, 1, 8, 64, 0, 2, 16, 128, 0, 4, 158, 158, 192, 188, 222, 185, 167, 61, 79, 218, 62, 210, 187, 126, 40, 163, 35, 251, 36, 93, 111, 126, 115, 236, 143, 182, 115, 140, 17, 87, 49, 212, 86, 225, 84, 182, 56, 176, 127, 31, 1, 126, 3, 224, 125, 188, 176, 134, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 60, 37, 1, 238, 0, 120, 202, 183, 141, 164, 159, 151, 64, 191, 134, 91, 117, 125, 123, 175, 91, 187, 186, 204, 107, 187, 227, 78, 128, 236, 201, 203, 202, 81, 107, 114, 83, 31, 254, 21, 165, 246, 235, 245, 225, 231, 165, 69, 230, 16, 128, 0, 4, 32, 0, 1, 8, 156, 155, 128, 191, 205, 246, 10, 73, 179, 181, 206, 51, 119, 223, 151, 202, 8, 54, 143, 163, 175, 212, 199, 82, 235, 207, 155, 235, 78, 98, 228, 117, 145, 195, 136, 115, 161, 63, 178, 63, 208, 183, 97, 50, 175, 30, 239, 232, 155, 126, 217, 92, 43, 179, 159, 237, 103, 253, 181, 24, 244, 157, 143, 0, 23, 0, 206, 247, 158, 50, 163, 239, 34, 224, 163, 102, 63, 34, 95, 29, 43, 12, 211, 167, 78, 220, 243, 249, 173, 176, 151, 74, 7, 222, 236, 106, 245, 210, 213, 197, 128, 234, 149, 69, 108, 237, 66, 128, 218, 122, 185, 127, 169, 231, 167, 213, 162, 94, 220, 46, 31, 27, 168, 112, 245, 225, 22, 25, 173, 161, 90, 84, 101, 58, 182, 72, 42, 109, 37, 183, 225, 179, 29, 170, 44, 234, 115, 113, 134, 110, 35, 33, 0, 1, 8, 64, 0, 2, 16, 56, 47, 129, 92, 75, 196, 170, 160, 214, 22, 93, 170, 126, 123, 147, 163, 191, 212, 232, 245, 238, 43, 253, 178, 105, 5, 162, 246, 238, 202, 100, 214, 15, 51, 225, 223, 233, 146, 186, 138, 58, 163, 72, 228, 115, 232, 90, 35, 13, 135, 145, 95, 207, 113, 201, 197, 54, 206, 73, 237, 15, 110, 235, 124, 149, 71, 143, 163, 180, 196, 72, 106, 229, 84, 221, 146, 90, 59, 94, 43, 101, 189, 90, 216, 126, 213, 95, 106, 20, 244, 77, 63, 0, 21, 255, 173, 118, 21, 195, 214, 142, 168, 126, 233, 44, 173, 191, 42, 109, 60, 203, 171, 78, 116, 126, 37, 1, 46, 0, 124, 37, 77, 98, 65, 224, 38, 1, 29, 237, 182, 155, 14, 234, 58, 221, 238, 50, 109, 242, 32, 95, 122, 127, 232, 116, 185, 169, 15, 255, 97, 157, 173, 203, 195, 246, 205, 228, 48, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 63, 74, 64, 171, 34, 21, 175, 142, 92, 79, 229, 216, 185, 239, 75, 101, 4, 83, 188, 77, 209, 73, 175, 244, 177, 113, 7, 192, 134, 12, 141, 19, 17, 224, 55, 0, 78, 244, 102, 50, 21, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 17, 1, 238, 0, 56, 34, 131, 30, 2, 223, 77, 32, 47, 47, 199, 32, 33, 231, 111, 255, 243, 142, 0, 245, 103, 79, 244, 202, 70, 237, 38, 231, 186, 218, 235, 150, 174, 222, 133, 164, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 19, 16, 208, 242, 72, 165, 150, 73, 183, 165, 109, 211, 233, 254, 157, 135, 177, 123, 182, 231, 49, 29, 206, 198, 71, 253, 182, 187, 34, 187, 235, 21, 51, 186, 32, 240, 105, 2, 92, 0, 248, 52, 66, 2, 64, 96, 16, 200, 131, 127, 236, 250, 137, 184, 62, 157, 212, 30, 39, 242, 111, 173, 94, 15, 77, 69, 95, 220, 110, 182, 62, 63, 181, 218, 238, 125, 162, 233, 66, 129, 99, 85, 125, 207, 170, 89, 132, 185, 47, 30, 100, 90, 242, 150, 46, 163, 148, 140, 106, 150, 89, 167, 182, 75, 246, 197, 78, 143, 132, 165, 191, 101, 24, 116, 191, 94, 183, 47, 18, 2, 16, 128, 0, 4, 32, 0, 129, 243, 18, 200, 165, 77, 76, 47, 215, 7, 109, 33, 144, 250, 214, 222, 91, 48, 216, 198, 82, 54, 174, 75, 238, 110, 30, 75, 242, 230, 54, 190, 68, 9, 203, 117, 61, 164, 250, 136, 29, 254, 85, 180, 18, 139, 34, 189, 68, 24, 232, 57, 120, 219, 185, 162, 181, 87, 141, 57, 100, 24, 164, 141, 244, 170, 47, 47, 199, 81, 172, 138, 119, 57, 254, 240, 29, 49, 42, 176, 140, 235, 247, 7, 86, 123, 197, 90, 109, 51, 77, 45, 200, 118, 139, 178, 155, 138, 76, 165, 78, 151, 183, 252, 137, 131, 191, 250, 157, 131, 248, 207, 81, 244, 48, 106, 55, 115, 20, 247, 47, 134, 83, 232, 159, 110, 94, 228, 245, 211, 9, 156, 100, 60, 46, 0, 156, 228, 141, 100, 26, 79, 72, 64, 159, 8, 121, 180, 173, 143, 11, 255, 14, 128, 142, 200, 220, 1, 240, 132, 239, 39, 41, 67, 0, 2, 16, 128, 0, 4, 32, 240, 253, 4, 124, 22, 40, 121, 207, 166, 140, 236, 243, 142, 236, 186, 139, 135, 185, 24, 207, 241, 108, 108, 67, 75, 247, 223, 33, 237, 226, 80, 119, 184, 96, 2, 129, 15, 17, 224, 55, 0, 62, 132, 13, 39, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 115, 17, 224, 2, 192, 115, 189, 95, 100, 123, 58, 2, 190, 206, 91, 119, 1, 44, 183, 152, 249, 54, 178, 188, 45, 76, 183, 125, 85, 255, 122, 59, 216, 104, 199, 165, 104, 189, 228, 231, 215, 246, 114, 184, 128, 121, 140, 211, 193, 99, 66, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 58, 1, 45, 147, 194, 34, 150, 74, 219, 77, 186, 121, 179, 173, 34, 186, 222, 140, 90, 245, 210, 119, 142, 165, 182, 98, 56, 142, 98, 126, 176, 244, 113, 21, 66, 237, 143, 150, 217, 215, 109, 203, 143, 198, 197, 239, 121, 8, 240, 8, 192, 243, 188, 87, 207, 145, 233, 147, 28, 61, 148, 102, 223, 4, 183, 183, 143, 234, 126, 19, 142, 250, 103, 189, 143, 208, 58, 248, 175, 135, 235, 102, 213, 244, 249, 52, 192, 120, 216, 42, 197, 210, 55, 236, 51, 72, 247, 141, 250, 248, 100, 41, 83, 181, 23, 213, 232, 138, 203, 2, 169, 147, 172, 206, 186, 136, 80, 118, 182, 31, 143, 130, 93, 50, 168, 144, 25, 215, 143, 43, 116, 25, 221, 158, 226, 226, 107, 70, 72, 8, 64, 0, 2, 16, 128, 0, 4, 94, 133, 128, 86, 4, 42, 250, 58, 162, 239, 253, 245, 196, 59, 100, 172, 87, 242, 37, 153, 91, 196, 91, 164, 234, 247, 108, 205, 183, 210, 210, 126, 91, 156, 114, 215, 230, 98, 44, 20, 26, 195, 245, 106, 230, 188, 106, 114, 234, 148, 114, 150, 205, 208, 73, 150, 225, 176, 31, 46, 114, 91, 230, 227, 60, 103, 105, 27, 233, 245, 124, 190, 156, 34, 33, 249, 69, 75, 191, 41, 165, 20, 62, 82, 244, 207, 27, 230, 239, 12, 40, 92, 70, 219, 70, 81, 92, 153, 108, 202, 24, 204, 63, 61, 80, 191, 24, 32, 139, 202, 35, 67, 102, 171, 188, 156, 155, 101, 105, 119, 226, 186, 3, 249, 163, 4, 184, 3, 224, 71, 113, 51, 24, 4, 102, 2, 62, 52, 234, 0, 26, 245, 241, 129, 145, 31, 12, 210, 228, 7, 196, 144, 123, 237, 244, 42, 63, 69, 202, 24, 177, 87, 173, 54, 141, 167, 58, 5, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 32, 129, 88, 6, 229, 170, 72, 178, 111, 129, 34, 245, 93, 170, 127, 180, 85, 201, 186, 21, 110, 119, 251, 91, 117, 249, 52, 191, 48, 255, 80, 105, 41, 164, 191, 218, 31, 45, 179, 175, 219, 150, 31, 141, 139, 223, 243, 16, 224, 2, 192, 243, 188, 87, 100, 122, 90, 2, 95, 117, 200, 253, 170, 56, 167, 5, 205, 196, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 210, 4, 120, 4, 224, 165, 223, 126, 38, 255, 243, 4, 116, 146, 222, 54, 93, 22, 206, 210, 116, 209, 239, 111, 242, 117, 7, 128, 236, 55, 119, 2, 132, 238, 162, 157, 54, 105, 25, 181, 205, 8, 75, 91, 195, 120, 52, 213, 41, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 251, 4, 250, 154, 201, 107, 171, 125, 203, 251, 181, 142, 243, 94, 217, 111, 201, 151, 175, 111, 185, 239, 250, 204, 66, 157, 42, 23, 29, 165, 102, 15, 1, 17, 224, 2, 0, 127, 7, 95, 75, 96, 62, 224, 248, 64, 244, 181, 163, 28, 70, 243, 1, 85, 6, 63, 60, 244, 65, 78, 235, 201, 124, 158, 158, 239, 38, 101, 101, 151, 171, 159, 106, 251, 167, 244, 182, 247, 100, 163, 157, 166, 146, 125, 83, 191, 46, 26, 148, 221, 98, 98, 183, 38, 163, 154, 69, 54, 42, 195, 101, 13, 27, 239, 111, 134, 30, 178, 172, 202, 174, 234, 202, 182, 254, 65, 67, 247, 33, 33, 0, 1, 8, 64, 0, 2, 16, 56, 47, 129, 92, 95, 196, 167, 127, 174, 15, 98, 183, 74, 213, 239, 221, 198, 250, 34, 22, 30, 229, 223, 229, 61, 49, 187, 253, 157, 245, 120, 75, 188, 222, 233, 239, 142, 199, 215, 146, 214, 245, 90, 8, 173, 109, 235, 107, 126, 210, 207, 243, 156, 109, 171, 127, 9, 184, 6, 152, 13, 71, 91, 11, 173, 145, 160, 98, 107, 109, 149, 99, 212, 239, 1, 200, 61, 243, 235, 137, 171, 46, 165, 202, 50, 49, 43, 74, 173, 142, 238, 151, 191, 39, 48, 204, 187, 126, 137, 51, 220, 46, 163, 84, 199, 172, 247, 40, 63, 45, 151, 233, 30, 228, 251, 211, 249, 60, 250, 120, 92, 0, 120, 244, 119, 136, 252, 78, 70, 96, 57, 154, 199, 188, 162, 174, 35, 120, 150, 173, 94, 135, 122, 245, 235, 96, 111, 121, 249, 225, 82, 253, 169, 79, 219, 180, 28, 158, 170, 111, 55, 13, 35, 29, 5, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 58, 129, 190, 102, 242, 154, 234, 186, 199, 237, 94, 199, 121, 175, 236, 39, 218, 242, 245, 201, 122, 215, 231, 232, 234, 84, 185, 232, 40, 53, 123, 8, 136, 0, 191, 1, 192, 223, 1, 4, 126, 157, 128, 143, 214, 71, 137, 244, 254, 94, 159, 237, 175, 245, 205, 182, 180, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 87, 35, 192, 29, 0, 175, 246, 142, 51, 223, 7, 33, 160, 147, 245, 126, 194, 94, 109, 127, 243, 175, 62, 127, 179, 175, 187, 4, 174, 126, 251, 191, 244, 43, 100, 183, 173, 17, 250, 40, 15, 50, 121, 210, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 95, 66, 192, 235, 156, 46, 107, 85, 181, 174, 131, 174, 181, 123, 18, 254, 102, 93, 246, 174, 247, 126, 234, 16, 56, 3, 1, 46, 0, 156, 225, 93, 100, 14, 191, 78, 224, 242, 131, 69, 167, 242, 210, 230, 57, 185, 119, 171, 116, 198, 227, 22, 127, 55, 243, 223, 121, 149, 79, 250, 134, 127, 246, 171, 215, 35, 244, 186, 117, 171, 84, 109, 45, 209, 146, 127, 94, 20, 144, 208, 197, 129, 69, 85, 245, 52, 94, 239, 19, 147, 127, 61, 29, 166, 76, 66, 159, 255, 224, 171, 228, 136, 186, 200, 170, 228, 63, 73, 219, 186, 202, 71, 125, 107, 204, 209, 141, 128, 0, 4, 32, 0, 1, 8, 64, 224, 140, 4, 150, 181, 65, 76, 78, 245, 177, 105, 205, 209, 235, 23, 107, 144, 232, 191, 75, 167, 48, 178, 93, 195, 109, 234, 106, 168, 47, 229, 145, 209, 158, 94, 62, 83, 145, 217, 219, 176, 149, 112, 204, 187, 242, 12, 135, 213, 78, 107, 174, 190, 245, 190, 123, 234, 147, 111, 36, 82, 177, 51, 171, 172, 143, 244, 36, 214, 242, 54, 214, 95, 50, 222, 41, 234, 117, 207, 90, 143, 90, 78, 122, 111, 245, 54, 226, 237, 196, 170, 72, 142, 162, 168, 109, 91, 65, 84, 80, 181, 29, 234, 72, 238, 142, 129, 242, 59, 8, 112, 1, 224, 59, 168, 18, 19, 2, 55, 9, 248, 32, 105, 195, 106, 199, 225, 61, 20, 163, 30, 7, 203, 108, 75, 222, 185, 233, 19, 97, 181, 117, 36, 143, 129, 132, 0, 4, 32, 0, 1, 8, 64, 0, 2, 231, 34, 160, 85, 147, 74, 151, 235, 106, 106, 93, 11, 29, 233, 202, 187, 246, 253, 116, 214, 245, 222, 79, 29, 2, 103, 32, 192, 111, 0, 156, 225, 93, 100, 14, 79, 76, 192, 31, 71, 71, 83, 112, 255, 158, 148, 143, 244, 20, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 183, 9, 112, 7, 192, 109, 70, 88, 64, 224, 19, 4, 230, 19, 119, 133, 242, 73, 123, 126, 191, 63, 98, 15, 187, 248, 6, 127, 185, 86, 61, 234, 250, 70, 127, 251, 205, 254, 250, 45, 127, 215, 167, 95, 247, 95, 198, 25, 67, 32, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 14, 9, 104, 21, 230, 59, 212, 109, 36, 157, 75, 91, 165, 229, 42, 107, 110, 219, 238, 171, 101, 31, 199, 119, 38, 116, 249, 213, 227, 17, 239, 220, 4, 184, 0, 112, 238, 247, 247, 114, 118, 121, 130, 120, 169, 126, 28, 141, 15, 113, 202, 72, 245, 185, 184, 223, 125, 93, 206, 125, 179, 175, 218, 221, 190, 183, 109, 219, 99, 92, 171, 207, 190, 179, 237, 220, 31, 237, 48, 201, 83, 126, 153, 142, 60, 222, 150, 19, 118, 233, 92, 42, 150, 108, 211, 116, 145, 234, 47, 77, 89, 174, 253, 25, 57, 98, 165, 103, 236, 20, 182, 182, 208, 165, 94, 82, 186, 33, 71, 36, 233, 202, 201, 17, 215, 102, 118, 197, 167, 75, 55, 185, 93, 87, 14, 250, 253, 0, 89, 82, 32, 0, 1, 8, 64, 0, 2, 16, 56, 59, 129, 250, 196, 175, 79, 126, 237, 107, 173, 80, 181, 187, 246, 203, 58, 37, 172, 123, 61, 99, 73, 167, 181, 200, 144, 170, 239, 110, 195, 87, 254, 185, 29, 217, 53, 125, 188, 49, 202, 181, 151, 60, 169, 118, 252, 232, 208, 88, 50, 242, 152, 233, 48, 116, 123, 117, 219, 93, 74, 231, 117, 175, 212, 152, 182, 213, 69, 9, 37, 81, 9, 73, 232, 145, 253, 148, 149, 94, 236, 231, 162, 153, 92, 41, 155, 110, 5, 43, 133, 98, 246, 178, 252, 54, 213, 176, 95, 221, 174, 143, 222, 99, 84, 166, 210, 200, 231, 104, 91, 35, 111, 125, 143, 90, 206, 180, 252, 180, 119, 4, 203, 35, 79, 244, 127, 254, 112, 1, 128, 191, 2, 8, 124, 43, 129, 249, 64, 167, 193, 124, 208, 138, 3, 251, 50, 246, 176, 211, 39, 134, 15, 142, 163, 174, 15, 0, 125, 242, 172, 31, 4, 107, 189, 235, 51, 84, 247, 111, 209, 151, 97, 168, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 236, 18, 208, 42, 108, 62, 129, 148, 206, 165, 173, 210, 188, 90, 219, 72, 219, 125, 181, 236, 227, 42, 63, 231, 105, 249, 213, 227, 17, 239, 220, 4, 248, 13, 128, 115, 191, 191, 204, 238, 225, 9, 248, 144, 126, 148, 168, 250, 85, 186, 221, 92, 47, 139, 178, 113, 29, 9, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 96, 75, 128, 59, 0, 182, 60, 104, 65, 224, 155, 9, 244, 19, 250, 62, 84, 232, 253, 237, 253, 144, 249, 141, 127, 156, 248, 239, 125, 243, 191, 175, 211, 37, 0, 217, 111, 47, 23, 244, 81, 168, 67, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 124, 15, 1, 127, 69, 115, 36, 191, 98, 84, 197, 158, 239, 2, 56, 138, 59, 223, 205, 112, 100, 135, 254, 181, 8, 112, 1, 224, 181, 222, 239, 159, 157, 173, 142, 80, 42, 150, 115, 61, 59, 127, 112, 215, 243, 152, 135, 85, 223, 187, 182, 48, 78, 123, 73, 215, 123, 140, 210, 77, 231, 244, 133, 34, 149, 74, 96, 248, 150, 86, 138, 138, 89, 181, 169, 17, 182, 89, 36, 123, 125, 168, 221, 151, 93, 177, 203, 156, 250, 197, 3, 169, 198, 197, 129, 181, 123, 137, 36, 119, 127, 152, 168, 174, 48, 185, 201, 86, 117, 249, 166, 116, 187, 100, 42, 67, 79, 129, 0, 4, 32, 0, 1, 8, 64, 224, 69, 9, 104, 129, 160, 5, 193, 197, 66, 65, 186, 227, 77, 107, 11, 245, 231, 10, 99, 200, 108, 185, 46, 121, 207, 166, 8, 246, 201, 104, 247, 248, 141, 116, 119, 222, 178, 26, 83, 253, 247, 196, 217, 218, 28, 207, 119, 32, 58, 196, 177, 141, 243, 55, 158, 201, 143, 41, 141, 249, 215, 10, 205, 237, 108, 69, 159, 215, 109, 146, 71, 37, 204, 170, 204, 70, 163, 99, 81, 47, 149, 97, 63, 250, 245, 187, 78, 42, 238, 118, 60, 183, 135, 117, 193, 84, 67, 6, 218, 46, 12, 212, 57, 138, 251, 187, 236, 125, 174, 75, 94, 139, 211, 236, 20, 170, 23, 185, 245, 240, 249, 155, 9, 93, 217, 141, 95, 176, 206, 5, 128, 23, 124, 211, 153, 242, 111, 18, 240, 33, 202, 210, 185, 68, 91, 71, 118, 29, 174, 134, 92, 62, 204, 162, 125, 215, 7, 160, 92, 245, 74, 153, 145, 28, 28, 9, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 205, 4, 198, 74, 46, 79, 62, 247, 234, 95, 49, 188, 226, 246, 115, 89, 181, 143, 202, 157, 231, 207, 71, 238, 232, 79, 74, 128, 223, 0, 56, 233, 27, 203, 180, 94, 145, 192, 181, 143, 128, 87, 228, 193, 156, 33, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 78, 128, 59, 0, 58, 13, 234, 47, 75, 224, 231, 79, 157, 99, 196, 233, 27, 127, 181, 245, 178, 254, 174, 59, 0, 54, 215, 152, 229, 170, 153, 56, 134, 219, 169, 73, 203, 151, 125, 131, 153, 56, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 208, 255, 25, 64, 157, 56, 248, 134, 146, 78, 230, 61, 55, 143, 204, 49, 28, 239, 61, 49, 250, 216, 212, 127, 158, 128, 222, 195, 159, 41, 30, 201, 82, 163, 246, 122, 101, 33, 205, 165, 118, 237, 83, 237, 168, 127, 123, 226, 235, 72, 171, 204, 211, 237, 240, 46, 205, 56, 253, 30, 45, 251, 150, 246, 114, 175, 254, 62, 110, 143, 49, 172, 117, 66, 175, 19, 242, 46, 229, 147, 39, 233, 53, 131, 53, 68, 249, 123, 212, 187, 229, 136, 237, 71, 4, 146, 134, 134, 16, 149, 49, 142, 115, 200, 62, 233, 55, 219, 250, 255, 230, 170, 175, 127, 245, 117, 109, 203, 71, 186, 190, 121, 140, 57, 222, 218, 214, 120, 20, 8, 64, 0, 2, 16, 128, 0, 4, 206, 77, 192, 203, 26, 201, 239, 217, 180, 158, 82, 236, 90, 87, 237, 203, 247, 142, 173, 181, 90, 173, 89, 230, 119, 167, 226, 171, 239, 218, 120, 119, 246, 85, 148, 27, 185, 43, 214, 156, 191, 227, 235, 183, 0, 148, 169, 100, 217, 40, 223, 84, 73, 170, 177, 87, 198, 242, 46, 162, 84, 239, 98, 56, 58, 14, 250, 253, 204, 127, 158, 18, 134, 167, 86, 126, 42, 118, 127, 27, 29, 21, 87, 123, 5, 146, 148, 197, 145, 188, 140, 163, 152, 219, 82, 254, 53, 146, 71, 179, 78, 150, 165, 115, 62, 117, 206, 186, 141, 64, 235, 126, 2, 220, 1, 112, 63, 43, 44, 79, 76, 192, 135, 154, 159, 155, 98, 140, 152, 71, 239, 173, 204, 3, 232, 208, 231, 7, 144, 14, 166, 209, 62, 220, 198, 1, 215, 7, 204, 250, 144, 112, 76, 13, 81, 51, 211, 190, 106, 63, 55, 67, 70, 130, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 30, 139, 0, 191, 1, 240, 88, 239, 7, 217, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 190, 133, 0, 119, 0, 124, 11, 86, 130, 66, 224, 62, 2, 249, 141, 127, 251, 22, 63, 191, 177, 159, 238, 0, 208, 157, 2, 139, 94, 125, 109, 147, 126, 179, 233, 142, 129, 124, 173, 223, 248, 243, 205, 255, 125, 239, 5, 86, 16, 128, 0, 4, 32, 0, 1, 8, 64, 192, 4, 250, 250, 73, 245, 222, 182, 205, 123, 165, 227, 236, 201, 247, 198, 194, 30, 2, 31, 37, 192, 5, 128, 143, 146, 123, 86, 191, 241, 204, 207, 146, 254, 87, 28, 205, 150, 96, 81, 153, 227, 205, 237, 110, 251, 34, 245, 66, 48, 78, 203, 125, 50, 47, 80, 58, 145, 87, 49, 163, 148, 218, 109, 55, 121, 74, 119, 249, 178, 115, 58, 170, 209, 92, 67, 151, 99, 149, 78, 67, 29, 109, 30, 174, 70, 9, 187, 252, 27, 209, 110, 254, 99, 209, 0, 71, 101, 205, 193, 113, 236, 189, 246, 28, 249, 162, 135, 0, 4, 32, 0, 1, 8, 64, 224, 89, 9, 212, 231, 252, 186, 90, 169, 121, 120, 53, 176, 47, 253, 197, 198, 44, 247, 23, 43, 17, 49, 23, 49, 146, 181, 93, 174, 105, 98, 252, 80, 222, 191, 45, 161, 42, 221, 182, 119, 108, 173, 99, 92, 63, 30, 119, 181, 177, 237, 177, 140, 228, 51, 255, 46, 85, 175, 109, 155, 187, 212, 158, 143, 146, 83, 189, 116, 217, 138, 122, 202, 18, 135, 251, 249, 153, 126, 197, 201, 178, 136, 177, 90, 27, 98, 168, 151, 21, 224, 69, 123, 40, 188, 198, 203, 88, 9, 42, 106, 27, 101, 13, 115, 188, 87, 160, 190, 189, 203, 249, 56, 44, 61, 119, 17, 224, 2, 192, 93, 152, 48, 130, 192, 247, 16, 136, 195, 121, 4, 94, 55, 29, 236, 243, 8, 31, 186, 60, 240, 171, 111, 124, 0, 140, 35, 127, 245, 15, 187, 245, 195, 97, 181, 87, 76, 71, 84, 214, 170, 83, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 238, 39, 208, 215, 79, 125, 93, 117, 127, 132, 75, 75, 199, 217, 147, 151, 214, 104, 32, 240, 61, 4, 248, 13, 128, 239, 225, 74, 84, 8, 124, 17, 1, 127, 68, 232, 68, 222, 47, 78, 234, 191, 8, 46, 97, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 82, 4, 184, 0, 240, 82, 111, 55, 147, 125, 44, 2, 113, 114, 239, 111, 252, 45, 199, 119, 247, 203, 119, 248, 227, 219, 255, 229, 206, 0, 219, 13, 125, 191, 59, 96, 207, 166, 46, 21, 232, 34, 2, 5, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 81, 9, 248, 43, 159, 61, 249, 168, 57, 147, 215, 115, 18, 224, 17, 128, 231, 124, 223, 200, 250, 209, 9, 248, 156, 187, 157, 176, 111, 78, 246, 245, 109, 254, 176, 89, 78, 246, 83, 23, 202, 236, 80, 127, 245, 212, 84, 55, 86, 121, 47, 128, 78, 238, 151, 97, 6, 15, 181, 55, 219, 8, 183, 125, 84, 160, 134, 248, 27, 15, 251, 215, 69, 3, 143, 32, 223, 241, 239, 204, 238, 197, 145, 78, 241, 186, 156, 237, 162, 237, 34, 187, 138, 104, 13, 18, 2, 16, 128, 0, 4, 32, 0, 129, 211, 17, 200, 15, 124, 47, 16, 180, 86, 208, 26, 102, 172, 25, 14, 164, 22, 19, 178, 89, 165, 124, 62, 182, 41, 80, 173, 103, 182, 242, 122, 188, 28, 58, 215, 52, 243, 251, 225, 252, 101, 113, 61, 198, 123, 251, 53, 103, 249, 116, 169, 122, 181, 71, 101, 40, 196, 102, 64, 146, 200, 92, 134, 221, 232, 82, 222, 245, 187, 77, 170, 77, 37, 124, 84, 134, 168, 70, 238, 235, 89, 251, 183, 27, 143, 220, 219, 207, 102, 74, 69, 229, 150, 95, 89, 253, 254, 94, 233, 42, 247, 89, 254, 126, 102, 143, 145, 1, 119, 0, 60, 198, 251, 64, 22, 47, 73, 32, 14, 75, 203, 193, 125, 212, 243, 80, 149, 135, 249, 32, 82, 58, 127, 248, 204, 182, 210, 75, 55, 203, 141, 221, 136, 247, 146, 120, 153, 52, 4, 32, 0, 1, 8, 64, 0, 2, 16, 120, 18, 2, 177, 170, 91, 86, 109, 115, 253, 73, 166, 64, 154, 79, 66, 128, 11, 0, 79, 242, 70, 145, 230, 139, 17, 240, 145, 127, 249, 40, 208, 135, 130, 95, 245, 1, 241, 98, 68, 152, 46, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 73, 2, 92, 0, 248, 36, 64, 220, 33, 112, 63, 1, 157, 213, 171, 248, 236, 126, 43, 117, 122, 191, 124, 163, 239, 147, 253, 241, 13, 191, 191, 229, 239, 223, 238, 247, 59, 3, 220, 111, 221, 54, 242, 122, 193, 64, 122, 10, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 154, 4, 226, 55, 0, 116, 74, 224, 39, 60, 246, 32, 92, 59, 101, 232, 79, 87, 236, 249, 162, 123, 56, 2, 215, 222, 206, 135, 75, 118, 39, 33, 229, 239, 57, 88, 202, 172, 235, 55, 110, 238, 216, 147, 242, 11, 189, 186, 92, 198, 109, 245, 235, 137, 118, 116, 216, 85, 149, 180, 181, 66, 237, 251, 182, 58, 49, 87, 44, 221, 178, 95, 131, 165, 28, 238, 169, 81, 95, 85, 194, 230, 50, 110, 198, 8, 11, 191, 156, 216, 234, 85, 113, 29, 107, 155, 155, 134, 86, 76, 253, 103, 15, 89, 198, 51, 255, 241, 122, 211, 239, 1, 12, 247, 191, 241, 128, 151, 234, 181, 169, 222, 219, 214, 119, 153, 17, 194, 174, 203, 17, 236, 234, 177, 197, 54, 72, 8, 64, 0, 2, 16, 128, 0, 4, 158, 149, 192, 178, 126, 136, 9, 212, 90, 192, 178, 90, 247, 237, 251, 186, 226, 103, 235, 51, 119, 175, 129, 164, 119, 253, 195, 50, 28, 107, 73, 23, 20, 180, 206, 59, 220, 108, 119, 32, 149, 203, 136, 165, 165, 149, 234, 139, 84, 162, 7, 69, 102, 219, 82, 26, 235, 181, 198, 139, 104, 139, 137, 222, 43, 149, 227, 51, 195, 213, 182, 252, 162, 157, 201, 12, 233, 36, 103, 169, 184, 214, 101, 125, 12, 233, 112, 71, 3, 186, 127, 152, 95, 10, 27, 140, 0, 71, 113, 186, 163, 93, 186, 238, 197, 234, 252, 8, 224, 139, 189, 225, 76, 247, 55, 9, 248, 136, 35, 121, 185, 229, 65, 55, 14, 142, 117, 162, 126, 249, 33, 177, 28, 56, 199, 1, 212, 31, 34, 210, 75, 85, 114, 248, 237, 140, 160, 153, 59, 3, 213, 41, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 107, 17, 224, 17, 128, 215, 122, 191, 153, 45, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 40, 1, 46, 0, 188, 232, 27, 207, 180, 31, 133, 192, 184, 19, 96, 124, 171, 239, 111, 249, 253, 237, 190, 229, 230, 219, 253, 252, 198, 255, 242, 14, 129, 126, 231, 0, 223, 245, 63, 202, 251, 75, 30, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 115, 4, 250, 125, 163, 138, 228, 59, 58, 45, 63, 23, 29, 239, 87, 35, 192, 35, 0, 175, 246, 142, 207, 207, 198, 156, 246, 200, 225, 67, 229, 111, 189, 193, 30, 127, 43, 227, 180, 61, 95, 62, 161, 215, 17, 60, 111, 223, 143, 52, 101, 169, 98, 89, 173, 210, 200, 171, 122, 142, 164, 237, 202, 171, 174, 39, 248, 34, 65, 141, 49, 93, 99, 240, 181, 134, 144, 245, 71, 161, 125, 62, 11, 150, 9, 76, 127, 40, 78, 106, 150, 153, 87, 121, 214, 19, 99, 50, 232, 190, 118, 168, 188, 216, 67, 0, 2, 16, 128, 0, 4, 32, 112, 50, 2, 249, 81, 31, 59, 201, 92, 108, 88, 74, 119, 107, 147, 237, 165, 189, 191, 0, 177, 44, 27, 219, 110, 165, 134, 80, 255, 205, 161, 102, 155, 17, 38, 196, 82, 114, 69, 51, 236, 92, 239, 99, 127, 116, 140, 145, 98, 15, 53, 213, 189, 66, 180, 212, 148, 252, 210, 202, 74, 17, 84, 66, 23, 213, 248, 185, 166, 146, 169, 201, 142, 177, 203, 172, 179, 95, 10, 123, 253, 201, 181, 158, 86, 121, 234, 95, 245, 238, 47, 109, 118, 237, 247, 79, 6, 242, 171, 145, 182, 114, 141, 64, 237, 145, 9, 112, 7, 192, 35, 191, 59, 228, 246, 2, 4, 116, 8, 141, 109, 250, 68, 241, 7, 158, 165, 250, 93, 63, 150, 10, 85, 118, 235, 161, 253, 5, 16, 50, 69, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 98, 2, 99, 181, 184, 156, 208, 171, 173, 98, 89, 45, 246, 16, 184, 143, 0, 23, 0, 238, 227, 132, 21, 4, 158, 128, 0, 31, 3, 79, 240, 38, 145, 34, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 126, 141, 0, 143, 0, 252, 26, 122, 6, 126, 77, 2, 253, 26, 174, 111, 237, 42, 157, 190, 217, 215, 181, 220, 227, 111, 248, 15, 250, 228, 147, 158, 233, 157, 88, 213, 86, 177, 172, 22, 123, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 149, 9, 220, 113, 1, 64, 79, 120, 248, 193, 143, 89, 10, 157, 117, 95, 133, 113, 62, 101, 249, 234, 248, 95, 149, 39, 113, 238, 33, 48, 191, 155, 247, 248, 216, 198, 190, 150, 210, 187, 190, 200, 168, 228, 121, 179, 251, 212, 225, 78, 57, 124, 115, 241, 112, 215, 165, 78, 220, 43, 79, 75, 229, 56, 206, 247, 43, 95, 5, 80, 185, 80, 94, 143, 92, 62, 242, 27, 190, 25, 87, 59, 135, 154, 198, 142, 142, 52, 181, 203, 144, 33, 66, 95, 79, 152, 93, 202, 17, 190, 251, 212, 16, 83, 44, 197, 86, 140, 26, 67, 49, 191, 254, 248, 80, 81, 217, 67, 0, 2, 16, 128, 0, 4, 32, 240, 24, 4, 114, 233, 18, 169, 120, 141, 115, 151, 148, 253, 149, 109, 158, 89, 173, 45, 250, 126, 245, 151, 173, 214, 31, 85, 44, 71, 243, 110, 33, 63, 173, 97, 252, 148, 124, 127, 234, 126, 59, 86, 15, 57, 207, 161, 247, 169, 126, 23, 11, 173, 169, 110, 108, 155, 88, 217, 168, 156, 70, 85, 98, 20, 101, 180, 230, 110, 237, 159, 55, 235, 75, 218, 187, 86, 108, 171, 189, 87, 112, 43, 197, 170, 201, 75, 197, 82, 218, 30, 201, 237, 61, 157, 251, 228, 95, 209, 84, 251, 237, 226, 153, 56, 143, 199, 201, 204, 25, 125, 167, 188, 227, 2, 192, 119, 14, 79, 108, 8, 188, 26, 1, 29, 112, 214, 205, 31, 101, 210, 125, 236, 14, 128, 244, 220, 68, 20, 81, 31, 214, 44, 95, 141, 50, 243, 133, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 46, 9, 240, 27, 0, 151, 76, 208, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 78, 71, 128, 59, 0, 78, 247, 150, 50, 161, 167, 32, 144, 55, 1, 196, 110, 145, 89, 201, 187, 0, 242, 174, 128, 184, 23, 236, 190, 223, 2, 136, 16, 105, 59, 66, 233, 78, 130, 0, 224, 91, 201, 58, 11, 233, 41, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 207, 75, 64, 235, 57, 223, 86, 223, 229, 243, 206, 136, 204, 127, 154, 0, 23, 0, 126, 154, 248, 139, 143, 55, 159, 132, 206, 237, 107, 120, 108, 59, 203, 107, 62, 95, 221, 167, 177, 251, 118, 17, 63, 59, 117, 242, 222, 78, 204, 151, 250, 122, 82, 175, 40, 21, 167, 164, 226, 200, 39, 139, 229, 102, 164, 178, 94, 13, 108, 100, 25, 61, 54, 233, 42, 95, 28, 24, 125, 190, 48, 144, 50, 93, 250, 115, 95, 10, 81, 237, 30, 170, 215, 115, 12, 237, 244, 15, 208, 102, 195, 82, 153, 185, 46, 233, 34, 111, 10, 4, 32, 0, 1, 8, 64, 0, 2, 231, 38, 208, 63, 239, 123, 253, 214, 172, 195, 214, 11, 32, 185, 13, 215, 191, 241, 239, 214, 87, 243, 72, 150, 233, 186, 110, 241, 186, 202, 246, 163, 63, 150, 36, 17, 170, 214, 101, 146, 99, 136, 148, 177, 147, 172, 162, 181, 75, 108, 177, 190, 169, 152, 219, 250, 223, 166, 119, 191, 100, 5, 15, 215, 28, 100, 138, 47, 245, 135, 54, 173, 23, 35, 143, 92, 195, 169, 30, 65, 34, 82, 174, 221, 98, 167, 76, 85, 79, 25, 117, 75, 89, 185, 44, 243, 82, 167, 202, 80, 12, 239, 80, 84, 199, 223, 252, 109, 0, 197, 115, 59, 173, 109, 174, 81, 75, 97, 251, 209, 174, 56, 153, 213, 50, 126, 31, 74, 117, 121, 118, 57, 2, 125, 74, 56, 155, 101, 66, 35, 175, 122, 215, 21, 218, 89, 124, 106, 152, 211, 59, 115, 1, 224, 244, 111, 49, 19, 124, 72, 2, 58, 130, 229, 145, 220, 50, 21, 161, 210, 161, 86, 7, 249, 123, 54, 133, 144, 93, 11, 149, 222, 163, 189, 30, 37, 19, 193, 212, 124, 72, 44, 36, 5, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 76, 64, 235, 185, 126, 98, 237, 246, 177, 7, 61, 16, 216, 18, 224, 55, 0, 182, 60, 104, 65, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 78, 73, 128, 59, 0, 78, 249, 182, 50, 169, 199, 39, 224, 239, 227, 135, 92, 190, 198, 143, 182, 234, 121, 227, 84, 213, 143, 238, 6, 40, 147, 186, 3, 192, 230, 139, 28, 0, 50, 236, 136, 102, 38, 99, 68, 55, 145, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 79, 76, 192, 107, 59, 223, 0, 63, 183, 159, 120, 106, 164, 254, 13, 4, 254, 241, 31, 136, 98, 247, 219, 73, 214, 177, 186, 197, 170, 173, 218, 190, 199, 108, 69, 251, 129, 8, 92, 123, 59, 191, 60, 77, 15, 102, 169, 1, 90, 221, 85, 203, 169, 251, 83, 233, 40, 230, 205, 205, 3, 135, 244, 9, 248, 197, 160, 45, 72, 154, 203, 86, 177, 135, 188, 54, 136, 79, 228, 187, 28, 227, 148, 240, 237, 251, 25, 120, 27, 41, 12, 210, 102, 206, 167, 76, 83, 155, 105, 140, 126, 215, 195, 107, 77, 47, 109, 227, 255, 209, 209, 89, 162, 62, 26, 178, 30, 187, 145, 206, 136, 231, 231, 230, 118, 164, 108, 227, 8, 81, 143, 184, 133, 204, 246, 18, 122, 12, 161, 177, 229, 91, 57, 204, 169, 211, 134, 0, 4, 32, 0, 1, 8, 64, 224, 124, 4, 180, 38, 208, 138, 192, 107, 138, 245, 241, 68, 233, 110, 109, 99, 45, 49, 173, 43, 222, 79, 169, 214, 55, 139, 159, 154, 218, 50, 183, 169, 110, 163, 238, 162, 223, 54, 202, 223, 55, 26, 242, 160, 94, 235, 28, 175, 147, 34, 124, 152, 231, 239, 3, 88, 234, 217, 125, 13, 43, 169, 57, 237, 110, 102, 213, 217, 216, 86, 186, 75, 95, 165, 236, 88, 174, 167, 140, 113, 85, 134, 216, 76, 87, 122, 249, 244, 18, 209, 179, 105, 251, 75, 207, 110, 173, 186, 45, 29, 168, 183, 165, 139, 182, 6, 201, 223, 18, 80, 123, 108, 78, 214, 82, 122, 215, 101, 107, 159, 46, 109, 35, 153, 195, 140, 88, 217, 80, 93, 74, 203, 168, 238, 22, 245, 95, 43, 206, 255, 154, 205, 249, 251, 184, 3, 224, 252, 239, 49, 51, 124, 72, 2, 62, 64, 13, 233, 131, 162, 101, 30, 224, 162, 47, 218, 71, 31, 158, 101, 162, 254, 152, 224, 188, 141, 57, 103, 184, 209, 109, 12, 99, 68, 55, 145, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 79, 76, 192, 107, 59, 159, 222, 206, 237, 39, 158, 26, 169, 127, 3, 1, 126, 3, 224, 27, 160, 18, 18, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 104, 4, 184, 3, 224, 209, 222, 17, 242, 57, 49, 1, 95, 143, 189, 148, 210, 232, 182, 172, 189, 111, 251, 143, 239, 2, 208, 13, 2, 117, 7, 64, 250, 199, 174, 110, 77, 91, 111, 8, 56, 49, 76, 166, 6, 1, 8, 64, 0, 2, 16, 128, 0, 4, 62, 64, 192, 223, 147, 119, 87, 233, 250, 166, 190, 61, 187, 238, 67, 29, 2, 207, 73, 96, 123, 1, 64, 103, 17, 250, 91, 151, 84, 113, 157, 191, 255, 226, 193, 30, 2, 239, 38, 144, 167, 230, 117, 162, 30, 190, 203, 9, 187, 79, 220, 135, 212, 73, 254, 242, 255, 221, 50, 198, 240, 205, 142, 170, 111, 79, 237, 165, 27, 197, 85, 199, 73, 115, 61, 67, 166, 11, 4, 151, 207, 146, 173, 102, 209, 183, 132, 168, 250, 246, 34, 194, 218, 47, 179, 197, 47, 142, 9, 57, 132, 116, 99, 83, 191, 138, 219, 28, 54, 138, 7, 123, 8, 64, 0, 2, 16, 128, 0, 4, 62, 75, 192, 171, 138, 144, 173, 154, 207, 237, 171, 125, 107, 211, 240, 246, 243, 202, 199, 11, 160, 158, 218, 98, 19, 149, 172, 75, 238, 108, 155, 1, 215, 224, 181, 6, 234, 235, 169, 94, 95, 215, 72, 94, 43, 221, 37, 101, 20, 207, 205, 231, 26, 76, 187, 40, 67, 44, 50, 149, 210, 187, 50, 228, 210, 206, 185, 168, 191, 42, 214, 107, 157, 168, 18, 75, 197, 146, 238, 31, 6, 127, 243, 217, 126, 161, 24, 6, 203, 8, 83, 91, 246, 99, 75, 151, 232, 182, 133, 101, 141, 192, 254, 17, 8, 108, 47, 0, 60, 66, 70, 228, 0, 129, 211, 18, 24, 71, 211, 229, 224, 185, 182, 235, 152, 249, 158, 59, 0, 226, 56, 27, 7, 109, 29, 183, 115, 11, 102, 37, 253, 65, 83, 199, 225, 211, 162, 100, 98, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 67, 4, 246, 78, 73, 165, 235, 155, 2, 239, 217, 125, 104, 64, 156, 32, 240, 80, 4, 248, 13, 128, 135, 122, 59, 72, 6, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 61, 4, 184, 3, 224, 123, 184, 18, 21, 2, 247, 17, 88, 190, 194, 31, 95, 229, 143, 251, 167, 234, 219, 253, 248, 134, 223, 175, 176, 91, 116, 89, 95, 239, 0, 144, 75, 133, 137, 111, 255, 179, 47, 174, 88, 215, 45, 5, 149, 131, 234, 81, 102, 85, 111, 151, 5, 123, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 223, 38, 48, 150, 110, 203, 218, 77, 247, 34, 244, 117, 91, 239, 87, 174, 190, 87, 193, 250, 163, 246, 111, 207, 139, 241, 31, 131, 192, 55, 95, 0, 136, 63, 195, 124, 168, 196, 127, 142, 250, 11, 245, 159, 228, 99, 0, 32, 139, 95, 36, 224, 163, 153, 255, 36, 244, 103, 98, 221, 47, 166, 245, 169, 161, 53, 135, 220, 98, 215, 78, 218, 199, 25, 250, 56, 65, 111, 39, 243, 54, 183, 28, 62, 203, 97, 62, 207, 236, 149, 209, 18, 88, 141, 77, 81, 79, 21, 213, 10, 224, 98, 29, 149, 172, 231, 46, 250, 54, 23, 8, 212, 150, 74, 62, 195, 46, 252, 213, 76, 243, 69, 39, 155, 161, 115, 159, 219, 97, 121, 97, 219, 252, 20, 151, 2, 1, 8, 64, 0, 2, 16, 128, 192, 121, 9, 104, 141, 160, 85, 66, 174, 21, 180, 62, 200, 181, 70, 147, 234, 93, 214, 13, 178, 124, 207, 230, 117, 73, 196, 215, 26, 36, 206, 35, 210, 223, 235, 17, 173, 91, 110, 197, 147, 173, 198, 95, 124, 182, 227, 135, 123, 157, 159, 228, 57, 138, 198, 171, 77, 107, 170, 26, 79, 99, 188, 103, 203, 128, 153, 151, 106, 202, 79, 229, 106, 158, 98, 166, 87, 36, 169, 92, 181, 83, 253, 45, 27, 106, 142, 167, 240, 71, 123, 19, 116, 196, 214, 24, 49, 197, 220, 43, 86, 213, 82, 52, 243, 178, 88, 114, 170, 102, 141, 25, 166, 210, 75, 37, 86, 163, 171, 2, 188, 99, 191, 196, 112, 172, 33, 223, 17, 2, 211, 111, 38, 240, 205, 23, 0, 190, 57, 123, 194, 67, 224, 217, 9, 232, 64, 222, 183, 60, 244, 234, 160, 63, 182, 104, 231, 203, 237, 69, 202, 77, 54, 1, 96, 9, 161, 15, 13, 233, 226, 144, 61, 244, 137, 71, 245, 40, 179, 170, 183, 203, 130, 61, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 111, 19, 24, 75, 183, 101, 237, 150, 39, 229, 145, 84, 215, 43, 71, 183, 125, 178, 126, 171, 253, 219, 243, 98, 252, 199, 32, 192, 111, 0, 60, 198, 251, 64, 22, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 111, 37, 192, 29, 0, 223, 138, 151, 224, 16, 56, 34, 160, 107, 180, 190, 78, 43, 155, 106, 251, 155, 255, 252, 106, 95, 95, 239, 231, 55, 250, 250, 86, 127, 222, 212, 85, 119, 0, 228, 109, 105, 50, 93, 162, 236, 215, 53, 10, 5, 2, 16, 128, 0, 4, 32, 0, 1, 8, 188, 38, 1, 127, 79, 238, 217, 107, 229, 52, 235, 220, 103, 189, 164, 235, 238, 187, 45, 21, 89, 101, 150, 165, 189, 111, 223, 179, 235, 245, 141, 247, 24, 192, 227, 56, 211, 165, 61, 20, 246, 159, 229, 38, 22, 141, 151, 33, 176, 185, 0, 208, 255, 40, 68, 64, 127, 51, 214, 221, 75, 68, 246, 189, 248, 15, 177, 235, 168, 67, 96, 123, 72, 244, 95, 141, 101, 227, 35, 85, 170, 99, 167, 19, 226, 229, 52, 87, 54, 217, 209, 116, 115, 191, 108, 170, 244, 158, 238, 165, 222, 222, 190, 60, 209, 222, 158, 120, 103, 14, 202, 99, 108, 23, 246, 17, 173, 94, 35, 211, 197, 116, 156, 172, 231, 73, 187, 235, 10, 163, 250, 218, 30, 233, 102, 78, 202, 171, 114, 171, 189, 251, 74, 54, 157, 114, 81, 145, 184, 216, 226, 255, 192, 161, 147, 89, 61, 91, 166, 231, 216, 164, 46, 233, 15, 182, 174, 27, 46, 139, 141, 219, 182, 213, 112, 20, 8, 64, 0, 2, 16, 128, 0, 4, 32, 32, 2, 90, 39, 168, 88, 86, 171, 246, 215, 116, 238, 179, 244, 58, 35, 86, 70, 25, 75, 250, 234, 155, 207, 40, 236, 225, 181, 140, 237, 86, 217, 115, 216, 207, 164, 199, 84, 189, 111, 242, 240, 122, 201, 245, 234, 223, 253, 61, 128, 120, 252, 50, 215, 88, 138, 161, 71, 49, 211, 119, 27, 47, 231, 18, 187, 90, 143, 93, 147, 90, 23, 42, 78, 73, 249, 233, 183, 0, 202, 95, 49, 203, 55, 101, 53, 51, 243, 108, 107, 23, 150, 227, 23, 3, 114, 172, 106, 107, 95, 89, 149, 172, 182, 234, 42, 171, 172, 113, 172, 235, 122, 235, 74, 170, 199, 57, 69, 253, 77, 245, 106, 139, 154, 122, 149, 90, 151, 229, 55, 41, 187, 145, 12, 92, 228, 184, 20, 197, 47, 195, 154, 151, 163, 46, 6, 107, 101, 227, 183, 170, 55, 201, 52, 245, 171, 86, 55, 23, 0, 94, 21, 2, 243, 134, 192, 207, 19, 208, 17, 170, 31, 165, 170, 237, 11, 2, 253, 211, 193, 186, 75, 25, 17, 194, 141, 59, 0, 126, 254, 221, 99, 68, 8, 64, 0, 2, 16, 128, 0, 4, 158, 141, 192, 56, 91, 94, 210, 214, 218, 107, 214, 185, 211, 122, 73, 215, 221, 119, 91, 122, 133, 55, 203, 219, 158, 171, 69, 207, 174, 215, 87, 139, 168, 141, 1, 60, 142, 51, 93, 218, 67, 97, 255, 89, 110, 98, 209, 120, 25, 2, 252, 6, 192, 203, 188, 213, 76, 20, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 94, 153, 0, 23, 0, 94, 249, 221, 103, 238, 191, 75, 32, 47, 207, 198, 46, 111, 241, 138, 219, 165, 242, 235, 252, 109, 251, 242, 91, 255, 178, 91, 244, 113, 233, 55, 253, 60, 147, 140, 233, 6, 18, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 22, 129, 190, 124, 82, 221, 155, 253, 220, 111, 105, 253, 158, 156, 109, 230, 118, 247, 81, 223, 209, 38, 59, 247, 245, 186, 117, 93, 170, 95, 197, 186, 106, 181, 118, 116, 104, 153, 169, 50, 196, 198, 214, 186, 178, 96, 127, 118, 2, 255, 228, 187, 63, 110, 15, 241, 109, 35, 150, 154, 124, 175, 47, 182, 254, 43, 81, 167, 234, 27, 35, 121, 125, 166, 124, 105, 176, 207, 36, 130, 239, 119, 19, 240, 223, 145, 165, 198, 115, 221, 242, 222, 28, 100, 191, 235, 227, 142, 73, 182, 147, 237, 60, 34, 186, 125, 117, 60, 15, 208, 164, 253, 110, 72, 159, 176, 123, 172, 108, 71, 194, 233, 214, 198, 116, 150, 77, 53, 170, 109, 204, 62, 209, 161, 174, 248, 133, 160, 82, 209, 179, 104, 209, 214, 22, 17, 252, 92, 90, 214, 213, 142, 255, 105, 107, 83, 248, 250, 127, 174, 250, 164, 31, 62, 123, 50, 2, 110, 251, 103, 251, 109, 191, 162, 83, 32, 0, 1, 8, 64, 0, 2, 16, 56, 47, 1, 173, 53, 180, 114, 72, 25, 245, 101, 77, 162, 53, 67, 46, 26, 36, 183, 155, 58, 164, 211, 162, 162, 228, 220, 159, 33, 179, 191, 108, 100, 55, 54, 117, 233, 153, 251, 26, 117, 72, 155, 90, 239, 246, 45, 89, 107, 32, 237, 181, 46, 210, 154, 40, 159, 51, 215, 51, 248, 241, 220, 121, 142, 227, 103, 250, 155, 172, 177, 195, 167, 231, 148, 49, 98, 39, 105, 253, 48, 92, 218, 234, 107, 253, 83, 242, 163, 179, 140, 228, 19, 143, 214, 103, 201, 186, 106, 170, 164, 44, 225, 253, 208, 142, 21, 93, 133, 81, 159, 103, 151, 211, 137, 182, 88, 215, 92, 221, 87, 182, 111, 154, 235, 232, 119, 172, 108, 143, 8, 241, 238, 40, 92, 236, 219, 83, 248, 21, 60, 245, 235, 60, 194, 46, 29, 37, 219, 38, 165, 219, 154, 148, 234, 179, 180, 141, 100, 62, 243, 95, 161, 115, 31, 170, 187, 74, 207, 105, 215, 193, 129, 110, 26, 238, 122, 159, 69, 201, 29, 0, 103, 121, 39, 153, 199, 243, 17, 200, 99, 80, 236, 226, 32, 232, 15, 70, 31, 28, 221, 190, 41, 227, 32, 41, 155, 165, 180, 234, 162, 163, 2, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 112, 72, 160, 47, 159, 84, 247, 102, 7, 247, 91, 90, 191, 39, 103, 155, 185, 221, 125, 212, 119, 180, 201, 206, 125, 189, 110, 93, 151, 234, 87, 177, 174, 90, 173, 29, 29, 94, 46, 202, 70, 165, 219, 90, 87, 61, 236, 207, 78, 128, 11, 0, 103, 127, 135, 153, 31, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 32, 8, 240, 175, 0, 240, 103, 0, 129, 71, 33, 224, 203, 175, 121, 137, 54, 26, 146, 135, 219, 184, 114, 107, 147, 152, 131, 220, 215, 219, 250, 31, 101, 82, 228, 1, 1, 8, 64, 0, 2, 16, 128, 0, 4, 126, 134, 128, 214, 66, 42, 181, 38, 186, 79, 202, 222, 183, 197, 187, 46, 121, 173, 220, 27, 95, 49, 174, 217, 222, 26, 195, 55, 170, 43, 134, 235, 123, 62, 234, 87, 177, 205, 220, 174, 94, 246, 16, 40, 2, 227, 2, 64, 253, 89, 233, 249, 14, 61, 217, 209, 255, 104, 170, 7, 92, 16, 120, 18, 2, 250, 131, 245, 166, 148, 93, 159, 229, 55, 76, 71, 67, 168, 148, 212, 255, 77, 211, 160, 113, 50, 159, 47, 201, 189, 77, 189, 105, 19, 49, 194, 117, 242, 190, 104, 167, 162, 134, 108, 198, 229, 184, 248, 199, 67, 95, 107, 93, 113, 245, 255, 183, 116, 222, 20, 160, 62, 46, 106, 188, 102, 63, 230, 178, 201, 35, 255, 157, 215, 54, 92, 68, 219, 244, 107, 248, 8, 231, 49, 157, 30, 18, 2, 16, 128, 0, 4, 32, 0, 129, 115, 18, 208, 103, 190, 86, 6, 249, 217, 175, 117, 64, 84, 170, 222, 165, 234, 110, 143, 117, 66, 183, 205, 8, 138, 114, 107, 27, 113, 114, 188, 22, 111, 248, 133, 200, 24, 146, 239, 41, 26, 183, 159, 60, 171, 173, 114, 145, 79, 40, 178, 207, 29, 101, 118, 105, 56, 60, 53, 231, 130, 177, 23, 108, 116, 165, 137, 249, 120, 78, 82, 170, 63, 218, 225, 154, 143, 203, 43, 132, 26, 93, 102, 107, 61, 123, 27, 221, 155, 185, 104, 102, 127, 21, 32, 253, 214, 53, 95, 182, 165, 83, 37, 246, 146, 127, 199, 111, 1, 148, 166, 250, 228, 161, 190, 206, 199, 186, 244, 105, 125, 242, 163, 60, 62, 1, 238, 0, 120, 252, 247, 136, 12, 95, 133, 64, 29, 129, 227, 40, 59, 14, 167, 203, 135, 70, 180, 47, 234, 117, 48, 94, 212, 193, 168, 188, 226, 32, 255, 42, 188, 152, 39, 4, 32, 0, 1, 8, 64, 0, 2, 16, 104, 4, 188, 6, 170, 53, 145, 215, 70, 215, 165, 220, 125, 66, 235, 122, 11, 185, 91, 189, 55, 190, 156, 175, 217, 238, 6, 31, 74, 249, 205, 39, 221, 71, 246, 178, 85, 233, 246, 189, 157, 157, 236, 32, 48, 8, 240, 27, 0, 252, 41, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 94, 128, 0, 119, 0, 188, 192, 155, 204, 20, 31, 153, 192, 246, 186, 176, 110, 192, 202, 87, 124, 181, 191, 72, 213, 55, 91, 92, 77, 206, 175, 254, 99, 94, 186, 223, 94, 194, 97, 178, 117, 121, 181, 57, 109, 90, 223, 168, 34, 32, 0, 1, 8, 64, 0, 2, 16, 128, 192, 195, 17, 240, 178, 230, 30, 169, 228, 101, 247, 29, 197, 227, 43, 182, 199, 176, 76, 93, 52, 150, 37, 89, 79, 96, 56, 14, 145, 190, 55, 235, 138, 53, 198, 201, 152, 106, 107, 27, 183, 39, 248, 17, 75, 125, 205, 159, 235, 190, 150, 147, 135, 150, 127, 47, 217, 182, 189, 100, 116, 142, 112, 203, 221, 2, 221, 158, 250, 107, 16, 24, 23, 0, 244, 167, 160, 98, 89, 45, 246, 39, 36, 48, 191, 197, 243, 145, 226, 91, 167, 236, 193, 102, 249, 173, 131, 254, 74, 240, 62, 67, 213, 107, 27, 39, 245, 209, 90, 94, 209, 209, 15, 242, 195, 176, 114, 118, 144, 139, 25, 84, 199, 18, 115, 216, 101, 59, 118, 249, 161, 144, 159, 18, 203, 192, 67, 87, 121, 104, 140, 180, 205, 238, 248, 131, 80, 35, 254, 223, 47, 157, 158, 19, 235, 253, 202, 180, 181, 163, 177, 105, 203, 117, 148, 210, 107, 95, 101, 173, 89, 131, 132, 0, 4, 32, 0, 1, 8, 64, 224, 108, 4, 234, 100, 52, 214, 11, 241, 193, 191, 110, 110, 91, 186, 79, 237, 121, 83, 159, 237, 170, 175, 5, 178, 227, 144, 65, 175, 22, 28, 139, 212, 152, 210, 173, 99, 191, 163, 190, 243, 102, 100, 28, 233, 219, 56, 125, 140, 62, 214, 226, 62, 231, 48, 220, 123, 140, 109, 125, 78, 120, 44, 208, 61, 230, 178, 94, 151, 93, 4, 139, 103, 243, 75, 142, 192, 75, 191, 50, 72, 3, 85, 246, 139, 146, 183, 127, 216, 218, 90, 210, 63, 30, 189, 9, 55, 69, 217, 216, 135, 161, 108, 173, 155, 76, 159, 160, 169, 236, 175, 205, 246, 9, 166, 240, 5, 41, 114, 7, 192, 23, 64, 36, 4, 4, 62, 78, 160, 14, 191, 117, 40, 213, 65, 121, 188, 226, 96, 157, 47, 201, 139, 45, 172, 117, 48, 79, 215, 58, 136, 169, 153, 237, 145, 136, 155, 150, 82, 171, 174, 98, 89, 45, 246, 16, 128, 0, 4, 32, 0, 1, 8, 64, 224, 177, 8, 120, 253, 114, 143, 84, 230, 223, 181, 182, 241, 248, 125, 140, 62, 86, 46, 199, 66, 209, 237, 146, 228, 80, 88, 127, 151, 12, 163, 197, 78, 117, 111, 227, 140, 155, 59, 0, 146, 44, 187, 47, 32, 192, 111, 0, 124, 1, 68, 66, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 30, 157, 0, 119, 0, 60, 250, 59, 68, 126, 231, 34, 176, 92, 218, 141, 105, 221, 81, 247, 183, 255, 186, 12, 236, 122, 93, 17, 86, 123, 189, 58, 172, 88, 245, 79, 251, 149, 110, 137, 61, 232, 105, 40, 21, 221, 234, 165, 91, 159, 44, 215, 219, 160, 184, 29, 42, 1, 177, 131, 0, 4, 32, 0, 1, 8, 64, 224, 169, 8, 172, 107, 156, 74, 219, 237, 101, 18, 67, 209, 215, 77, 89, 15, 131, 141, 173, 26, 177, 28, 202, 190, 177, 44, 146, 234, 43, 54, 229, 146, 113, 98, 215, 199, 190, 200, 169, 247, 187, 46, 71, 249, 171, 173, 188, 44, 171, 170, 174, 165, 12, 211, 109, 219, 246, 146, 209, 179, 196, 24, 245, 212, 169, 222, 54, 86, 133, 1, 227, 196, 229, 199, 47, 0, 232, 143, 171, 23, 254, 192, 58, 141, 23, 175, 251, 143, 99, 150, 187, 88, 110, 25, 169, 223, 54, 187, 1, 54, 202, 213, 50, 106, 58, 194, 230, 209, 117, 149, 121, 242, 45, 109, 244, 229, 1, 56, 250, 179, 119, 152, 175, 46, 86, 148, 173, 140, 215, 19, 119, 249, 188, 239, 229, 36, 53, 214, 181, 82, 253, 182, 242, 243, 252, 53, 149, 202, 45, 116, 227, 225, 254, 53, 215, 234, 119, 92, 121, 251, 89, 176, 170, 171, 61, 182, 168, 248, 214, 179, 69, 151, 125, 154, 79, 179, 107, 245, 168, 82, 32, 0, 1, 8, 64, 0, 2, 16, 56, 57, 1, 173, 3, 180, 24, 88, 215, 3, 94, 27, 12, 169, 181, 144, 94, 125, 77, 84, 46, 195, 71, 125, 225, 159, 253, 146, 215, 182, 41, 206, 24, 84, 62, 10, 166, 24, 10, 176, 142, 149, 234, 140, 169, 52, 55, 69, 62, 189, 140, 147, 235, 252, 174, 36, 227, 132, 98, 196, 171, 68, 43, 118, 233, 212, 23, 206, 203, 214, 251, 84, 175, 62, 185, 171, 238, 188, 214, 142, 225, 27, 162, 202, 48, 76, 71, 105, 212, 86, 169, 53, 157, 246, 105, 17, 187, 124, 156, 95, 50, 122, 165, 147, 188, 90, 102, 195, 116, 26, 94, 153, 96, 247, 86, 231, 146, 101, 142, 154, 238, 177, 75, 143, 197, 62, 236, 178, 30, 218, 144, 127, 223, 70, 126, 195, 87, 137, 169, 59, 212, 57, 247, 197, 87, 202, 248, 47, 119, 146, 234, 176, 148, 218, 37, 99, 71, 135, 2, 108, 140, 122, 91, 198, 106, 171, 228, 8, 85, 189, 186, 183, 253, 85, 163, 211, 119, 254, 248, 5, 128, 211, 19, 101, 130, 16, 184, 70, 64, 199, 157, 119, 108, 254, 0, 203, 131, 171, 14, 176, 185, 69, 136, 69, 170, 94, 49, 185, 3, 224, 26, 120, 250, 32, 0, 1, 8, 64, 0, 2, 16, 56, 35, 1, 159, 210, 205, 114, 153, 235, 232, 208, 122, 105, 179, 133, 129, 125, 210, 86, 141, 58, 159, 173, 111, 201, 71, 191, 212, 31, 221, 20, 215, 99, 100, 140, 216, 101, 14, 142, 233, 246, 44, 213, 63, 116, 10, 16, 255, 229, 206, 95, 198, 100, 158, 210, 69, 201, 190, 170, 110, 234, 75, 159, 252, 199, 137, 182, 108, 231, 122, 234, 70, 28, 215, 239, 61, 157, 30, 195, 34, 158, 140, 0, 191, 1, 240, 100, 111, 24, 233, 66, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 143, 79, 64, 39, 212, 42, 150, 213, 98, 15, 129, 223, 37, 192, 29, 0, 191, 203, 159, 209, 95, 154, 128, 111, 151, 146, 28, 175, 184, 220, 235, 111, 253, 143, 101, 124, 144, 196, 39, 201, 114, 5, 89, 245, 224, 120, 207, 38, 220, 178, 83, 177, 125, 181, 86, 189, 219, 72, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 235, 4, 246, 22, 46, 214, 57, 185, 177, 168, 209, 218, 72, 11, 156, 101, 157, 164, 186, 84, 218, 181, 98, 221, 70, 237, 111, 201, 199, 93, 0, 23, 113, 194, 120, 19, 247, 142, 182, 99, 88, 94, 245, 143, 252, 150, 126, 229, 160, 118, 58, 134, 28, 255, 140, 95, 246, 107, 30, 26, 91, 50, 138, 229, 166, 30, 254, 121, 251, 253, 36, 55, 119, 211, 167, 55, 187, 87, 36, 192, 5, 128, 87, 123, 215, 251, 81, 226]);
fileData10.push.apply(fileData10, [132, 115, 215, 244, 60, 69, 215, 221, 238, 211, 181, 206, 114, 233, 179, 98, 150, 50, 208, 81, 55, 75, 72, 85, 179, 157, 21, 53, 242, 37, 125, 29, 188, 203, 166, 76, 74, 169, 19, 122, 117, 174, 39, 246, 35, 70, 168, 43, 94, 200, 187, 139, 156, 162, 12, 81, 254, 138, 47, 157, 164, 182, 241, 9, 150, 82, 198, 250, 29, 128, 33, 243, 19, 32, 250, 83, 150, 78, 251, 116, 63, 148, 154, 99, 61, 133, 86, 118, 249, 177, 20, 58, 75, 249, 175, 117, 197, 139, 38, 5, 2, 16, 128, 0, 4, 32, 0, 129, 19, 19, 200, 143, 122, 173, 111, 98, 142, 181, 4, 137, 122, 52, 106, 189, 51, 214, 6, 217, 191, 174, 17, 214, 181, 144, 108, 111, 108, 90, 91, 116, 127, 197, 94, 198, 26, 99, 170, 61, 24, 91, 142, 230, 210, 81, 57, 149, 253, 98, 188, 24, 141, 0, 90, 26, 41, 128, 228, 167, 74, 102, 24, 161, 44, 231, 96, 165, 175, 193, 202, 74, 208, 234, 165, 28, 163, 22, 38, 122, 188, 179, 158, 249, 143, 21, 216, 200, 73, 158, 61, 77, 183, 55, 35, 200, 55, 140, 222, 98, 87, 178, 218, 178, 213, 166, 189, 227, 91, 119, 77, 202, 169, 247, 43, 129, 244, 31, 207, 254, 231, 163, 250, 21, 176, 58, 74, 177, 140, 86, 222, 57, 240, 164, 115, 84, 247, 125, 76, 138, 91, 149, 130, 84, 251, 143, 197, 122, 5, 47, 46, 0, 188, 194, 187, 204, 28, 31, 148, 64, 29, 174, 180, 95, 94, 113, 240, 188, 249, 65, 168, 131, 176, 183, 152, 89, 214, 37, 239, 216, 4, 194, 135, 72, 219, 75, 167, 98, 125, 181, 216, 67, 0, 2, 16, 128, 0, 4, 32, 0, 129, 7, 32, 224, 5, 74, 95, 184, 88, 231, 244, 70, 159, 214, 68, 90, 208, 44, 235, 36, 213, 165, 210, 174, 21, 235, 54, 106, 157, 53, 134, 66, 39, 204, 187, 113, 212, 247, 206, 205, 185, 88, 94, 245, 215, 240, 142, 175, 28, 50, 29, 173, 11, 163, 18, 103, 255, 238, 139, 86, 233, 178, 95, 173, 178, 237, 82, 39, 232, 220, 1, 144, 104, 216, 237, 16, 224, 55, 0, 118, 160, 160, 130, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 25, 2, 58, 119, 87, 177, 172, 214, 207, 236, 127, 99, 204, 159, 153, 25, 163, 124, 150, 0, 119, 0, 124, 150, 32, 254, 16, 248, 50, 2, 113, 168, 94, 46, 239, 182, 122, 232, 116, 87, 192, 210, 167, 35, 122, 111, 234, 246, 174, 161, 115, 42, 83, 211, 234, 229, 3, 72, 253, 107, 209, 37, 111, 10, 4, 32, 0, 1, 8, 64, 0, 2, 16, 248, 29, 2, 94, 183, 252, 134, 156, 103, 236, 28, 164, 119, 253, 110, 25, 134, 185, 100, 27, 190, 94, 175, 89, 46, 113, 186, 157, 234, 178, 183, 110, 150, 35, 17, 219, 100, 83, 141, 40, 186, 91, 33, 101, 137, 140, 99, 69, 61, 58, 48, 108, 20, 83, 119, 21, 12, 201, 202, 111, 0, 123, 81, 81, 23, 0, 198, 31, 209, 230, 129, 146, 23, 5, 194, 180, 33, 112, 141, 128, 254, 87, 57, 218, 228, 231, 255, 149, 122, 221, 246, 169, 203, 70, 236, 226, 8, 236, 147, 250, 245, 150, 255, 22, 91, 38, 35, 158, 164, 74, 111, 91, 183, 246, 168, 95, 49, 219, 197, 128, 48, 170, 118, 232, 226, 127, 110, 213, 245, 212, 152, 234, 150, 85, 87, 20, 233, 219, 24, 242, 205, 151, 244, 241, 106, 31, 26, 105, 151, 253, 205, 190, 251, 142, 122, 136, 186, 255, 44, 43, 236, 32, 0, 1, 8, 64, 0, 2, 16, 56, 35, 1, 157, 84, 230, 170, 65, 107, 131, 101, 211, 154, 68, 109, 75, 247, 169, 125, 185, 53, 71, 133, 178, 241, 29, 242, 150, 109, 239, 119, 93, 114, 212, 67, 92, 20, 245, 169, 228, 4, 182, 114, 94, 187, 109, 243, 206, 160, 185, 110, 146, 62, 231, 89, 3, 149, 78, 245, 140, 89, 118, 153, 132, 218, 169, 207, 1, 171, 174, 106, 250, 101, 101, 236, 100, 183, 83, 134, 218, 189, 181, 174, 139, 125, 62, 50, 32, 25, 61, 234, 212, 210, 175, 201, 76, 35, 215, 118, 145, 231, 232, 42, 57, 218, 234, 75, 125, 181, 213, 80, 236, 191, 17, 79, 242, 77, 1, 252, 140, 65, 214, 195, 120, 20, 249, 121, 56, 213, 85, 102, 89, 218, 203, 189, 253, 46, 123, 246, 53, 178, 191, 171, 244, 164, 238, 118, 186, 43, 242, 83, 26, 113, 7, 192, 83, 190, 109, 36, 125, 78, 2, 113, 116, 202, 35, 178, 142, 82, 173, 30, 58, 127, 224, 84, 255, 220, 29, 7, 228, 225, 98, 46, 83, 211, 234, 131, 3, 48, 71, 194, 5, 16, 21, 8, 64, 0, 2, 16, 128, 0, 4, 126, 156, 128, 215, 45, 191, 33, 231, 201, 58, 7, 233, 93, 191, 91, 134, 97, 46, 229, 236, 59, 218, 203, 178, 110, 210, 103, 92, 217, 72, 63, 108, 47, 100, 244, 165, 255, 176, 201, 166, 28, 162, 228, 119, 59, 85, 173, 246, 168, 231, 186, 48, 150, 119, 25, 75, 203, 60, 197, 110, 109, 86, 126, 13, 218, 11, 86, 249, 13, 128, 23, 124, 211, 153, 50, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 240, 51, 4, 198, 249, 250, 207, 12, 198, 40, 16, 184, 65, 128, 59, 0, 110, 0, 162, 27, 2, 223, 74, 160, 93, 230, 205, 111, 249, 227, 18, 109, 190, 66, 239, 91, 199, 82, 186, 157, 114, 92, 209, 141, 75, 185, 229, 46, 91, 215, 221, 151, 23, 123, 117, 193, 119, 179, 105, 46, 251, 31, 66, 243, 181, 96, 89, 141, 75, 198, 114, 162, 64, 0, 2, 16, 128, 0, 4, 32, 0, 129, 47, 34, 224, 181, 136, 215, 41, 183, 194, 218, 46, 101, 236, 22, 169, 186, 219, 17, 36, 245, 146, 93, 239, 250, 158, 220, 25, 216, 241, 20, 108, 137, 115, 111, 221, 57, 216, 126, 180, 53, 76, 168, 214, 120, 189, 110, 219, 35, 57, 150, 99, 249, 13, 190, 2, 69, 81, 44, 21, 229, 215, 139, 214, 144, 90, 191, 45, 50, 124, 109, 34, 185, 108, 81, 201, 122, 235, 239, 113, 168, 159, 155, 192, 167, 47, 0, 232, 143, 167, 23, 253, 141, 126, 174, 220, 138, 120, 171, 255, 115, 163, 227, 13, 129, 78, 32, 15, 142, 93, 113, 179, 110, 143, 33, 219, 39, 135, 111, 227, 223, 156, 208, 71, 60, 123, 40, 116, 30, 200, 165, 112, 233, 117, 235, 22, 233, 206, 241, 201, 176, 68, 26, 17, 115, 236, 97, 60, 76, 243, 119, 0, 242, 98, 129, 46, 24, 232, 3, 66, 190, 117, 244, 247, 7, 75, 186, 233, 217, 49, 189, 210, 102, 205, 49, 117, 225, 177, 177, 85, 59, 183, 250, 184, 177, 77, 168, 82, 91, 146, 61, 4, 32, 0, 1, 8, 64, 0, 2, 103, 36, 144, 107, 151, 92, 51, 212, 58, 38, 215, 17, 177, 187, 148, 210, 213, 166, 133, 131, 250, 199, 2, 98, 216, 218, 223, 190, 110, 175, 118, 105, 47, 136, 99, 93, 115, 25, 160, 247, 169, 238, 65, 54, 78, 106, 108, 138, 172, 124, 14, 211, 61, 108, 180, 12, 103, 133, 19, 159, 164, 215, 122, 179, 217, 170, 31, 209, 71, 94, 49, 211, 241, 210, 76, 252, 114, 125, 204, 46, 147, 139, 190, 255, 159, 189, 51, 81, 111, 28, 215, 149, 240, 204, 249, 238, 251, 63, 242, 244, 197, 15, 176, 72, 136, 150, 151, 44, 221, 29, 219, 197, 140, 132, 29, 36, 75, 105, 18, 146, 229, 76, 80, 142, 172, 250, 68, 67, 208, 184, 171, 207, 46, 141, 128, 57, 152, 198, 200, 45, 199, 65, 63, 212, 125, 65, 67, 159, 148, 208, 38, 203, 189, 101, 120, 114, 150, 217, 245, 182, 207, 240, 158, 189, 199, 62, 31, 255, 229, 7, 0, 207, 55, 101, 143, 216, 8, 252, 32, 4, 180, 154, 7, 205, 205, 33, 150, 219, 252, 25, 242, 129, 151, 142, 69, 57, 15, 110, 226, 225, 137, 21, 47, 219, 88, 184, 99, 170, 44, 97, 58, 152, 57, 252, 101, 59, 91, 248, 208, 157, 123, 95, 198, 91, 99, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 199, 16, 80, 117, 209, 235, 147, 91, 145, 242, 75, 26, 167, 73, 225, 37, 71, 130, 212, 67, 187, 94, 252, 25, 61, 235, 20, 63, 244, 103, 254, 247, 116, 21, 118, 236, 95, 58, 168, 226, 59, 47, 221, 53, 58, 202, 177, 121, 115, 30, 177, 180, 112, 175, 49, 66, 71, 163, 110, 228, 145, 192, 164, 17, 155, 126, 161, 133, 206, 35, 152, 228, 155, 125, 164, 48, 121, 3, 4, 252, 55, 0, 222, 224, 34, 123, 138, 79, 140, 0, 171, 179, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 27, 16, 240, 27, 0, 223, 0, 162, 83, 24, 129, 175, 35, 48, 238, 244, 243, 113, 108, 100, 203, 79, 245, 135, 144, 60, 42, 62, 233, 79, 83, 210, 18, 232, 185, 61, 190, 29, 105, 174, 141, 71, 230, 202, 204, 19, 98, 30, 43, 115, 140, 39, 193, 141, 166, 210, 39, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 112, 4, 122, 125, 148, 124, 140, 55, 107, 157, 56, 85, 205, 115, 157, 94, 76, 141, 152, 42, 141, 86, 236, 3, 121, 178, 31, 252, 186, 175, 228, 51, 202, 24, 229, 43, 123, 31, 183, 116, 65, 105, 115, 142, 41, 132, 156, 218, 69, 83, 157, 227, 230, 243, 255, 81, 219, 145, 163, 249, 245, 183, 8, 208, 95, 59, 70, 136, 201, 139, 34, 224, 7, 0, 47, 122, 97, 175, 78, 107, 44, 104, 211, 174, 85, 97, 42, 204, 92, 71, 64, 224, 137, 94, 247, 188, 110, 17, 224, 65, 99, 37, 207, 31, 104, 138, 67, 78, 109, 101, 208, 98, 159, 75, 116, 134, 42, 30, 13, 55, 240, 164, 105, 121, 136, 205, 92, 232, 245, 181, 0, 104, 29, 245, 90, 24, 227, 223, 231, 176, 203, 217, 99, 229, 167, 143, 253, 200, 62, 67, 31, 97, 135, 49, 164, 31, 227, 81, 91, 156, 52, 166, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 235, 32, 64, 221, 65, 53, 160, 250, 99, 20, 6, 42, 16, 134, 30, 251, 242, 41, 94, 186, 78, 35, 44, 242, 125, 244, 184, 64, 147, 49, 169, 4, 17, 127, 70, 47, 2, 67, 65, 73, 52, 124, 53, 14, 220, 224, 209, 139, 202, 71, 186, 212, 227, 24, 141, 249, 29, 29, 135, 30, 91, 30, 53, 231, 148, 102, 224, 136, 193, 225, 23, 167, 222, 150, 156, 230, 48, 237, 52, 189, 41, 204, 102, 11, 143, 61, 207, 76, 51, 252, 166, 60, 152, 49, 150, 85, 99, 106, 188, 131, 134, 27, 158, 89, 255, 193, 171, 14, 68, 55, 14, 193, 215, 71, 50, 135, 244, 205, 12, 125, 210, 254, 68, 95, 213, 211, 107, 156, 253, 0, 224, 53, 174, 163, 103, 241, 244, 8, 140, 37, 76, 171, 103, 44, 192, 115, 243, 72, 62, 22, 214, 73, 225, 99, 194, 156, 50, 108, 172, 190, 96, 144, 242, 117, 48, 100, 134, 214, 226, 206, 146, 89, 203, 102, 233, 42, 133, 252, 174, 103, 178, 197, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 63, 3, 129, 44, 137, 162, 120, 153, 52, 134, 149, 117, 13, 58, 241, 87, 232, 197, 12, 136, 25, 119, 148, 51, 246, 129, 60, 233, 139, 95, 247, 149, 124, 70, 25, 143, 124, 101, 215, 24, 37, 15, 202, 24, 53, 55, 241, 73, 57, 69, 11, 183, 108, 53, 238, 168, 33, 85, 219, 17, 47, 91, 208, 179, 27, 118, 236, 251, 49, 66, 76, 94, 20, 1, 255, 13, 128, 23, 189, 176, 158, 214, 171, 33, 160, 229, 155, 121, 117, 254, 213, 230, 233, 249, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 187, 16, 240, 27, 0, 191, 11, 89, 231, 53, 2, 59, 2, 186, 111, 223, 31, 179, 78, 185, 191, 2, 183, 243, 113, 219, 31, 143, 126, 215, 91, 0, 240, 122, 197, 31, 219, 56, 162, 207, 153, 238, 132, 103, 72, 216, 245, 169, 127, 178, 167, 50, 126, 252, 84, 219, 233, 138, 51, 103, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 63, 139, 192, 173, 90, 231, 163, 182, 57, 114, 21, 59, 122, 177, 50, 228, 67, 125, 213, 229, 207, 242, 209, 25, 221, 92, 228, 189, 166, 31, 253, 48, 70, 197, 136, 79, 202, 41, 218, 124, 99, 1, 167, 248, 244, 191, 42, 56, 104, 245, 199, 11, 1, 179, 95, 2, 212, 80, 210, 198, 27, 15, 37, 248, 252, 234, 8, 140, 7, 0, 245, 203, 82, 191, 26, 63, 253, 55, 224, 167, 143, 239, 213, 127, 101, 254, 212, 252, 230, 146, 117, 236, 176, 171, 197, 67, 207, 90, 234, 187, 83, 227, 115, 21, 141, 160, 73, 225, 71, 146, 51, 154, 161, 113, 58, 208, 17, 147, 58, 82, 97, 231, 198, 188, 248, 117, 195, 142, 142, 165, 184, 209, 146, 182, 243, 232, 127, 18, 18, 211, 70, 7, 73, 37, 243, 239, 224, 196, 222, 93, 101, 38, 36, 27, 27, 1, 113, 218, 16, 150, 140, 249, 50, 180, 254, 173, 85, 26, 70, 95, 125, 150, 159, 114, 160, 95, 35, 129, 43, 121, 188, 124, 6, 24, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 107, 35, 208, 246, 123, 213, 1, 162, 89, 24, 112, 202, 2, 9, 82, 252, 177, 78, 26, 230, 176, 29, 245, 231, 114, 229, 34, 79, 192, 122, 56, 42, 247, 165, 93, 190, 162, 35, 46, 131, 171, 222, 153, 55, 193, 202, 55, 212, 121, 225, 208, 125, 169, 141, 164, 99, 238, 243, 142, 91, 121, 213, 231, 28, 143, 12, 85, 111, 113, 150, 75, 85, 99, 149, 1, 93, 202, 193, 36, 253, 245, 107, 84, 107, 200, 138, 8, 39, 88, 218, 152, 19, 217, 202, 58, 104, 8, 41, 131, 127, 184, 77, 251, 144, 51, 22, 11, 198, 3, 69, 247, 192, 145, 253, 102, 112, 165, 186, 56, 99, 235, 199, 28, 104, 233, 99, 94, 101, 239, 244, 34, 201, 82, 168, 171, 145, 102, 25, 30, 229, 62, 29, 248, 104, 7, 127, 213, 207, 111, 0, 252, 85, 248, 221, 249, 91, 33, 160, 197, 168, 175, 111, 7, 62, 150, 91, 22, 218, 155, 7, 235, 44, 62, 208, 88, 218, 147, 194, 143, 35, 0, 61, 164, 220, 100, 240, 198, 62, 119, 128, 228, 207, 100, 252, 248, 169, 182, 211, 25, 102, 198, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 127, 24, 129, 91, 181, 206, 71, 109, 115, 232, 42, 118, 226, 222, 47, 217, 56, 29, 234, 171, 46, 127, 150, 143, 206, 200, 125, 145, 247, 154, 62, 157, 183, 241, 48, 96, 250, 135, 70, 75, 58, 199, 76, 237, 198, 205, 107, 209, 17, 158, 101, 95, 242, 113, 74, 255, 140, 84, 112, 208, 215, 190, 223, 213, 108, 77, 7, 2, 254, 27, 0, 254, 85, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 6, 8, 248, 13, 128, 55, 184, 200, 158, 226, 79, 67, 96, 61, 123, 173, 79, 217, 199, 57, 213, 60, 154, 93, 135, 222, 6, 144, 174, 76, 248, 215, 19, 220, 249, 22, 128, 228, 65, 53, 227, 76, 41, 225, 130, 242, 184, 87, 199, 133, 209, 10, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 124, 25, 129, 89, 179, 68, 38, 213, 37, 162, 215, 146, 239, 49, 187, 124, 45, 238, 150, 126, 207, 33, 249, 44, 6, 91, 111, 146, 59, 85, 252, 135, 104, 56, 103, 45, 23, 201, 91, 185, 119, 201, 71, 121, 166, 188, 48, 249, 29, 255, 22, 155, 186, 49, 64, 252, 46, 228, 82, 205, 191, 250, 47, 59, 121, 148, 87, 116, 132, 67, 220, 222, 4, 129, 155, 15, 0, 248, 197, 224, 246, 32, 127, 177, 26, 143, 46, 91, 24, 230, 87, 50, 80, 200, 121, 58, 148, 219, 199, 206, 95, 10, 254, 88, 87, 239, 232, 173, 139, 249, 99, 231, 206, 0, 251, 32, 119, 249, 56, 240, 110, 173, 168, 174, 89, 190, 210, 118, 74, 63, 37, 31, 110, 195, 83, 43, 141, 150, 201, 46, 247, 168, 202, 209, 173, 210, 4, 141, 228, 105, 9, 70, 55, 242, 235, 245, 253, 210, 141, 1, 224, 152, 243, 158, 155, 66, 74, 151, 227, 159, 26, 77, 68, 9, 182, 93, 68, 34, 230, 202, 201, 55, 193, 246, 99, 116, 155, 73, 215, 55, 197, 148, 250, 146, 50, 27, 249, 97, 173, 150, 249, 227, 159, 173, 104, 14, 41, 76, 233, 225, 127, 206, 130, 201, 212, 8, 24, 1, 35, 96, 4, 140, 192, 75, 34, 192, 254, 79, 203, 58, 32, 248, 157, 102, 65, 128, 207, 56, 210, 255, 196, 175, 199, 201, 247, 26, 237, 190, 143, 242, 167, 185, 114, 228, 219, 73, 99, 141, 128, 250, 160, 133, 193, 70, 253, 51, 58, 42, 122, 99, 194, 39, 3, 82, 29, 184, 131, 64, 101, 85, 63, 88, 248, 25, 116, 226, 19, 149, 215, 168, 177, 242, 158, 43, 237, 199, 91, 46, 98, 40, 183, 138, 82, 167, 81, 173, 141, 122, 45, 198, 146, 122, 213, 99, 249, 36, 33, 156, 83, 11, 41, 123, 206, 175, 196, 180, 160, 37, 46, 199, 13, 141, 206, 75, 55, 242, 162, 187, 113, 132, 105, 218, 139, 199, 27, 93, 208, 232, 243, 215, 175, 162, 240, 233, 89, 230, 10, 194, 17, 251, 204, 176, 102, 135, 233, 118, 171, 68, 74, 119, 233, 43, 32, 68, 47, 61, 222, 65, 115, 243, 1, 192, 59, 0, 224, 57, 26, 129, 63, 143, 192, 90, 150, 106, 49, 29, 231, 84, 199, 137, 197, 112, 28, 115, 195, 152, 50, 166, 92, 62, 107, 89, 204, 13, 105, 45, 145, 164, 200, 52, 99, 82, 157, 191, 156, 39, 139, 159, 142, 75, 171, 53, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 248, 42, 2, 170, 77, 68, 201, 119, 187, 62, 185, 172, 107, 20, 43, 250, 153, 49, 41, 118, 167, 103, 185, 240, 233, 77, 114, 167, 123, 158, 135, 228, 112, 202, 146, 46, 146, 143, 210, 238, 156, 70, 121, 54, 243, 193, 32, 143, 88, 198, 5, 159, 180, 200, 165, 44, 189, 242, 16, 27, 58, 191, 1, 48, 128, 121, 115, 226, 191, 1, 240, 230, 191, 0, 158, 190, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 7, 2, 126, 3, 224, 61, 174, 179, 103, 249, 83, 17, 200, 199, 177, 49, 184, 65, 245, 116, 87, 180, 30, 247, 242, 164, 55, 62, 245, 79, 159, 56, 13, 90, 62, 232, 203, 86, 50, 190, 51, 157, 210, 54, 202, 171, 91, 199, 163, 222, 2, 88, 0, 145, 254, 178, 157, 107, 47, 253, 172, 49, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 239, 69, 32, 75, 161, 232, 66, 180, 247, 166, 138, 69, 54, 209, 238, 243, 40, 223, 99, 197, 159, 210, 80, 30, 234, 48, 201, 26, 227, 153, 140, 13, 189, 232, 206, 183, 24, 156, 228, 199, 216, 137, 75, 202, 139, 156, 209, 166, 92, 98, 126, 210, 47, 125, 198, 225, 51, 252, 146, 234, 205, 0, 233, 27, 13, 54, 125, 161, 110, 175, 137, 192, 215, 30, 0, 140, 95, 186, 124, 139, 88, 248, 72, 39, 217, 212, 8, 124, 11, 2, 135, 229, 43, 50, 34, 211, 118, 125, 105, 255, 206, 89, 99, 233, 227, 234, 35, 233, 55, 235, 131, 143, 241, 247, 159, 125, 62, 149, 113, 205, 85, 50, 55, 241, 199, 38, 159, 161, 45, 199, 72, 199, 10, 223, 143, 176, 203, 134, 107, 11, 203, 77, 104, 164, 77, 151, 56, 205, 87, 197, 130, 81, 88, 81, 70, 189, 82, 29, 249, 178, 173, 228, 88, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 87, 68, 160, 110, 62, 99, 239, 143, 237, 126, 29, 146, 59, 221, 121, 201, 196, 193, 247, 163, 231, 218, 120, 64, 220, 74, 139, 94, 135, 92, 152, 211, 55, 234, 152, 204, 15, 109, 249, 230, 5, 137, 2, 40, 191, 100, 95, 53, 19, 223, 253, 175, 47, 223, 83, 24, 17, 83, 250, 99, 77, 213, 116, 51, 207, 198, 104, 96, 82, 119, 57, 199, 21, 6, 6, 148, 117, 93, 208, 236, 87, 6, 130, 2, 147, 101, 61, 240, 140, 172, 112, 8, 46, 191, 51, 63, 21, 67, 63, 2, 81, 207, 54, 114, 171, 139, 236, 59, 140, 141, 166, 41, 191, 243, 95, 105, 144, 19, 51, 166, 27, 194, 191, 249, 253, 125, 250, 156, 73, 241, 232, 194, 93, 94, 222, 135, 20, 35, 203, 174, 187, 155, 204, 14, 31, 70, 224, 107, 15, 0, 62, 220, 157, 3, 140, 128, 17, 56, 32, 144, 171, 106, 104, 6, 205, 133, 53, 120, 209, 98, 144, 107, 147, 148, 12, 45, 31, 109, 150, 43, 38, 245, 43, 165, 82, 15, 202, 141, 252, 241, 216, 86, 240, 244, 59, 140, 49, 5, 45, 213, 151, 22, 107, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 39, 17, 216, 202, 167, 67, 215, 170, 88, 110, 249, 28, 2, 110, 8, 202, 129, 139, 248, 83, 26, 202, 170, 203, 54, 170, 56, 217, 187, 12, 143, 94, 116, 231, 71, 76, 152, 211, 79, 20, 127, 130, 160, 60, 47, 160, 145, 39, 105, 145, 131, 62, 253, 66, 159, 52, 78, 73, 35, 238, 160, 151, 93, 241, 131, 154, 188, 38, 2, 254, 27, 0, 175, 121, 93, 61, 43, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 7, 4, 252, 6, 192, 1, 14, 11, 70, 224, 79, 33, 160, 231, 174, 234, 175, 228, 252, 164, 63, 158, 201, 30, 95, 131, 219, 229, 122, 210, 91, 255, 107, 154, 136, 143, 80, 61, 117, 62, 102, 43, 137, 204, 106, 157, 151, 174, 104, 127, 225, 234, 186, 87, 143, 193, 235, 204, 83, 250, 158, 177, 199, 153, 55, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 64, 71, 64, 181, 131, 104, 183, 61, 194, 43, 14, 74, 19, 45, 169, 206, 221, 167, 243, 221, 71, 188, 226, 187, 223, 167, 248, 8, 154, 159, 242, 71, 114, 213, 107, 153, 11, 155, 116, 80, 241, 124, 58, 143, 109, 28, 161, 78, 94, 20, 63, 156, 161, 248, 208, 6, 89, 180, 233, 211, 111, 248, 76, 255, 30, 64, 193, 134, 236, 194, 45, 64, 120, 143, 246, 229, 7, 0, 250, 253, 17, 92, 95, 255, 221, 249, 254, 140, 26, 155, 169, 17, 248, 51, 8, 196, 239, 176, 126, 141, 181, 122, 15, 186, 110, 236, 107, 209, 222, 229, 28, 159, 98, 251, 96, 165, 131, 206, 163, 152, 120, 60, 48, 149, 202, 39, 85, 46, 244, 97, 214, 48, 72, 121, 237, 43, 0, 43, 11, 95, 17, 104, 221, 204, 24, 116, 171, 55, 114, 145, 152, 239, 130, 101, 191, 131, 234, 123, 104, 233, 73, 162, 204, 6, 117, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 13, 129, 172, 53, 168, 15, 90, 189, 81, 245, 72, 150, 9, 85, 35, 28, 108, 210, 47, 154, 165, 66, 43, 62, 142, 185, 150, 223, 210, 243, 189, 124, 244, 213, 239, 138, 47, 61, 242, 242, 45, 126, 249, 196, 21, 200, 190, 56, 93, 185, 115, 73, 251, 184, 82, 226, 111, 210, 200, 115, 248, 59, 1, 213, 135, 66, 102, 223, 74, 201, 184, 81, 50, 72, 198, 144, 243, 96, 44, 232, 98, 14, 168, 82, 170, 191, 250, 52, 188, 210, 151, 184, 95, 241, 83, 25, 42, 70, 94, 101, 171, 88, 44, 151, 45, 123, 13, 53, 241, 163, 143, 234, 114, 225, 133, 30, 221, 160, 65, 178, 214, 203, 65, 29, 190, 255, 47, 39, 60, 158, 173, 49, 187, 222, 206, 209, 234, 30, 175, 196, 127, 249, 1, 192, 43, 129, 225, 185, 24, 129, 63, 135, 64, 46, 171, 173, 187, 146, 115, 35, 99, 73, 207, 141, 224, 26, 29, 11, 51, 27, 196, 72, 147, 11, 117, 91, 203, 122, 246, 166, 206, 197, 188, 117, 218, 216, 190, 240, 245, 136, 230, 178, 177, 189, 143, 110, 146, 190, 103, 236, 118, 243, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 232, 8, 168, 118, 16, 237, 182, 71, 120, 197, 65, 105, 162, 37, 213, 185, 251, 116, 190, 251, 136, 87, 124, 247, 251, 12, 95, 119, 209, 227, 102, 58, 146, 247, 122, 45, 121, 233, 160, 226, 41, 160, 66, 144, 47, 250, 148, 135, 61, 197, 84, 150, 207, 48, 67, 212, 221, 242, 111, 58, 229, 79, 191, 17, 159, 1, 163, 63, 158, 67, 184, 189, 7, 2, 254, 27, 0, 239, 113, 157, 61, 75, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 254, 32, 2, 121, 211, 125, 210, 159, 238, 191, 79, 76, 86, 25, 129, 223, 142, 128, 223, 0, 248, 237, 16, 187, 3, 35, 112, 15, 129, 216, 6, 114, 135, 128, 30, 15, 189, 9, 128, 94, 124, 185, 212, 167, 255, 211, 61, 186, 232, 41, 212, 35, 58, 154, 94, 251, 175, 87, 190, 120, 237, 107, 29, 232, 234, 85, 178, 202, 81, 254, 25, 150, 145, 226, 76, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 22, 2, 89, 123, 45, 177, 106, 177, 144, 239, 234, 195, 33, 125, 160, 39, 7, 41, 167, 62, 5, 249, 19, 69, 13, 184, 209, 204, 70, 109, 87, 126, 48, 226, 147, 198, 167, 251, 7, 121, 248, 73, 71, 23, 110, 239, 131, 192, 215, 30, 0, 240, 91, 163, 215, 70, 192, 76, 188, 95, 33, 121, 159, 223, 32, 207, 116, 33, 192, 191, 7, 90, 163, 90, 88, 235, 230, 61, 76, 161, 88, 188, 110, 234, 9, 225, 167, 66, 59, 205, 124, 74, 137, 97, 182, 238, 21, 188, 118, 137, 97, 159, 98, 126, 77, 96, 253, 131, 204, 253, 98, 230, 88, 76, 79, 45, 190, 122, 208, 102, 2, 101, 188, 131, 42, 52, 82, 103, 206, 70, 115, 34, 115, 54, 53, 55, 185, 155, 26, 1, 35, 96, 4, 140, 128, 17, 48, 2, 175, 135, 64, 214, 29, 49, 173, 170, 33, 122, 37, 193, 92, 151, 92, 181, 133, 206, 75, 95, 62, 146, 171, 118, 56, 175, 141, 84, 151, 168, 110, 146, 188, 50, 84, 246, 71, 229, 85, 35, 213, 141, 12, 50, 57, 23, 173, 218, 167, 116, 249, 1, 74, 214, 66, 33, 7, 173, 47, 235, 195, 7, 123, 210, 241, 85, 125, 131, 165, 102, 66, 127, 112, 244, 83, 189, 227, 66, 35, 109, 89, 225, 151, 159, 108, 138, 43, 186, 178, 97, 159, 141, 36, 180, 28, 228, 70, 25, 59, 63, 208, 56, 225, 122, 73, 107, 92, 137, 5, 211, 198, 15, 28, 248, 251, 79, 25, 145, 201, 57, 69, 83, 103, 37, 77, 85, 38, 14, 73, 147, 129, 186, 253, 21, 4, 190, 246, 0, 224, 175, 12, 217, 157, 26, 129, 87, 67, 128, 21, 55, 230, 84, 43, 239, 129, 214, 2, 139, 157, 133, 86, 7, 226, 218, 108, 50, 140, 240, 150, 66, 8, 161, 163, 213, 134, 194, 74, 203, 2, 126, 60, 208, 249, 13, 128, 132, 201, 39, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 60, 140, 64, 214, 94, 205, 91, 178, 168, 76, 146, 69, 41, 218, 146, 135, 158, 29, 17, 40, 61, 57, 224, 139, 194, 80, 3, 110, 52, 179, 81, 223, 181, 188, 226, 161, 220, 180, 119, 121, 227, 67, 116, 123, 35, 4, 252, 55, 0, 222, 232, 98, 123, 170, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 190, 8, 248, 13, 128, 247, 189, 246, 158, 249, 95, 69, 32, 158, 195, 242, 40, 150, 211, 160, 245, 10, 149, 62, 229, 23, 13, 115, 60, 229, 213, 83, 224, 78, 75, 137, 125, 76, 100, 164, 66, 220, 143, 225, 81, 93, 73, 104, 84, 41, 80, 117, 254, 76, 110, 97, 102, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 18, 8, 244, 250, 7, 94, 111, 170, 51, 57, 228, 223, 122, 68, 242, 204, 15, 229, 224, 19, 251, 193, 103, 255, 24, 163, 169, 230, 187, 160, 101, 94, 159, 244, 19, 139, 191, 62, 249, 71, 30, 19, 18, 205, 9, 42, 14, 223, 118, 12, 181, 201, 139, 34, 208, 30, 0, 112, 217, 251, 175, 186, 102, 140, 238, 193, 118, 150, 226, 3, 225, 15, 246, 98, 183, 23, 69, 128, 95, 31, 154, 232, 206, 167, 241, 112, 234, 158, 7, 67, 8, 216, 110, 217, 101, 149, 223, 160, 185, 162, 6, 63, 104, 222, 124, 207, 92, 117, 83, 142, 45, 95, 189, 106, 116, 247, 87, 92, 221, 188, 235, 102, 190, 83, 250, 71, 94, 148, 110, 178, 219, 195, 84, 24, 23, 13, 170, 35, 21, 33, 241, 170, 87, 233, 50, 23, 124, 38, 28, 126, 114, 143, 149, 62, 217, 92, 241, 121, 109, 12, 121, 29, 215, 190, 2, 80, 225, 245, 15, 120, 249, 51, 10, 197, 50, 254, 224, 249, 254, 87, 56, 147, 126, 210, 49, 90, 70, 234, 37, 160, 174, 151, 207, 70, 192, 8, 24, 1, 35, 96, 4, 94, 17, 129, 170, 93, 40, 4, 98, 118, 144, 60, 70, 109, 32, 245, 160, 154, 127, 136, 217, 160, 31, 62, 70, 174, 234, 71, 253, 237, 52, 234, 19, 252, 186, 239, 105, 95, 171, 74, 249, 53, 234, 164, 127, 126, 81, 208, 16, 31, 95, 144, 12, 158, 186, 167, 138, 28, 81, 18, 193, 231, 20, 22, 29, 98, 18, 108, 31, 57, 8, 194, 63, 210, 210, 114, 220, 163, 11, 84, 205, 148, 246, 58, 73, 43, 58, 2, 33, 35, 86, 243, 207, 188, 225, 70, 205, 70, 178, 89, 187, 133, 3, 62, 165, 84, 60, 115, 15, 125, 4, 157, 81, 2, 10, 147, 202, 149, 131, 35, 9, 121, 14, 20, 221, 56, 232, 183, 28, 130, 210, 144, 117, 102, 218, 221, 78, 204, 0, 98, 144, 225, 62, 34, 240, 174, 219, 93, 209, 216, 0, 0, 64, 0, 73, 68, 65, 84, 248, 138, 35, 147, 28, 225, 163, 73, 44, 183, 37, 151, 245, 237, 207, 237, 1, 192, 219, 99, 97, 0, 140, 192, 31, 68, 128, 197, 141, 238, 22, 173, 197, 44, 206, 44, 172, 243, 8, 143, 228, 161, 199, 163, 20, 165, 203, 129, 143, 84, 164, 221, 143, 180, 15, 189, 248, 78, 241, 87, 235, 60, 186, 93, 150, 159, 169, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 5, 129, 94, 239, 192, 115, 15, 41, 29, 244, 183, 30, 145, 60, 243, 67, 97, 162, 243, 89, 247, 133, 136, 81, 246, 20, 17, 162, 165, 47, 52, 165, 160, 196, 165, 161, 168, 228, 204, 53, 38, 148, 247, 214, 56, 33, 143, 134, 216, 15, 233, 77, 95, 19, 1, 255, 13, 128, 215, 188, 174, 158, 149, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 3, 2, 126, 3, 224, 0, 135, 5, 35, 240, 135, 16, 136, 199, 172, 60, 105, 229, 148, 79, 92, 243, 20, 252, 160, 122, 12, 187, 62, 253, 223, 223, 10, 192, 119, 188, 154, 213, 114, 40, 215, 129, 102, 55, 251, 203, 85, 200, 117, 240, 127, 0, 88, 143, 129, 137, 212, 35, 97, 241, 80, 55, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 18, 2, 170, 119, 58, 85, 77, 36, 250, 181, 249, 102, 61, 70, 138, 193, 204, 79, 245, 67, 62, 240, 184, 160, 139, 110, 113, 229, 36, 62, 229, 149, 2, 107, 213, 139, 157, 166, 182, 244, 7, 127, 242, 224, 71, 94, 248, 157, 162, 195, 129, 233, 186, 189, 13, 2, 241, 0, 224, 241, 171, 46, 79, 168, 154, 127, 95, 132, 196, 147, 208, 253, 130, 245, 139, 249, 36, 83, 56, 29, 38, 243, 136, 67, 139, 41, 62, 201, 15, 90, 171, 95, 249, 36, 143, 195, 141, 54, 210, 77, 143, 46, 195, 211, 58, 77, 123, 87, 164, 195, 126, 211, 222, 228, 49, 216, 208, 212, 64, 131, 38, 63, 104, 73, 123, 194, 236, 182, 157, 174, 217, 185, 200, 227, 200, 149, 126, 92, 116, 120, 244, 73, 87, 154, 158, 165, 30, 10, 68, 239, 12, 139, 239, 189, 5, 163, 7, 5, 211, 22, 161, 196, 92, 30, 26, 245, 162, 213, 139, 122, 88, 125, 154, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 3, 1, 106, 6, 90, 214, 14, 193, 31, 63, 188, 184, 37, 247, 152, 157, 167, 6, 25, 58, 229, 134, 126, 235, 81, 53, 78, 164, 188, 104, 234, 135, 186, 233, 88, 7, 109, 114, 212, 84, 105, 135, 158, 28, 117, 199, 141, 79, 141, 93, 29, 33, 211, 24, 65, 246, 145, 245, 22, 138, 208, 132, 138, 63, 67, 160, 160, 244, 136, 19, 20, 27, 77, 165, 92, 218, 144, 227, 168, 106, 175, 206, 248, 28, 154, 28, 118, 58, 156, 200, 59, 143, 252, 219, 78, 49, 102, 104, 206, 127, 167, 213, 31, 169, 174, 29, 87, 70, 113, 24, 82, 23, 200, 115, 189, 97, 21, 32, 69, 235, 195, 171, 30, 161, 12, 55, 122, 206, 52, 113, 146, 107, 15, 127, 51, 222, 111, 0, 188, 217, 5, 247, 116, 127, 8, 2, 90, 127, 6, 205, 5, 29, 158, 69, 169, 29, 199, 77, 148, 77, 161, 54, 134, 90, 164, 217, 108, 134, 76, 88, 203, 149, 41, 36, 103, 202, 181, 249, 84, 122, 228, 58, 252, 6, 192, 15, 249, 157, 240, 48, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 63, 136, 128, 110, 22, 59, 133, 239, 199, 215, 134, 83, 53, 87, 228, 24, 76, 213, 111, 163, 102, 163, 78, 211, 129, 11, 252, 24, 138, 120, 194, 104, 23, 116, 40, 210, 175, 92, 170, 11, 114, 156, 200, 228, 157, 57, 241, 145, 12, 79, 192, 232, 119, 132, 154, 188, 56, 2, 254, 27, 0, 47, 126, 129, 61, 61, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 32, 224, 55, 0, 252, 123, 96, 4, 126, 2, 2, 122, 2, 155, 84, 159, 244, 95, 163, 124, 242, 63, 158, 228, 198, 216, 121, 112, 171, 227, 227, 83, 89, 111, 1, 28, 115, 32, 241, 56, 24, 234, 102, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 103, 69, 64, 245, 76, 255, 152, 91, 245, 77, 215, 157, 205, 175, 234, 164, 110, 81, 100, 167, 240, 95, 58, 34, 56, 227, 71, 146, 254, 9, 61, 125, 231, 167, 244, 157, 162, 140, 150, 245, 96, 177, 51, 158, 20, 52, 229, 187, 160, 49, 229, 140, 107, 83, 31, 221, 86, 160, 207, 47, 143, 64, 60, 0, 104, 87, 255, 71, 76, 247, 222, 120, 244, 107, 173, 193, 222, 243, 151, 159, 105, 34, 176, 195, 247, 238, 176, 104, 197, 19, 5, 15, 97, 212, 105, 183, 127, 10, 179, 184, 153, 175, 165, 56, 105, 189, 186, 223, 110, 240, 155, 237, 126, 250, 54, 48, 61, 9, 32, 62, 248, 252, 17, 101, 42, 168, 199, 148, 244, 202, 255, 145, 94, 222, 230, 151, 63, 27, 30, 63, 181, 241, 45, 218, 243, 117, 62, 124, 233, 43, 191, 55, 86, 145, 156, 171, 137, 14, 209, 196, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 25, 4, 216, 255, 105, 89, 7, 80, 11, 228, 49, 234, 130, 41, 75, 255, 13, 52, 251, 162, 62, 137, 92, 15, 29, 84, 36, 170, 107, 20, 179, 226, 179, 18, 34, 81, 126, 241, 62, 238, 43, 226, 238, 187, 254, 14, 18, 124, 117, 208, 191, 223, 159, 246, 188, 67, 15, 191, 65, 209, 173, 131, 152, 21, 171, 28, 55, 105, 132, 164, 61, 194, 178, 229, 120, 6, 127, 135, 200, 181, 134, 90, 213, 151, 210, 92, 134, 134, 87, 6, 20, 173, 122, 148, 177, 34, 51, 159, 193, 70, 224, 228, 73, 150, 49, 151, 217, 30, 214, 16, 223, 15, 2, 37, 139, 239, 244, 250, 4, 240, 58, 105, 4, 124, 36, 232, 158, 47, 131, 235, 237, 158, 127, 247, 253, 249, 188, 223, 0, 248, 249, 215, 200, 35, 124, 7, 4, 98, 157, 97, 161, 101, 49, 188, 120, 56, 16, 134, 163, 110, 91, 160, 43, 44, 215, 209, 143, 67, 21, 185, 98, 193, 228, 103, 116, 63, 82, 32, 177, 216, 65, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 172, 8, 168, 158, 233, 55, 113, 170, 111, 186, 238, 108, 126, 85, 39, 117, 139, 34, 59, 133, 255, 210, 17, 193, 25, 63, 146, 228, 243, 3, 116, 200, 228, 222, 105, 169, 151, 190, 201, 35, 197, 204, 151, 114, 156, 38, 141, 41, 147, 143, 62, 212, 210, 38, 193, 244, 229, 17, 240, 223, 0, 120, 249, 75, 236, 9, 26, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 240, 223, 0, 240, 239, 128, 17, 248, 187, 8, 204, 199, 177, 49, 140, 124, 28, 203, 35, 217, 58, 248, 212, 31, 94, 159, 254, 47, 94, 46, 245, 154, 23, 143, 116, 227, 191, 245, 100, 87, 252, 9, 173, 79, 245, 121, 228, 171, 39, 218, 157, 39, 11, 250, 202, 59, 115, 182, 60, 193, 186, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 135, 33, 208, 62, 206, 190, 24, 89, 213, 55, 85, 41, 201, 216, 253, 197, 87, 77, 212, 107, 37, 121, 127, 148, 158, 213, 80, 119, 117, 225, 144, 159, 202, 67, 57, 162, 83, 40, 237, 130, 142, 33, 15, 115, 250, 166, 31, 190, 219, 33, 125, 167, 240, 52, 249, 150, 180, 206, 215, 244, 203, 195, 220, 51, 35, 240, 132, 95, 1, 208, 63, 210, 103, 134, 253, 47, 142, 125, 135, 79, 43, 199, 95, 28, 210, 83, 119, 173, 21, 82, 56, 118, 58, 109, 117, 19, 191, 110, 224, 75, 206, 27, 251, 88, 122, 203, 77, 244, 184, 24, 43, 29, 24, 117, 126, 97, 70, 220, 232, 72, 14, 73, 181, 51, 64, 215, 49, 55, 148, 145, 64, 33, 120, 232, 251, 113, 203, 31, 167, 21, 11, 191, 254, 22, 64, 240, 124, 87, 44, 191, 243, 191, 198, 60, 70, 162, 17, 101, 86, 178, 92, 27, 125, 217, 124, 54, 2, 70, 192, 8, 24, 1, 35, 96, 4, 158, 21, 129, 126, 115, 154, 117, 70, 20, 3, 245, 225, 5, 180, 243, 81, 177, 164, 124, 162, 139, 201, 239, 53, 196, 81, 166, 6, 25, 62, 228, 128, 135, 234, 8, 77, 234, 228, 115, 160, 196, 242, 211, 114, 164, 76, 30, 234, 156, 203, 166, 92, 23, 181, 207, 94, 11, 33, 51, 6, 209, 28, 79, 228, 204, 4, 208, 206, 71, 63, 169, 199, 9, 125, 209, 250, 192, 39, 100, 204, 161, 226, 79, 17, 164, 219, 112, 199, 130, 92, 30, 193, 208, 80, 208, 8, 232, 45, 159, 32, 52, 69, 152, 211, 163, 211, 193, 103, 40, 198, 96, 234, 111, 28, 64, 139, 207, 40, 234, 60, 124, 155, 191, 228, 127, 168, 255, 114, 68, 153, 160, 58, 233, 142, 109, 8, 207, 201, 30, 208, 126, 206, 41, 220, 24, 245, 19, 62, 0, 184, 49, 27, 155, 140, 192, 179, 33, 48, 22, 222, 92, 157, 181, 170, 14, 90, 27, 130, 22, 227, 90, 129, 47, 54, 84, 230, 171, 133, 25, 182, 243, 101, 170, 212, 131, 175, 237, 131, 69, 141, 77, 176, 232, 226, 25, 12, 122, 126, 198, 90, 190, 209, 16, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 195, 16, 184, 117, 195, 86, 245, 77, 85, 54, 26, 118, 247, 23, 191, 234, 162, 85, 47, 201, 255, 99, 244, 90, 29, 117, 166, 39, 115, 234, 227, 164, 231, 2, 40, 166, 110, 56, 72, 78, 113, 12, 25, 93, 202, 141, 166, 95, 200, 162, 187, 125, 184, 38, 233, 62, 143, 232, 187, 143, 249, 231, 69, 192, 127, 3, 224, 121, 175, 157, 71, 110, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 19, 35, 160, 155, 248, 39, 158, 130, 135, 254, 100, 8, 248, 13, 128, 39, 187, 96, 30, 238, 107, 35, 192, 39, 248, 249, 212, 247, 64, 67, 224, 191, 237, 227, 253, 41, 150, 121, 62, 233, 29, 161, 41, 11, 45, 125, 218, 159, 175, 168, 181, 79, 255, 165, 191, 252, 191, 0, 240, 104, 153, 76, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 102, 4, 84, 211, 140, 143, 205, 115, 42, 170, 113, 186, 238, 56, 71, 60, 100, 221, 107, 43, 69, 119, 186, 251, 244, 108, 221, 214, 99, 228, 115, 205, 46, 61, 126, 7, 126, 36, 201, 186, 113, 216, 210, 39, 244, 242, 75, 42, 185, 83, 248, 152, 24, 246, 189, 161, 59, 211, 239, 126, 150, 159, 27, 129, 219, 15, 0, 248, 13, 224, 55, 95, 191, 9, 226, 245, 175, 225, 59, 230, 174, 220, 202, 245, 157, 185, 149, 211, 244, 15, 33, 160, 139, 41, 74, 183, 141, 23, 43, 186, 153, 247, 65, 202, 237, 30, 221, 227, 82, 62, 4, 233, 149, 246, 69, 121, 87, 62, 95, 167, 15, 103, 92, 231, 17, 76, 134, 78, 69, 55, 118, 30, 199, 203, 163, 94, 209, 31, 185, 213, 199, 200, 149, 139, 116, 242, 196, 145, 107, 247, 43, 199, 57, 202, 145, 191, 8, 54, 194, 100, 45, 105, 36, 74, 75, 242, 217, 9, 54, 218, 250, 94, 26, 82, 101, 128, 171, 214, 229, 157, 71, 238, 15, 11, 146, 15, 101, 253, 127, 113, 43, 87, 249, 192, 107, 76, 197, 245, 243, 101, 79, 163, 115, 19, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 37, 16, 200, 26, 130, 26, 33, 102, 83, 71, 175, 11, 66, 151, 182, 208, 65, 243, 216, 236, 51, 142, 175, 33, 150, 79, 2, 147, 194, 144, 103, 108, 200, 195, 103, 152, 151, 188, 251, 40, 111, 116, 90, 117, 76, 31, 195, 232, 43, 59, 210, 205, 7, 180, 14, 252, 235, 195, 17, 252, 66, 151, 119, 204, 69, 249, 190, 60, 242, 164, 178, 67, 147, 103, 140, 216, 131, 142, 163, 6, 169, 1, 149, 173, 114, 224, 67, 62, 217, 96, 6, 63, 40, 154, 248, 202, 125, 185, 4, 165, 23, 66, 160, 58, 39, 155, 167, 17, 191, 20, 27, 55, 236, 57, 48, 250, 22, 38, 69, 53, 96, 188, 86, 77, 75, 223, 221, 15, 158, 57, 72, 39, 223, 157, 98, 15, 36, 240, 203, 241, 6, 29, 99, 172, 177, 103, 47, 244, 180, 141, 49, 59, 47, 125, 196, 142, 25, 23, 173, 192, 224, 247, 166, 28, 87, 29, 246, 128, 183, 150, 111, 63, 0, 120, 107, 104, 60, 121, 35, 240, 231, 17, 200, 117, 46, 214, 176, 35, 69, 81, 139, 106, 174, 145, 172, 113, 195, 39, 89, 248, 82, 93, 80, 205, 32, 55, 47, 54, 163, 118, 176, 160, 74, 239, 55, 0, 132, 148, 169, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 90, 8, 112, 83, 72, 165, 212, 111, 14, 145, 105, 93, 87, 26, 157, 123, 68, 175, 179, 176, 43, 186, 211, 221, 71, 121, 228, 191, 219, 21, 123, 203, 46, 159, 78, 147, 143, 19, 52, 235, 69, 40, 73, 162, 33, 167, 30, 190, 203, 210, 67, 57, 98, 218, 216, 247, 134, 238, 76, 191, 251, 89, 126, 110, 4, 252, 55, 0, 158, 251, 250, 121, 244, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 30, 66, 192, 111, 0, 60, 4, 147, 157, 140, 192, 119, 35, 192, 227, 215, 241, 140, 53, 31, 183, 14, 57, 116, 188, 46, 133, 109, 81, 68, 228, 78, 99, 60, 196, 65, 6, 45, 233, 120, 198, 36, 179, 168, 60, 234, 211, 127, 36, 61, 253, 22, 149, 14, 185, 235, 208, 187, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 217, 17, 232, 245, 141, 120, 213, 61, 183, 169, 234, 39, 213, 85, 162, 29, 17, 116, 87, 143, 48, 164, 13, 122, 118, 144, 168, 249, 164, 72, 64, 180, 244, 47, 118, 230, 72, 189, 116, 138, 195, 55, 166, 145, 254, 141, 14, 183, 73, 72, 219, 143, 105, 48, 243, 210, 8, 248, 1, 192, 75, 95, 94, 79, 238, 187, 17, 24, 235, 111, 46, 150, 228, 150, 124, 214, 143, 108, 124, 227, 105, 254, 196, 74, 60, 111, 230, 137, 71, 206, 159, 181, 0, 247, 188, 149, 99, 100, 210, 170, 143, 24, 71, 198, 161, 27, 25, 246, 60, 25, 197, 234, 31, 55, 241, 201, 39, 93, 95, 3, 200, 126, 248, 159, 205, 70, 171, 175, 6, 144, 33, 83, 23, 13, 161, 54, 143, 21, 83, 246, 202, 119, 216, 88, 20, 71, 12, 9, 103, 43, 137, 204, 213, 211, 52, 152, 49, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 5, 1, 109, 254, 208, 60, 226, 36, 30, 6, 190, 78, 53, 227, 67, 77, 35, 95, 249, 133, 103, 214, 71, 43, 34, 195, 43, 242, 228, 76, 133, 129, 135, 106, 154, 114, 65, 115, 253, 80, 205, 115, 94, 157, 168, 191, 179, 120, 178, 87, 85, 83, 245, 17, 197, 82, 214, 81, 208, 113, 84, 1, 21, 185, 179, 88, 218, 104, 38, 80, 191, 162, 40, 63, 219, 24, 37, 121, 68, 71, 30, 137, 141, 38, 236, 33, 139, 238, 0, 73, 159, 195, 30, 25, 9, 63, 59, 232, 5, 61, 77, 180, 164, 227, 25, 27, 8, 137, 98, 45, 73, 87, 236, 232, 111, 233, 247, 35, 224, 7, 0, 191, 31, 99, 247, 96, 4, 78, 16, 136, 101, 144, 85, 150, 6, 153, 43, 110, 44, 137, 131, 95, 20, 51, 250, 70, 21, 55, 66, 17, 207, 90, 166, 30, 134, 209, 219, 116, 91, 183, 228, 218, 124, 68, 113, 129, 215, 49, 67, 204, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 5, 16, 216, 107, 30, 166, 164, 186, 231, 54, 85, 253, 164, 186, 74, 180, 131, 162, 250, 235, 148, 134, 50, 245, 208, 179, 131, 68, 205, 39, 69, 2, 162, 165, 127, 177, 51, 71, 234, 165, 83, 28, 190, 49, 141, 244, 111, 116, 184, 77, 66, 218, 126, 76, 131, 153, 151, 70, 192, 127, 3, 224, 165, 47, 175, 39, 247, 178, 8, 140, 141, 32, 87, 237, 151, 157, 164, 39, 102, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 119, 34, 224, 55, 0, 190, 19, 77, 231, 50, 2, 15, 34, 160, 167, 173, 114, 151, 188, 223, 215, 243, 228, 150, 199, 183, 157, 230, 211, 220, 82, 31, 158, 218, 246, 28, 226, 87, 126, 158, 102, 235, 41, 239, 120, 101, 237, 240, 164, 123, 121, 138, 51, 53, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 243, 33, 64, 205, 67, 37, 84, 181, 207, 253, 241, 203, 15, 122, 239, 56, 102, 163, 23, 154, 234, 174, 107, 180, 188, 214, 249, 94, 92, 207, 153, 252, 8, 80, 13, 200, 48, 213, 151, 124, 69, 165, 191, 73, 195, 88, 181, 101, 68, 225, 232, 246, 86, 8, 248, 1, 192, 91, 93, 238, 223, 61, 89, 22, 77, 86, 17, 40, 77, 252, 155, 172, 44, 154, 38, 244, 202, 145, 11, 119, 179, 213, 171, 253, 161, 144, 33, 232, 122, 245, 191, 28, 57, 147, 80, 116, 136, 169, 187, 183, 122, 231, 119, 210, 198, 245, 200, 87, 214, 198, 119, 254, 43, 99, 102, 154, 233, 170, 55, 30, 14, 208, 91, 61, 36, 56, 167, 195, 30, 142, 245, 122, 25, 190, 255, 27, 113, 53, 82, 70, 91, 35, 174, 81, 163, 117, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 15, 129, 220, 225, 169, 9, 98, 106, 171, 156, 137, 42, 0, 221, 60, 54, 25, 223, 126, 76, 191, 30, 35, 62, 234, 140, 172, 143, 160, 210, 109, 180, 231, 202, 10, 132, 218, 100, 85, 34, 135, 190, 14, 190, 33, 156, 52, 250, 201, 155, 108, 245, 55, 111, 184, 201, 203, 56, 234, 160, 16, 130, 63, 124, 215, 63, 3, 169, 133, 199, 129, 79, 72, 125, 236, 40, 178, 143, 52, 96, 108, 71, 176, 41, 119, 74, 170, 108, 53, 167, 95, 196, 135, 156, 57, 24, 79, 252, 228, 255, 210, 185, 20, 114, 189, 164, 57, 136, 80, 147, 32, 90, 97, 196, 28, 130, 203, 185, 84, 206, 116, 163, 15, 29, 248, 102, 135, 25, 68, 224, 241, 8, 209, 237, 121, 16, 240, 3, 128, 231, 185, 86, 30, 233, 11, 33, 160, 117, 83, 83, 146, 12, 165, 77, 154, 6, 22, 101, 148, 69, 115, 49, 46, 241, 98, 253, 77, 183, 17, 175, 28, 33, 134, 95, 237, 28, 101, 103, 163, 104, 27, 211, 176, 225, 183, 122, 46, 201, 103, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 60, 23, 2, 212, 56, 84, 60, 243, 174, 249, 206, 240, 229, 183, 215, 70, 103, 242, 49, 149, 106, 173, 170, 175, 170, 215, 51, 254, 24, 181, 170, 173, 51, 223, 61, 39, 177, 89, 7, 118, 58, 134, 124, 234, 139, 223, 189, 35, 28, 170, 182, 28, 142, 65, 220, 222, 7, 1, 255, 13, 128, 247, 185, 214, 158, 169, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 49, 2, 126, 3, 224, 141, 47, 190, 167, 254, 3, 16, 56, 121, 68, 91, 79, 100, 249, 180, 191, 30, 207, 118, 58, 84, 249, 9, 126, 190, 174, 21, 83, 56, 164, 136, 39, 194, 7, 121, 216, 153, 41, 250, 213, 234, 117, 52, 189, 158, 118, 25, 83, 111, 9, 28, 99, 86, 180, 57, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 20, 4, 84, 199, 104, 60, 122, 243, 81, 242, 45, 42, 223, 124, 133, 62, 222, 26, 16, 165, 70, 194, 246, 216, 113, 94, 127, 105, 92, 119, 105, 56, 172, 26, 47, 70, 139, 12, 225, 4, 221, 63, 241, 151, 94, 20, 159, 116, 28, 113, 200, 161, 64, 119, 160, 232, 56, 110, 212, 139, 164, 113, 123, 109, 4, 226, 1, 0, 191, 26, 227, 183, 234, 181, 231, 234, 217, 129, 0, 151, 219, 237, 15, 32, 0, 208, 235, 136, 219, 249, 88, 112, 243, 156, 180, 86, 223, 33, 99, 107, 63, 196, 233, 50, 237, 116, 13, 252, 138, 69, 106, 57, 30, 54, 140, 190, 137, 225, 240, 192, 191, 251, 252, 222, 26, 113, 154, 141, 114, 72, 214, 200, 107, 212, 146, 68, 203, 139, 190, 246, 129, 161, 115, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 158, 29, 129, 220, 225, 227, 148, 181, 2, 52, 143, 168, 4, 38, 143, 238, 158, 140, 79, 212, 24, 138, 9, 80, 130, 29, 7, 85, 5, 245, 7, 63, 232, 196, 67, 203, 39, 72, 182, 41, 247, 254, 194, 146, 121, 161, 39, 71, 6, 14, 61, 149, 17, 62, 23, 21, 210, 30, 168, 160, 73, 137, 24, 71, 191, 91, 159, 113, 97, 203, 187, 110, 209, 112, 159, 182, 17, 58, 115, 157, 48, 76, 128, 166, 220, 116, 149, 109, 232, 37, 94, 208, 233, 120, 180, 244, 190, 27, 95, 248, 115, 173, 184, 22, 80, 14, 186, 21, 246, 80, 253, 144, 251, 94, 255, 199, 110, 45, 253, 12, 4, 252, 6, 192, 207, 184, 14, 30, 197, 187, 34, 208, 22, 93, 109, 4, 44, 180, 172, 182, 44, 186, 59, 29, 170, 112, 29, 11, 51, 174, 253, 96, 95, 233, 242, 224, 131, 164, 30, 90, 173, 54, 77, 109, 86, 151, 49, 216, 229, 163, 24, 83, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 60, 4, 84, 199, 104, 100, 212, 48, 143, 54, 249, 234, 147, 127, 81, 106, 164, 170, 133, 30, 161, 231, 245, 151, 198, 117, 151, 134, 195, 170, 241, 98, 228, 200, 16, 78, 208, 49, 157, 33, 46, 189, 236, 248, 164, 227, 136, 67, 14, 5, 186, 3, 69, 199, 113, 163, 94, 36, 141, 219, 107, 35, 224, 191, 1, 240, 218, 215, 215, 179, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 144, 8, 248, 13, 0, 255, 34, 24, 129, 159, 130, 0, 143, 105, 105, 241, 104, 54, 159, 206, 234, 41, 237, 25, 45, 183, 122, 178, 155, 65, 227, 105, 46, 57, 198, 83, 93, 212, 136, 151, 135, 62, 217, 231, 113, 242, 120, 164, 60, 169, 162, 160, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 248, 89, 8, 80, 215, 212, 167, 243, 171, 198, 209, 8, 203, 38, 233, 146, 94, 214, 68, 248, 84, 45, 196, 167, 253, 250, 244, 31, 90, 122, 213, 73, 202, 213, 245, 138, 43, 155, 250, 22, 85, 4, 244, 172, 223, 91, 186, 30, 147, 252, 72, 74, 125, 40, 219, 65, 31, 66, 154, 226, 4, 205, 79, 248, 225, 99, 136, 41, 15, 251, 206, 147, 35, 219, 85, 131, 28, 76, 95, 9, 1, 63, 0, 120, 165, 171, 249, 138, 115, 209, 130, 196, 220, 224, 63, 220, 20, 180, 211, 107, 137, 212, 225, 21, 186, 223, 153, 199, 160, 248, 201, 155, 118, 184, 188, 121, 191, 164, 251, 29, 253, 169, 159, 226, 115, 104, 87, 250, 159, 195, 62, 218, 53, 6, 254, 191, 174, 115, 115, 248, 53, 86, 125, 232, 197, 70, 166, 135, 0, 36, 44, 126, 101, 188, 245, 170, 219, 182, 145, 48, 245, 200, 64, 255, 235, 103, 201, 101, 165, 15, 188, 220, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 87, 67, 32, 119, 120, 213, 3, 208, 207, 28, 1, 10, 121, 230, 113, 200, 65, 93, 194, 207, 170, 93, 144, 122, 83, 159, 168, 147, 239, 185, 26, 191, 98, 234, 230, 29, 185, 50, 213, 45, 63, 60, 22, 101, 135, 30, 191, 6, 80, 54, 245, 199, 119, 229, 185, 203, 62, 163, 245, 61, 250, 101, 171, 187, 241, 242, 95, 252, 69, 103, 161, 88, 58, 234, 197, 28, 79, 214, 114, 244, 93, 35, 91, 227, 91, 227, 70, 167, 177, 231, 248, 82, 136, 136, 229, 28, 9, 66, 64, 30, 116, 214, 163, 217, 37, 217, 249, 97, 140, 248, 65, 199, 88, 78, 105, 229, 38, 7, 254, 162, 21, 91, 186, 201, 71, 154, 76, 150, 121, 226, 52, 198, 150, 246, 168, 93, 47, 104, 58, 100, 208, 241, 68, 252, 73, 219, 213, 164, 207, 38, 6, 135, 236, 115, 208, 178, 190, 237, 217, 15, 0, 222, 246, 210, 123, 226, 63, 14, 1, 173, 94, 185, 136, 214, 90, 56, 214, 212, 185, 126, 78, 57, 6, 159, 60, 116, 76, 36, 215, 233, 177, 192, 77, 221, 176, 35, 175, 67, 27, 40, 43, 161, 86, 70, 81, 146, 41, 26, 222, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 63, 7, 129, 170, 82, 170, 150, 81, 109, 163, 209, 221, 171, 96, 228, 175, 135, 9, 203, 191, 242, 253, 180, 55, 0, 152, 87, 142, 113, 12, 148, 218, 111, 234, 176, 133, 60, 84, 85, 231, 13, 89, 53, 225, 189, 123, 248, 202, 70, 162, 237, 152, 6, 51, 175, 136, 128, 255, 6, 192, 43, 94, 85, 207, 201, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 111, 66, 160, 127, 80, 242, 77, 41, 157, 198, 8, 252, 37, 4, 252, 6, 192, 95, 2, 222, 221, 190, 23, 2, 251, 131, 213, 171, 114, 60, 202, 77, 91, 156, 230, 107, 89, 232, 242, 8, 204, 20, 120, 100, 83, 13, 162, 205, 60, 117, 232, 87, 211, 6, 6, 221, 15, 162, 105, 210, 151, 228, 179, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 254, 22, 2, 170, 78, 110, 215, 56, 170, 111, 52, 202, 138, 82, 140, 62, 241, 151, 117, 189, 1, 41, 141, 226, 171, 6, 194, 191, 222, 6, 160, 182, 210, 219, 6, 162, 171, 222, 194, 70, 174, 69, 43, 223, 234, 119, 248, 134, 34, 63, 173, 191, 70, 35, 108, 218, 73, 129, 95, 167, 240, 209, 240, 73, 90, 164, 98, 196, 7, 205, 28, 59, 29, 185, 102, 126, 201, 248, 141, 35, 200, 161, 93, 211, 31, 156, 44, 60, 45, 2, 255, 151, 191, 72, 227, 119, 30, 194, 5, 31, 226, 95, 154, 20, 35, 232, 237, 239, 142, 166, 143, 196, 252, 61, 4, 116, 237, 68, 241, 239, 252, 189, 248, 15, 216, 73, 251, 133, 212, 135, 80, 9, 141, 94, 44, 160, 163, 59, 92, 14, 199, 16, 50, 52, 79, 53, 7, 177, 105, 206, 147, 2, 67, 56, 172, 192, 155, 76, 120, 254, 163, 36, 104, 111, 227, 225, 64, 168, 147, 27, 126, 165, 173, 113, 41, 98, 109, 68, 181, 41, 229, 230, 21, 223, 31, 203, 174, 161, 153, 67, 222, 21, 155, 62, 12, 167, 178, 199, 57, 252, 210, 183, 229, 136, 119, 201, 82, 63, 54, 187, 178, 43, 62, 232, 140, 95, 89, 170, 151, 179, 249, 172, 254, 205, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 207, 137, 64, 238, 240, 185, 255, 143, 58, 0, 254, 226, 136, 186, 224, 66, 119, 230, 167, 90, 34, 104, 192, 193, 65, 171, 239, 216, 195, 192, 167, 106, 218, 203, 175, 170, 161, 226, 113, 171, 90, 167, 60, 57, 87, 208, 178, 151, 166, 180, 203, 75, 220, 186, 39, 210, 125, 72, 167, 240, 58, 70, 230, 72, 148, 227, 162, 78, 202, 247, 238, 195, 222, 169, 18, 7, 85, 159, 125, 44, 50, 75, 71, 118, 248, 78, 229, 115, 164, 53, 111, 252, 104, 202, 93, 82, 63, 203, 99, 232, 212, 209, 160, 199, 107, 19, 202, 28, 59, 215, 76, 215, 173, 83, 250, 228, 71, 163, 91, 253, 110, 105, 231, 120, 10, 155, 74, 203, 8, 248, 218, 127, 134, 35, 136, 223, 41, 182, 59, 141, 16, 218]);
fileData10.push.apply(fileData10, [54, 187, 82, 222, 60, 43, 82, 78, 31, 207, 160, 200, 103, 164, 126, 3, 224, 25, 175, 154, 199, 252, 116, 8, 176, 204, 60, 116, 176, 208, 226, 27, 39, 191, 1, 240, 116, 151, 217, 3, 54, 2, 70, 192, 8, 24, 1, 35, 96, 4, 190, 25, 1, 234, 34, 154, 234, 40, 241, 169, 156, 167, 253, 6, 174, 162, 20, 115, 249, 64, 96, 247, 151, 12, 173, 15, 59, 254, 198, 27, 0, 76, 50, 199, 92, 195, 207, 122, 176, 207, 55, 111, 164, 67, 49, 204, 7, 123, 234, 226, 4, 205, 58, 82, 180, 235, 224, 37, 143, 60, 248, 239, 13, 221, 153, 126, 247, 179, 252, 156, 8, 248, 111, 0, 60, 231, 117, 243, 168, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 248, 35, 8, 232, 1, 193, 31, 233, 204, 157, 24, 129, 223, 138, 128, 223, 0, 248, 173, 240, 58, 185, 17, 184, 131, 128, 30, 177, 94, 161, 245, 38, 192, 120, 90, 27, 62, 83, 110, 105, 51, 52, 246, 37, 108, 188, 3, 117, 37, 85, 232, 183, 215, 247, 243, 133, 169, 245, 164, 251, 50, 238, 210, 214, 186, 53, 107, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 31, 135, 0, 245, 76, 125, 138, 127, 107, 104, 212, 56, 213, 228, 143, 134, 90, 137, 159, 245, 22, 0, 62, 242, 45, 125, 201, 226, 171, 238, 194, 235, 88, 71, 169, 230, 218, 245, 183, 229, 158, 39, 249, 26, 92, 190, 145, 127, 144, 17, 162, 101, 237, 7, 29, 7, 76, 242, 157, 194, 199, 112, 83, 47, 191, 160, 189, 117, 27, 188, 219, 107, 35, 240, 132, 15, 0, 246, 95, 75, 253, 163, 124, 237, 11, 229, 217, 125, 12, 1, 45, 100, 31, 139, 90, 139, 227, 71, 226, 244, 27, 169, 62, 187, 124, 204, 19, 150, 121, 7, 95, 188, 190, 69, 117, 141, 174, 17, 41, 187, 50, 142, 175, 10, 228, 114, 30, 58, 204, 44, 238, 208, 67, 211, 6, 117, 242, 239, 4, 213, 136, 59, 132, 164, 80, 254, 43, 95, 229, 89, 27, 200, 24, 113, 58, 168, 211, 160, 43, 224, 50, 101, 106, 228, 123, 197, 108, 181, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 116, 8, 104, 251, 159, 101, 1, 219, 189, 202, 130, 193, 103, 205, 129, 142, 217, 13, 219, 52, 73, 158, 148, 239, 210, 87, 89, 145, 180, 66, 148, 226, 104, 195, 175, 217, 43, 61, 154, 163, 190, 251, 116, 94, 55, 248, 124, 119, 95, 165, 17, 76, 254, 239, 233, 131, 102, 255, 250, 59, 74, 17, 120, 24, 87, 22, 70, 140, 21, 199, 126, 168, 243, 174, 131, 151, 254, 72, 83, 29, 167, 252, 110, 60, 38, 248, 160, 117, 26, 190, 93, 134, 255, 72, 219, 250, 61, 206, 33, 18, 221, 177, 111, 230, 221, 61, 71, 130, 207, 237, 150, 51, 10, 23, 30, 142, 208, 234, 33, 201, 154, 100, 231, 210, 225, 47, 158, 246, 217, 104, 236, 127, 113, 72, 223, 216, 245, 19, 62, 0, 248, 198, 217, 59, 149, 17, 248, 219, 8, 220, 89, 81, 247, 5, 122, 202, 109, 220, 153, 130, 61, 5, 6, 26, 228, 252, 168, 133, 182, 191, 9, 80, 75, 173, 244, 123, 28, 139, 221, 209, 214, 186, 53, 107, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 31, 135, 0, 53, 80, 213, 47, 183, 134, 182, 110, 232, 168, 139, 42, 130, 154, 135, 200, 85, 255, 200, 82, 153, 74, 175, 218, 169, 104, 213, 78, 216, 143, 181, 215, 177, 126, 58, 218, 118, 223, 75, 121, 230, 171, 201, 248, 13, 128, 186, 0, 62, 127, 19, 2, 254, 27, 0, 223, 4, 164, 211, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 248, 201, 8, 248, 13, 128, 159, 124, 117, 60, 182, 183, 65, 224, 240, 100, 56, 132, 195, 87, 2, 226, 163, 253, 245, 127, 4, 8, 219, 193, 30, 50, 15, 164, 209, 5, 205, 183, 0, 58, 106, 245, 232, 186, 107, 204, 27, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 197, 16, 248, 104, 193, 211, 253, 197, 239, 20, 136, 208, 233, 211, 252, 122, 67, 160, 222, 164, 204, 210, 107, 251, 212, 95, 58, 249, 73, 254, 0, 29, 245, 92, 214, 117, 209, 115, 214, 120, 208, 208, 211, 166, 92, 226, 65, 159, 46, 173, 30, 204, 186, 144, 24, 14, 244, 28, 93, 22, 31, 212, 237, 189, 16, 56, 62, 0, 224, 183, 130, 223, 115, 40, 77, 188, 254, 61, 148, 214, 103, 35, 112, 5, 129, 253, 23, 102, 255, 133, 58, 134, 233, 215, 76, 20, 107, 231, 143, 222, 231, 18, 254, 138, 17, 61, 247, 252, 156, 86, 249, 69, 201, 162, 126, 68, 187, 174, 122, 169, 239, 231, 227, 153, 55, 238, 162, 17, 48, 23, 224, 201, 151, 207, 193, 64, 15, 36, 215, 81, 73, 175, 156, 43, 209, 191, 249, 69, 181, 224, 227, 18, 40, 44, 41, 230, 76, 53, 54, 47, 190, 195, 214, 54, 178, 250, 71, 46, 157, 124, 161, 210, 65, 37, 7, 141, 221, 228, 32, 167, 13, 123, 205, 185, 54, 151, 146, 134, 102, 140, 155, 40, 154, 104, 73, 62, 27, 1, 35, 96, 4, 140, 128, 17, 48, 2, 207, 141, 64, 214, 5, 99, 123, 191, 172, 115, 168, 29, 206, 142, 81, 79, 200, 22, 16, 100, 158, 107, 148, 250, 67, 190, 208, 107, 126, 87, 245, 170, 95, 206, 99, 35, 76, 37, 209, 184, 201, 166, 166, 93, 49, 235, 86, 72, 92, 217, 103, 16, 5, 216, 60, 130, 61, 12, 80, 49, 161, 207, 22, 242, 193, 62, 212, 232, 112, 21, 133, 13, 62, 85, 35, 5, 50, 173, 106, 172, 160, 161, 79, 123, 232, 51, 44, 132, 244, 73, 101, 58, 14, 131, 2, 135, 35, 222, 168, 6, 168, 201, 102, 86, 56, 230, 45, 26, 226, 89, 171, 128, 202, 17, 246, 53, 174, 145, 22, 221, 56, 52, 148, 203, 172, 242, 128, 86, 91, 156, 52, 183, 41, 185, 221, 62, 142, 192, 241, 1, 192, 199, 227, 29, 97, 4, 140, 192, 55, 32, 208, 151, 192, 92, 139, 199, 34, 156, 183, 210, 161, 240, 27, 0, 223, 0, 178, 83, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 138, 192, 189, 91, 193, 91, 118, 217, 118, 10, 84, 232, 184, 117, 213, 193, 141, 45, 252, 186, 193, 189, 228, 239, 217, 111, 196, 70, 50, 110, 234, 233, 128, 188, 116, 159, 52, 79, 195, 54, 250, 198, 92, 53, 227, 242, 75, 153, 24, 226, 71, 44, 161, 41, 163, 131, 151, 44, 62, 168, 219, 123, 33, 224, 191, 1, 240, 94, 215, 219, 179, 53, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 55, 69, 192, 111, 0, 188, 233, 133, 247, 180, 127, 0, 2, 60, 130, 165, 205, 199, 177, 119, 248, 107, 230, 136, 207, 167, 188, 162, 215, 252, 166, 94, 79, 177, 121, 196, 92, 255, 191, 91, 158, 102, 175, 198, 128, 186, 188, 44, 230, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 243, 17, 216, 235, 152, 93, 238, 51, 144, 173, 168, 106, 34, 42, 36, 125, 242, 47, 143, 85, 31, 161, 57, 63, 168, 162, 176, 65, 239, 191, 45, 16, 62, 170, 223, 26, 37, 117, 230, 65, 87, 233, 56, 167, 111, 210, 148, 66, 222, 252, 14, 245, 32, 177, 4, 115, 48, 84, 218, 144, 33, 240, 105, 135, 77, 5, 74, 183, 119, 64, 224, 9, 31, 0, 232, 55, 248, 29, 46, 207, 111, 152, 227, 14, 223, 183, 254, 131, 87, 50, 81, 198, 223, 249, 223, 48, 159, 59, 41, 233, 93, 7, 174, 226, 23, 205, 151, 236, 67, 95, 63, 215, 211, 17, 65, 124, 69, 150, 212, 103, 39, 205, 73, 6, 153, 114, 133, 15, 33, 232, 225, 111, 3, 204, 222, 53, 138, 43, 52, 227, 115, 16, 58, 85, 103, 249, 253, 255, 96, 185, 182, 234, 43, 175, 115, 156, 216, 9, 48, 196, 119, 255, 203, 1, 93, 243, 69, 12, 25, 43, 234, 218, 72, 218, 166, 21, 10, 109, 126, 199, 77, 108, 33, 113, 24, 45, 115, 107, 63, 149, 53, 18, 103, 246, 78, 225, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 103, 71, 32, 235, 7, 78, 209, 178, 84, 9, 62, 255, 102, 80, 210, 161, 147, 109, 167, 221, 231, 192, 71, 253, 49, 100, 74, 8, 106, 16, 181, 16, 179, 65, 215, 161, 218, 101, 217, 146, 83, 129, 51, 194, 151, 127, 143, 173, 24, 157, 213, 19, 190, 139, 87, 61, 84, 99, 185, 200, 19, 138, 195, 120, 211, 33, 162, 167, 35, 188, 142, 72, 60, 249, 208, 81, 163, 33, 39, 29, 157, 18, 71, 11, 117, 54, 146, 211, 36, 139, 9, 53, 150, 44, 243, 176, 167, 16, 100, 80, 169, 52, 54, 212, 28, 156, 146, 194, 14, 102, 250, 96, 187, 114, 100, 144, 2, 87, 134, 145, 21, 131, 142, 96, 255, 74, 155, 131, 187, 210, 251, 4, 240, 138, 93, 234, 71, 253, 228, 255, 92, 244, 9, 31, 0, 60, 23, 192, 30, 173, 17, 184, 138, 128, 214, 40, 173, 149, 247, 104, 36, 58, 117, 9, 101, 238, 35, 162, 215, 252, 166, 94, 155, 24, 139, 155, 223, 0, 8, 16, 220, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 151, 66, 96, 191, 129, 219, 229, 62, 89, 217, 138, 234, 97, 195, 179, 188, 1, 192, 76, 242, 134, 29, 26, 83, 72, 94, 84, 133, 163, 166, 56, 100, 8, 69, 37, 190, 201, 14, 90, 146, 207, 175, 142, 128, 255, 6, 192, 171, 95, 97, 207, 207, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 183, 68, 128, 123, 123, 29, 111, 9, 128, 39, 125, 129, 128, 223, 0, 184, 128, 196, 10, 35, 240, 247, 16, 208, 2, 253, 216, 171, 87, 107, 156, 249, 224, 118, 60, 221, 205, 28, 169, 8, 59, 79, 128, 211, 77, 143, 126, 161, 199, 131, 39, 221, 245, 148, 91, 249, 228, 43, 217, 212, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 175, 132, 64, 175, 117, 196, 95, 163, 204, 27, 91, 63, 110, 97, 161, 60, 229, 163, 146, 44, 235, 179, 80, 37, 141, 211, 172, 245, 194, 253, 240, 169, 61, 225, 216, 9, 199, 6, 205, 211, 36, 249, 73, 127, 170, 155, 254, 226, 211, 127, 197, 226, 56, 26, 238, 35, 100, 82, 217, 68, 119, 187, 100, 217, 77, 159, 31, 129, 195, 3, 0, 46, 240, 248, 157, 203, 153, 137, 135, 158, 183, 143, 71, 156, 231, 177, 214, 8, 60, 136, 0, 191, 114, 125, 37, 146, 60, 86, 81, 253, 239, 242, 234, 157, 166, 48, 166, 189, 40, 182, 41, 23, 179, 114, 225, 71, 27, 20, 130, 123, 182, 20, 80, 12, 121, 40, 15, 223, 130, 15, 91, 126, 247, 61, 130, 52, 134, 207, 208, 218, 1, 122, 135, 71, 126, 73, 199, 111, 218, 103, 239, 57, 6, 6, 23, 255, 98, 227, 203, 96, 249, 157, 125, 118, 131, 144, 43, 110, 208, 80, 37, 20, 152, 194, 160, 175, 156, 17, 57, 33, 202, 152, 245, 85, 129, 204, 133, 110, 244, 81, 114, 134, 143, 220, 240, 99, 238, 197, 229, 185, 60, 106, 4, 140, 161, 70, 64, 79, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 179, 35, 192, 222, 158, 109, 212, 7, 177, 249, 207, 82, 134, 154, 97, 201, 163, 134, 152, 186, 17, 48, 100, 42, 4, 53, 84, 52, 153, 118, 90, 182, 229, 47, 249, 24, 87, 21, 199, 138, 221, 229, 99, 126, 114, 236, 173, 242, 17, 119, 18, 27, 245, 85, 253, 157, 131, 65, 85, 119, 29, 124, 43, 46, 171, 159, 188, 59, 167, 0, 27, 71, 31, 62, 29, 33, 239, 148, 1, 213, 32, 58, 60, 104, 163, 111, 70, 85, 233, 20, 154, 53, 90, 8, 137, 251, 160, 169, 139, 28, 85, 147, 102, 96, 8, 37, 139, 202, 166, 186, 149, 4, 153, 35, 41, 206, 43, 94, 62, 69, 153, 187, 124, 241, 33, 255, 229, 129, 254, 215, 240, 155, 52, 147, 14, 95, 77, 0, 58, 219, 158, 8, 131, 116, 226, 59, 61, 4, 167, 39, 86, 181, 211, 46, 100, 124, 67, 122, 120, 0, 240, 134, 243, 247, 148, 141, 192, 143, 66, 64, 75, 27, 139, 229, 217, 113, 88, 251, 218, 200, 137, 203, 157, 32, 72, 230, 72, 69, 233, 138, 213, 194, 8, 61, 30, 108, 33, 126, 3, 32, 96, 113, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 222, 4, 1, 213, 69, 76, 87, 252, 53, 42, 159, 94, 63, 221, 130, 73, 121, 202, 71, 37, 89, 214, 103, 161, 74, 26, 167, 89, 231, 133, 123, 242, 141, 226, 132, 31, 67, 75, 154, 167, 193, 111, 250, 97, 186, 252, 254, 255, 136, 197, 190, 31, 164, 80, 28, 124, 111, 210, 239, 180, 251, 152, 127, 110, 4, 252, 55, 0, 158, 251, 250, 121, 244, 70, 224, 55, 33, 16, 187, 198, 220, 16, 127, 83, 23, 78, 107, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 31, 69, 192, 111, 0, 252, 81, 184, 221, 153, 17, 248, 0, 2, 122, 92, 171, 144, 144, 231, 211, 226, 208, 201, 156, 111, 147, 117, 249, 192, 243, 250, 89, 189, 130, 86, 84, 114, 81, 110, 242, 235, 211, 127, 110, 248, 149, 83, 254, 200, 242, 75, 243, 236, 179, 36, 159, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 183, 17, 168, 26, 230, 248, 193, 133, 116, 26, 219, 45, 89, 182, 91, 20, 155, 236, 228, 220, 101, 245, 243, 57, 58, 107, 186, 8, 135, 167, 37, 141, 83, 210, 209, 181, 108, 40, 197, 203, 158, 53, 34, 113, 195, 54, 107, 70, 228, 126, 116, 31, 245, 19, 212, 237, 125, 16, 240, 3, 128, 247, 185, 214, 127, 96, 166, 172, 78, 44, 67, 90, 32, 197, 67, 159, 177, 105, 220, 141, 194, 246, 227, 214, 180, 20, 134, 207, 224, 15, 11, 112, 8, 37, 143, 239, 206, 167, 220, 248, 8, 202, 31, 233, 149, 36, 251, 108, 131, 232, 253, 204, 13, 105, 108, 76, 186, 36, 243, 154, 140, 1, 235, 18, 229, 208, 120, 4, 192, 16, 165, 132, 142, 67, 227, 14, 185, 236, 165, 159, 189, 243, 29, 184, 140, 141, 19, 148, 9, 141, 113, 50, 246, 178, 162, 169, 104, 168, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 58, 8, 228, 206, 63, 182, 247, 89, 6, 140, 114, 224, 32, 51, 229, 208, 167, 107, 171, 31, 210, 21, 253, 56, 120, 151, 189, 226, 162, 230, 72, 35, 113, 139, 79, 219, 168, 48, 100, 86, 237, 137, 156, 37, 12, 12, 33, 65, 51, 20, 138, 237, 86, 171, 18, 103, 150, 64, 153, 103, 248, 19, 91, 71, 213, 67, 151, 178, 244, 131, 134, 195, 225, 111, 4, 228, 156, 106, 94, 57, 38, 198, 63, 230, 137, 76, 215, 115, 128, 36, 87, 75, 67, 8, 93, 135, 77, 122, 249, 97, 223, 117, 178, 237, 84, 185, 160, 227, 200, 49, 5, 95, 99, 107, 116, 185, 200, 245, 195, 148, 97, 209, 205, 163, 195, 11, 87, 183, 223, 140, 128, 31, 0, 252, 102, 128, 157, 222, 8, 124, 26, 1, 45, 204, 74, 160, 133, 25, 26, 186, 121, 196, 138, 58, 249, 174, 79, 94, 27, 18, 62, 226, 23, 101, 57, 174, 55, 0, 170, 147, 202, 179, 236, 138, 41, 235, 234, 71, 178, 169, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 254, 46, 2, 186, 181, 20, 101, 52, 157, 191, 39, 203, 247, 22, 197, 38, 187, 242, 117, 25, 221, 231, 219, 94, 199, 145, 9, 29, 167, 164, 163, 171, 228, 187, 94, 126, 97, 191, 184, 121, 39, 246, 236, 32, 6, 253, 136, 133, 186, 189, 23, 2, 254, 27, 0, 239, 117, 189, 61, 219, 183, 69, 128, 157, 163, 111, 84, 146, 235, 102, 31, 91, 125, 70, 255, 182, 0, 121, 226, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 229, 17, 240, 27, 0, 47, 127, 137, 61, 193, 159, 138, 128, 158, 184, 206, 39, 176, 193, 156, 62, 169, 61, 211, 199, 164, 102, 220, 25, 175, 255, 29, 13, 175, 151, 37, 143, 255, 217, 39, 251, 251, 27, 0, 231, 62, 21, 11, 146, 235, 33, 2, 253, 95, 107, 216, 240, 148, 143, 248, 21, 125, 45, 210, 122, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 124, 39, 2, 170, 62, 68, 201, 221, 249, 51, 249, 107, 253, 223, 172, 209, 34, 245, 193, 30, 2, 255, 75, 230, 84, 6, 165, 22, 156, 34, 50, 67, 201, 211, 36, 233, 48, 84, 211, 142, 60, 191, 238, 48, 226, 250, 39, 253, 45, 141, 210, 161, 202, 150, 177, 193, 41, 231, 80, 155, 188, 40, 2, 255, 119, 248, 253, 231, 183, 141, 38, 186, 243, 105, 244, 201, 8, 24, 129, 107, 8, 244, 5, 244, 58, 31, 223, 132, 103, 69, 142, 101, 54, 169, 238, 250, 115, 217, 61, 139, 162, 55, 233, 251, 63, 206, 62, 10, 244, 237, 8, 247, 140, 64, 197, 67, 128, 176, 85, 134, 206, 19, 18, 14, 97, 248, 149, 15, 9, 240, 104, 57, 66, 162, 161, 173, 22, 177, 33, 232, 65, 2, 190, 75, 46, 191, 146, 241, 174, 111, 251, 147, 173, 120, 162, 164, 77, 165, 79, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 11, 32, 144, 117, 66, 214, 7, 49, 25, 104, 59, 74, 166, 94, 160, 230, 169, 186, 161, 251, 192, 167, 92, 68, 226, 70, 35, 46, 237, 69, 131, 13, 185, 42, 12, 248, 170, 93, 22, 197, 55, 107, 148, 164, 58, 117, 127, 233, 68, 101, 187, 69, 177, 45, 187, 106, 161, 57, 174, 156, 91, 205, 143, 249, 167, 111, 222, 141, 71, 76, 210, 80, 165, 243, 144, 201, 37, 61, 53, 24, 241, 73, 35, 50, 107, 178, 234, 141, 92, 217, 107, 158, 200, 59, 90, 246, 33, 33, 168, 236, 10, 200, 190, 134, 62, 121, 240, 15, 57, 78, 244, 37, 138, 174, 244, 216, 234, 56, 211, 201, 150, 52, 220, 38, 133, 119, 123, 58, 4, 252, 6, 192, 211, 93, 50, 15, 248, 85, 16, 96, 157, 165, 141, 245, 54, 23, 96, 45, 186, 119, 105, 143, 59, 227, 115, 243, 104, 27, 74, 236, 12, 107, 179, 90, 124, 237, 24, 146, 53, 22, 201, 69, 241, 169, 88, 70, 171, 29, 230, 246, 218, 207, 156, 240, 212, 28, 197, 175, 104, 114, 185, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 119, 35, 160, 234, 67, 148, 254, 58, 127, 38, 127, 109, 76, 179, 182, 139, 52, 119, 249, 112, 136, 178, 173, 28, 131, 82, 3, 78, 17, 153, 161, 228, 105, 146, 116, 24, 170, 105, 71, 30, 247, 246, 243, 217, 66, 214, 147, 43, 92, 105, 38, 37, 53, 45, 99, 7, 77, 133, 79, 47, 141, 128, 255, 6, 192, 75, 95, 94, 79, 206, 8, 116, 4, 216, 78, 104, 80, 29, 103, 50, 186, 213, 180, 193, 160, 209, 6, 177, 172, 230, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 22, 4, 252, 6, 192, 179, 92, 41, 143, 243, 173, 17, 208, 141, 247, 199, 168, 62, 185, 191, 78, 245, 32, 160, 242, 158, 251, 225, 163, 183, 7, 234, 34, 32, 175, 135, 1, 103, 60, 126, 232, 127, 113, 138, 150, 252, 160, 169, 240, 201, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 9, 4, 114, 171, 143, 19, 180, 127, 226, 156, 242, 201, 12, 211, 127, 232, 175, 249, 156, 132, 125, 64, 213, 63, 240, 80, 152, 116, 146, 59, 149, 237, 30, 237, 49, 223, 203, 11, 7, 97, 51, 169, 152, 49, 52, 137, 128, 157, 124, 232, 165, 131, 126, 246, 248, 222, 217, 56, 219, 79, 71, 224, 255, 242, 55, 69, 191, 239, 252, 214, 192, 235, 55, 73, 188, 236, 63, 125, 54, 30, 223, 95, 70, 64, 191, 56, 162, 12, 167, 243, 127, 121, 120, 127, 180, 251, 49, 111, 118, 66, 48, 200, 29, 81, 252, 24, 72, 83, 151, 153, 239, 101, 157, 31, 51, 126, 164, 32, 67, 120, 142, 68, 139, 148, 166, 110, 216, 203, 167, 174, 64, 253, 33, 64, 221, 200, 163, 27, 62, 255, 254, 23, 255, 230, 131, 103, 44, 153, 83, 62, 131, 242, 157, 180, 212, 87, 31, 249, 29, 181, 100, 89, 20, 226, 224, 93, 179, 222, 114, 0, 140, 172, 122, 168, 49, 138, 39, 34, 29, 122, 132, 121, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 149, 16, 216, 222, 67, 95, 223, 255, 143, 170, 32, 139, 138, 168, 6, 178, 222, 161, 142, 136, 137, 199, 145, 117, 72, 163, 183, 224, 160, 170, 168, 166, 26, 37, 100, 84, 188, 71, 15, 37, 39, 124, 82, 228, 161, 159, 113, 161, 59, 240, 103, 50, 186, 104, 228, 227, 224, 148, 239, 233, 23, 175, 58, 138, 46, 22, 191, 198, 179, 116, 53, 140, 250, 251, 7, 204, 59, 100, 14, 226, 26, 175, 15, 76, 210, 64, 23, 106, 217, 119, 8, 4, 204, 22, 66, 142, 133, 4, 56, 52, 163, 234, 50, 84, 82, 139, 191, 65, 231, 88, 194, 231, 130, 39, 21, 250, 145, 18, 250, 211, 218, 62, 38, 193, 246, 211, 198, 249, 83, 198, 227, 55, 0, 126, 202, 149, 240, 56, 140, 192, 13, 4, 250, 162, 251, 56, 207, 70, 116, 251, 168, 46, 181, 97, 177, 184, 159, 251, 179, 241, 97, 187, 244, 63, 110, 8, 26, 27, 126, 240, 218, 208, 146, 31, 58, 108, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 107, 32, 192, 30, 207, 166, 15, 221, 111, 20, 211, 182, 77, 179, 235, 50, 102, 179, 127, 93, 92, 245, 202, 202, 37, 221, 210, 44, 78, 182, 123, 116, 69, 124, 55, 39, 28, 132, 205, 164, 98, 198, 208, 36, 10, 111, 74, 51, 233, 160, 159, 61, 190, 123, 62, 206, 247, 179, 17, 240, 3, 128, 159, 125, 125, 60, 58, 35, 240, 205, 8, 176, 131, 156, 29, 234, 102, 236, 48, 18, 7, 221, 55, 151, 205, 108, 209, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 39, 64, 192, 15, 0, 158, 224, 34, 121, 136, 111, 132, 192, 120, 116, 123, 241, 250, 85, 232, 15, 186, 128, 228, 242, 41, 175, 62, 189, 15, 91, 188, 26, 118, 237, 211, 252, 174, 215, 195, 128, 149, 235, 60, 110, 189, 1, 80, 15, 8, 240, 191, 213, 176, 227, 41, 63, 241, 231, 143, 23, 110, 101, 178, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 102, 4, 86, 141, 177, 234, 2, 213, 7, 127, 102, 94, 170, 62, 68, 233, 245, 140, 151, 238, 81, 250, 249, 209, 95, 195, 68, 184, 236, 84, 5, 149, 222, 240, 167, 231, 244, 137, 19, 148, 17, 207, 111, 3, 132, 64, 205, 184, 12, 131, 151, 238, 140, 134, 139, 219, 251, 32, 48, 30, 0, 204, 95, 157, 152, 185, 126, 233, 5, 2, 182, 222, 242, 87, 44, 20, 187, 95, 247, 49, 255, 58, 8, 236, 215, 255, 187, 103, 166, 85, 136, 188, 189, 175, 174, 255, 100, 159, 153, 78, 57, 55, 58, 211, 139, 57, 163, 125, 76, 61, 190, 249, 30, 238, 202, 67, 159, 242, 152, 74, 115, 99, 106, 90, 140, 175, 125, 207, 63, 245, 225, 168, 239, 205, 23, 30, 74, 34, 12, 144, 245, 111, 111, 189, 150, 95, 55, 245, 229, 147, 175, 234, 211, 159, 66, 194, 63, 255, 159, 175, 33, 87, 182, 117, 147, 95, 185, 144, 175, 216, 114, 55, 41, 59, 233, 106, 122, 244, 63, 98, 70, 63, 51, 126, 200, 233, 139, 23, 134, 104, 16, 173, 28, 169, 240, 201, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 9, 4, 114, 171, 31, 251, 127, 213, 9, 124, 215, 63, 234, 132, 16, 170, 246, 137, 10, 32, 13, 208, 98, 69, 83, 77, 173, 65, 146, 70, 165, 159, 20, 243, 168, 61, 102, 13, 146, 149, 5, 16, 170, 142, 25, 245, 10, 31, 130, 144, 143, 239, 201, 39, 45, 31, 206, 183, 154, 66, 50, 45, 161, 113, 208, 208, 163, 131, 106, 136, 191, 242, 59, 248, 195, 33, 251, 167, 239, 62, 142, 27, 50, 73, 8, 205, 132, 36, 143, 150, 157, 52, 154, 202, 118, 82, 87, 242, 147, 105, 232, 81, 83, 115, 229, 248, 82, 24, 233, 209, 133, 237, 120, 80, 105, 50, 190, 246, 131, 95, 128, 54, 143, 57, 151, 234, 136, 120, 90, 82, 124, 225, 39, 37, 207, 80, 64, 203, 250, 57, 74, 82, 77, 68, 169, 160, 106, 194, 65, 242, 61, 154, 3, 11, 167, 143, 198, 221, 203, 251, 228, 118, 191, 1, 240, 228, 23, 208, 195, 127, 49, 4, 88, 168, 226, 200, 69, 245, 22, 45, 183, 109, 137, 109, 155, 141, 223, 0, 120, 177, 95, 12, 79, 199, 8, 24, 1, 35, 96, 4, 140, 192, 115, 34, 48, 74, 155, 89, 179, 48, 11, 116, 127, 174, 233, 238, 79, 148, 158, 207, 120, 233, 30, 165, 159, 159, 193, 53, 76, 132, 203, 78, 5, 152, 30, 74, 208, 115, 250, 196, 9, 202, 136, 211, 54, 4, 234, 200, 101, 24, 188, 116, 103, 52, 92, 220, 222, 7, 129, 255, 189, 207, 84, 61, 83, 35, 240, 238, 8, 176, 61, 232, 16, 22, 235, 105, 181, 52, 199, 77, 177, 180, 236, 21, 52, 237, 25, 37, 249, 108, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 51, 33, 224, 55, 0, 158, 233, 106, 121, 172, 175, 131, 192, 126, 39, 29, 114, 62, 173, 141, 25, 234, 102, 187, 79, 54, 223, 8, 192, 134, 95, 167, 113, 63, 159, 242, 136, 187, 228, 199, 91, 1, 241, 88, 184, 94, 247, 58, 210, 122, 61, 46, 116, 249, 198, 0, 185, 142, 118, 201, 60, 20, 128, 87, 59, 140, 33, 4, 245, 155, 140, 156, 76, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 227, 16, 80, 61, 35, 202, 0, 59, 255, 200, 128, 241, 87, 140, 232, 35, 113, 183, 125, 168, 167, 200, 6, 165, 137, 150, 116, 148, 101, 131, 38, 31, 39, 125, 5, 32, 41, 122, 116, 195, 126, 139, 42, 191, 233, 123, 32, 80, 15, 0, 248, 141, 160, 233, 55, 238, 230, 239, 49, 206, 221, 81, 114, 102, 240, 201, 8, 124, 14, 1, 253, 14, 66, 59, 63, 151, 45, 210, 118, 131, 28, 69, 63, 215, 109, 70, 245, 180, 234, 38, 117, 124, 23, 138, 94, 235, 187, 77, 139, 222, 91, 76, 137, 43, 239, 60, 139, 135, 234, 24, 89, 187, 156, 61, 133, 157, 78, 167, 126, 240, 217, 35, 182, 28, 31, 116, 28, 210, 149, 37, 206, 252, 219, 140, 35, 223, 3, 227, 166, 189, 60, 185, 209, 47, 254, 120, 131, 255, 207, 191, 255, 141, 255, 149, 108, 183, 19, 51, 252, 34, 72, 57, 146, 142, 7, 9, 171, 159, 217, 113, 246, 84, 179, 86, 12, 193, 61, 26, 95, 100, 55, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 85, 16, 200, 157, 157, 45, 63, 38, 196, 182, 63, 41, 252, 35, 71, 198, 169, 14, 25, 241, 232, 218, 49, 235, 142, 208, 21, 255, 113, 250, 43, 106, 155, 81, 37, 13, 46, 147, 221, 204, 87, 95, 245, 175, 184, 222, 111, 31, 91, 241, 170, 175, 152, 115, 244, 66, 224, 188, 11, 31, 115, 19, 22, 152, 168, 167, 168, 205, 208, 165, 111, 80, 70, 130, 220, 70, 164, 17, 78, 138, 241, 90, 99, 114, 10, 134, 238, 188, 116, 39, 244, 242, 58, 245, 90, 52, 82, 133, 67, 249, 84, 165, 151, 114, 116, 80, 116, 216, 233, 18, 191, 65, 25, 128, 126, 52, 52, 108, 180, 3, 69, 144, 195, 160, 137, 123, 122, 222, 62, 41, 79, 33, 140, 47, 9, 46, 219, 222, 197, 165, 199, 123, 105, 252, 6, 192, 123, 93, 111, 207, 246, 167, 32, 192, 74, 164, 85, 139, 49, 5, 207, 194, 58, 216, 98, 218, 57, 23, 221, 144, 47, 104, 172, 115, 74, 117, 78, 89, 18, 217, 96, 6, 133, 159, 199, 127, 99, 193, 13, 29, 155, 16, 249, 167, 173, 251, 117, 190, 245, 23, 1, 25, 35, 202, 120, 81, 184, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 199, 34, 160, 155, 68, 81, 6, 218, 249, 71, 6, 142, 191, 98, 68, 31, 137, 187, 237, 67, 25, 69, 54, 149, 83, 162, 138, 234, 178, 120, 104, 242, 113, 202, 103, 14, 162, 232, 225, 135, 253, 22, 85, 126, 211, 247, 64, 192, 15, 0, 222, 227, 58, 123, 150, 111, 137, 192, 190, 33, 33, 75, 183, 168, 110, 250, 11, 162, 238, 243, 150, 160, 121, 210, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 101, 17, 240, 3, 128, 151, 189, 180, 158, 216, 179, 35, 48, 159, 212, 194, 208, 130, 166, 78, 180, 84, 39, 79, 118, 245, 137, 61, 254, 226, 207, 105, 61, 16, 144, 237, 142, 127, 246, 27, 190, 189, 255, 206, 159, 140, 39, 7, 199, 216, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 151, 68, 32, 74, 129, 85, 163, 192, 110, 181, 193, 159, 153, 116, 255, 0, 99, 125, 200, 81, 125, 223, 147, 241, 146, 79, 231, 165, 187, 70, 43, 251, 103, 206, 96, 214, 15, 114, 32, 211, 147, 168, 116, 80, 141, 0, 108, 179, 133, 34, 121, 104, 40, 164, 78, 236, 135, 173, 243, 196, 200, 39, 227, 125, 122, 107, 4, 226, 1, 0, 191, 14, 252, 90, 137, 190, 53, 30, 175, 63, 249, 15, 255, 235, 231, 119, 163, 183, 15, 39, 232, 193, 71, 94, 169, 118, 122, 244, 250, 189, 210, 222, 183, 100, 122, 21, 15, 213, 113, 107, 52, 242, 25, 113, 185, 240, 6, 159, 106, 209, 150, 106, 234, 177, 133, 243, 244, 79, 190, 5, 68, 6, 125, 167, 234, 48, 166, 252, 119, 91, 55, 239, 245, 111, 184, 221, 200, 103, 184, 228, 78, 25, 207, 146, 47, 226, 154, 45, 253, 120, 151, 108, 140, 57, 125, 25, 244, 232, 55, 223, 51, 131, 79, 29, 250, 104, 147, 135, 217, 143, 131, 3, 130, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 74, 8, 100, 29, 64, 109, 16, 76, 190, 143, 62, 88, 196, 15, 28, 21, 171, 26, 35, 234, 22, 98, 3, 167, 117, 168, 150, 65, 87, 181, 74, 194, 8, 139, 147, 84, 162, 105, 124, 224, 132, 127, 63, 174, 134, 200, 9, 7, 117, 178, 232, 170, 181, 106, 124, 53, 110, 198, 28, 114, 224, 146, 223, 113, 215, 56, 147, 86, 108, 218, 240, 25, 57, 229, 151, 229, 88, 248, 205, 239, 198, 247, 88, 134, 160, 70, 26, 217, 208, 193, 67, 160, 113, 36, 17, 45, 213, 210, 117, 61, 124, 147, 201, 241, 112, 139, 184, 108, 208, 107, 7, 14, 178, 237, 99, 206, 96, 159, 126, 39, 2, 126, 3, 224, 119, 162, 235, 220, 70, 224, 11, 8, 104, 93, 204, 69, 155, 60, 161, 72, 157, 104, 169, 230, 250, 57, 253, 99, 211, 88, 27, 207, 109, 94, 187, 92, 249, 147, 255, 134, 127, 246, 27, 246, 222, 127, 231, 79, 198, 147, 131, 99, 236, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 75, 34, 64, 253, 193, 126, 15, 205, 163, 243, 127, 108, 198, 220, 69, 214, 77, 244, 199, 41, 131, 84, 108, 231, 165, 187, 70, 241, 253, 92, 155, 88, 69, 56, 60, 13, 74, 79, 162, 210, 65, 53, 130, 89, 19, 134, 34, 121, 232, 136, 73, 255, 16, 242, 185, 11, 180, 241, 105, 227, 228, 102, 4, 2, 1, 63, 0, 240, 175, 129, 17, 120, 43, 4, 216, 66, 174, 29, 0, 209, 109, 59, 48, 216, 220, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 86, 4, 252, 0, 224, 89, 175, 156, 199, 253, 146, 8, 228, 211, 90, 61, 181, 21, 141, 153, 166, 254, 140, 162, 187, 56, 248, 148, 126, 251, 36, 63, 255, 202, 255, 166, 107, 55, 251, 167, 111, 0, 40, 135, 104, 246, 175, 28, 103, 253, 46, 93, 184, 30, 158, 96, 35, 187, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 142, 0, 69, 9, 237, 178, 56, 41, 93, 89, 191, 112, 214, 7, 21, 74, 33, 89, 20, 189, 62, 176, 120, 148, 246, 152, 206, 63, 26, 127, 205, 143, 92, 31, 107, 192, 70, 54, 193, 168, 98, 74, 159, 246, 207, 108, 225, 192, 39, 253, 216, 241, 77, 255, 144, 197, 223, 163, 51, 143, 153, 183, 68, 224, 9, 31, 0, 228, 175, 120, 187, 88, 250, 71, 215, 84, 102, 141, 192, 41, 2, 250, 221, 233, 203, 226, 169, 227, 117, 101, 15, 221, 249, 107, 81, 234, 54, 236, 151, 55, 248, 227, 251, 253, 225, 195, 247, 252, 199, 18, 62, 50, 13, 89, 241, 90, 253, 37, 95, 244, 199, 191, 133, 250, 247, 176, 92, 198, 13, 251, 188, 137, 215, 13, 124, 81, 125, 226, 191, 30, 0, 244, 205, 35, 124, 70, 92, 250, 37, 175, 33, 142, 127, 119, 171, 163, 26, 77, 202, 245, 127, 125, 197, 99, 205, 73, 142, 162, 229, 238, 179, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 220, 8, 212, 214, 79, 93, 49, 106, 136, 168, 87, 170, 174, 128, 246, 186, 130, 186, 64, 7, 53, 134, 248, 141, 18, 131, 77, 177, 201, 143, 154, 100, 232, 235, 238, 119, 212, 34, 89, 112, 132, 243, 78, 67, 181, 218, 240, 213, 195, 1, 125, 153, 158, 78, 196, 99, 195, 45, 143, 206, 75, 119, 133, 134, 154, 155, 241, 57, 94, 228, 72, 50, 107, 43, 234, 39, 236, 208, 49, 23, 156, 211, 190, 201, 116, 141, 30, 154, 3, 41, 69, 141, 145, 14, 212, 166, 94, 138, 160, 178, 119, 10, 127, 114, 92, 96, 47, 183, 240, 197, 54, 219, 136, 149, 63, 185, 210, 62, 244, 51, 55, 1, 61, 110, 38, 248, 102, 230, 163, 125, 20, 144, 53, 8, 98, 133, 219, 221, 97, 237, 29, 245, 68, 119, 131, 127, 188, 195, 19, 62, 0, 248, 241, 152, 122, 128, 70, 224, 211, 8, 104, 129, 61, 208, 200, 150, 242, 25, 69, 119, 113, 140, 77, 114, 110, 62, 108, 60, 113, 116, 121, 240, 181, 18, 254, 215, 114, 52, 63, 54, 42, 252, 146, 142, 126, 164, 187, 232, 243, 56, 142, 48, 103, 206, 215, 90, 46, 153, 149, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 112, 21, 1, 221, 55, 93, 22, 39, 85, 24, 92, 13, 124, 212, 64, 101, 209, 171, 11, 201, 162, 228, 145, 189, 211, 206, 119, 159, 206, 203, 167, 235, 58, 47, 251, 163, 148, 216, 143, 53, 96, 35, 187, 96, 84, 49, 149, 55, 221, 234, 150, 148, 225, 16, 37, 89, 81, 249, 135, 124, 13, 246, 93, 79, 10, 183, 247, 69, 224, 127, 239, 59, 117, 207, 220, 8, 188, 59, 2, 236, 28, 125, 55, 1, 15, 233, 174, 233, 223, 29, 51, 207, 223, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 60, 47, 2, 126, 3, 224, 121, 175, 157, 71, 254, 2, 8, 236, 79, 100, 79, 229, 80, 166, 126, 167, 49, 255, 249, 102, 64, 220, 184, 231, 167, 245, 87, 62, 233, 63, 251, 244, 31, 157, 110, 248, 87, 191, 237, 13, 0, 229, 76, 122, 242, 84, 249, 230, 120, 234, 226, 144, 215, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 93, 4, 180, 215, 175, 90, 226, 164, 102, 136, 233, 127, 197, 254, 113, 244, 84, 227, 16, 185, 243, 210, 41, 171, 62, 244, 16, 189, 103, 151, 223, 117, 90, 115, 165, 166, 210, 188, 59, 95, 253, 46, 219, 146, 225, 208, 239, 237, 150, 78, 121, 136, 17, 127, 70, 187, 125, 207, 111, 249, 189, 16, 248, 196, 3, 128, 107, 191, 236, 239, 5, 220, 219, 206, 246, 108, 5, 122, 91, 48, 110, 76, 188, 225, 148, 139, 112, 156, 14, 175, 245, 15, 249, 230, 74, 157, 129, 213, 135, 110, 244, 241, 79, 181, 232, 188, 225, 223, 244, 253, 181, 125, 110, 224, 231, 171, 251, 199, 27, 124, 109, 138, 234, 234, 240, 160, 64, 57, 122, 108, 231, 71, 222, 202, 33, 44, 86, 166, 28, 81, 190, 179, 38, 29, 62, 240, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 75, 33, 160, 237, 189, 211, 220, 254, 227, 190, 33, 139, 24, 104, 204, 88, 199, 213, 201, 115, 159, 161, 123, 13, 156, 74, 62, 212, 39, 212, 31, 97, 185, 212, 85, 92, 125, 192, 65, 108, 180, 150, 170, 252, 21, 215, 104, 250, 148, 99, 254, 57, 0, 78, 136, 212, 88, 73, 195, 119, 232, 250, 240, 197, 67, 105, 93, 254, 133, 64, 108, 210, 96, 68, 113, 156, 131, 194, 129, 54, 236, 83, 63, 116, 105, 235, 188, 252, 207, 116, 228, 192, 190, 81, 116, 121, 4, 105, 3, 204, 75, 18, 242, 195, 52, 50, 43, 156, 222, 225, 221, 158, 23, 129, 79, 60, 0, 120, 222, 201, 122, 228, 70, 224, 167, 33, 160, 197, 244, 38, 13, 99, 218, 119, 26, 147, 201, 133, 27, 26, 11, 126, 30, 108, 86, 226, 239, 210, 255, 34, 178, 54, 139, 213, 255, 181, 248, 49, 134, 236, 235, 145, 241, 132, 227, 240, 45, 206, 103, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 21, 17, 160, 134, 160, 173, 90, 226, 251, 249, 234, 225, 35, 231, 113, 51, 156, 33, 226, 161, 180, 157, 118, 93, 231, 229, 215, 117, 157, 151, 253, 146, 22, 22, 212, 84, 194, 162, 243, 228, 144, 190, 168, 228, 78, 225, 213, 132, 177, 100, 168, 116, 234, 67, 58, 201, 59, 237, 118, 120, 183, 247, 69, 192, 15, 0, 222, 247, 218, 123, 230, 111, 135, 0, 27, 84, 63, 0, 64, 178, 192, 208, 38, 38, 217, 212, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 87, 65, 192, 15, 0, 94, 229, 74, 122, 30, 47, 129, 192, 254, 180, 246, 234, 171, 89, 49, 219, 244, 141, 251, 245, 227, 43, 109, 215, 62, 193, 63, 215, 235, 1, 192, 234, 247, 220, 111, 189, 85, 48, 250, 85, 255, 55, 40, 23, 132, 241, 187, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 175, 139, 64, 110, 245, 113, 202, 90, 162, 83, 248, 7, 14, 2, 227, 191, 47, 180, 254, 225, 133, 62, 216, 16, 37, 173, 120, 249, 237, 84, 62, 26, 194, 71, 237, 95, 243, 103, 238, 252, 143, 255, 138, 158, 99, 113, 134, 143, 116, 208, 157, 151, 110, 215, 107, 134, 103, 118, 217, 76, 95, 31, 129, 39, 124, 0, 160, 127, 100, 175, 127, 113, 126, 203, 12, 119, 248, 180, 50, 252, 150, 206, 30, 73, 250, 227, 6, 244, 200, 160, 63, 236, 147, 11, 109, 156, 238, 109, 132, 185, 130, 183, 85, 185, 177, 155, 105, 220, 168, 199, 247, 186, 202, 103, 80, 250, 136, 209, 101, 63, 108, 38, 135, 175, 4, 12, 27, 246, 220, 104, 2, 123, 156, 241, 81, 220, 176, 229, 102, 137, 45, 252, 210, 7, 150, 166, 239, 151, 165, 190, 174, 157, 98, 211, 156, 49, 35, 109, 4, 150, 200, 121, 24, 38, 197, 219, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 118, 4, 250, 14, 95, 60, 245, 1, 220, 78, 153, 105, 213, 14, 112, 106, 25, 19, 167, 99, 141, 68, 109, 50, 142, 136, 89, 127, 203, 168, 50, 171, 142, 129, 210, 138, 134, 223, 72, 58, 190, 246, 158, 250, 242, 29, 6, 145, 172, 103, 66, 224, 187, 253, 217, 68, 135, 120, 24, 167, 108, 234, 139, 89, 84, 95, 244, 55, 251, 28, 252, 28, 19, 227, 143, 144, 156, 151, 106, 45, 230, 73, 23, 131, 98, 83, 174, 69, 113, 80, 159, 240, 180, 46, 107, 28, 68, 144, 170, 198, 194, 223, 29, 32, 55, 57, 179, 165, 48, 228, 28, 72, 248, 49, 166, 193, 215, 224, 150, 124, 192, 56, 253, 70, 190, 217, 55, 189, 233, 24, 125, 76, 155, 228, 239, 161, 154, 194, 189, 108, 133, 196, 61, 175, 207, 216, 127, 95, 230, 207, 140, 230, 187, 99, 158, 240, 1, 192, 119, 67, 224, 124, 70, 224, 231, 32, 48, 214, 234, 90, 192, 99, 88, 199, 205, 176, 201, 216, 56, 98, 125, 210, 194, 95, 148, 77, 224, 241, 67, 11, 249, 234, 247, 94, 236, 232, 87, 253, 223, 161, 57, 200, 240, 113, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 19, 129, 188, 89, 139, 83, 214, 18, 157, 194, 63, 112, 16, 24, 255, 125, 161, 245, 155, 53, 248, 179, 131, 244, 242, 147, 125, 215, 33, 171, 201, 23, 89, 188, 104, 215, 117, 254, 81, 187, 252, 138, 50, 247, 126, 243, 127, 134, 197, 153, 142, 158, 165, 135, 94, 59, 228, 39, 223, 46, 75, 39, 138, 205, 237, 245, 17, 248, 223, 235, 79, 209, 51, 52, 2, 70, 160, 16, 96, 163, 209, 129, 70, 188, 168, 116, 80, 55, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 13, 1, 191, 1, 240, 106, 87, 212, 243, 121, 26, 4, 244, 180, 21, 122, 56, 66, 152, 79, 204, 101, 67, 7, 191, 83, 217, 227, 102, 62, 223, 6, 224, 149, 173, 195, 107, 255, 183, 63, 209, 215, 67, 128, 204, 77, 142, 155, 7, 99, 192, 103, 140, 101, 167, 39, 99, 75, 231, 240, 115, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 19, 1, 234, 2, 246, 251, 89, 31, 116, 190, 76, 203, 246, 160, 76, 202, 243, 166, 15, 45, 58, 197, 179, 203, 103, 188, 124, 68, 241, 17, 223, 105, 105, 43, 223, 206, 43, 102, 247, 151, 94, 244, 210, 94, 216, 172, 26, 138, 252, 194, 11, 111, 120, 154, 104, 73, 235, 124, 79, 159, 185, 226, 52, 105, 12, 37, 249, 145, 243, 35, 60, 189, 226, 239, 246, 186, 8, 252, 248, 7, 0, 251, 47, 96, 255, 167, 245, 186, 151, 229, 207, 205, 108, 199, 247, 163, 61, 127, 36, 94, 190, 162, 244, 117, 198, 223, 210, 97, 147, 93, 244, 108, 204, 242, 19, 173, 190, 88, 13, 227, 123, 233, 220, 36, 207, 27, 221, 250, 158, 186, 252, 118, 74, 103, 220, 116, 239, 116, 222, 160, 15, 251, 67, 242, 24, 187, 250, 200, 49, 73, 232, 180, 249, 205, 126, 209, 105, 220, 162, 115, 14, 99, 19, 201, 155, 255, 26, 111, 142, 39, 99, 114, 232, 57, 135, 234, 162, 207, 61, 240, 224, 187, 111, 138, 219, 243, 181, 205, 41, 99, 179, 95, 141, 99, 244, 147, 147, 224, 68, 63, 225, 21, 29, 11, 81, 232, 218, 222, 200, 64, 19, 45, 201, 103, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 133, 16, 160, 20, 136, 233, 92, 214, 69, 81, 17, 96, 27, 71, 57, 225, 184, 31, 163, 46, 161, 230, 56, 61, 42, 71, 71, 140, 106, 131, 70, 42, 154, 104, 73, 58, 227, 83, 126, 73, 147, 141, 19, 206, 253, 239, 0, 200, 101, 250, 86, 60, 125, 96, 138, 33, 85, 233, 212, 178, 101, 138, 56, 65, 115, 126, 132, 140, 212, 169, 107, 190, 152, 166, 81, 78, 210, 37, 213, 105, 14, 100, 40, 174, 201, 210, 7, 205, 121, 32, 199, 193, 64, 15, 71, 168, 53, 152, 78, 213, 93, 211, 49, 7, 90, 170, 226, 164, 107, 118, 74, 187, 159, 248, 17, 140, 63, 127, 151, 128, 68, 226, 39, 101, 152, 101, 74, 123, 14, 125, 248, 46, 131, 28, 130, 14, 255, 180, 125, 241, 68, 55, 123, 219, 117, 223, 216, 221, 222, 213, 143, 144, 127, 252, 3, 128, 31, 129, 146, 7, 97, 4, 126, 3, 2, 90, 108, 180, 222, 77, 26, 204, 92, 100, 163, 223, 212, 163, 131, 223, 169, 236, 177, 50, 230, 58, 31, 167, 159, 242, 6, 0, 144, 49, 94, 55, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 117, 17, 200, 173, 94, 245, 73, 76, 115, 214, 42, 240, 159, 60, 174, 163, 197, 173, 217, 126, 224, 189, 235, 174, 201, 242, 189, 69, 187, 13, 158, 70, 190, 222, 186, 44, 94, 20, 191, 35, 95, 56, 68, 141, 22, 22, 14, 236, 139, 151, 110, 209, 116, 105, 167, 138, 105, 138, 193, 74, 159, 185, 226, 52, 105, 116, 159, 124, 248, 125, 148, 146, 154, 24, 183, 215, 69, 192, 15, 0, 94, 247, 218, 122, 102, 70, 96, 67, 64, 155, 17, 244, 26, 191, 133, 88, 52, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 101, 16, 240, 3, 128, 151, 185, 148, 158, 200, 51, 33, 160, 39, 171, 119, 159, 202, 134, 195, 124, 146, 14, 31, 147, 156, 50, 252, 205, 131, 167, 203, 183, 143, 122, 16, 160, 167, 208, 183, 125, 247, 23, 250, 231, 88, 246, 113, 13, 153, 235, 225, 55, 0, 64, 193, 205, 8, 24, 1, 35, 96, 4, 140, 192, 235, 34, 64, 61, 64, 65, 2, 205, 67, 60, 244, 222, 161, 152, 59, 52, 204, 163, 213, 135, 24, 189, 190, 169, 79, 211, 151, 94, 181, 205, 57, 37, 77, 255, 16, 228, 76, 238, 58, 120, 154, 98, 74, 58, 202, 178, 137, 238, 254, 210, 139, 46, 59, 120, 161, 101, 62, 52, 228, 106, 221, 183, 235, 101, 47, 42, 127, 232, 71, 142, 99, 22, 75, 239, 134, 192, 39, 30, 0, 240, 235, 85, 191, 170, 71, 250, 110, 208, 189, 199, 124, 181, 176, 124, 106, 182, 10, 22, 37, 73, 231, 51, 41, 10, 41, 197, 151, 220, 181, 248, 28, 180, 221, 245, 232, 120, 99, 5, 108, 142, 218, 145, 250, 152, 210, 28, 39, 217, 36, 207, 113, 202, 25, 195, 229, 161, 239, 190, 119, 27, 58, 233, 255, 141, 188, 58, 232, 3, 190, 167, 65, 236, 50, 60, 42, 90, 218, 146, 73, 113, 25, 82, 228, 223, 99, 28, 124, 7, 64, 20, 30, 145, 4, 73, 135, 156, 66, 232, 178, 97, 24, 77, 29, 165, 125, 60, 8, 224, 235, 4, 33, 207, 97, 230, 120, 144, 165, 31, 52, 82, 16, 190, 142, 54, 231, 166, 173, 158, 102, 71, 163, 99, 19, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 153, 17, 208, 206, 190, 234, 128, 170, 9, 152, 147, 62, 60, 88, 243, 147, 247, 208, 252, 251, 95, 56, 69, 61, 50, 143, 12, 170, 4, 153, 176, 108, 235, 134, 191, 76, 43, 223, 146, 51, 51, 238, 123, 138, 230, 92, 55, 218, 163, 254, 161, 207, 100, 135, 76, 205, 131, 47, 34, 95, 74, 79, 90, 242, 175, 144, 229, 142, 143, 254, 183, 125, 233, 31, 114, 229, 93, 125, 135, 234, 48, 14, 4, 124, 85, 83, 145, 59, 243, 12, 61, 93, 221, 110, 187, 135, 228, 78, 7, 159, 29, 69, 182, 3, 13, 219, 196, 56, 230, 18, 252, 58, 112, 173, 185, 231, 248, 24, 147, 142, 76, 67, 205, 138, 127, 171, 99, 19, 28, 57, 141, 142, 102, 208, 144, 143, 3, 216, 7, 244, 65, 57, 220, 103, 62, 230, 73, 31, 157, 98, 119, 123, 20, 129, 79, 60, 0, 120, 52, 181, 253, 140, 128, 17, 184, 134, 0, 203, 22, 237, 238, 18, 25, 14, 185, 158, 226, 11, 223, 233, 221, 120, 22, 243, 219, 135, 118, 183, 26, 199, 238, 171, 241, 117, 189, 116, 109, 44, 251, 184, 134, 28, 195, 203, 49, 67, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 215, 68, 128, 26, 130, 2, 5, 154, 135, 120, 232, 189, 67, 49, 119, 104, 152, 71, 227, 166, 175, 215, 37, 75, 150, 94, 181, 205, 109, 74, 58, 98, 105, 59, 237, 186, 116, 104, 62, 159, 145, 175, 231, 7, 47, 172, 253, 1, 66, 245, 160, 152, 146, 240, 59, 107, 210, 67, 63, 114, 156, 229, 178, 238, 125, 16, 240, 3, 128, 247, 185, 214, 158, 233, 219, 35, 160, 205, 4, 122, 141, 239, 32, 117, 191, 174, 55, 111, 4, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 103, 70, 160, 215, 65, 204, 67, 242, 51, 207, 201, 99, 55, 2, 143, 33, 224, 7, 0, 143, 225, 100, 47, 35, 240, 237, 8, 232, 169, 45, 137, 63, 242, 212, 246, 190, 239, 241, 201, 248, 173, 183, 0, 106, 195, 195, 191, 158, 62, 31, 125, 79, 198, 21, 142, 135, 55, 17, 144, 137, 221, 41, 147, 138, 134, 205, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 93, 4, 180, 215, 95, 212, 3, 170, 13, 98, 234, 105, 251, 18, 61, 214, 54, 170, 95, 190, 70, 185, 38, 186, 241, 23, 69, 71, 251, 78, 89, 185, 138, 130, 133, 190, 66, 128, 70, 50, 189, 194, 247, 166, 72, 189, 33, 176, 108, 227, 127, 75, 24, 138, 226, 100, 33, 226, 236, 144, 221, 212, 8, 252, 243, 143, 31, 0, 248, 183, 192, 8, 124, 51, 2, 115, 147, 11, 134, 27, 99, 86, 243, 78, 243, 102, 185, 233, 101, 235, 187, 227, 212, 85, 120, 229, 128, 39, 87, 44, 236, 167, 7, 223, 207, 226, 59, 106, 61, 55, 115, 67, 158, 59, 204, 217, 166, 48, 141, 120, 87, 35, 134, 32, 125, 95, 76, 124, 38, 82, 142, 225, 154, 99, 210, 216, 22, 197, 154, 99, 41, 55, 159, 141, 128, 17, 48, 2, 70, 192, 8, 24, 129, 23, 68, 32, 75, 6, 213, 2, 49, 191, 170, 85, 130, 38, 207, 247, 198, 135, 46, 105, 213, 41, 210, 149, 19, 142, 58, 70, 237, 113, 168, 55, 168, 59, 142, 77, 241, 167, 245, 80, 196, 222, 215, 71, 151, 163, 102, 130, 86, 11, 10, 155, 71, 231, 203, 23, 61, 101, 81, 209, 178, 159, 201, 169, 11, 167, 57, 165, 76, 190, 100, 82, 96, 219, 41, 110, 232, 170, 21, 135, 31, 109, 234, 165, 8, 93, 229, 80, 222, 160, 204, 103, 232, 147, 198, 105, 202, 49, 168, 196, 68, 52, 253, 66, 135, 15, 58, 209, 28, 55, 242, 241, 8, 247, 104, 115, 20, 43, 111, 25, 190, 124, 102, 156, 180, 213, 67, 201, 62, 255, 30, 4, 252, 0, 224, 247, 224, 234, 172, 70, 224, 46, 2, 90, 236, 112, 132, 239, 199, 153, 174, 219, 111, 243, 177, 104, 107, 1, 191, 67, 107, 169, 197, 95, 253, 247, 88, 233, 26, 13, 199, 220, 36, 240, 223, 121, 233, 70, 174, 32, 153, 23, 234, 102, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 38, 2, 212, 16, 180, 172, 37, 168, 13, 224, 161, 226, 101, 251, 18, 237, 245, 9, 183, 137, 95, 61, 34, 197, 188, 221, 212, 109, 167, 104, 183, 193, 211, 186, 237, 107, 50, 248, 248, 13, 0, 48, 116, 251, 91, 8, 248, 1, 192, 223, 66, 222, 253, 26, 129, 27, 8, 176, 57, 60, 115, 171, 205, 173, 138, 128, 103, 158, 135, 199, 110, 4, 140, 128, 17, 48, 2, 70, 192, 8, 220, 70, 64, 53, 11, 84, 60, 17, 157, 191, 157, 225, 111, 88, 117, 67, 191, 211, 191, 49, 22, 247, 105, 4, 254, 44, 2, 126, 0, 240, 103, 241, 118, 111, 70, 224, 38, 2, 125, 243, 20, 127, 155, 158, 125, 122, 207, 166, 123, 124, 82, 126, 77, 214, 19, 244, 213, 199, 173, 184, 218, 204, 151, 239, 144, 67, 145, 186, 157, 50, 83, 12, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 203, 34, 144, 91, 189, 106, 128, 152, 229, 225, 147, 127, 244, 31, 57, 136, 191, 115, 0, 36, 117, 141, 106, 152, 207, 83, 50, 93, 123, 0, 32, 61, 62, 180, 223, 43, 215, 124, 46, 123, 1, 139, 106, 213, 127, 31, 133, 108, 247, 240, 234, 126, 202, 38, 157, 100, 211, 247, 66, 224, 19, 15, 0, 244, 171, 183, 211, 247, 2, 206, 179, 125, 0, 1, 126, 69, 88, 97, 244, 171, 34, 254, 5, 87, 157, 91, 83, 194, 166, 3, 212, 196, 31, 104, 8, 108, 144, 50, 22, 31, 192, 197, 119, 176, 214, 129, 29, 48, 251, 17, 162, 100, 212, 228, 152, 223, 101, 107, 182, 121, 17, 208, 125, 188, 213, 230, 93, 253, 230, 48, 199, 120, 83, 31, 157, 230, 255, 27, 182, 81, 6, 194, 79, 127, 60, 81, 189, 18, 237, 102, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 36, 2, 212, 7, 49, 49, 213, 52, 123, 37, 144, 54, 236, 219, 1, 22, 232, 150, 33, 106, 142, 67, 13, 180, 100, 190, 159, 126, 112, 37, 12, 115, 42, 177, 181, 35, 107, 162, 38, 119, 27, 254, 200, 152, 235, 212, 66, 165, 199, 70, 238, 116, 154, 101, 88, 254, 221, 128, 80, 209, 39, 22, 209, 242, 93, 58, 244, 57, 46, 124, 199, 65, 64, 234, 100, 11, 74, 14, 154, 244, 37, 45, 189, 228, 101, 239, 127, 250, 111, 68, 39, 46, 163, 19, 120, 230, 62, 116, 53, 254, 245, 33, 15, 153, 201, 181, 174, 143, 228, 53, 134, 213, 23, 189, 143, 62, 38, 237, 58, 248, 99, 83, 108, 245, 81, 209, 240, 100, 17, 61, 70, 88, 250, 147, 8, 124, 226, 1, 192, 159, 28, 158, 251, 50, 2, 239, 133, 128, 22, 74, 102, 45, 254, 54, 237, 11, 182, 22, 118, 45, 232, 146, 175, 211, 90, 138, 207, 114, 156, 197, 92, 25, 83, 12, 48, 199, 184, 209, 156, 3, 6, 55, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 101, 17, 200, 173, 94, 53, 64, 204, 178, 62, 28, 104, 181, 1, 182, 71, 15, 226, 239, 28, 0, 169, 27, 90, 213, 49, 159, 163, 100, 58, 187, 177, 237, 122, 120, 154, 252, 74, 186, 148, 165, 23, 189, 231, 127, 180, 235, 1, 195, 81, 91, 88, 84, 198, 178, 116, 59, 56, 209, 238, 225, 213, 253, 42, 162, 231, 149, 198, 244, 157, 16, 240, 3, 128, 119, 186, 218, 158, 171, 17, 248, 67, 8, 176, 217, 176, 73, 105, 211, 249, 67, 221, 186, 27, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 15, 35, 160, 189, 30, 42, 158, 33, 116, 254, 15, 15, 169, 117, 71, 53, 114, 237, 192, 77, 183, 212, 162, 10, 221, 101, 233, 77, 141, 192, 243, 35, 224, 7, 0, 207, 127, 13, 61, 131, 39, 70, 64, 155, 229, 247, 209, 227, 39, 247, 218, 244, 238, 63, 41, 23, 136, 251, 38, 89, 27, 248, 195, 227, 11, 199, 254, 228, 255, 135, 236, 254, 154, 156, 169, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 205, 8, 80, 35, 176, 223, 207, 90, 65, 188, 104, 153, 151, 253, 131, 50, 181, 12, 185, 247, 154, 70, 181, 141, 104, 218, 247, 87, 254, 245, 90, 188, 30, 2, 28, 236, 35, 103, 222, 235, 143, 27, 254, 121, 223, 223, 100, 88, 29, 132, 100, 155, 142, 82, 108, 116, 217, 25, 187, 254, 234, 127, 241, 96, 85, 175, 240, 75, 174, 14, 10, 195, 158, 104, 101, 41, 174, 112, 88, 30, 104, 201, 133, 190, 40, 154, 91, 199, 138, 53, 247, 190, 8, 248, 1, 192, 155, 93, 251, 252, 78, 214, 143, 154, 115, 45, 104, 151, 67, 58, 95, 226, 106, 81, 219, 109, 151, 209, 223, 165, 81, 79, 181, 185, 212, 226, 218, 23, 86, 45, 186, 234, 175, 22, 224, 90, 192, 197, 99, 19, 95, 116, 221, 164, 247, 92, 247, 121, 50, 221, 90, 212, 47, 177, 100, 223, 211, 222, 151, 255, 127, 216, 216, 248, 58, 213, 223, 11, 168, 121, 140, 111, 237, 199, 32, 115, 156, 73, 143, 253, 229, 247, 238, 34, 225, 252, 255, 195, 230, 220, 144, 35, 38, 253, 201, 161, 248, 193, 229, 47, 29, 60, 77, 180, 36, 159, 141, 128, 17, 48, 2, 70, 192, 8, 24, 129, 231, 70, 64, 59, 251, 216, 245, 87, 29, 16, 211, 154, 245, 65, 24, 139, 111, 53, 195, 212, 97, 171, 130, 101, 167, 212, 61, 149, 191, 104, 214, 52, 228, 29, 144, 101, 137, 145, 50, 246, 147, 131, 180, 195, 63, 99, 226, 180, 228, 242, 175, 84, 212, 59, 163, 101, 233, 19, 167, 166, 146, 105, 149, 97, 195, 30, 132, 49, 233, 235, 246, 57, 190, 212, 149, 125, 218, 34, 48, 52, 217, 232, 31, 190, 211, 178, 92, 118, 169, 249, 77, 187, 146, 12, 133, 114, 200, 14, 157, 243, 11, 38, 121, 232, 60, 98, 206, 49, 168, 121, 196, 72, 14, 184, 201, 182, 235, 51, 47, 190, 228, 220, 6, 65, 167, 67, 183, 108, 149, 183, 102, 125, 228, 203, 151, 28, 159, 61, 86, 127, 234, 23, 141, 219, 227, 8, 248, 1, 192, 227, 88, 217, 211, 8, 124, 59, 2, 181, 144, 182, 197, 58, 122, 248, 154, 238, 184, 144, 107, 113, 173, 5, 249, 214, 66, 203, 212, 206, 236, 31, 28, 143, 54, 152, 49, 143, 156, 12, 169, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 151, 68, 128, 186, 133, 253, 126, 214, 47, 226, 69, 203, 188, 236, 31, 148, 169, 79, 200, 173, 58, 69, 53, 205, 78, 211, 126, 248, 132, 63, 234, 26, 221, 145, 171, 198, 217, 237, 232, 41, 127, 234, 52, 201, 100, 246, 210, 8, 215, 108, 25, 36, 225, 132, 46, 59, 99, 191, 124, 3, 160, 122, 40, 27, 225, 229, 95, 243, 92, 233, 86, 150, 235, 118, 112, 32, 174, 40, 126, 183, 142, 149, 219, 220, 251, 34, 224, 7, 0, 239, 123, 237, 61, 115, 35, 240, 123, 17, 208, 46, 38, 250, 123, 123, 115, 118, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 12, 4, 110, 221, 4, 119, 27, 238, 200, 52, 209, 146, 142, 231, 91, 182, 123, 177, 199, 76, 150, 140, 192, 223, 70, 192, 15, 0, 254, 246, 21, 112, 255, 70, 96, 67, 160, 158, 226, 182, 39]);
fileData10.push.apply(fileData10, [233, 97, 63, 215, 29, 159, 248, 234, 73, 248, 213, 39, 191, 122, 234, 13, 213, 49, 159, 18, 51, 8, 54, 183, 117, 232, 73, 242, 121, 223, 99, 76, 97, 92, 175, 149, 13, 158, 241, 162, 39, 101, 158, 96, 220, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 87, 68, 64, 251, 61, 52, 143, 56, 157, 82, 217, 239, 210, 203, 250, 102, 213, 36, 85, 167, 168, 230, 17, 237, 245, 203, 85, 158, 218, 103, 190, 147, 63, 234, 29, 8, 181, 207, 129, 150, 170, 116, 216, 105, 233, 80, 236, 233, 249, 113, 59, 216, 224, 125, 164, 215, 227, 241, 83, 255, 187, 87, 229, 144, 182, 40, 58, 29, 68, 30, 121, 176, 197, 111, 167, 120, 186, 189, 11, 2, 159, 120, 0, 80, 191, 106, 251, 175, 237, 187, 0, 230, 121, 126, 0, 1, 126, 85, 104, 162, 59, 159, 198, 175, 157, 142, 139, 218, 245, 92, 26, 130, 232, 238, 169, 60, 125, 131, 41, 223, 218, 132, 240, 87, 236, 242, 85, 150, 90, 68, 181, 160, 214, 34, 93, 139, 107, 95, 96, 197, 87, 31, 228, 171, 220, 71, 186, 22, 229, 212, 247, 239, 98, 69, 199, 232, 216, 188, 146, 226, 154, 139, 184, 198, 145, 166, 220, 219, 216, 223, 250, 145, 97, 151, 238, 135, 240, 62, 47, 205, 181, 38, 93, 99, 146, 115, 218, 24, 11, 71, 228, 92, 199, 248, 254, 127, 24, 242, 7, 7, 172, 162, 57, 76, 116, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 171, 32, 160, 157, 189, 118, 125, 106, 20, 126, 84, 227, 140, 58, 161, 151, 3, 229, 24, 6, 138, 21, 80, 24, 84, 133, 11, 42, 217, 166, 47, 58, 12, 16, 234, 146, 65, 227, 166, 190, 250, 26, 52, 226, 82, 206, 148, 248, 181, 131, 156, 253, 33, 128, 250, 69, 151, 77, 116, 136, 144, 25, 78, 236, 146, 73, 149, 225, 87, 105, 249, 143, 33, 199, 116, 150, 76, 8, 250, 157, 134, 234, 162, 201, 79, 134, 44, 169, 36, 4, 85, 14, 252, 10, 50, 52, 235, 40, 172, 74, 22, 110, 132, 207, 113, 33, 68, 59, 96, 24, 241, 151, 246, 99, 76, 246, 151, 113, 165, 151, 92, 185, 56, 127, 174, 169, 95, 70, 252, 145, 246, 217, 184, 143, 244, 241, 74, 190, 159, 120, 0, 240, 74, 211, 247, 92, 140, 192, 207, 67, 64, 139, 232, 125, 90, 11, 116, 95, 180, 251, 162, 127, 193, 231, 6, 23, 75, 106, 110, 66, 131, 206, 77, 2, 28, 106, 131, 16, 93, 121, 207, 23, 247, 28, 95, 156, 216, 140, 14, 71, 100, 74, 153, 148, 56, 185, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 139, 64, 110, 245, 212, 2, 49, 195, 60, 196, 239, 84, 246, 187, 244, 178, 190, 89, 53, 73, 213, 42, 200, 212, 43, 162, 170, 93, 110, 82, 234, 159, 254, 16, 128, 28, 164, 73, 154, 204, 144, 75, 85, 54, 236, 180, 97, 47, 225, 129, 243, 238, 191, 100, 48, 66, 218, 233, 181, 164, 248, 169, 255, 149, 165, 188, 43, 135, 180, 69, 209, 233, 192, 235, 200, 47, 204, 132, 93, 209, 202, 231, 243, 123, 32, 224, 7, 0, 239, 113, 157, 61, 75, 35, 112, 142, 128, 246, 12, 89, 217, 37, 238, 180, 91, 46, 218, 100, 68, 239, 164, 178, 217, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 114, 4, 84, 23, 104, 239, 151, 252, 247, 166, 69, 113, 163, 2, 71, 252, 53, 202, 40, 187, 239, 163, 163, 86, 204, 163, 254, 159, 243, 3, 203, 143, 245, 244, 49, 239, 207, 141, 202, 81, 207, 142, 128, 31, 0, 60, 251, 21, 244, 248, 159, 6, 129, 190, 49, 94, 242, 245, 68, 150, 167, 176, 215, 15, 158, 226, 222, 178, 31, 109, 185, 101, 196, 211, 238, 122, 237, 44, 54, 132, 254, 201, 191, 248, 220, 86, 180, 89, 12, 159, 131, 46, 224, 29, 59, 249, 32, 137, 247, 229, 248, 215, 19, 102, 125, 250, 15, 157, 206, 131, 53, 49, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 11, 129, 220, 238, 227, 116, 168, 13, 36, 119, 42, 62, 166, 127, 240, 125, 64, 174, 219, 96, 234, 149, 59, 7, 245, 13, 62, 249, 142, 254, 127, 85, 251, 220, 140, 9, 119, 236, 132, 213, 105, 18, 52, 23, 161, 169, 148, 97, 10, 15, 48, 217, 193, 85, 63, 240, 56, 107, 68, 149, 173, 226, 207, 252, 170, 54, 196, 143, 58, 80, 244, 88, 19, 174, 250, 177, 122, 81, 30, 209, 179, 190, 173, 123, 93, 4, 252, 0, 224, 117, 175, 237, 233, 204, 114, 93, 108, 150, 121, 147, 214, 116, 207, 204, 214, 194, 87, 139, 229, 206, 179, 138, 175, 239, 165, 105, 97, 68, 115, 189, 201, 182, 83, 69, 168, 143, 93, 150, 190, 83, 249, 20, 101, 33, 239, 199, 209, 122, 83, 170, 61, 96, 185, 244, 52, 141, 175, 239, 130, 149, 91, 31, 71, 231, 25, 2, 33, 232, 104, 243, 230, 29, 62, 241, 10, 156, 226, 151, 6, 158, 205, 52, 117, 73, 203, 249, 223, 8, 88, 199, 72, 64, 54, 253, 98, 137, 134, 137, 140, 117, 164, 224, 147, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 138, 8, 80, 6, 196, 188, 102, 77, 33, 153, 186, 34, 235, 6, 168, 236, 240, 163, 190, 200, 138, 164, 234, 141, 252, 208, 66, 50, 113, 228, 235, 57, 113, 155, 216, 81, 201, 208, 70, 44, 116, 20, 188, 228, 86, 189, 149, 181, 76, 203, 41, 125, 134, 230, 137, 184, 33, 41, 108, 25, 147, 83, 186, 95, 228, 151, 207, 9, 149, 223, 164, 35, 177, 198, 188, 83, 82, 156, 53, 252, 206, 109, 187, 54, 228, 76, 58, 104, 239, 0, 94, 71, 100, 19, 14, 179, 182, 139, 65, 230, 53, 128, 14, 251, 5, 101, 34, 145, 163, 98, 25, 41, 253, 115, 208, 68, 199, 16, 66, 163, 238, 68, 241, 218, 121, 233, 160, 43, 3, 210, 202, 131, 158, 184, 123, 237, 90, 188, 226, 148, 103, 247, 147, 253, 221, 168, 31, 0, 188, 219, 21, 247, 124, 255, 26, 2, 90, 248, 206, 233, 141, 69, 55, 150, 197, 90, 136, 89, 4, 197, 223, 167, 185, 156, 114, 243, 158, 155, 84, 44, 121, 215, 232, 92, 118, 89, 22, 251, 49, 160, 26, 43, 111, 95, 128, 207, 231, 48, 22, 247, 48, 166, 93, 1, 162, 127, 13, 121, 119, 108, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 46, 4, 114, 155, 143, 19, 116, 30, 146, 59, 21, 223, 253, 30, 228, 143, 245, 73, 175, 85, 54, 158, 90, 135, 90, 70, 119, 222, 146, 15, 245, 77, 143, 9, 119, 108, 168, 234, 52, 9, 154, 139, 176, 84, 202, 48, 133, 7, 152, 236, 224, 170, 31, 184, 157, 53, 162, 186, 109, 241, 43, 31, 186, 99, 157, 40, 249, 172, 86, 172, 94, 148, 71, 244, 172, 111, 235, 94, 23, 1, 63, 0, 120, 221, 107, 235, 153, 25, 129, 111, 71, 160, 54, 153, 235, 105, 101, 23, 189, 238, 105, 89, 206, 115, 114, 0, 0, 64, 0, 73, 68, 65, 84, 139, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 10, 8, 232, 38, 82, 123, 191, 228, 63, 59, 55, 110, 136, 117, 208, 179, 248, 71, 168, 252, 71, 88, 138, 17, 71, 232, 222, 148, 110, 215, 255, 38, 25, 44, 207, 134, 241, 155, 186, 115, 218, 55, 65, 192, 15, 0, 222, 228, 66, 123, 154, 63, 19, 129, 190, 89, 62, 198, 247, 167, 185, 235, 9, 175, 54, 186, 218, 116, 199, 86, 161, 29, 227, 226, 147, 255, 192, 162, 235, 114, 107, 169, 200, 11, 148, 66, 157, 111, 125, 65, 155, 17, 254, 230, 129, 191, 2, 68, 91, 188, 89, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 53, 16, 200, 109, 158, 125, 63, 166, 51, 143, 46, 119, 190, 251, 220, 228, 123, 189, 115, 201, 171, 238, 185, 74, 243, 147, 255, 248, 27, 0, 15, 61, 8, 192, 77, 69, 211, 8, 209, 109, 55, 234, 126, 132, 152, 173, 235, 130, 215, 11, 7, 204, 159, 134, 249, 86, 147, 159, 232, 53, 95, 242, 116, 159, 197, 175, 30, 208, 61, 250, 6, 0, 35, 195, 119, 77, 74, 61, 75, 39, 217, 244, 149, 17, 240, 3, 128, 87, 190, 186, 158, 219, 125, 4, 180, 146, 238, 244, 126, 228, 90, 145, 123, 108, 173, 194, 105, 155, 223, 111, 11, 93, 241, 177, 232, 198, 14, 209, 143, 186, 187, 142, 69, 55, 239, 178, 239, 209, 49, 40, 250, 96, 157, 110, 219, 139, 194, 217, 192, 138, 175, 5, 62, 95, 255, 15, 207, 57, 44, 197, 37, 45, 125, 101, 26, 254, 99, 99, 40, 255, 202, 149, 9, 241, 143, 35, 231, 65, 0, 14, 180, 145, 184, 230, 199, 223, 3, 144, 79, 253, 181, 133, 233, 32, 199, 25, 88, 225, 62, 27, 1, 35, 96, 4, 140, 128, 17, 48, 2, 207, 141, 192, 86, 18, 196, 78, 79, 77, 49, 42, 0, 234, 2, 120, 232, 206, 31, 228, 136, 161, 70, 26, 117, 200, 76, 176, 67, 163, 250, 69, 190, 212, 61, 189, 191, 236, 183, 114, 85, 232, 40, 96, 126, 197, 195, 0, 10, 164, 188, 209, 31, 58, 10, 155, 108, 232, 97, 74, 198, 45, 155, 232, 16, 33, 10, 103, 78, 52, 209, 233, 10, 19, 71, 230, 128, 166, 215, 70, 67, 143, 219, 35, 141, 248, 244, 85, 162, 211, 32, 101, 27, 148, 206, 229, 15, 109, 7, 215, 0, 121, 94, 143, 240, 173, 186, 84, 58, 201, 162, 67, 31, 163, 72, 156, 15, 177, 199, 92, 189, 159, 11, 126, 31, 119, 27, 83, 78, 16, 89, 211, 216, 125, 145, 177, 211, 110, 249, 148, 199, 116, 147, 107, 210, 136, 207, 107, 119, 175, 159, 150, 227, 149, 89, 63, 0, 120, 229, 171, 235, 185, 253, 120, 4, 88, 135, 62, 118, 140, 5, 56, 23, 98, 98, 75, 174, 21, 17, 158, 54, 150, 188, 185, 242, 5, 195, 170, 55, 15, 92, 48, 14, 93, 250, 87, 36, 209, 135, 22, 234, 220, 71, 160, 97, 120, 248, 192, 31, 103, 154, 104, 73, 62, 27, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 132, 64, 110, 243, 236, 251, 49, 167, 121, 116, 185, 243, 221, 231, 38, 223, 235, 157, 75, 62, 107, 152, 172, 95, 70, 61, 179, 243, 89, 231, 60, 242, 6, 0, 23, 130, 122, 104, 208, 70, 74, 87, 230, 153, 30, 59, 109, 235, 118, 191, 225, 207, 116, 229, 121, 122, 6, 39, 154, 104, 73, 151, 103, 242, 116, 159, 206, 203, 123, 61, 0, 169, 58, 240, 40, 31, 177, 99, 224, 216, 215, 4, 148, 69, 58, 201, 166, 175, 140, 128, 31, 0, 188, 242, 213, 245, 220, 140, 192, 35, 8, 104, 151, 58, 219, 85, 30, 136, 87, 216, 78, 123, 40, 182, 125, 19, 235, 118, 243, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 115, 34, 208, 247, 127, 248, 126, 252, 185, 25, 233, 6, 86, 84, 61, 75, 190, 70, 241, 195, 70, 19, 45, 233, 244, 172, 52, 167, 198, 175, 40, 133, 226, 49, 7, 218, 7, 70, 117, 12, 178, 100, 4, 238, 32, 224, 7, 0, 119, 0, 178, 217, 8, 252, 9, 4, 250, 102, 121, 201, 235, 233, 237, 113, 83, 93, 79, 120, 151, 62, 199, 170, 205, 233, 30, 197, 89, 62, 87, 38, 153, 79, 180, 219, 158, 116, 57, 182, 213, 247, 122, 157, 44, 116, 225, 232, 55, 0, 174, 128, 106, 181, 17, 48, 2, 70, 192, 8, 24, 129, 23, 66, 64, 101, 194, 172, 17, 168, 1, 98, 126, 89, 11, 64, 59, 47, 155, 244, 87, 233, 241, 147, 234, 170, 121, 84, 180, 156, 80, 189, 217, 56, 11, 155, 19, 159, 83, 91, 12, 0, 61, 238, 117, 154, 68, 98, 82, 165, 195, 141, 38, 89, 180, 180, 151, 231, 97, 7, 3, 154, 40, 106, 154, 228, 146, 46, 207, 248, 117, 159, 206, 203, 123, 213, 131, 96, 134, 127, 167, 170, 33, 207, 233, 154, 136, 178, 153, 190, 3, 2, 31, 123, 0, 192, 111, 21, 255, 192, 242, 183, 47, 104, 254, 86, 14, 250, 14, 104, 121, 142, 191, 1, 129, 90, 170, 42, 113, 254, 98, 253, 134, 62, 126, 94, 74, 205, 90, 116, 141, 144, 127, 84, 52, 168, 142, 250, 39, 87, 190, 109, 1, 79, 115, 156, 248, 55, 57, 14, 190, 243, 175, 77, 242, 42, 149, 143, 226, 198, 70, 81, 95, 11, 80, 95, 145, 39, 47, 71, 208, 72, 175, 35, 135, 22, 167, 28, 75, 156, 210, 37, 28, 249, 255, 250, 34, 241, 35, 42, 30, 153, 81, 241, 3, 117, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 12, 129, 125, 123, 31, 114, 86, 5, 113, 162, 2, 160, 176, 40, 26, 115, 159, 133, 197, 40, 50, 176, 31, 142, 194, 39, 227, 97, 49, 71, 147, 92, 21, 5, 85, 197, 56, 34, 223, 228, 165, 187, 65, 73, 152, 99, 201, 156, 35, 121, 232, 196, 101, 103, 39, 39, 134, 221, 157, 24, 79, 182, 161, 151, 125, 82, 153, 21, 55, 58, 248, 247, 87, 68, 6, 63, 196, 240, 146, 97, 4, 12, 66, 254, 229, 115, 180, 73, 42, 76, 152, 143, 112, 134, 33, 42, 116, 208, 60, 210, 216, 1, 76, 62, 99, 226, 212, 255, 62, 213, 252, 91, 12, 51, 86, 57, 42, 103, 31, 145, 48, 140, 236, 217, 127, 167, 240, 127, 171, 49, 175, 222, 24, 57, 58, 168, 219, 63, 255, 124, 236, 1, 128, 17, 51, 2, 70, 224, 183, 32, 144, 11, 112, 100, 62, 167, 218, 212, 118, 187, 22, 251, 165, 207, 193, 245, 245, 249, 17, 254, 218, 140, 34, 54, 247, 143, 182, 138, 158, 143, 111, 244, 31, 70, 158, 3, 244, 35, 83, 183, 248, 107, 93, 89, 111, 4, 140, 128, 17, 48, 2, 70, 192, 8, 60, 39, 2, 218, 230, 161, 121, 196, 233, 64, 209, 159, 233, 228, 127, 74, 171, 246, 169, 91, 54, 213, 65, 55, 138, 26, 62, 212, 200, 219, 59, 81, 190, 255, 255, 231, 254, 6, 64, 116, 118, 222, 198, 112, 192, 131, 38, 138, 154, 38, 185, 164, 251, 231, 107, 254, 245, 240, 131, 124, 170, 13, 23, 102, 215, 117, 194, 74, 163, 185, 223, 191, 61, 94, 3, 1, 63, 0, 120, 141, 235, 232, 89, 24, 129, 143, 33, 160, 53, 159, 40, 173, 251, 215, 118, 149, 59, 153, 21, 182, 211, 30, 134, 141, 110, 228, 211, 109, 230, 141, 128, 17, 48, 2, 70, 192, 8, 24, 129, 231, 69, 64, 123, 59, 116, 63, 254, 220, 172, 84, 216, 136, 170, 103, 228, 254, 32, 160, 243, 216, 104, 59, 45, 237, 237, 179, 102, 125, 219, 107, 89, 119, 127, 245, 185, 60, 190, 198, 245, 124, 157, 255, 90, 86, 71, 191, 38, 2, 126, 0, 240, 154, 215, 213, 179, 250, 193, 8, 104, 11, 56, 163, 232, 110, 31, 253, 137, 110, 127, 210, 59, 226, 120, 189, 63, 214, 253, 252, 42, 64, 242, 37, 231, 222, 198, 126, 176, 31, 224, 116, 109, 159, 104, 190, 243, 237, 177, 208, 221, 30, 223, 209, 62, 239, 248, 53, 89, 250, 115, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 6, 1, 109, 241, 135, 250, 32, 132, 41, 139, 23, 141, 153, 79, 219, 67, 124, 43, 72, 84, 200, 92, 124, 226, 127, 226, 115, 184, 241, 63, 179, 163, 163, 5, 77, 118, 200, 77, 45, 179, 186, 61, 149, 71, 138, 202, 145, 30, 23, 229, 143, 82, 150, 181, 230, 47, 254, 35, 20, 220, 206, 218, 250, 148, 159, 220, 212, 138, 162, 170, 27, 119, 89, 122, 209, 207, 143, 233, 108, 60, 214, 253, 108, 4, 252, 0, 224, 103, 95, 159, 55, 28, 157, 182, 132, 125, 234, 90, 242, 68, 119, 251, 35, 178, 98, 213, 135, 228, 30, 187, 219, 228, 211, 105, 247, 57, 231, 203, 123, 157, 187, 23, 189, 165, 37, 78, 44, 210, 220, 177, 139, 142, 187, 247, 212, 37, 63, 119, 156, 125, 235, 32, 75, 232, 80, 179, 9, 234, 64, 157, 202, 100, 6, 27, 249, 101, 223, 104, 246, 27, 58, 190, 138, 166, 191, 31, 64, 191, 53, 222, 69, 15, 105, 179, 207, 209, 77, 78, 36, 98, 43, 224, 64, 83, 71, 224, 240, 201, 28, 62, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 133, 128, 182, 249, 81, 10, 156, 191, 238, 31, 198, 188, 49, 77, 74, 221, 48, 106, 159, 67, 157, 211, 10, 12, 234, 149, 105, 171, 82, 34, 227, 67, 87, 121, 6, 149, 188, 81, 98, 107, 92, 163, 70, 226, 147, 140, 95, 251, 167, 255, 173, 15, 216, 108, 248, 193, 68, 180, 116, 162, 229, 48, 206, 165, 36, 237, 244, 39, 106, 200, 135, 225, 135, 174, 234, 173, 102, 31, 163, 59, 164, 236, 66, 13, 126, 105, 40, 212, 162, 77, 117, 118, 84, 230, 26, 73, 241, 57, 24, 156, 52, 144, 228, 135, 140, 110, 202, 232, 198, 17, 164, 38, 209, 48, 13, 223, 3, 222, 195, 85, 33, 250, 186, 103, 134, 30, 78, 120, 208, 166, 231, 55, 241, 61, 39, 51, 38, 127, 167, 216, 221, 30, 69, 192, 15, 0, 30, 69, 202, 126, 70, 224, 155, 16, 232, 75, 35, 41, 187, 124, 127, 185, 236, 11, 50, 177, 181, 193, 205, 184, 216, 113, 114, 125, 79, 10, 95, 114, 174, 145, 172, 147, 251, 193, 0, 208, 245, 38, 185, 249, 206, 61, 35, 116, 179, 175, 136, 185, 199, 31, 38, 215, 251, 48, 111, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 4, 2, 212, 2, 180, 67, 77, 16, 194, 148, 197, 139, 238, 190, 119, 229, 86, 144, 168, 144, 217, 239, 176, 165, 255, 44, 85, 237, 67, 188, 248, 91, 20, 155, 236, 193, 206, 110, 225, 163, 49, 119, 154, 104, 85, 107, 165, 43, 125, 15, 94, 250, 199, 185, 21, 79, 31, 235, 168, 158, 214, 205, 59, 54, 116, 58, 118, 185, 235, 31, 239, 221, 158, 207, 141, 128, 31, 0, 60, 247, 245, 243, 232, 141, 192, 227, 8, 104, 179, 90, 123, 198, 197, 134, 149, 201, 176, 107, 199, 122, 60, 187, 61, 141, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 135, 17, 80, 113, 179, 119, 43, 189, 104, 255, 244, 191, 243, 216, 105, 162, 37, 93, 202, 210, 139, 126, 119, 161, 116, 47, 223, 62, 62, 141, 67, 180, 219, 59, 47, 187, 169, 17, 88, 8, 248, 1, 192, 194, 194, 156, 17, 248, 107, 8, 104, 217, 135, 174, 79, 245, 251, 83, 89, 248, 186, 47, 95, 84, 58, 249, 181, 5, 31, 246, 35, 71, 159, 249, 173, 184, 230, 183, 198, 177, 141, 43, 12, 243, 213, 48, 156, 104, 162, 37, 249, 108, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 8, 2, 218, 226, 161, 243, 8, 102, 242, 232, 119, 185, 251, 94, 240, 103, 245, 205, 170, 117, 214, 167, 217, 163, 96, 225, 109, 0, 94, 85, 156, 111, 5, 244, 27, 252, 206, 95, 43, 112, 98, 0, 25, 27, 148, 134, 27, 237, 22, 85, 42, 249, 237, 114, 38, 88, 39, 176, 160, 137, 150, 244, 61, 231, 194, 89, 152, 209, 135, 248, 78, 133, 31, 125, 106, 176, 154, 224, 174, 235, 250, 239, 25, 163, 179, 252, 44, 4, 252, 0, 224, 103, 93, 143, 223, 62, 154, 249, 189, 236, 223, 222, 211, 251, 117, 80, 11, 240, 245, 121, 107, 129, 102, 225, 213, 119, 223, 68, 217, 184, 88, 176, 47, 118, 155, 12, 10, 189, 46, 28, 27, 220, 153, 31, 221, 226, 22, 27, 152, 190, 203, 63, 243, 177, 169, 105, 83, 20, 63, 232, 175, 160, 105, 138, 224, 250, 95, 210, 86, 126, 244, 234, 134, 33, 208, 146, 102, 31, 244, 83, 186, 121, 158, 78, 252, 63, 126, 249, 193, 191, 206, 112, 204, 110, 201, 51, 202, 140, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 228, 8, 204, 18, 32, 230, 177, 118, 126, 237, 254, 65, 179, 198, 129, 50, 209, 81, 239, 40, 72, 115, 191, 87, 223, 224, 63, 107, 15, 152, 58, 178, 63, 242, 71, 221, 162, 154, 138, 84, 201, 163, 11, 207, 170, 66, 228, 95, 15, 4, 84, 35, 137, 42, 119, 202, 184, 18, 153, 116, 116, 133, 106, 151, 209, 141, 22, 85, 84, 114, 244, 151, 173, 138, 170, 236, 31, 121, 214, 85, 101, 141, 243, 244, 156, 154, 155, 204, 13, 119, 76, 53, 199, 202, 154, 115, 15, 37, 152, 84, 55, 26, 120, 245, 80, 254, 221, 23, 236, 66, 214, 65, 62, 48, 189, 117, 180, 249, 146, 111, 111, 103, 186, 221, 231, 243, 50, 217, 153, 211, 78, 63, 159, 241, 221, 34, 253, 0, 224, 221, 174, 184, 231, 251, 35, 17, 208, 66, 9, 93, 139, 56, 27, 87, 223, 188, 106, 169, 43, 159, 51, 191, 182, 192, 195, 222, 59, 216, 3, 105, 45, 236, 32, 159, 197, 167, 67, 157, 214, 56, 182, 113, 133, 65, 155, 72, 109, 60, 225, 143, 179, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 114, 8, 104, 139, 63, 212, 5, 212, 2, 49, 211, 121, 236, 114, 183, 93, 240, 189, 246, 169, 90, 136, 98, 165, 106, 162, 35, 205, 34, 38, 111, 116, 163, 104, 57, 252, 145, 63, 138, 28, 29, 103, 5, 205, 166, 67, 204, 70, 158, 197, 74, 117, 151, 42, 29, 142, 138, 207, 160, 58, 213, 135, 32, 189, 28, 218, 157, 118, 25, 228, 30, 111, 171, 94, 164, 143, 142, 223, 165, 92, 3, 236, 3, 166, 31, 201, 162, 143, 247, 109, 207, 231, 67, 192, 15, 0, 158, 239, 154, 121, 196, 70, 224, 115, 8, 244, 189, 69, 252, 78, 201, 140, 238, 99, 251, 206, 231, 198, 227, 40, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 124, 26, 1, 10, 150, 189, 144, 233, 58, 37, 150, 174, 62, 253, 175, 7, 3, 210, 237, 241, 61, 70, 60, 116, 47, 140, 20, 39, 159, 221, 46, 253, 163, 116, 143, 223, 243, 223, 203, 179, 251, 239, 242, 181, 120, 252, 30, 245, 189, 150, 195, 250, 103, 67, 192, 15, 0, 158, 237, 138, 121, 188, 47, 133, 0, 203, 253, 87, 143, 83, 64, 180, 158, 111, 148, 135, 228, 172, 243, 73, 199, 27, 0, 114, 81, 30, 249, 228, 126, 176, 27, 229, 180, 209, 107, 115, 216, 220, 44, 26, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 134, 128, 110, 93, 175, 213, 2, 247, 245, 253, 19, 235, 250, 132, 191, 110, 74, 85, 132, 108, 186, 249, 137, 255, 178, 239, 254, 235, 211, 127, 221, 244, 223, 242, 141, 11, 146, 197, 207, 184, 48, 184, 210, 62, 74, 43, 170, 206, 163, 187, 196, 38, 120, 165, 18, 86, 221, 245, 59, 248, 245, 169, 191, 234, 74, 97, 138, 44, 190, 211, 194, 116, 93, 155, 219, 242, 119, 140, 209, 57, 126, 14, 2, 255, 215, 127, 17, 249, 229, 68, 238, 191, 164, 210, 49, 228, 226, 249, 53, 146, 182, 83, 60, 220, 222, 29, 129, 254, 251, 244, 252, 88, 104, 54, 69, 251, 235, 91, 104, 14, 71, 19, 242, 245, 247, 180, 143, 197, 148, 239, 80, 197, 191, 153, 185, 0, 135, 111, 186, 115, 226, 223, 18, 95, 86, 19, 133, 31, 71, 126, 247, 170, 197, 101, 16, 126, 242, 29, 119, 234, 153, 23, 62, 142, 252, 190, 215, 208, 231, 191, 211, 224, 235, 123, 254, 208, 10, 253, 245, 31, 126, 193, 211, 134, 142, 220, 98, 97, 240, 205, 35, 93, 150, 241, 223, 248, 78, 91, 30, 17, 144, 63, 49, 217, 127, 153, 48, 9, 244, 222, 255, 160, 169, 239, 54, 124, 242, 8, 226, 102, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 8, 2, 212, 56, 236, 241, 84, 18, 163, 33, 206, 61, 159, 26, 161, 217, 210, 132, 172, 3, 215, 163, 61, 43, 134, 80, 37, 197, 63, 124, 103, 45, 133, 47, 69, 10, 105, 187, 126, 230, 59, 230, 90, 253, 160, 175, 60, 179, 40, 202, 24, 212, 91, 204, 38, 50, 2, 26, 227, 233, 77, 110, 57, 124, 9, 162, 225, 40, 86, 246, 148, 165, 220, 105, 79, 188, 241, 123, 191, 211, 28, 6, 165, 73, 29, 2, 157, 17, 112, 147, 226, 163, 72, 81, 50, 116, 253, 144, 67, 151, 233, 16, 91, 3, 123, 53, 217, 69, 209, 139, 135, 210, 36, 19, 5, 191, 83, 124, 86, 70, 164, 229, 87, 210, 253, 179, 250, 218, 243, 220, 143, 124, 47, 15, 191, 1, 240, 94, 215, 219, 179, 253, 97, 8, 104, 49, 252, 10, 61, 157, 18, 43, 223, 201, 161, 253, 45, 233, 176, 39, 225, 52, 90, 183, 205, 28, 50, 94, 161, 103, 227, 191, 226, 106, 181, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 98, 8, 232, 198, 235, 172, 30, 184, 175, 211, 13, 230, 186, 201, 223, 139, 152, 186, 217, 84, 225, 18, 148, 155, 215, 211, 130, 101, 248, 228, 247, 255, 197, 223, 163, 113, 49, 84, 32, 233, 186, 16, 162, 38, 254, 30, 149, 63, 148, 124, 241, 95, 226, 146, 236, 255, 210, 42, 156, 186, 107, 241, 74, 46, 203, 117, 79, 121, 136, 94, 226, 219, 241, 100, 12, 103, 178, 176, 62, 179, 75, 167, 56, 245, 100, 250, 42, 8, 248, 1, 192, 171, 92, 73, 207, 195, 8, 60, 130, 0, 155, 16, 27, 210, 160, 121, 131, 31, 113, 108, 59, 58, 22, 243, 72, 66, 251, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 111, 32, 64, 229, 66, 235, 116, 86, 51, 67, 47, 249, 22, 237, 57, 224, 207, 154, 250, 144, 237, 241, 27, 244, 138, 24, 223, 187, 84, 120, 61, 26, 152, 18, 183, 220, 199, 182, 247, 119, 180, 222, 151, 190, 26, 127, 191, 7, 123, 60, 47, 2, 126, 0, 240, 188, 215, 206, 35, 127, 82, 4, 250, 18, 175, 167, 182, 76, 69, 252, 109, 90, 79, 108, 143, 155, 93, 3, 98, 219, 223, 242, 1, 116, 232, 58, 101, 159, 68, 238, 55, 250, 18, 201, 212, 125, 197, 119, 223, 214, 219, 28, 51, 186, 125, 220, 211, 79, 134, 169, 48, 99, 4, 140, 128, 17, 48, 2, 70, 192, 8, 188, 18, 2, 108, 245, 52, 109, 249, 159, 165, 149, 133, 60, 189, 222, 81, 149, 242, 1, 122, 40, 116, 238, 197, 69, 175, 233, 175, 222, 145, 79, 120, 233, 30, 165, 45, 133, 240, 33, 84, 124, 51, 127, 137, 61, 199, 122, 125, 122, 255, 145, 55, 0, 106, 32, 154, 224, 151, 134, 229, 224, 31, 140, 128, 31, 0, 252, 224, 139, 243, 10, 67, 219, 23, 185, 93, 254, 147, 115, 188, 213, 247, 249, 226, 89, 163, 187, 21, 215, 199, 223, 115, 176, 186, 235, 43, 241, 248, 172, 175, 194, 199, 162, 26, 31, 191, 235, 255, 173, 170, 157, 82, 118, 201, 249, 17, 61, 31, 211, 207, 99, 244, 68, 39, 82, 179, 57, 38, 15, 173, 163, 118, 44, 190, 253, 95, 223, 253, 79, 89, 119, 241, 131, 214, 255, 139, 182, 252, 107, 191, 195, 251, 240, 114, 93, 117, 22, 185, 195, 80, 41, 196, 54, 29, 125, 167, 61, 200, 229, 248, 81, 142, 35, 136, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 154, 8, 176, 221, 211, 180, 237, 39, 149, 178, 76, 101, 20, 175, 226, 65, 69, 70, 163, 235, 198, 191, 156, 15, 57, 123, 31, 81, 131, 28, 109, 84, 50, 232, 170, 162, 57, 254, 29, 165, 170, 121, 142, 149, 142, 138, 24, 40, 173, 226, 83, 26, 185, 115, 88, 101, 156, 245, 142, 68, 209, 125, 154, 210, 207, 41, 161, 136, 124, 61, 175, 106, 175, 99, 254, 250, 138, 192, 140, 31, 140, 242, 103, 252, 110, 108, 62, 71, 44, 10, 135, 229, 174, 232, 157, 46, 15, 113, 43, 207, 192, 49, 12, 133, 169, 168, 244, 149, 75, 254, 138, 23, 213, 184, 37, 119, 138, 141, 232, 157, 226, 163, 56, 141, 20, 221, 119, 180, 213, 87, 253, 22, 124, 71, 206, 103, 206, 225, 7, 0, 207, 124, 245, 60, 246, 167, 68, 64, 139, 27, 131, 135, 151, 44, 254, 54, 173, 133, 119, 237, 68, 219, 18, 137, 216, 142, 237, 222, 127, 126, 186, 159, 62, 241, 54, 154, 162, 91, 200, 244, 233, 177, 51, 39, 131, 110, 77, 99, 69, 37, 94, 116, 186, 93, 40, 166, 197, 140, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 228, 8, 176, 205, 211, 180, 221, 127, 133, 86, 38, 114, 245, 122, 231, 80, 165, 132, 203, 3, 114, 222, 101, 63, 224, 119, 168, 132, 70, 239, 132, 209, 68, 175, 241, 178, 95, 163, 153, 164, 78, 194, 8, 215, 226, 165, 145, 147, 146, 72, 254, 24, 189, 196, 28, 252, 116, 77, 196, 223, 167, 213, 235, 215, 198, 242, 177, 145, 219, 251, 111, 32, 224, 7, 0, 127, 3, 117, 247, 105, 4, 190, 136, 192, 190, 109, 60, 148, 142, 245, 60, 142, 185, 39, 18, 36, 121, 36, 140, 63, 242, 63, 117, 94, 254, 1, 200, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 62, 4, 70, 209, 147, 119, 241, 247, 120, 102, 247, 108, 85, 207, 94, 9, 238, 227, 191, 39, 63, 223, 21, 245, 136, 191, 15, 1, 63, 0, 248, 62, 44, 157, 201, 8, 156, 34, 192, 18, 173, 67, 14, 215, 100, 233, 239, 81, 242, 200, 71, 57, 39, 221, 246, 185, 254, 73, 254, 188, 249, 199, 103, 252, 61, 154, 116, 143, 211, 164, 240, 87, 142, 91, 251, 163, 198, 147, 180, 11, 115, 96, 102, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 87, 67, 128, 45, 159, 214, 183, 254, 252, 26, 228, 174, 187, 33, 19, 127, 222, 178, 58, 9, 211, 29, 122, 40, 112, 238, 248, 94, 228, 162, 103, 98, 70, 19, 43, 138, 250, 140, 63, 211, 41, 199, 21, 10, 70, 61, 108, 119, 19, 150, 187, 254, 158, 188, 94, 211, 215, 117, 208, 167, 253, 75, 94, 57, 52, 130, 107, 20, 79, 217, 86, 148, 185, 215, 65, 192, 15, 0, 94, 231, 90, 62, 52, 147, 92, 31, 155, 103, 126, 119, 187, 201, 95, 101, 251, 114, 161, 69, 238, 179, 139, 217, 87, 199, 242, 29, 241, 26, 59, 244, 222, 209, 251, 235, 190, 103, 122, 233, 230, 43, 110, 243, 11, 245, 32, 24, 139, 246, 248, 238, 191, 254, 86, 64, 110, 164, 145, 180, 111, 168, 185, 54, 163, 139, 136, 67, 120, 24, 230, 79, 165, 203, 117, 92, 186, 140, 211, 70, 25, 180, 126, 112, 137, 31, 228, 30, 35, 97, 92, 216, 52, 197, 41, 213, 57, 137, 154, 105, 254, 255, 127, 251, 32, 39, 90, 12, 110, 12, 60, 253, 125, 50, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 11, 1, 106, 1, 42, 4, 104, 111, 163, 120, 64, 181, 155, 186, 91, 154, 185, 97, 61, 59, 42, 52, 203, 162, 145, 134, 84, 235, 24, 49, 153, 31, 158, 182, 104, 141, 43, 171, 151, 212, 159, 203, 152, 218, 88, 43, 5, 231, 187, 109, 116, 91, 126, 74, 113, 131, 98, 58, 196, 16, 217, 252, 197, 78, 93, 101, 126, 224, 60, 35, 79, 124, 203, 118, 124, 72, 80, 24, 49, 150, 203, 67, 185, 46, 105, 142, 125, 244, 80, 188, 124, 78, 186, 253, 128, 74, 121, 149, 109, 151, 143, 169, 228, 181, 211, 163, 151, 165, 235, 8, 248, 1, 192, 117, 108, 108, 49, 2, 223, 130, 0, 139, 152, 14, 37, 188, 38, 75, 255, 17, 170, 156, 147, 178, 30, 182, 131, 61, 173, 31, 211, 214, 223, 0, 80, 8, 127, 23, 32, 58, 239, 254, 157, 191, 181, 33, 29, 198, 220, 133, 57, 48, 51, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 171, 33, 192, 150, 79, 235, 91, 127, 255, 192, 226, 160, 223, 253, 134, 76, 252, 121, 107, 5, 205, 44, 96, 78, 116, 20, 43, 183, 236, 87, 109, 173, 24, 234, 3, 32, 93, 111, 93, 78, 62, 78, 7, 221, 249, 31, 241, 235, 41, 224, 193, 162, 135, 45, 123, 105, 133, 101, 121, 46, 235, 61, 238, 120, 115, 191, 93, 139, 232, 177, 242, 246, 158, 207, 248, 51, 221, 189, 158, 109, 127, 70, 4, 252, 0, 224, 25, 175, 154, 199, 108, 4, 62, 129, 128, 110, 228, 121, 138, 158, 251, 100, 228, 16, 101, 251, 227, 152, 55, 255, 240, 113, 184, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 249, 16, 80, 21, 3, 189, 117, 104, 102, 242, 151, 124, 143, 174, 91, 245, 242, 252, 104, 252, 189, 252, 95, 181, 239, 227, 217, 229, 175, 230, 119, 252, 51, 35, 224, 7, 0, 207, 124, 245, 60, 246, 167, 71, 64, 111, 199, 179, 141, 76, 62, 132, 148, 119, 93, 215, 99, 187, 51, 123, 221, 240, 139, 178, 255, 117, 94, 50, 105, 216, 22, 242, 104, 62, 242, 21, 77, 135, 59, 125, 158, 153, 15, 227, 60, 8, 103, 222, 214, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 207, 134, 192, 217, 246, 142, 238, 236, 96, 110, 103, 254, 53, 231, 89, 145, 132, 8, 175, 38, 126, 183, 63, 40, 83, 204, 172, 106, 103, 227, 17, 149, 127, 244, 183, 137, 135, 161, 224, 210, 237, 226, 69, 119, 251, 72, 249, 29, 228, 12, 183, 222, 237, 234, 99, 215, 222, 146, 101, 19, 93, 89, 204, 189, 38, 2, 126, 0, 240, 154, 215, 245, 27, 103, 117, 182, 212, 92, 79, 191, 123, 239, 242, 245, 200, 43, 22, 18, 40, 73, 208, 77, 188, 18, 244, 73, 117, 235, 103, 118, 164, 14, 207, 40, 221, 40, 166, 119, 121, 230, 59, 116, 135, 155, 252, 30, 219, 249, 145, 183, 191, 62, 167, 174, 242, 111, 3, 104, 3, 139, 143, 242, 245, 125, 185, 220, 137, 198, 157, 250, 188, 97, 207, 49, 177, 152, 215, 119, 251, 245, 201, 63, 223, 243, 87, 10, 237, 119, 229, 21, 106, 76, 237, 152, 41, 50, 203, 178, 17, 175, 88, 77, 23, 223, 57, 191, 20, 80, 132, 159, 120, 168, 155, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 82, 8, 168, 132, 81, 61, 144, 84, 74, 21, 28, 141, 82, 187, 80, 68, 168, 134, 57, 210, 85, 235, 85, 62, 249, 161, 175, 87, 217, 83, 31, 41, 202, 94, 148, 106, 35, 243, 206, 126, 128, 56, 43, 144, 13, 107, 116, 251, 113, 205, 87, 185, 87, 138, 204, 168, 180, 65, 15, 211, 148, 91, 179, 195, 82, 127, 101, 19, 69, 232, 252, 46, 203, 118, 66, 165, 154, 241, 161, 232, 56, 44, 190, 97, 21, 249, 15, 216, 157, 200, 251, 128, 174, 249, 79, 236, 152, 84, 30, 36, 219, 249, 236, 224, 218, 192, 74, 63, 39, 50, 124, 145, 53, 248, 96, 39, 176, 2, 184, 251, 99, 119, 251, 18, 2, 126, 0, 240, 37, 248, 28, 108, 4, 190, 134, 64, 191, 97, 158, 124, 44, 118, 90, 3, 15, 186, 174, 143, 110, 181, 38, 94, 27, 65, 191, 145, 23, 207, 134, 145, 55, 238, 44, 164, 124, 223, 127, 4, 67, 243, 64, 23, 137, 229, 223, 233, 116, 190, 214, 225, 21, 253, 97, 156, 7, 225, 74, 128, 213, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 83, 33, 112, 182, 189, 163, 59, 59, 152, 216, 153, 127, 77, 120, 86, 36, 33, 170, 74, 193, 34, 126, 183, 63, 40, 207, 226, 231, 138, 191, 210, 215, 32, 86, 119, 87, 229, 22, 144, 108, 252, 13, 128, 166, 58, 240, 202, 241, 13, 244, 12, 183, 222, 237, 234, 98, 215, 126, 84, 94, 153, 204, 189, 30, 2, 126, 0, 240, 122, 215, 212, 51, 50, 2, 23, 8, 176, 236, 115, 176, 113, 240, 93, 127, 104, 110, 5, 113, 146, 45, 105, 24, 146, 114, 146, 79, 177, 229, 63, 120, 19, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 89, 4, 70, 113, 242, 80, 167, 242, 205, 170, 38, 34, 110, 81, 18, 202, 255, 161, 228, 225, 180, 223, 138, 127, 52, 254, 209, 126, 174, 249, 237, 253, 253, 237, 241, 92, 27, 167, 245, 63, 17, 1, 63, 0, 248, 137, 87, 197, 99, 122, 11, 4, 180, 84, 67, 243, 147, 126, 168, 142, 96, 230, 167, 255, 210, 137, 98, 139, 117, 127, 250, 14, 125, 144, 139, 166, 79, 240, 217, 215, 58, 223, 247, 65, 182, 144, 121, 52, 63, 249, 139, 146, 188, 243, 23, 157, 13, 133, 198, 117, 205, 110, 189, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 90, 8, 176, 247, 211, 84, 3, 156, 209, 110, 239, 252, 53, 95, 124, 90, 133, 82, 226, 170, 88, 54, 219, 172, 100, 62, 161, 39, 53, 241, 223, 212, 148, 74, 148, 180, 103, 252, 153, 174, 251, 62, 106, 199, 79, 135, 226, 41, 216, 196, 23, 183, 157, 123, 242, 155, 142, 91, 156, 197, 87, 64, 224, 255, 242, 95, 234, 254, 59, 240, 10, 51, 243, 28, 190, 9, 129, 253, 151, 67, 75, 252, 55, 165, 255, 96, 154, 47, 143, 102, 223, 101, 232, 255, 55, 78, 73, 169, 103, 183, 193, 36, 63, 20, 220, 228, 207, 254, 155, 238, 160, 14, 225, 240, 48, 0, 16, 228, 208, 104, 230, 10, 19, 223, 241, 159, 7, 50, 238, 113, 146, 174, 54, 137, 84, 160, 12, 145, 31, 252, 126, 253, 243, 159, 98, 145, 58, 159, 114, 56, 5, 157, 231, 10, 74, 153, 147, 134, 146, 30, 8, 106, 50, 32, 119, 189, 236, 166, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 19, 35, 80, 181, 65, 213, 8, 42, 14, 68, 199, 180, 66, 172, 18, 160, 124, 15, 127, 211, 136, 218, 34, 106, 142, 30, 95, 223, 65, 111, 223, 99, 207, 248, 229, 35, 187, 98, 254, 29, 241, 210, 239, 244, 152, 159, 49, 173, 92, 57, 194, 140, 79, 174, 78, 152, 123, 187, 37, 203, 38, 74, 220, 224, 153, 243, 76, 29, 186, 89, 6, 117, 223, 222, 207, 25, 47, 95, 81, 124, 196, 7, 37, 231, 60, 166, 28, 216, 137, 135, 94, 59, 122, 172, 248, 240, 189, 108, 82, 14, 10, 145, 234, 210, 249, 7, 107, 158, 118, 224, 223, 138, 169, 223, 0, 248, 86, 56, 157, 204, 8, 60, 142, 128, 54, 129, 92, 180, 227, 52, 23, 239, 72, 49, 111, 248, 119, 189, 108, 177, 126, 29, 252, 175, 116, 203, 166, 163, 131, 133, 250, 63, 226, 226, 200, 69, 123, 208, 131, 24, 130, 252, 47, 40, 97, 195, 126, 165, 187, 84, 107, 92, 183, 124, 108, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 7, 1, 246, 126, 154, 106, 128, 51, 218, 237, 157, 191, 230, 139, 207, 161, 96, 185, 144, 15, 21, 204, 230, 251, 17, 155, 250, 201, 14, 190, 126, 162, 107, 154, 232, 53, 254, 187, 236, 125, 170, 234, 139, 130, 77, 124, 113, 119, 206, 125, 48, 119, 92, 109, 126, 122, 4, 252, 0, 224, 233, 47, 161, 39, 96, 4, 238, 35, 48, 151, 245, 177, 73, 228, 190, 32, 62, 194, 97, 249, 219, 0, 186, 193, 79, 58, 244, 135, 216, 208, 185, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 207, 35, 48, 43, 146, 47, 118, 189, 231, 65, 222, 117, 95, 236, 162, 135, 43, 181, 40, 54, 221, 160, 79, 63, 61, 66, 145, 162, 57, 139, 21, 205, 248, 225, 63, 117, 131, 153, 114, 216, 197, 67, 85, 216, 41, 125, 62, 170, 65, 63, 142, 169, 55, 243, 14, 8, 248, 1, 192, 59, 92, 101, 207, 241, 103, 33, 16, 107, 178, 150, 249, 249, 73, 127, 140, 112, 242, 216, 175, 29, 248, 117, 223, 27, 51, 203, 117, 63, 78, 185, 199, 104, 129, 63, 161, 7, 213, 240, 207, 125, 98, 231, 163, 175, 185, 95, 17, 244, 64, 99, 172, 184, 66, 221, 140, 128, 17, 48, 2, 70, 192, 8, 24, 129, 215, 68, 64, 251, 124, 214, 40, 49, 197, 157, 50, 107, 249, 236, 60, 242, 245, 70, 21, 209, 139, 14, 201, 191, 131, 94, 31, 197, 193, 162, 225, 60, 74, 9, 150, 111, 231, 207, 116, 159, 177, 147, 71, 135, 226, 149, 91, 84, 3, 144, 159, 40, 254, 52, 61, 32, 144, 127, 254, 47, 161, 202, 228, 243, 235, 33, 240, 137, 7, 0, 243, 55, 99, 160, 33, 249, 245, 192, 121, 197, 25, 113, 99, 249, 212, 77, 59, 202, 62, 9, 205, 75, 244, 204, 126, 205, 182, 251, 78, 57, 126, 183, 179, 191, 157, 134, 67, 234, 143, 244, 234, 77, 123, 248, 30, 108, 228, 31, 58, 216, 108, 200, 193, 220, 58, 134, 231, 145, 40, 15, 129, 217, 234, 223, 35, 235, 120, 190, 234, 31, 11, 62, 223, 229, 207, 157, 161, 76, 135, 69, 190, 108, 124, 250, 207, 95, 0, 192, 151, 175, 9, 84, 76, 253, 13, 128, 229, 174, 187, 255, 212, 87, 198, 140, 161, 219, 154, 95, 124, 223, 44, 58, 253, 21, 71, 254, 158, 37, 255, 239, 208, 165, 87, 77, 16, 214, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 93, 4, 84, 115, 68, 165, 64, 13, 162, 239, 252, 235, 187, 249, 212, 20, 226, 147, 82, 59, 224, 167, 99, 218, 71, 109, 52, 237, 67, 142, 180, 189, 102, 2, 200, 89, 10, 93, 69, 117, 14, 42, 199, 148, 181, 209, 24, 95, 133, 12, 187, 220, 68, 49, 118, 254, 76, 174, 4, 231, 103, 197, 138, 238, 241, 210, 95, 163, 187, 127, 151, 137, 249, 200, 65, 108, 182, 209, 153, 98, 165, 134, 166, 105, 179, 31, 252, 134, 173, 199, 220, 227, 251, 197, 218, 121, 210, 161, 251, 68, 218, 123, 221, 218, 126, 142, 192, 39, 30, 0, 156, 39, 178, 214, 8, 24, 129, 7, 17, 136, 69, 142, 117, 142, 54, 31, 12, 116, 30, 251, 181, 3, 191, 238, 27, 252, 181, 150, 235, 40, 167, 27, 7, 55, 252, 50, 243, 21, 0, 254, 70, 64, 234, 206, 40, 169, 112, 166, 137, 150, 116, 245, 204, 88, 113, 133, 186, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 175, 137, 128, 246, 249, 172, 81, 98, 138, 59, 101, 214, 242, 217, 121, 228, 235, 141, 42, 162, 23, 29, 146, 191, 155, 50, 130, 222, 207, 245, 17, 77, 55, 185, 127, 148, 238, 93, 221, 139, 223, 253, 187, 76, 236, 119, 31, 153, 63, 174, 150, 198, 133, 236, 246, 82, 8, 248, 1, 192, 75, 93, 78, 79, 230, 153, 16, 232, 27, 225, 181, 113, 203, 7, 186, 31, 215, 98, 206, 244, 115, 13, 15, 38, 121, 78, 240, 220, 245, 71, 203, 239, 255, 255, 47, 228, 208, 241, 16, 32, 143, 208, 15, 183, 162, 8, 67, 87, 156, 207, 70, 192, 8, 24, 1, 35, 96, 4, 140, 128, 17, 120, 5, 4, 70, 145, 243, 240, 84, 62, 234, 127, 146, 88, 41, 146, 198, 73, 50, 174, 188, 130, 175, 38, 189, 40, 122, 241, 208, 179, 3, 165, 124, 168, 32, 197, 139, 30, 30, 199, 168, 35, 211, 119, 65, 192, 15, 0, 222, 229, 74, 123, 158, 127, 29, 129, 179, 27, 248, 169, 11, 230, 234, 167, 254, 221, 22, 179, 200, 24, 116, 226, 79, 102, 150, 235, 187, 22, 121, 232, 149, 227, 240, 6, 64, 248, 60, 244, 6, 64, 248, 145, 206, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 127, 6, 1, 21, 50, 247, 122, 147, 223, 103, 232, 149, 220, 42, 122, 190, 139, 210, 141, 134, 39, 190, 211, 107, 188, 250, 239, 118, 229, 249, 221, 116, 62, 48, 232, 131, 96, 32, 110, 207, 136, 128, 31, 0, 60, 227, 85, 123, 227, 49, 235, 166, 23, 8, 224, 213, 186, 94, 186, 71, 104, 222, 116, 227, 56, 146, 73, 238, 249, 122, 63, 215, 114, 118, 31, 241, 147, 6, 67, 222, 195, 29, 251, 166, 155, 230, 161, 191, 246, 48, 32, 251, 31, 107, 239, 204, 217, 82, 167, 41, 78, 241, 85, 185, 114, 29, 84, 119, 236, 249, 10, 63, 186, 113, 232, 149, 254, 254, 127, 0, 152, 159, 254, 135, 79, 127, 64, 64, 140, 66, 147, 239, 57, 224, 71, 99, 46, 217, 230, 164, 66, 146, 82, 116, 184, 152, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 207, 143, 128, 182, 247, 125, 235, 191, 47, 143, 239, 253, 71, 193, 49, 191, 255, 31, 69, 198, 5, 31, 117, 70, 229, 42, 219, 170, 72, 84, 153, 136, 14, 44, 179, 46, 145, 46, 232, 94, 0, 205, 138, 102, 248, 168, 32, 34, 60, 99, 27, 237, 58, 248, 175, 182, 54, 172, 76, 117, 175, 191, 176, 39, 190, 65, 229, 58, 191, 147, 137, 34, 143, 240, 152, 188, 116, 39, 148, 14, 187, 31, 50, 109, 251, 163, 127, 23, 215, 141, 235, 19, 113, 117, 112, 13, 24, 147, 174, 83, 191, 54, 226, 143, 148, 46, 148, 83, 124, 167, 12, 233, 172, 17, 115, 104, 23, 138, 131, 53, 167, 118, 212, 12, 105, 118, 16, 127, 155, 234, 212, 225, 189, 148, 126, 0, 240, 94, 215, 219, 179, 253, 139, 8, 104, 225, 59, 165, 161, 188, 118, 211, 127, 208, 199, 248, 51, 30, 127, 241, 39, 115, 202, 117, 78, 139, 29, 244, 236, 136, 187, 126, 246, 59, 153, 244, 234, 127, 234, 208, 239, 7, 105, 164, 59, 233, 211, 42, 35, 96, 4, 140, 128, 17, 48, 2, 70, 192, 8, 252, 30, 4, 84, 173, 220, 203, 46, 191, 207, 208, 43, 185, 73, 69, 251, 78, 170, 225, 157, 229, 237, 186, 206, 171, 255, 93, 167, 92, 191, 147, 206, 219, 230, 62, 8, 6, 226, 246, 140, 8, 248, 1, 192, 51, 94, 53, 143, 249, 101, 17, 232, 55, 245, 240, 52, 81, 241, 242, 73, 227, 3, 167, 185, 84, 7, 147, 60, 167, 113, 28, 30, 0, 196, 3, 129, 255, 34, 185, 30, 4, 204, 55, 1, 70, 31, 248, 186, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 70, 224, 239, 35, 208, 138, 25, 21, 53, 243, 14, 253, 43, 163, 123, 180, 216, 233, 213, 25, 253, 109, 113, 26, 94, 55, 201, 69, 54, 201, 242, 217, 101, 244, 52, 233, 69, 119, 29, 250, 94, 208, 165, 28, 227, 75, 186, 197, 203, 150, 198, 125, 14, 36, 118, 123, 7, 4, 252, 0, 224, 29, 174, 178, 231, 248, 163, 16, 96, 185, 61, 124, 170, 31, 138, 135, 101, 98, 183, 248, 107, 147, 99, 141, 63, 44, 254, 161, 200, 155, 248, 177, 33, 228, 94, 129, 174, 187, 13, 159, 105, 235, 114, 247, 107, 124, 176, 110, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 155, 34, 160, 219, 200, 172, 79, 2, 3, 209, 175, 193, 113, 168, 78, 90, 42, 233, 155, 234, 192, 202, 126, 135, 246, 130, 136, 74, 40, 101, 18, 193, 143, 132, 95, 161, 196, 30, 226, 67, 232, 114, 255, 35, 127, 124, 15, 147, 38, 251, 53, 254, 204, 142, 238, 119, 29, 115, 28, 113, 69, 39, 62, 40, 221, 158, 29, 129, 79, 60, 0, 224, 159, 53, 191, 105, 59, 125, 118, 40, 60, 126, 35, 112, 137, 0, 191, 229, 180, 157, 150, 246, 120, 198, 103, 247, 203, 27, 123, 244, 97, 208, 49, 157, 134, 191, 226, 20, 59, 179, 18, 131, 0, 213, 129, 216, 55, 0, 228, 84, 140, 213, 63, 200, 47, 254, 125, 198, 127, 168, 227, 191, 104, 48, 104, 139, 38, 207, 66, 142, 46, 245, 229, 247, 95, 216, 255, 11, 153, 35, 254, 27, 71, 249, 44, 29, 134, 74, 153, 244, 200, 174, 169, 49, 240, 253, 8, 213, 114, 64, 112, 51, 2, 70, 192, 8, 24, 1, 35, 96, 4, 94, 1, 1, 182, 252, 189, 29, 202, 128, 168, 29, 234, 59, 227, 162, 250, 254, 248, 53, 122, 44, 35, 86, 241, 81, 189, 252, 27, 133, 202, 250, 14, 122, 240, 155, 156, 69, 76, 43, 88, 186, 125, 229, 234, 5, 13, 60, 77, 180, 164, 117, 222, 103, 184, 249, 41, 213, 158, 98, 234, 35, 94, 33, 169, 147, 48, 122, 152, 126, 146, 155, 93, 172, 104, 246, 49, 198, 163, 184, 143, 80, 197, 103, 177, 23, 66, 207, 155, 221, 147, 59, 148, 122, 72, 129, 31, 5, 92, 246, 129, 126, 196, 100, 60, 242, 80, 36, 37, 129, 28, 196, 67, 191, 216, 198, 116, 51, 245, 151, 82, 245, 177, 125, 41, 209, 83, 7, 127, 226, 1, 192, 83, 207, 215, 131, 55, 2, 127, 29, 1, 214, 176, 121, 67, 31, 194, 135, 248, 147, 216, 107, 19, 202, 37, 78, 235, 92, 163, 125, 157, 206, 181, 59, 18, 76, 115, 48, 232, 120, 253, 63, 109, 131, 226, 112, 225, 59, 226, 174, 245, 111, 189, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 250, 8, 232, 222, 44, 235, 155, 152, 174, 232, 215, 102, 30, 133, 199, 170, 78, 90, 170, 93, 255, 73, 153, 162, 166, 231, 79, 153, 110, 66, 143, 137, 246, 17, 170, 116, 123, 220, 212, 7, 211, 243, 233, 230, 26, 255, 63, 241, 6, 0, 125, 104, 44, 143, 210, 57, 151, 184, 162, 19, 31, 148, 110, 207, 142, 128, 31, 0, 60, 251, 21, 244, 248, 95, 10, 1, 109, 154, 215, 232, 163, 147, 213, 30, 131, 255, 228, 131, 209, 126, 7, 205, 35, 54, 4, 236, 121, 252, 47, 246, 160, 144, 255, 11, 138, 141, 189, 98, 254, 61, 0, 229, 193, 209, 205, 8, 24, 1, 35, 96, 4, 140, 128, 17, 48, 2, 79, 133, 128, 10, 152, 172, 120, 198, 200, 197, 139, 222, 154, 144, 226, 111, 249, 132, 109, 166, 226, 166, 185, 117, 3, 219, 229, 44, 194, 110, 216, 187, 255, 41, 31, 201, 212, 87, 210, 209, 159, 116, 167, 55, 252, 242, 25, 177, 249, 168, 102, 140, 225, 140, 144, 203, 237, 37, 17, 240, 3, 128, 151, 188, 172, 158, 212, 79, 69, 224, 112, 99, 31, 66, 202, 208, 71, 143, 152, 88, 247, 157, 143, 217, 73, 52, 154, 214, 107, 246, 22, 54, 7, 81, 241, 185, 231, 12, 189, 246, 159, 116, 141, 147, 62, 249, 23, 61, 245, 85, 172, 58, 52, 53, 2, 70, 192, 8, 24, 1, 35, 96, 4, 140, 192, 183, 32, 144, 21, 201, 73, 38, 233, 31, 160, 42, 124, 68, 85, 0, 245, 59, 230, 110, 155, 246, 209, 45, 93, 208, 62, 66, 247, 97, 245, 120, 241, 61, 159, 252, 101, 187, 69, 187, 173, 243, 202, 241, 187, 168, 250, 202, 113, 183, 66, 19, 189, 219, 83, 35, 224, 7, 0, 79, 125, 249, 62, 62, 248, 92, 239, 90, 24, 55, 147, 207, 220, 24, 126, 159, 194, 46, 255, 205, 185, 105, 44, 55, 111, 216, 251, 224, 199, 96, 167, 63, 115, 11, 251, 60, 198, 92, 83, 150, 239, 160, 90, 155, 243, 141, 178, 16, 116, 157, 181, 39, 224, 134, 78, 251, 157, 248, 164, 97, 203, 7, 197, 195, 174, 155, 255, 164, 196, 41, 182, 209, 96, 211, 144, 249, 82, 104, 167, 49, 113, 8, 227, 97, 188, 243, 34, 193, 187, 25, 1, 35, 96, 4, 140, 128, 17, 48, 2, 47, 131, 128, 182, 118, 109, 247, 69, 245, 29, 125, 74, 128, 51, 94, 186, 42, 62, 242, 239, 25, 29, 138, 138, 172, 62, 2, 163, 97, 15, 46, 255, 31, 244, 80, 144, 195, 156, 109, 248, 101, 236, 49, 166, 156, 74, 183, 206, 42, 73, 208, 156, 181, 163, 190, 226, 194, 111, 50, 131, 39, 52, 116, 169, 134, 142, 227, 154, 159, 244, 23, 254, 35, 15, 164, 231, 147, 156, 116, 216, 14, 186, 76, 52, 172, 226, 119, 170, 183, 0, 178, 160, 11, 212, 166, 29, 62, 132, 11, 185, 249, 244, 62, 147, 111, 254, 187, 109, 12, 195, 228, 121, 16, 240, 3, 128, 231, 185, 86, 30, 233, 11, 32, 192, 166, 53, 143, 96, 146, 135, 62, 114, 108, 177, 43, 209, 48, 12, 124, 180, 158, 231, 70, 194, 122, 61, 20, 218, 156, 46, 104, 196, 245, 7, 0, 216, 115, 175, 8, 229, 153, 239, 212, 141, 254, 76, 140, 128, 17, 48, 2, 70, 192, 8, 24, 1, 35, 240, 61, 8, 204, 42, 102, 75, 39, 253, 3, 148, 66, 69, 69, 144, 238, 114, 165, 187, 41, 211, 101, 196, 18, 78, 251, 255, 246, 238, 68, 177, 117, 27, 87, 0, 232, 235, 252, 255, 47, 79, 231, 1, 16, 161, 208, 138, 157, 165, 77, 111, 175, 141, 163, 25, 135, 139, 40, 74, 60, 100, 109, 9, 89, 238, 158, 174, 46, 223, 213, 119, 187, 222, 223, 105, 247, 115, 237, 227, 218, 190, 203, 121, 83, 183, 183, 61, 235, 51, 19, 219, 189, 125, 123, 93, 230, 31, 190, 178, 239, 216, 249, 112, 255, 71, 199, 246, 185, 163, 15, 219, 203, 8, 8, 0, 188, 204, 84, 26, 200, 179, 11, 228, 91, 235, 254, 246, 218, 229, 78, 191, 59, 190, 135, 239, 243, 249, 25, 112, 121, 184, 255, 51, 78, 82, 117, 153, 198, 254, 254, 238, 127, 165, 217, 126, 157, 188, 62, 63, 191, 123, 33, 218, 19, 32, 64, 128, 0, 1, 2, 4, 254, 53, 129, 188, 139, 57, 239, 100, 86, 190, 235, 246, 52, 47, 176, 219, 101, 254, 131, 173, 15, 203, 38, 157, 239, 180, 234, 242, 134, 106, 29, 159, 223, 101, 201, 173, 203, 221, 238, 166, 28, 133, 189, 188, 183, 223, 243, 123, 155, 107, 62, 203, 253, 170, 239, 236, 68, 185, 211, 174, 239, 180, 3, 14, 89, 206, 173, 211, 163, 228, 235, 139, 11, 8, 0, 188, 248, 4, 27, 222, 111, 42, 16, 159, 11, 241, 255, 227, 59, 255, 157, 102, 221, 71, 175, 108, 215, 175, 51, 115, 255, 61, 187, 223, 223, 43, 224, 27, 133, 78, 207, 7, 250, 173, 174, 30, 248, 163, 223, 58, 102, 213, 63, 106, 87, 109, 186, 237, 150, 70, 214, 70, 128, 0, 1, 2, 4, 8, 16, 248, 33, 129, 71, 119, 28, 119, 234, 235, 187, 19, 235, 6, 166, 159, 128, 187, 46, 203, 157, 239, 116, 175, 187, 105, 159, 151, 158, 237, 215, 16, 246, 52, 243, 95, 45, 215, 3, 127, 52, 222, 219, 175, 174, 171, 231, 238, 107, 223, 223, 117, 103, 187, 184, 209, 235, 253, 121, 234, 200, 87, 177, 235, 50, 189, 230, 187, 174, 210, 248, 146, 191, 135, 121, 83, 183, 142, 249, 82, 221, 39, 199, 230, 117, 218, 158, 86, 64, 0, 224, 105, 167, 238, 175, 93, 120, 253, 62, 246, 95, 59, 244, 169, 142, 218, 158, 143, 207, 239, 170, 95, 235, 178, 252, 241, 214, 45, 174, 233, 231, 71, 213, 17, 249, 37, 94, 245, 80, 159, 217, 206, 103, 154, 93, 212, 151, 183, 253, 89, 149, 91, 86, 159, 251, 35, 83, 115, 150, 105, 239, 203, 55, 238, 106, 16, 105, 102, 215, 142, 227, 125, 254, 127, 235, 3, 34, 210, 248, 180, 168, 255, 69, 251, 227, 129, 126, 213, 85, 57, 242, 81, 89, 175, 232, 163, 62, 88, 254, 179, 213, 229, 190, 168, 220, 3, 1, 127, 102, 127, 113, 108, 245, 123, 100, 214, 129, 81, 95, 255, 171, 203, 169, 47, 249, 251, 126, 231, 53, 246, 133, 231, 158, 237, 186, 223, 90, 203, 17, 32, 64, 128, 0, 1, 2, 207, 42, 208, 31, 237, 253, 113, 95, 191, 171, 31, 133, 227, 119, 246, 243, 119, 253, 143, 143, 255, 183, 191, 5, 240, 246, 251, 255, 119, 235, 226, 30, 163, 142, 89, 183, 18, 217, 79, 109, 157, 102, 97, 203, 87, 54, 239, 81, 250, 127, 121, 143, 146, 13, 58, 173, 246, 171, 174, 14, 172, 35, 170, 77, 30, 243, 199, 106, 87, 73, 246, 177, 118, 119, 218, 93, 101, 185, 122, 233, 195, 171, 223, 227, 84, 199, 142, 181, 63, 171, 226, 166, 172, 218, 215, 1, 217, 48, 182, 62, 174, 235, 34, 173, 108, 166, 235, 213, 237, 106, 44, 185, 51, 182, 155, 235, 88, 229, 110, 255, 118, 252, 113, 221, 71, 125, 156, 59, 126, 180, 179, 238, 215, 34, 24, 209, 63, 245, 217, 215, 184, 167, 221, 79, 205, 80, 117, 86, 167, 220, 78, 186, 202, 103, 146, 51, 19, 219, 121, 226, 85, 88, 215, 90, 251, 254, 137, 47, 251, 181, 213, 234, 200, 138, 188, 150, 61, 253, 202, 137, 215, 245, 127, 165, 233, 11, 183, 17, 0, 120, 225, 201, 53, 180, 223, 88, 32, 222, 127, 242, 45, 232, 110, 112, 32, 247, 221, 123, 101, 251, 117, 204, 145, 57, 42, 238, 189, 231, 246, 251, 100, 191, 177, 119, 154, 255, 204, 95, 230, 247, 7, 251, 123, 109, 107, 255, 106, 219, 199, 230, 123, 236, 217, 54, 78, 189, 231, 163, 104, 35, 64, 128, 0, 1, 2, 4, 8, 252, 144, 192, 126, 151, 241, 73, 62, 111, 84, 234, 38, 101, 107, 215, 117, 123, 253, 189, 186, 155, 253, 121, 233, 209, 71, 118, 147, 219, 158, 118, 215, 143, 234, 247, 253, 251, 79, 0, 236, 245, 31, 245, 247, 174, 93, 220, 241, 109, 237, 107, 247, 86, 174, 125, 55, 229, 213, 190, 27, 214, 205, 219, 94, 183, 198, 83, 251, 191, 146, 255, 228, 216, 116, 176, 61, 173, 128, 0, 192, 211, 78, 157, 11, 127, 25, 129, 120, 143, 205, 45, 147, 149, 61, 243, 143, 202, 117, 192, 23, 191, 228, 231, 80, 190, 242, 179, 224, 76, 35, 95, 159, 13, 157, 198, 137, 238, 253, 13, 128, 179, 77, 30, 159, 231, 203, 47, 149, 201, 130, 141, 0, 1, 2, 4, 8, 16, 32, 240, 155, 9, 244, 125, 74, 167, 121, 227, 178, 231, 235, 114, 179, 226, 250, 202, 29, 103, 195, 106, 245, 246, 101, 221, 145, 245, 33, 221, 244, 218, 188, 203, 221, 174, 211, 189, 125, 215, 221, 107, 219, 237, 246, 107, 222, 219, 245, 254, 238, 227, 90, 238, 250, 250, 227, 78, 81, 168, 27, 191, 104, 84, 229, 72, 123, 127, 166, 189, 117, 93, 151, 165, 47, 47, 32, 0, 240, 242, 83, 108, 128, 191, 139, 64, 126, 116, 212, 43, 190, 156, 233, 53, 159, 229, 71, 175, 237, 248, 51, 66, 16, 117, 249, 163, 255, 251, 214, 239, 227, 231, 195, 123, 84, 236, 249, 252, 238, 254]);
fileData10.push.apply(fileData10, [205, 79, 0, 228, 254, 236, 39, 95, 153, 143, 87, 239, 175, 207, 159, 85, 87, 251, 214, 137, 186, 221, 126, 94, 121, 2, 4, 8, 16, 32, 64, 128, 192, 207, 11, 228, 29, 74, 110, 153, 174, 155, 146, 143, 210, 125, 223, 158, 207, 155, 151, 44, 239, 117, 123, 62, 119, 85, 57, 211, 216, 170, 188, 210, 237, 208, 187, 245, 221, 62, 219, 229, 67, 119, 110, 235, 152, 190, 127, 234, 123, 167, 155, 52, 155, 109, 125, 87, 54, 190, 116, 90, 221, 220, 43, 103, 221, 86, 127, 211, 103, 239, 251, 66, 218, 215, 248, 150, 198, 77, 101, 28, 247, 214, 249, 42, 231, 133, 216, 94, 70, 64, 0, 224, 101, 166, 210, 64, 14, 129, 124, 26, 126, 255, 250, 163, 234, 178, 69, 238, 219, 183, 163, 109, 238, 127, 107, 179, 239, 127, 203, 31, 71, 118, 203, 111, 166, 251, 83, 125, 118, 185, 46, 163, 206, 30, 95, 206, 52, 243, 85, 56, 210, 235, 97, 117, 104, 238, 95, 91, 62, 252, 103, 177, 222, 171, 87, 218, 133, 189, 46, 63, 24, 242, 243, 168, 31, 236, 251, 131, 226, 44, 119, 31, 209, 174, 247, 157, 105, 236, 203, 62, 179, 124, 166, 89, 23, 91, 183, 217, 207, 121, 236, 57, 190, 110, 151, 186, 87, 203, 19, 32, 64, 128, 0, 1, 2, 47, 34, 208, 159, 245, 153, 214, 43, 190, 156, 127, 7, 32, 235, 226, 254, 161, 238, 103, 50, 93, 109, 206, 161, 175, 186, 188, 161, 200, 223, 197, 207, 191, 9, 80, 249, 243, 134, 35, 203, 217, 186, 211, 61, 95, 59, 142, 99, 162, 250, 232, 251, 237, 119, 250, 207, 27, 151, 189, 175, 236, 233, 188, 161, 57, 142, 169, 98, 30, 223, 167, 56, 186, 61, 79, 153, 251, 143, 191, 127, 148, 7, 31, 175, 74, 170, 126, 85, 197, 77, 214, 209, 110, 149, 123, 223, 106, 223, 199, 197, 209, 103, 31, 103, 221, 222, 182, 247, 127, 150, 118, 191, 221, 174, 203, 239, 210, 80, 169, 155, 189, 104, 88, 55, 130, 89, 206, 124, 158, 52, 175, 249, 237, 111, 21, 236, 227, 92, 51, 17, 77, 242, 127, 217, 238, 237, 117, 84, 28, 229, 35, 223, 119, 208, 153, 102, 235, 99, 38, 250, 107, 166, 89, 215, 255, 203, 190, 179, 46, 83, 219, 191, 35, 32, 0, 240, 239, 184, 59, 235, 64, 129, 227, 141, 48, 222, 2, 35, 83, 249, 76, 191, 243, 10, 179, 62, 238, 200, 28, 136, 127, 231, 39, 0, 62, 12, 0, 228, 7, 196, 122, 195, 127, 152, 14, 156, 71, 67, 38, 64, 128, 0, 1, 2, 4, 126, 165, 64, 62, 84, 230, 150, 105, 222, 152, 172, 252, 187, 180, 247, 95, 210, 253, 38, 102, 207, 231, 83, 237, 77, 121, 239, 247, 216, 149, 53, 117, 190, 213, 244, 204, 95, 235, 187, 220, 233, 214, 126, 127, 120, 174, 234, 248, 114, 83, 183, 183, 205, 211, 229, 254, 149, 86, 119, 247, 202, 89, 183, 213, 95, 251, 251, 180, 92, 253, 199, 93, 229, 217, 73, 86, 228, 43, 235, 106, 231, 109, 57, 170, 108, 175, 35, 32, 0, 240, 58, 115, 105, 36, 47, 36, 80, 15, 250, 49, 158, 123, 233, 119, 134, 185, 158, 225, 207, 96, 111, 62, 240, 247, 43, 127, 231, 191, 255, 40, 96, 189, 223, 231, 123, 126, 190, 162, 190, 63, 15, 242, 67, 32, 243, 251, 118, 41, 238, 187, 228, 9, 16, 32, 64, 128, 0, 1, 2, 255, 176, 64, 223, 137, 92, 211, 175, 156, 182, 143, 201, 182, 153, 223, 95, 93, 183, 85, 119, 85, 55, 203, 114, 110, 93, 126, 148, 174, 54, 117, 15, 245, 168, 205, 86, 95, 247, 93, 81, 174, 170, 45, 173, 110, 238, 149, 179, 110, 171, 63, 143, 175, 250, 245, 47, 0, 196, 77, 93, 253, 107, 79, 149, 174, 246, 177, 191, 78, 82, 55, 136, 249, 47, 7, 28, 223, 179, 239, 234, 60, 159, 237, 245, 5, 4, 0, 94, 127, 142, 141, 240, 55, 20, 248, 214, 119, 254, 227, 161, 252, 252, 169, 129, 24, 75, 230, 59, 50, 144, 15, 236, 215, 173, 223, 196, 51, 205, 55, 249, 253, 67, 161, 31, 254, 251, 59, 255, 157, 158, 199, 108, 237, 251, 195, 45, 143, 127, 151, 191, 158, 84, 153, 0, 1, 2, 4, 8, 16, 32, 240, 171, 4, 250, 222, 164, 110, 116, 242, 164, 235, 6, 230, 94, 186, 215, 237, 249, 190, 193, 57, 211, 238, 231, 232, 46, 155, 214, 214, 231, 234, 52, 43, 87, 126, 191, 199, 186, 201, 103, 147, 207, 218, 196, 254, 155, 99, 178, 188, 142, 235, 180, 78, 181, 181, 59, 203, 151, 118, 239, 250, 217, 142, 121, 188, 47, 191, 235, 147, 13, 51, 205, 14, 179, 184, 130, 2, 251, 241, 235, 92, 121, 110, 219, 107, 8, 8, 0, 188, 198, 60, 26, 197, 143, 9, 108, 79, 215, 213, 103, 63, 97, 119, 250, 193, 137, 246, 67, 87, 190, 31, 214, 175, 15, 252, 215, 94, 186, 93, 62, 216, 119, 219, 126, 200, 239, 125, 103, 247, 43, 147, 239, 213, 149, 93, 199, 100, 159, 249, 62, 222, 105, 230, 51, 192, 251, 103, 189, 153, 255, 239, 76, 143, 127, 23, 246, 40, 31, 1, 129, 245, 102, 255, 159, 104, 188, 222, 240, 179, 163, 250, 29, 185, 236, 164, 95, 221, 113, 165, 71, 245, 249, 251, 114, 89, 215, 215, 177, 174, 175, 175, 255, 76, 87, 155, 76, 108, 4, 8, 16, 32, 64, 128, 192, 107, 8, 228, 199, 126, 222, 63, 188, 125, 252, 31, 191, 65, 126, 148, 59, 191, 165, 113, 95, 145, 223, 119, 126, 247, 59, 255, 217, 73, 214, 103, 154, 109, 46, 237, 222, 149, 171, 237, 113, 242, 186, 134, 204, 222, 219, 178, 219, 220, 62, 73, 243, 118, 167, 182, 227, 244, 199, 237, 79, 30, 182, 149, 115, 127, 253, 164, 228, 170, 175, 62, 243, 184, 119, 175, 60, 104, 85, 231, 79, 86, 174, 246, 123, 95, 31, 230, 187, 255, 62, 238, 90, 206, 190, 187, 255, 206, 223, 75, 227, 175, 255, 159, 231, 169, 159, 240, 220, 31, 240, 59, 159, 233, 209, 223, 17, 12, 136, 66, 109, 169, 154, 59, 142, 210, 205, 223, 11, 56, 170, 142, 113, 29, 173, 86, 205, 247, 146, 117, 134, 90, 59, 121, 100, 207, 99, 95, 193, 217, 219, 195, 29, 103, 11, 153, 111, 8, 8, 0, 124, 3, 75, 83, 2, 63, 37, 208, 15, 249, 223, 74, 227, 228, 249, 254, 151, 199, 100, 176, 182, 211, 235, 53, 229, 155, 102, 191, 234, 125, 59, 10, 253, 198, 190, 255, 4, 192, 158, 175, 246, 235, 160, 108, 123, 118, 112, 201, 231, 190, 124, 232, 207, 109, 37, 71, 193, 87, 2, 4, 8, 16, 32, 64, 128, 192, 175, 18, 232, 251, 147, 186, 209, 201, 147, 70, 69, 223, 192, 252, 229, 180, 251, 57, 186, 59, 111, 116, 250, 92, 157, 174, 102, 125, 202, 60, 221, 251, 215, 122, 168, 206, 174, 114, 127, 167, 95, 13, 6, 172, 246, 117, 170, 189, 255, 238, 231, 154, 238, 109, 62, 204, 103, 64, 160, 31, 248, 59, 191, 5, 9, 106, 223, 94, 126, 187, 246, 188, 22, 219, 107, 8, 8, 0, 188, 198, 60, 26, 197, 139, 8, 212, 3, 126, 140, 229, 94, 186, 15, 49, 247, 231, 135, 201, 71, 91, 238, 239, 215, 241, 147, 0, 235, 247, 255, 163, 80, 15, 255, 153, 174, 124, 183, 203, 19, 231, 7, 213, 121, 96, 230, 215, 150, 231, 204, 109, 171, 58, 42, 124, 37, 64, 128, 0, 1, 2, 4, 8, 252, 206, 2, 125, 111, 147, 215, 216, 55, 50, 31, 165, 215, 246, 93, 238, 180, 251, 201, 27, 172, 206, 247, 190, 72, 235, 161, 255, 239, 164, 209, 103, 221, 143, 173, 244, 236, 175, 203, 91, 186, 127, 67, 103, 207, 215, 49, 113, 125, 231, 177, 149, 143, 135, 255, 254, 169, 128, 44, 239, 251, 163, 79, 219, 12, 1, 1, 128, 25, 243, 108, 148, 191, 139, 64, 60, 69, 127, 235, 187, 254, 123, 251, 24, 67, 62, 132, 159, 223, 249, 175, 66, 87, 190, 13, 240, 252, 252, 121, 240, 193, 19, 239, 245, 231, 31, 2, 236, 15, 138, 58, 102, 29, 152, 31, 20, 127, 100, 163, 85, 222, 211, 218, 215, 245, 235, 148, 121, 25, 54, 2, 4, 8, 16, 32, 64, 128, 192, 63, 38, 208, 79, 177, 121, 83, 210, 249, 76, 187, 252, 89, 218, 199, 124, 216, 46, 175, 62, 251, 63, 146, 74, 87, 85, 215, 117, 55, 213, 36, 155, 118, 243, 206, 159, 105, 127, 151, 125, 181, 233, 250, 124, 224, 206, 238, 187, 252, 89, 122, 109, 219, 229, 107, 250, 89, 63, 231, 254, 253, 187, 254, 121, 141, 123, 249, 241, 117, 197, 233, 78, 142, 204, 219, 158, 91, 224, 9, 3, 0, 215, 199, 141, 88, 209, 182, 47, 11, 228, 27, 206, 190, 229, 195, 228, 63, 183, 117, 231, 157, 230, 153, 58, 127, 252, 27, 160, 123, 205, 53, 159, 229, 135, 91, 118, 115, 125, 101, 227, 107, 93, 151, 31, 118, 180, 237, 200, 182, 185, 245, 49, 93, 62, 106, 143, 175, 251, 190, 79, 242, 101, 27, 109, 110, 30, 248, 171, 151, 247, 7, 246, 191, 141, 90, 39, 95, 7, 252, 17, 105, 190, 178, 131, 202, 111, 199, 150, 94, 238, 90, 117, 57, 173, 245, 55, 92, 178, 98, 189, 201, 231, 174, 126, 142, 175, 7, 253, 44, 231, 190, 168, 236, 7, 255, 42, 103, 93, 30, 86, 95, 142, 52, 179, 253, 78, 95, 63, 242, 159, 109, 226, 181, 186, 207, 189, 199, 175, 2, 172, 250, 108, 91, 127, 15, 96, 181, 169, 6, 217, 166, 51, 82, 2, 4, 8, 16, 32, 64, 224, 101, 5, 242, 118, 229, 220, 226, 94, 160, 111, 24, 186, 186, 211, 179, 205, 77, 38, 111, 38, 162, 226, 230, 70, 36, 235, 170, 114, 165, 55, 7, 188, 47, 172, 166, 181, 35, 243, 185, 237, 233, 103, 251, 87, 251, 58, 36, 190, 228, 169, 235, 149, 221, 116, 62, 119, 126, 242, 218, 219, 126, 37, 127, 222, 135, 109, 231, 216, 207, 91, 151, 181, 239, 235, 235, 217, 210, 253, 158, 238, 154, 191, 249, 14, 127, 246, 19, 13, 110, 31, 250, 247, 114, 142, 53, 2, 2, 249, 191, 149, 246, 157, 92, 94, 83, 66, 236, 215, 150, 85, 199, 86, 59, 187, 112, 164, 57, 225, 251, 235, 118, 239, 237, 190, 94, 28, 221, 62, 187, 203, 252, 158, 94, 143, 255, 43, 229, 189, 207, 79, 143, 239, 139, 234, 134, 111, 163, 237, 154, 103, 78, 159, 48, 0, 240, 204, 220, 174, 125, 188, 64, 188, 159, 172, 103, 250, 239, 167, 129, 151, 111, 71, 121, 124, 62, 236, 223, 188, 177, 102, 121, 109, 253, 54, 124, 188, 89, 215, 251, 245, 241, 134, 29, 59, 178, 46, 131, 2, 251, 7, 196, 254, 102, 158, 111, 182, 89, 126, 244, 19, 0, 245, 102, 28, 251, 43, 93, 231, 219, 78, 189, 106, 36, 4, 8, 16, 32, 64, 128, 0, 129, 31, 20, 168, 155, 149, 117, 3, 210, 249, 76, 251, 198, 165, 235, 186, 124, 77, 63, 219, 95, 237, 243, 122, 163, 207, 190, 207, 201, 52, 183, 173, 220, 221, 124, 158, 174, 135, 229, 236, 110, 127, 173, 159, 0, 200, 251, 176, 155, 250, 71, 229, 60, 253, 190, 175, 203, 91, 186, 223, 211, 93, 251, 189, 217, 151, 231, 206, 7, 251, 232, 240, 126, 122, 57, 215, 118, 222, 56, 93, 49, 100, 106, 123, 126, 1, 1, 128, 231, 159, 67, 35, 120, 33, 129, 123, 207, 245, 253, 128, 221, 251, 114, 184, 153, 143, 247, 229, 15, 183, 220, 159, 175, 122, 224, 207, 52, 10, 247, 94, 245, 193, 146, 109, 215, 1, 153, 214, 57, 87, 121, 63, 127, 52, 171, 173, 235, 178, 144, 205, 246, 114, 53, 240, 133, 0, 1, 2, 4, 8, 16, 32, 240, 111, 9, 172, 123, 152, 58, 125, 231, 51, 205, 237, 43, 105, 31, 211, 237, 243, 102, 170, 243, 189, 47, 211, 172, 143, 180, 238, 165, 190, 144, 230, 223, 94, 170, 195, 87, 219, 235, 3, 251, 187, 126, 178, 251, 189, 223, 46, 95, 211, 173, 205, 126, 175, 119, 115, 108, 180, 233, 191, 253, 212, 109, 206, 253, 123, 127, 145, 191, 110, 113, 168, 237, 133, 4, 4, 0, 94, 104, 50, 13, 229, 247, 23, 232, 7, 229, 76, 235, 21, 95, 190, 252, 19, 1, 235, 152, 60, 48, 127, 2, 224, 60, 238, 50, 236, 124, 147, 62, 95, 145, 57, 223, 220, 35, 223, 111, 248, 123, 90, 251, 243, 152, 117, 80, 166, 253, 99, 255, 157, 190, 117, 184, 119, 126, 228, 115, 28, 121, 104, 110, 153, 183, 17, 32, 64, 128, 0, 1, 2, 4, 254, 146, 192, 186, 23, 57, 143, 237, 114, 167, 185, 163, 243, 153, 230, 118, 115, 35, 147, 229, 237, 85, 251, 187, 205, 58, 96, 191, 225, 201, 198, 103, 121, 53, 190, 123, 124, 238, 91, 167, 90, 135, 212, 105, 31, 230, 215, 79, 0, 228, 3, 255, 157, 54, 121, 31, 150, 245, 157, 222, 107, 83, 117, 215, 115, 118, 121, 75, 247, 123, 186, 63, 227, 6, 49, 255, 249, 231, 35, 125, 127, 223, 247, 240, 60, 177, 227, 216, 151, 63, 33, 240, 254, 154, 155, 169, 247, 197, 233, 163, 81, 125, 245, 229, 9, 5, 110, 2, 0, 125, 35, 223, 55, 241, 57, 175, 93, 247, 87, 199, 214, 125, 245, 241, 214, 74, 75, 76, 72, 175, 43, 168, 87, 211, 158, 62, 151, 67, 94, 249, 183, 95, 113, 64, 63, 172, 231, 193, 153, 63, 59, 89, 217, 84, 168, 234, 220, 159, 249, 173, 205, 121, 108, 54, 10, 210, 222, 119, 254, 183, 148, 199, 100, 251, 99, 247, 153, 169, 55, 233, 172, 139, 134, 249, 170, 15, 153, 44, 175, 15, 163, 250, 192, 136, 47, 181, 63, 158, 244, 243, 71, 194, 186, 97, 102, 207, 223, 233, 95, 249, 126, 163, 207, 83, 69, 213, 219, 182, 237, 239, 250, 117, 57, 209, 201, 91, 179, 125, 204, 91, 173, 44, 1, 2, 4, 8, 16, 32, 240, 196, 2, 245, 81, 159, 247, 2, 49, 134, 122, 197, 151, 188, 135, 168, 123, 147, 61, 237, 253, 153, 102, 125, 29, 243, 191, 149, 95, 105, 57, 28, 249, 186, 39, 169, 59, 142, 104, 216, 105, 223, 171, 220, 148, 115, 119, 180, 201, 102, 249, 165, 219, 100, 122, 150, 143, 236, 81, 206, 118, 177, 85, 251, 247, 233, 126, 248, 53, 95, 199, 92, 78, 113, 115, 154, 7, 15, 252, 217, 230, 184, 239, 58, 78, 123, 211, 239, 229, 167, 2, 186, 237, 77, 191, 235, 156, 209, 244, 28, 106, 245, 17, 229, 234, 183, 251, 143, 11, 124, 11, 2, 188, 237, 235, 243, 237, 63, 1, 208, 117, 71, 218, 15, 254, 29, 8, 120, 59, 79, 156, 98, 81, 213, 76, 103, 241, 230, 26, 78, 199, 179, 93, 53, 121, 248, 37, 123, 137, 203, 173, 181, 178, 167, 15, 15, 248, 198, 142, 250, 27, 89, 119, 218, 191, 157, 39, 115, 182, 155, 0, 0, 14, 2, 4, 254, 89, 129, 126, 235, 204, 180, 94, 241, 165, 31, 240, 63, 77, 183, 99, 242, 42, 207, 246, 89, 216, 182, 124, 107, 59, 95, 145, 217, 223, 224, 235, 67, 34, 246, 239, 31, 22, 181, 63, 143, 233, 131, 178, 175, 248, 132, 201, 191, 3, 144, 31, 206, 111, 157, 221, 230, 207, 125, 171, 58, 146, 26, 83, 166, 54, 2, 4, 8, 16, 32, 64, 128, 192, 183, 5, 250, 190, 163, 15, 236, 242, 53, 205, 253, 103, 93, 100, 42, 159, 95, 246, 250, 163, 120, 238, 171, 27, 157, 220, 191, 14, 124, 151, 174, 131, 215, 238, 183, 254, 223, 250, 204, 67, 190, 246, 90, 15, 210, 249, 112, 127, 231, 152, 188, 15, 203, 250, 74, 179, 205, 186, 172, 123, 109, 247, 186, 104, 122, 244, 183, 165, 251, 61, 221, 159, 113, 39, 246, 213, 159, 0, 232, 227, 142, 254, 251, 193, 191, 3, 1, 247, 175, 187, 175, 37, 78, 127, 92, 116, 101, 124, 121, 54, 1, 1, 128, 103, 155, 49, 215, 59, 70, 160, 131, 4, 61, 224, 155, 114, 22, 190, 176, 213, 7, 74, 180, 203, 180, 63, 52, 250, 13, 191, 211, 126, 51, 207, 54, 255, 247, 159, 213, 56, 146, 58, 95, 84, 102, 154, 213, 251, 150, 117, 213, 126, 85, 126, 241, 114, 246, 46, 228, 9, 16, 32, 64, 128, 0, 1, 2, 127, 77, 160, 111, 66, 58, 237, 94, 178, 188, 191, 178, 254, 94, 185, 235, 175, 233, 222, 54, 243, 189, 63, 111, 162, 114, 171, 155, 169, 72, 183, 118, 125, 31, 85, 117, 177, 191, 203, 149, 70, 57, 239, 183, 50, 191, 223, 119, 237, 117, 245, 147, 153, 217, 229, 106, 215, 109, 247, 242, 153, 239, 118, 43, 173, 203, 217, 250, 206, 114, 159, 231, 179, 180, 251, 236, 107, 137, 110, 222, 174, 33, 243, 219, 43, 178, 182, 23, 18, 16, 0, 120, 161, 201, 52, 148, 231, 16, 168, 7, 235, 184, 212, 250, 14, 126, 167, 81, 121, 126, 71, 255, 81, 62, 219, 230, 16, 235, 203, 153, 100, 205, 187, 237, 124, 211, 142, 76, 191, 193, 103, 122, 190, 201, 175, 250, 179, 28, 125, 230, 49, 253, 110, 127, 126, 119, 63, 43, 87, 219, 222, 215, 39, 91, 151, 209, 69, 41, 1, 2, 4, 8, 16, 32, 64, 224, 103, 4, 214, 253, 199, 121, 239, 113, 175, 156, 103, 202, 250, 220, 110, 246, 71, 161, 111, 126, 114, 71, 231, 51, 237, 242, 221, 52, 119, 103, 251, 173, 191, 200, 118, 211, 170, 206, 221, 95, 121, 197, 13, 86, 181, 187, 6, 4, 226, 216, 190, 247, 202, 180, 242, 217, 166, 79, 189, 250, 238, 54, 215, 115, 245, 3, 127, 252, 146, 196, 121, 169, 221, 79, 165, 209, 211, 205, 175, 0, 68, 191, 55, 251, 215, 57, 247, 191, 17, 112, 158, 227, 114, 13, 103, 253, 186, 166, 42, 71, 155, 220, 242, 122, 109, 207, 43, 240, 132, 1, 0, 75, 238, 215, 46, 183, 103, 121, 204, 203, 235, 252, 251, 215, 218, 189, 60, 74, 191, 107, 127, 211, 79, 20, 242, 33, 191, 46, 51, 211, 204, 118, 154, 249, 47, 190, 242, 184, 254, 103, 0, 207, 160, 65, 86, 70, 7, 249, 95, 71, 253, 23, 178, 50, 93, 174, 52, 190, 228, 155, 247, 254, 65, 208, 229, 76, 107, 91, 63, 1, 144, 229, 12, 2, 212, 119, 254, 215, 49, 231, 79, 1, 172, 125, 125, 76, 5, 11, 214, 225, 123, 178, 134, 246, 3, 179, 178, 247, 42, 79, 128, 0, 1, 2, 4, 8, 252, 78, 2, 251, 231, 253, 237, 189, 76, 62, 166, 246, 253, 77, 61, 178, 198, 189, 69, 254, 126, 255, 246, 202, 253, 85, 238, 116, 237, 139, 187, 153, 120, 196, 61, 246, 117, 126, 149, 243, 78, 39, 143, 169, 59, 158, 61, 205, 124, 189, 142, 93, 209, 236, 216, 86, 211, 155, 114, 238, 201, 230, 43, 173, 76, 150, 175, 175, 108, 150, 141, 250, 181, 30, 232, 235, 216, 213, 118, 207, 247, 223, 89, 202, 99, 238, 221, 111, 213, 191, 2, 176, 246, 245, 185, 178, 93, 183, 239, 186, 71, 233, 25, 0, 136, 6, 117, 204, 186, 190, 172, 175, 243, 133, 90, 254, 10, 192, 127, 35, 253, 111, 244, 155, 175, 172, 239, 180, 219, 29, 255, 20, 224, 219, 121, 251, 26, 170, 126, 31, 115, 205, 96, 84, 244, 182, 174, 181, 198, 28, 117, 81, 60, 95, 221, 228, 39, 210, 94, 83, 223, 237, 43, 175, 231, 103, 182, 159, 235, 233, 103, 174, 231, 103, 123, 121, 194, 0, 192, 207, 2, 232, 141, 192, 175, 22, 56, 63, 12, 215, 187, 219, 249, 16, 31, 229, 15, 243, 113, 161, 117, 72, 182, 235, 252, 131, 139, 63, 223, 144, 35, 243, 232, 67, 164, 62, 56, 98, 127, 189, 233, 119, 63, 235, 192, 254, 9, 128, 108, 211, 239, 236, 103, 126, 85, 213, 181, 244, 113, 82, 2, 4, 8, 16, 32, 64, 128, 192, 79, 9, 108, 247, 31, 213, 229, 189, 114, 238, 200, 250, 220, 246, 253, 251, 141, 79, 238, 248, 74, 185, 218, 101, 63, 217, 126, 235, 111, 245, 125, 239, 199, 244, 247, 110, 223, 229, 227, 230, 170, 234, 86, 192, 224, 220, 31, 229, 126, 216, 206, 180, 95, 185, 191, 235, 175, 249, 243, 216, 108, 211, 151, 24, 223, 9, 170, 118, 171, 220, 15, 246, 127, 198, 197, 215, 119, 247, 43, 61, 218, 247, 57, 110, 210, 184, 147, 236, 242, 222, 127, 229, 207, 115, 44, 138, 56, 239, 217, 38, 61, 98, 139, 42, 219, 19, 11, 8, 0, 60, 241, 228, 185, 244, 231, 23, 248, 202, 67, 244, 103, 15, 251, 159, 41, 228, 155, 116, 191, 206, 15, 136, 168, 232, 55, 254, 76, 235, 39, 10, 186, 81, 164, 25, 0, 232, 32, 64, 158, 127, 253, 96, 192, 53, 14, 252, 217, 169, 237, 39, 64, 128, 0, 1, 2, 4, 8, 124, 93, 160, 239, 69, 246, 35, 186, 174, 211, 220, 151, 249, 220, 246, 180, 247, 127, 148, 94, 143, 233, 242, 163, 99, 174, 251, 235, 9, 124, 157, 119, 29, 115, 62, 28, 71, 185, 127, 2, 224, 252, 107, 251, 209, 190, 238, 179, 98, 95, 221, 119, 93, 203, 171, 62, 251, 232, 118, 215, 252, 222, 127, 157, 62, 207, 179, 94, 93, 206, 180, 250, 127, 148, 174, 254, 207, 118, 93, 206, 180, 143, 89, 249, 234, 251, 118, 136, 81, 178, 189, 146, 128, 0, 192, 43, 205, 166, 177, 252, 126, 2, 253, 132, 223, 105, 94, 225, 122, 162, 175, 31, 255, 143, 252, 135, 223, 245, 223, 247, 175, 67, 243, 248, 243, 152, 7, 35, 142, 247, 240, 243, 195, 225, 209, 7, 201, 254, 65, 211, 237, 251, 161, 191, 35, 6, 121, 108, 230, 251, 131, 230, 44, 31, 213, 2, 2, 15, 252, 85, 19, 32, 64, 128, 0, 1, 2, 95, 16, 88, 247, 25, 125, 223, 113, 30, 113, 173, 223, 203, 217, 232, 188, 33, 201, 29, 171, 92, 109, 226, 203, 153, 102, 254, 242, 186, 123, 83, 211, 109, 246, 126, 50, 127, 167, 171, 120, 90, 190, 118, 121, 83, 238, 253, 151, 180, 30, 206, 163, 191, 14, 12, 228, 49, 103, 221, 58, 253, 126, 95, 214, 249, 78, 251, 28, 249, 176, 126, 228, 63, 254, 21, 128, 252, 215, 0, 234, 87, 0, 162, 253, 249, 227, 255, 121, 206, 40, 215, 121, 207, 126, 182, 49, 238, 117, 235, 154, 34, 185, 25, 111, 20, 109, 47, 32, 112, 4, 0, 242, 129, 228, 43, 91, 174, 130, 108, 155, 169, 237, 41, 5, 234, 161, 243, 9, 174, 188, 151, 100, 166, 123, 254, 241, 165, 247, 162, 236, 214, 15, 90, 118, 135, 247, 210, 60, 228, 122, 248, 181, 221, 222, 237, 106, 219, 15, 242, 117, 248, 106, 191, 63, 160, 87, 62, 187, 142, 125, 103, 126, 245, 179, 186, 56, 74, 55, 199, 198, 191, 100, 26, 141, 179, 125, 93, 83, 30, 187, 142, 185, 73, 206, 54, 171, 225, 250, 145, 176, 243, 67, 171, 27, 7, 207, 219, 135, 198, 241, 230, 191, 127, 248, 148, 94, 124, 201, 186, 60, 54, 3, 1, 253, 93, 255, 189, 175, 220, 93, 215, 177, 218, 213, 135, 208, 58, 199, 221, 235, 235, 243, 75, 9, 16, 32, 64, 128, 0, 129, 153, 2, 235, 158, 161, 158, 31, 110, 242, 55, 133, 176, 137, 242, 241, 116, 123, 155, 94, 234, 243, 111, 3, 228, 255, 235, 206, 167, 210, 248, 155, 0, 113, 147, 115, 251, 183, 4, 142, 123, 153, 254, 198, 70, 167, 53, 1, 113, 204, 187, 52, 235, 182, 87, 95, 198, 94, 183, 231, 123, 127, 127, 199, 127, 47, 215, 67, 123, 124, 169, 186, 184, 174, 115, 95, 244, 223, 237, 235, 33, 60, 202, 247, 2, 2, 217, 190, 250, 200, 246, 121, 89, 153, 174, 215, 219, 189, 220, 247, 126, 5, 224, 191, 209, 79, 5, 2, 66, 237, 232, 43, 127, 85, 32, 239, 13, 227, 87, 1, 246, 115, 236, 249, 60, 103, 94, 193, 241, 255, 216, 211, 215, 17, 242, 81, 119, 190, 106, 71, 126, 217, 182, 154, 156, 40, 63, 74, 243, 248, 71, 91, 30, 147, 251, 175, 233, 163, 246, 55, 245, 251, 133, 221, 203, 223, 52, 30, 91, 240, 19, 0, 99, 167, 222, 192, 127, 137, 64, 190, 121, 229, 214, 105, 231, 163, 220, 15, 247, 153, 214, 107, 53, 59, 203, 93, 223, 105, 30, 155, 91, 151, 51, 61, 106, 222, 125, 173, 183, 188, 248, 114, 126, 96, 108, 249, 187, 117, 209, 67, 214, 159, 31, 144, 91, 251, 122, 227, 223, 202, 117, 124, 182, 143, 215, 163, 243, 191, 187, 32, 21, 4, 8, 16, 32, 64, 128, 0, 129, 171, 64, 222, 76, 124, 246, 202, 99, 246, 54, 85, 94, 21, 121, 83, 210, 229, 170, 138, 47, 103, 154, 249, 203, 43, 119, 238, 117, 55, 229, 232, 104, 191, 201, 185, 52, 221, 15, 59, 243, 15, 30, 240, 251, 65, 191, 211, 235, 3, 255, 181, 156, 253, 117, 93, 231, 43, 237, 75, 90, 215, 242, 246, 176, 254, 205, 159, 0, 136, 126, 142, 7, 254, 183, 180, 198, 144, 253, 247, 57, 58, 221, 199, 189, 239, 207, 134, 182, 151, 16, 16, 0, 120, 137, 105, 52, 136, 151, 16, 200, 167, 233, 59, 79, 212, 15, 170, 191, 60, 228, 126, 191, 206, 52, 63, 56, 234, 21, 133, 254, 160, 201, 52, 247, 229, 7, 65, 7, 0, 234, 50, 178, 50, 182, 254, 73, 128, 85, 60, 42, 125, 37, 64, 128, 0, 1, 2, 4, 8, 252, 10, 129, 235, 13, 72, 150, 175, 175, 122, 50, 190, 83, 127, 109, 151, 215, 187, 215, 93, 203, 251, 190, 175, 228, 183, 243, 214, 3, 117, 148, 59, 173, 251, 172, 40, 215, 125, 86, 244, 181, 151, 43, 159, 117, 215, 253, 81, 151, 199, 159, 199, 228, 229, 174, 186, 170, 127, 80, 206, 203, 168, 62, 239, 165, 123, 93, 231, 243, 28, 153, 239, 87, 151, 243, 92, 81, 215, 175, 200, 30, 133, 202, 248, 242, 42, 2, 2, 0, 175, 50, 147, 198, 241, 52, 2, 251, 51, 126, 63, 220, 255, 149, 159, 0, 168, 1, 239, 157, 93, 4, 250, 205, 123, 255, 224, 120, 152, 143, 99, 115, 223, 249, 142, 31, 249, 135, 109, 123, 223, 106, 126, 57, 173, 34, 1, 2, 4, 8, 16, 32, 64, 224, 107, 2, 151, 123, 143, 253, 62, 228, 93, 190, 159, 86, 179, 231, 71, 199, 101, 155, 71, 251, 178, 62, 183, 125, 255, 181, 188, 239, 91, 249, 190, 63, 186, 123, 95, 20, 231, 187, 169, 239, 242, 37, 237, 7, 250, 71, 63, 17, 144, 125, 116, 80, 160, 243, 149, 230, 229, 198, 190, 126, 213, 240, 86, 219, 125, 127, 214, 215, 57, 34, 205, 31, 247, 63, 131, 1, 123, 62, 143, 203, 242, 94, 23, 249, 168, 62, 250, 191, 166, 121, 222, 71, 251, 87, 125, 36, 182, 39, 20, 16, 0, 120, 194, 73, 251, 181, 151, 156, 255, 233, 239, 219, 7, 79, 156, 123, 179, 191, 154, 239, 39, 226, 60, 254, 31, 62, 213, 95, 186, 196, 190, 190, 190, 182, 78, 183, 235, 173, 170, 248, 146, 15, 245, 85, 157, 249, 200, 244, 143, 246, 103, 225, 45, 191, 10, 183, 149, 199, 129, 199, 209, 121, 228, 122, 101, 69, 231, 215, 223, 8, 216, 171, 34, 159, 127, 205, 191, 223, 172, 243, 221, 252, 248, 247, 92, 243, 55, 184, 86, 62, 234, 242, 223, 135, 173, 127, 38, 38, 234, 142, 116, 189, 241, 71, 125, 254, 94, 221, 241, 187, 117, 183, 199, 172, 82, 236, 61, 250, 175, 175, 171, 16, 135, 157, 197, 254, 9, 130, 188, 172, 220, 242, 106, 115, 235, 244, 40, 249, 74, 128, 0, 1, 2, 4, 8, 188, 138, 64, 127, 198, 103, 90, 175, 184, 47, 56, 211, 117, 143, 112, 222, 31, 172, 242, 118, 67, 113, 159, 225, 218, 174, 111, 54, 242, 192, 126, 210, 205, 54, 231, 19, 113, 228, 179, 205, 119, 95, 217, 223, 58, 230, 72, 242, 126, 233, 172, 170, 124, 55, 57, 175, 121, 223, 31, 231, 191, 105, 223, 229, 45, 173, 203, 141, 99, 234, 161, 60, 234, 187, 188, 31, 87, 251, 86, 155, 172, 239, 54, 239, 210, 30, 230, 74, 163, 187, 58, 127, 166, 213, 71, 165, 199, 239, 245, 159, 229, 125, 95, 12, 162, 143, 137, 211, 68, 233, 40, 215, 121, 178, 28, 39, 175, 250, 250, 231, 161, 114, 255, 209, 127, 36, 71, 161, 211, 227, 224, 115, 236, 85, 157, 23, 126, 28, 177, 53, 206, 61, 182, 223, 77, 64, 0, 224, 119, 155, 17, 215, 243, 242, 2, 253, 65, 153, 3, 61, 63, 44, 35, 115, 147, 207, 242, 245, 213, 50, 171, 190, 138, 121, 208, 131, 237, 124, 27, 142, 204, 254, 33, 115, 55, 31, 125, 92, 223, 183, 207, 118, 107, 95, 151, 243, 189, 189, 242, 89, 255, 224, 220, 170, 9, 16, 32, 64, 128, 0, 1, 2, 159, 10, 156, 55, 43, 209, 242, 39, 242, 245, 116, 251, 141, 190, 242, 2, 63, 57, 111, 223, 31, 245, 125, 208, 77, 26, 231, 187, 91, 238, 250, 78, 227, 28, 213, 110, 149, 235, 225, 60, 234, 238, 165, 217, 174, 30, 200, 239, 165, 121, 185, 217, 215, 74, 163, 187, 42, 103, 90, 125, 101, 186, 242, 245, 147, 0, 91, 185, 234, 239, 148, 187, 175, 187, 105, 180, 255, 168, 62, 118, 219, 158, 80, 64, 0, 224, 9, 39, 205, 37, 19, 248, 174, 64, 189, 121, 199, 65, 103, 26, 153, 155, 15, 172, 8, 36, 228, 190, 179, 65, 102, 179, 205, 74, 115, 87, 111, 213, 174, 11, 82, 2, 4, 8, 16, 32, 64, 128, 192, 63, 41, 80, 55, 35, 113, 130, 107, 218, 79, 180, 89, 159, 249, 125, 255, 181, 188, 239, 219, 243, 121, 221, 123, 249, 187, 249, 117, 158, 243, 158, 42, 202, 149, 191, 166, 209, 111, 215, 247, 195, 253, 121, 76, 236, 219, 3, 1, 89, 223, 109, 206, 52, 47, 51, 235, 59, 93, 253, 157, 229, 174, 143, 52, 235, 246, 250, 202, 231, 254, 253, 149, 199, 127, 84, 94, 251, 34, 177, 189, 160, 128, 0, 192, 11, 78, 170, 33, 61, 167, 64, 126, 51, 255, 221, 43, 42, 206, 159, 4, 232, 97, 101, 93, 230, 235, 75, 87, 222, 166, 55, 111, 234, 177, 171, 202, 249, 102, 255, 232, 149, 109, 46, 7, 157, 199, 172, 125, 189, 59, 207, 148, 249, 222, 50, 255, 193, 165, 116, 51, 41, 1, 2, 4, 8, 16, 32, 64, 224, 77, 160, 111, 38, 250, 6, 227, 39, 210, 187, 79, 187, 113, 202, 191, 217, 247, 195, 251, 167, 232, 183, 246, 197, 121, 63, 109, 211, 109, 87, 122, 125, 232, 239, 227, 207, 135, 254, 104, 215, 249, 222, 23, 85, 71, 93, 14, 41, 251, 217, 210, 234, 47, 247, 175, 54, 149, 230, 254, 174, 219, 211, 168, 188, 161, 234, 190, 86, 251, 179, 239, 46, 175, 52, 18, 219, 11, 8, 124, 43, 0, 144, 55, 249, 185, 136, 250, 102, 191, 243, 153, 254, 186, 173, 207, 222, 103, 252, 181, 103, 239, 179, 142, 77, 175, 220, 215, 233, 24, 11, 243, 249, 192, 147, 170, 185, 58, 127, 62, 220, 159, 21, 171, 81, 151, 31, 117, 27, 251, 179, 73, 125, 169, 76, 252, 183, 25, 105, 78, 79, 77, 81, 207, 83, 164, 251, 135, 70, 239, 127, 151, 174, 118, 251, 233, 250, 205, 63, 59, 204, 246, 71, 231, 249, 187, 113, 85, 170, 116, 229, 234, 176, 204, 231, 53, 228, 152, 106, 203, 244, 222, 107, 237, 150, 16, 32, 64, 128, 0, 1, 2, 47, 38, 144, 55, 3, 249, 217, 127, 220, 32, 212, 224, 110, 110, 11, 162, 62, 255, 30, 192, 31, 113, 47, 81, 183, 8, 43, 173, 3, 242, 152, 181, 63, 111, 94, 170, 77, 221, 115, 100, 126, 245, 121, 166, 145, 201, 125, 143, 94, 239, 158, 156, 31, 180, 205, 19, 70, 31, 117, 111, 19, 217, 35, 127, 156, 107, 239, 250, 184, 7, 186, 94, 67, 148, 215, 131, 255, 234, 230, 255, 250, 143, 252, 189, 75, 227, 6, 169, 250, 91, 237, 247, 190, 51, 95, 15, 239, 43, 237, 242, 222, 166, 30, 214, 115, 255, 113, 137, 103, 96, 224, 44, 231, 165, 196, 254, 248, 255, 17, 0, 88, 105, 151, 51, 189, 121, 69, 225, 163, 114, 52, 191, 221, 178, 113, 108, 117, 204, 58, 182, 203, 123, 154, 249, 215, 216, 122, 213, 246, 104, 22, 64, 23, 159, 60, 253, 86, 0, 224, 201, 199, 234, 242, 9, 252, 214, 2, 245, 65, 24, 87, 120, 147, 70, 225, 12, 18, 244, 213, 103, 93, 230, 235, 75, 87, 222, 166, 245, 6, 29, 85, 55, 105, 190, 97, 63, 122, 69, 95, 217, 118, 63, 160, 142, 205, 246, 171, 190, 202, 153, 143, 173, 234, 142, 236, 77, 126, 85, 73, 8, 16, 32, 64, 128, 0, 1, 2, 31, 11, 244, 205, 196, 126, 131, 145, 71, 92, 235, 123, 255, 191, 152, 62, 188, 127, 90, 215, 116, 62, 240, 71, 249, 163, 182, 95, 217, 215, 177, 139, 14, 10, 228, 49, 251, 131, 126, 149, 215, 121, 222, 213, 47, 190, 117, 89, 69, 121, 55, 159, 199, 127, 212, 246, 193, 254, 156, 30, 219, 243, 11, 8, 0, 60, 255, 28, 26, 1, 129, 47, 11, 60, 124, 179, 207, 55, 250, 220, 185, 109, 123, 113, 207, 111, 77, 100, 9, 16, 32, 64, 128, 0, 1, 2, 63, 35, 144, 55, 27, 125, 195, 209, 105, 246, 220, 249, 222, 255, 155, 165, 117, 255, 116, 185, 166, 172, 251, 209, 87, 50, 100, 159, 157, 118, 255, 93, 222, 211, 204, 127, 247, 181, 250, 142, 195, 108, 3, 4, 4, 0, 6, 76, 178, 33, 206, 21, 248, 238, 7, 192, 85, 170, 143, 239, 250, 107, 185, 235, 165, 4, 8, 16, 32, 64, 128, 0, 129, 31, 17, 200, 155, 141, 220, 250, 166, 227, 55, 78, 251, 225, 255, 71, 31, 246, 99, 188, 239, 250, 75, 142, 172, 239, 180, 219, 116, 121, 79, 51, 255, 55, 95, 113, 184, 237, 133, 5, 34, 0, 176, 86, 83, 45, 149, 24, 105, 174, 152, 127, 117, 251, 248, 2, 206, 223, 47, 94, 215, 88, 255, 225, 253, 171, 215, 251, 218, 39, 191, 206, 198, 7, 63, 117, 254, 109, 136, 236, 59, 251, 235, 115, 116, 254, 154, 238, 29, 255, 228, 249, 247, 126, 223, 242, 121, 53, 253, 202, 218, 190, 186, 149, 246, 174, 75, 117, 29, 223, 117, 85, 56, 190, 156, 215, 155, 153, 245, 170, 36, 190, 156, 63, 218, 255, 213, 252, 234, 183, 254, 105, 214, 253, 152, 237, 124, 153, 221, 63, 32, 206, 161, 236, 215, 125, 47, 95, 7, 230, 193, 111, 175, 250, 111, 107, 149, 43, 201, 47, 107, 235, 115, 116, 57, 211, 26, 215, 170, 232, 124, 166, 185, 117, 122, 148, 124, 37, 64, 128, 0, 1, 2, 4, 94, 69, 160, 63, 227, 247, 207, 254, 61, 159, 227, 236, 54, 231, 152, 251, 158, 98, 221, 103, 28, 127, 23, 32, 218, 173, 250, 78, 207, 246, 251, 13, 202, 135, 249, 60, 162, 59, 95, 217, 117, 142, 247, 79, 213, 177, 163, 110, 104, 142, 244, 200, 102, 254, 173, 186, 79, 181, 53, 219, 15, 57, 219, 118, 187, 51, 125, 187, 240, 202, 69, 151, 231, 174, 155, 252, 58, 87, 238, 204, 115, 116, 163, 51, 223, 253, 244, 190, 108, 146, 249, 76, 207, 87, 252, 125, 129, 250, 95, 167, 71, 155, 183, 253, 123, 219, 35, 255, 54, 33, 221, 217, 237, 12, 29, 253, 101, 219, 236, 243, 206, 241, 81, 185, 142, 60, 211, 253, 154, 50, 255, 19, 219, 189, 115, 127, 84, 247, 245, 115, 246, 213, 223, 63, 226, 213, 159, 55, 253, 4, 192, 253, 121, 87, 75, 224, 37, 4, 62, 122, 147, 188, 183, 239, 58, 232, 110, 211, 245, 215, 114, 215, 75, 9, 16, 32, 64, 128, 0, 1, 2, 63, 34, 144, 55, 27, 185, 245, 77, 199, 223, 73, 143, 158, 254, 177, 175, 15, 47, 53, 118, 236, 65, 131, 135, 99, 89, 87, 118, 237, 39, 171, 107, 216, 221, 79, 151, 187, 125, 237, 236, 194, 37, 93, 197, 143, 146, 186, 182, 104, 208, 221, 92, 211, 143, 142, 181, 239, 249, 5, 4, 0, 158, 127, 14, 141, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 171, 192, 245, 201, 246, 87, 149, 47, 215, 241, 240, 180, 177, 163, 191, 219, 223, 105, 62, 149, 159, 249, 238, 167, 59, 136, 114, 237, 203, 244, 163, 87, 246, 241, 193, 254, 183, 159, 0, 136, 70, 182, 113, 2, 255, 25, 55, 98, 3, 38, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 5, 252, 4, 192, 192, 73, 55, 100, 2, 45, 176, 71, 135, 179, 46, 203, 253, 91, 96, 153, 183, 17, 32, 64, 128, 0, 1, 2, 4, 126, 107, 129, 190, 97, 217, 111, 106, 158, 37, 191, 96, 175, 67, 200, 234, 26, 66, 124, 201, 239, 248, 87, 126, 213, 213, 190, 174, 200, 186, 204, 175, 180, 171, 247, 180, 246, 85, 11, 95, 8, 28, 2, 126, 2, 192, 74, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 171, 117, 133, 1, 0, 0, 37, 139, 73, 68, 65, 84, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0]);
fileData10.push.apply(fileData10, [1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 16, 0, 24, 48, 201, 134, 72, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 4, 0, 172, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 48, 64, 64, 0, 96, 192, 36, 27, 34, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 16, 0, 176, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 192, 0, 1, 1, 128, 1, 147, 108, 136, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 64, 0, 192, 26, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 3, 4, 4, 0, 6, 76, 178, 33, 18, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 1, 0, 107, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 12, 16, 248, 127, 1, 99, 209, 238, 147, 241, 138, 229, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'sky.png', fileData10, true, true, false);
var fileData11 = [];
fileData11.push.apply(fileData11, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 2, 0, 0, 0, 211, 16, 63, 49, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 16, 0, 0, 11, 16, 1, 173, 35, 189, 117, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 49, 46, 49, 99, 42, 156, 75, 0, 0, 110, 3, 73, 68, 65, 84, 120, 94, 237, 189, 5, 124, 86, 103, 182, 198, 155, 57, 51, 103, 230, 248, 61, 247, 140, 91, 167, 45, 20, 135, 184, 187, 17, 33, 238, 110, 196, 93, 33, 66, 2, 129, 132, 16, 135, 24, 150, 4, 45, 69, 90, 28, 138, 91, 133, 186, 27, 212, 91, 188, 66, 149, 218, 156, 153, 251, 127, 247, 74, 191, 147, 249, 218, 233, 144, 118, 206, 37, 61, 217, 123, 158, 223, 251, 91, 123, 237, 119, 71, 224, 121, 214, 122, 214, 222, 31, 29, 147, 63, 155, 252, 121, 68, 184, 233, 231, 255, 54, 254, 215, 255, 193, 122, 235, 175, 254, 253, 15, 191, 248, 55, 2, 193, 184, 95, 253, 199, 240, 83, 112, 243, 47, 254, 157, 213, 232, 118, 29, 58, 70, 21, 70, 44, 128, 91, 126, 169, 104, 13, 132, 238, 183, 254, 234, 63, 208, 3, 236, 151, 164, 100, 88, 73, 162, 16, 2, 163, 219, 117, 232, 24, 85, 248, 54, 29, 96, 56, 254, 160, 173, 55, 255, 82, 117, 3, 97, 252, 184, 95, 255, 69, 43, 48, 186, 93, 135, 142, 81, 133, 111, 35, 0, 177, 64, 128, 110, 96, 232, 3, 146, 65, 9, 18, 8, 232, 12, 70, 183, 235, 208, 49, 170, 48, 98, 1, 192, 105, 106, 188, 17, 209, 129, 56, 126, 46, 201, 41, 194, 16, 109, 24, 221, 174, 67, 199, 168, 194, 183, 233, 0, 130, 155, 191, 244, 60, 70, 144, 33, 65, 172, 17, 48, 186, 93, 135, 142, 81, 133, 111, 35, 0, 202, 60, 44, 135, 253, 134, 217, 87, 10, 191, 122, 46, 164, 157, 14, 31, 139, 141, 110, 215, 161, 99, 84, 225, 219, 8, 224, 127, 28, 255, 47, 254, 221, 48, 15, 136, 5, 50, 156, 138, 255, 225, 212, 232, 118, 29, 58, 70, 21, 70, 44, 0, 3, 209, 13, 254, 135, 98, 47, 182, 71, 216, 207, 169, 40, 68, 230, 4, 163, 219, 117, 232, 24, 85, 248, 54, 29, 64, 96, 152, 119, 81, 130, 168, 194, 0, 209, 134, 108, 48, 186, 93, 135, 142, 81, 133, 111, 41, 0, 163, 167, 159, 192, 240, 130, 12, 160, 7, 145, 4, 27, 140, 110, 215, 161, 99, 84, 97, 196, 2, 48, 144, 30, 13, 80, 227, 13, 125, 192, 128, 91, 245, 167, 64, 58, 190, 63, 248, 150, 29, 0, 80, 242, 111, 30, 234, 3, 255, 83, 251, 97, 191, 8, 128, 121, 64, 70, 2, 163, 219, 117, 232, 24, 85, 248, 246, 2, 48, 96, 184, 249, 17, 210, 11, 200, 3, 163, 219, 117, 232, 24, 85, 248, 54, 2, 128, 214, 218, 163, 158, 33, 222, 227, 133, 134, 243, 158, 75, 50, 33, 8, 140, 110, 215, 161, 99, 84, 225, 187, 118, 0, 134, 93, 131, 221, 23, 24, 26, 130, 204, 193, 70, 183, 235, 208, 49, 170, 96, 98, 160, 239, 112, 39, 3, 200, 75, 93, 31, 94, 206, 135, 87, 122, 240, 229, 163, 30, 53, 12, 24, 221, 110, 192, 240, 91, 228, 75, 145, 249, 107, 154, 25, 158, 255, 234, 23, 28, 190, 205, 16, 27, 253, 62, 58, 116, 140, 8, 38, 66, 163, 191, 6, 3, 207, 160, 184, 124, 186, 129, 204, 136, 192, 45, 220, 40, 227, 178, 220, 46, 193, 223, 11, 70, 191, 143, 14, 29, 35, 130, 137, 84, 104, 3, 89, 13, 206, 94, 30, 119, 14, 231, 43, 36, 166, 228, 203, 206, 107, 15, 239, 188, 246, 200, 238, 79, 30, 221, 251, 201, 227, 251, 63, 121, 226, 192, 39, 79, 30, 250, 228, 233, 35, 159, 62, 115, 244, 211, 103, 142, 25, 32, 59, 185, 197, 192, 126, 32, 95, 208, 240, 44, 85, 190, 157, 236, 36, 144, 31, 198, 40, 249, 213, 12, 219, 12, 177, 209, 239, 163, 67, 199, 136, 48, 36, 128, 175, 66, 56, 103, 248, 92, 131, 128, 83, 104, 119, 237, 193, 237, 215, 30, 218, 113, 237, 225, 93, 215, 30, 221, 243, 201, 99, 251, 62, 121, 252, 238, 79, 158, 56, 248, 201, 83, 135, 149, 6, 158, 62, 250, 37, 142, 92, 57, 189, 155, 205, 210, 55, 4, 124, 41, 57, 53, 200, 204, 8, 95, 251, 195, 60, 251, 195, 127, 48, 202, 12, 223, 102, 244, 251, 232, 208, 49, 34, 252, 85, 11, 100, 32, 43, 37, 252, 249, 221, 253, 129, 206, 230, 55, 107, 69, 247, 234, 169, 59, 174, 61, 120, 23, 2, 112, 12, 108, 218, 190, 239, 209, 63, 253, 233, 79, 159, 60, 70, 19, 208, 52, 240, 228, 33, 78, 229, 64, 15, 87, 238, 223, 117, 233, 222, 187, 184, 133, 27, 185, 157, 47, 34, 51, 131, 145, 168, 190, 25, 51, 126, 250, 175, 23, 255, 225, 7, 70, 201, 225, 48, 250, 125, 116, 232, 24, 17, 134, 58, 192, 208, 56, 251, 165, 229, 16, 96, 93, 24, 91, 119, 222, 81, 124, 225, 228, 157, 47, 29, 216, 32, 150, 227, 234, 201, 77, 215, 30, 184, 147, 38, 128, 0, 128, 226, 58, 70, 8, 13, 168, 62, 112, 128, 83, 201, 19, 95, 185, 111, 199, 249, 19, 91, 184, 133, 27, 185, 157, 47, 194, 151, 226, 11, 14, 119, 68, 64, 190, 169, 252, 0, 134, 210, 46, 201, 186, 127, 251, 201, 153, 31, 254, 224, 115, 19, 147, 35, 63, 254, 225, 193, 159, 252, 232, 246, 127, 250, 81, 202, 255, 243, 207, 134, 109, 114, 139, 209, 239, 163, 67, 199, 136, 160, 58, 128, 193, 144, 8, 197, 135, 227, 174, 13, 57, 47, 221, 189, 254, 194, 137, 173, 23, 78, 108, 185, 112, 124, 11, 193, 151, 2, 184, 75, 43, 244, 234, 184, 246, 200, 30, 77, 3, 251, 144, 1, 167, 109, 125, 7, 148, 0, 30, 223, 127, 229, 158, 187, 46, 28, 223, 172, 238, 85, 55, 170, 123, 249, 82, 124, 65, 163, 111, 97, 248, 166, 195, 125, 17, 73, 215, 255, 247, 95, 206, 255, 195, 15, 130, 127, 250, 47, 175, 253, 195, 15, 108, 255, 235, 159, 253, 255, 235, 95, 22, 252, 235, 143, 95, 254, 225, 15, 134, 111, 35, 54, 250, 125, 116, 232, 24, 17, 84, 7, 24, 78, 41, 236, 10, 167, 212, 105, 40, 184, 123, 75, 241, 139, 251, 214, 156, 63, 118, 135, 1, 231, 142, 110, 122, 247, 228, 237, 215, 78, 111, 19, 13, 92, 123, 72, 13, 3, 31, 61, 180, 243, 210, 174, 165, 128, 64, 41, 225, 75, 92, 185, 103, 219, 249, 99, 155, 184, 101, 248, 87, 224, 11, 242, 101, 249, 226, 124, 11, 190, 209, 240, 127, 90, 201, 233, 148, 95, 253, 123, 250, 127, 254, 115, 233, 127, 252, 83, 237, 191, 253, 248, 216, 63, 254, 240, 254, 31, 253, 67, 239, 191, 254, 248, 194, 63, 252, 224, 240, 143, 127, 56, 240, 207, 255, 184, 254, 159, 126, 244, 206, 15, 76, 214, 253, 203, 63, 46, 253, 183, 159, 24, 110, 49, 250, 125, 116, 232, 24, 17, 254, 162, 3, 24, 2, 176, 101, 48, 245, 236, 190, 129, 115, 71, 111, 255, 11, 28, 217, 240, 238, 201, 141, 31, 222, 183, 249, 195, 251, 182, 8, 233, 63, 60, 125, 231, 135, 15, 220, 117, 237, 225, 157, 31, 62, 184, 227, 195, 135, 118, 2, 131, 24, 46, 157, 220, 204, 126, 133, 191, 252, 34, 124, 89, 190, 184, 225, 27, 13, 255, 238, 166, 63, 253, 215, 221, 63, 249, 209, 186, 127, 250, 81, 215, 191, 254, 152, 194, 63, 248, 79, 63, 170, 253, 143, 159, 28, 248, 241, 15, 119, 254, 228, 135, 197, 255, 241, 147, 67, 255, 248, 195, 39, 127, 248, 131, 138, 255, 248, 167, 128, 255, 84, 70, 72, 110, 49, 250, 125, 116, 232, 24, 17, 76, 238, 90, 155, 114, 120, 111, 249, 225, 221, 21, 7, 238, 42, 218, 190, 54, 229, 174, 53, 41, 59, 55, 204, 62, 186, 114, 225, 229, 19, 155, 47, 29, 187, 253, 210, 177, 77, 151, 142, 107, 32, 80, 167, 183, 95, 61, 169, 225, 212, 166, 247, 78, 221, 241, 222, 61, 155, 133, 238, 195, 241, 222, 253, 119, 42, 220, 119, 231, 91, 39, 239, 144, 91, 190, 250, 117, 248, 226, 124, 11, 190, 17, 223, 142, 111, 202, 183, 230, 7, 224, 199, 224, 135, 49, 36, 175, 254, 246, 151, 143, 199, 5, 62, 121, 103, 194, 227, 94, 246, 79, 184, 217, 28, 143, 241, 251, 232, 191, 254, 243, 177, 45, 73, 178, 205, 112, 139, 209, 239, 163, 67, 199, 136, 96, 50, 113, 134, 253, 100, 115, 103, 64, 0, 38, 153, 58, 74, 48, 217, 108, 40, 0, 83, 44, 92, 166, 91, 123, 204, 176, 245, 154, 108, 230, 196, 233, 36, 51, 71, 55, 55, 159, 132, 136, 8, 165, 129, 175, 67, 92, 120, 184, 171, 199, 172, 41, 230, 206, 114, 11, 43, 183, 243, 69, 12, 95, 208, 240, 197, 255, 231, 219, 125, 229, 103, 168, 248, 253, 248, 3, 255, 249, 179, 189, 255, 239, 207, 47, 255, 232, 31, 47, 252, 227, 143, 223, 253, 225, 143, 10, 254, 48, 97, 248, 54, 137, 141, 126, 31, 29, 58, 70, 4, 147, 233, 54, 30, 16, 122, 56, 59, 57, 53, 196, 208, 151, 13, 134, 83, 83, 91, 239, 25, 54, 158, 42, 176, 114, 118, 115, 159, 169, 54, 152, 59, 217, 59, 122, 212, 23, 231, 213, 230, 103, 18, 76, 181, 116, 133, 235, 158, 30, 190, 51, 44, 149, 84, 184, 202, 45, 114, 47, 224, 75, 137, 132, 4, 195, 191, 17, 63, 0, 167, 242, 195, 24, 37, 91, 126, 253, 135, 85, 63, 251, 205, 212, 233, 182, 195, 183, 25, 98, 163, 223, 71, 135, 142, 17, 65, 9, 0, 50, 9, 173, 133, 85, 172, 82, 101, 39, 153, 58, 168, 75, 182, 94, 114, 201, 0, 54, 27, 202, 240, 52, 43, 55, 88, 254, 101, 236, 78, 213, 167, 186, 79, 183, 118, 151, 140, 17, 228, 75, 201, 151, 149, 175, 32, 223, 78, 93, 210, 126, 0, 3, 179, 135, 39, 87, 254, 252, 55, 131, 191, 248, 237, 240, 204, 240, 159, 217, 232, 247, 209, 161, 99, 68, 48, 25, 253, 135, 187, 137, 137, 205, 80, 248, 53, 135, 209, 239, 163, 67, 199, 136, 48, 68, 163, 239, 239, 97, 244, 251, 232, 208, 49, 34, 152, 36, 39, 39, 135, 135, 135, 167, 165, 165, 177, 26, 142, 244, 244, 244, 164, 164, 36, 137, 99, 99, 99, 37, 136, 137, 137, 201, 200, 200, 136, 136, 136, 32, 102, 3, 107, 92, 28, 227, 110, 248, 109, 183, 221, 54, 121, 242, 228, 91, 181, 35, 33, 33, 129, 253, 209, 209, 209, 178, 33, 53, 53, 149, 91, 184, 145, 152, 195, 240, 165, 248, 226, 178, 193, 112, 200, 15, 32, 63, 140, 225, 48, 250, 169, 56, 134, 111, 147, 216, 232, 247, 209, 161, 99, 68, 24, 113, 5, 53, 53, 53, 181, 182, 182, 182, 180, 180, 156, 241, 229, 49, 110, 220, 184, 241, 227, 199, 79, 156, 56, 145, 128, 83, 115, 115, 115, 86, 51, 51, 51, 182, 217, 218, 218, 26, 221, 174, 67, 199, 168, 194, 136, 5, 160, 113, 94, 29, 144, 27, 25, 160, 135, 95, 254, 242, 151, 63, 255, 249, 207, 89, 127, 253, 235, 95, 219, 217, 217, 201, 37, 86, 46, 33, 3, 163, 219, 117, 232, 24, 85, 248, 150, 2, 176, 176, 176, 16, 150, 115, 192, 254, 95, 253, 234, 87, 178, 26, 4, 0, 245, 105, 5, 122, 7, 208, 49, 202, 49, 98, 1, 72, 93, 135, 229, 54, 54, 54, 194, 117, 168, 47, 7, 77, 128, 140, 149, 149, 149, 65, 27, 28, 70, 183, 235, 208, 49, 170, 240, 45, 59, 0, 254, 94, 2, 14, 168, 79, 237, 151, 38, 192, 169, 52, 1, 116, 130, 12, 136, 141, 110, 215, 161, 99, 84, 225, 91, 10, 128, 3, 138, 75, 160, 85, 127, 117, 48, 3, 72, 134, 67, 186, 4, 67, 130, 209, 237, 58, 116, 140, 42, 124, 27, 1, 136, 197, 215, 120, 174, 158, 249, 224, 124, 126, 241, 139, 95, 192, 126, 177, 64, 100, 232, 15, 122, 7, 208, 241, 189, 192, 136, 5, 0, 245, 197, 226, 51, 3, 192, 111, 232, 46, 229, 31, 13, 176, 146, 103, 6, 16, 23, 36, 135, 209, 237, 58, 116, 140, 42, 124, 155, 14, 192, 1, 251, 177, 55, 242, 200, 95, 4, 192, 129, 6, 164, 252, 139, 66, 100, 78, 48, 186, 93, 135, 142, 81, 133, 111, 41, 0, 195, 129, 18, 134, 232, 175, 141, 194, 67, 217, 47, 103, 0, 14, 163, 219, 117, 232, 24, 85, 24, 177, 0, 112, 56, 82, 248, 229, 49, 40, 199, 16, 253, 181, 67, 50, 134, 131, 73, 192, 232, 118, 29, 58, 70, 21, 190, 77, 7, 64, 0, 200, 64, 40, 206, 1, 239, 101, 0, 96, 8, 166, 240, 115, 88, 88, 88, 144, 23, 133, 24, 221, 174, 67, 199, 168, 194, 183, 17, 0, 135, 80, 28, 175, 207, 161, 149, 254, 161, 3, 223, 47, 151, 168, 253, 4, 28, 70, 183, 235, 208, 49, 170, 48, 98, 1, 200, 128, 107, 56, 168, 247, 242, 0, 148, 38, 192, 12, 32, 236, 151, 67, 166, 97, 163, 219, 117, 232, 24, 85, 248, 150, 29, 192, 112, 224, 115, 126, 170, 29, 104, 128, 149, 83, 131, 59, 66, 12, 152, 37, 163, 219, 117, 232, 24, 85, 248, 54, 2, 128, 217, 148, 118, 106, 63, 177, 165, 165, 165, 8, 0, 255, 195, 74, 198, 112, 137, 67, 23, 128, 142, 81, 14, 147, 155, 110, 186, 137, 226, 253, 135, 63, 252, 225, 55, 191, 249, 13, 36, 230, 244, 247, 191, 255, 253, 205, 55, 223, 252, 219, 223, 254, 22, 75, 67, 240, 187, 223, 253, 142, 75, 36, 127, 246, 179, 159, 113, 122, 219, 56, 155, 233, 83, 93, 110, 249, 131, 5, 235, 132, 241, 182, 19, 111, 179, 155, 52, 193, 126, 242, 68, 135, 105, 83, 156, 193, 148, 73, 142, 83, 167, 56, 115, 149, 75, 156, 178, 57, 200, 194, 123, 230, 20, 103, 207, 73, 142, 190, 211, 92, 3, 45, 188, 61, 39, 58, 204, 50, 245, 8, 52, 247, 242, 155, 225, 238, 51, 205, 213, 123, 138, 51, 177, 207, 84, 23, 175, 201, 78, 4, 236, 201, 112, 176, 156, 109, 103, 150, 237, 108, 157, 233, 104, 153, 110, 111, 158, 235, 106, 155, 225, 104, 153, 235, 106, 151, 231, 102, 63, 219, 206, 60, 213, 214, 148, 36, 87, 243, 220, 237, 201, 103, 187, 216, 44, 141, 115, 107, 143, 118, 233, 78, 244, 106, 14, 183, 239, 78, 244, 108, 141, 116, 108, 137, 112, 80, 8, 119, 232, 73, 82, 201, 158, 36, 111, 146, 92, 98, 39, 201, 87, 231, 154, 190, 88, 58, 245, 181, 74, 243, 151, 202, 166, 61, 87, 48, 225, 229, 138, 25, 156, 158, 41, 153, 252, 124, 209, 164, 87, 180, 248, 153, 252, 219, 158, 47, 156, 248, 114, 197, 244, 231, 139, 38, 178, 237, 236, 198, 252, 23, 214, 231, 129, 39, 87, 207, 126, 102, 48, 235, 185, 181, 57, 207, 175, 203, 125, 241, 246, 2, 50, 79, 172, 154, 253, 248, 202, 180, 103, 6, 51, 159, 90, 157, 206, 165, 179, 27, 11, 158, 93, 147, 125, 229, 228, 170, 183, 78, 173, 190, 112, 180, 239, 157, 123, 7, 46, 159, 88, 121, 233, 248, 138, 243, 71, 122, 57, 125, 243, 80, 55, 151, 222, 190, 167, 159, 128, 75, 100, 174, 222, 191, 230, 242, 137, 85, 22, 41, 11, 28, 178, 154, 88, 129, 109, 70, 163, 105, 194, 60, 187, 204, 197, 246, 90, 198, 50, 181, 126, 70, 252, 60, 203, 148, 122, 171, 84, 176, 208, 58, 109, 145, 109, 122, 67, 106, 217, 235, 9, 133, 47, 198, 23, 156, 141, 203, 63, 171, 173, 103, 146, 138, 95, 137, 201, 125, 126, 118, 197, 27, 209, 57, 207, 113, 137, 76, 114, 137, 202, 68, 107, 201, 204, 213, 159, 103, 15, 252, 49, 109, 249, 181, 140, 85, 159, 229, 12, 254, 119, 250, 170, 207, 82, 122, 63, 202, 26, 248, 35, 32, 147, 218, 247, 49, 87, 89, 185, 68, 158, 53, 237, 225, 215, 51, 31, 63, 159, 241, 216, 185, 248, 123, 206, 100, 61, 126, 126, 246, 35, 111, 164, 61, 244, 26, 200, 120, 244, 205, 132, 123, 207, 38, 159, 126, 57, 245, 193, 87, 57, 77, 126, 224, 149, 204, 199, 206, 17, 220, 251, 244, 7, 15, 159, 253, 252, 244, 115, 215, 30, 120, 254, 147, 71, 94, 252, 226, 158, 167, 222, 127, 244, 165, 47, 238, 123, 230, 67, 240, 232, 203, 127, 124, 244, 165, 63, 146, 124, 248, 236, 103, 108, 120, 232, 204, 167, 36, 175, 93, 187, 246, 217, 103, 159, 125, 250, 233, 167, 159, 124, 242, 201, 71, 31, 125, 196, 41, 171, 33, 32, 249, 167, 63, 253, 137, 224, 227, 143, 63, 254, 111, 237, 88, 177, 101, 207, 242, 205, 187, 193, 192, 246, 187, 87, 223, 185, 31, 172, 218, 182, 183, 255, 174, 187, 37, 51, 184, 227, 192, 192, 246, 3, 189, 155, 118, 116, 111, 220, 206, 218, 183, 121, 87, 211, 194, 150, 69, 117, 139, 23, 206, 107, 104, 156, 223, 212, 220, 208, 86, 63, 175, 129, 184, 121, 81, 219, 130, 154, 69, 139, 23, 52, 55, 46, 88, 50, 191, 122, 33, 168, 171, 172, 95, 178, 176, 21, 152, 64, 122, 40, 142, 0, 110, 185, 229, 22, 248, 13, 209, 209, 3, 182, 158, 152, 75, 200, 128, 67, 246, 144, 228, 16, 90, 195, 111, 120, 63, 254, 86, 107, 2, 232, 126, 235, 205, 150, 178, 146, 156, 58, 217, 201, 144, 65, 24, 8, 192, 123, 178, 19, 2, 8, 48, 243, 132, 229, 80, 156, 83, 52, 128, 0, 252, 103, 184, 163, 7, 78, 137, 209, 6, 2, 32, 147, 239, 238, 0, 221, 211, 108, 205, 114, 92, 109, 115, 92, 108, 225, 61, 200, 112, 176, 40, 240, 112, 40, 240, 116, 204, 114, 178, 206, 114, 178, 202, 113, 177, 81, 49, 50, 112, 179, 131, 229, 203, 226, 61, 160, 56, 92, 7, 176, 188, 51, 214, 117, 73, 152, 29, 113, 71, 140, 11, 167, 4, 173, 17, 142, 93, 9, 30, 157, 177, 110, 156, 158, 45, 157, 242, 90, 165, 217, 179, 249, 183, 65, 247, 51, 197, 147, 17, 192, 11, 197, 147, 95, 40, 154, 244, 114, 249, 116, 242, 196, 40, 132, 188, 38, 18, 51, 20, 34, 188, 63, 179, 33, 255, 169, 254, 12, 248, 253, 228, 234, 116, 168, 207, 41, 212, 127, 108, 69, 42, 25, 174, 62, 191, 78, 169, 66, 36, 241, 238, 125, 131, 240, 27, 150, 67, 125, 98, 196, 240, 238, 253, 107, 206, 29, 233, 133, 250, 100, 56, 125, 227, 96, 23, 1, 123, 46, 30, 91, 142, 12, 32, 58, 140, 183, 158, 189, 200, 33, 107, 137, 93, 198, 98, 135, 236, 37, 182, 233, 141, 112, 221, 42, 109, 33, 50, 96, 37, 105, 147, 222, 64, 12, 216, 3, 185, 5, 176, 31, 138, 167, 148, 189, 70, 144, 88, 244, 18, 212, 79, 42, 126, 89, 128, 6, 18, 139, 94, 70, 3, 108, 131, 241, 80, 60, 169, 251, 3, 197, 254, 149, 159, 206, 94, 249, 105, 82, 207, 135, 185, 107, 255, 140, 48, 146, 123, 62, 36, 153, 217, 255, 197, 236, 21, 159, 164, 244, 125, 156, 186, 252, 26, 27, 210, 31, 121, 99, 246, 195, 175, 67, 116, 168, 159, 116, 250, 37, 88, 14, 215, 33, 122, 202, 131, 175, 18, 144, 73, 121, 240, 149, 164, 251, 95, 138, 191, 247, 76, 250, 163, 111, 32, 9, 216, 127, 234, 201, 247, 78, 61, 249, 254, 253, 207, 126, 244, 224, 153, 79, 85, 252, 212, 251, 15, 157, 249, 236, 222, 167, 149, 0, 200, 195, 123, 226, 147, 79, 190, 71, 240, 224, 11, 159, 8, 173, 57, 62, 252, 240, 67, 86, 24, 47, 49, 188, 71, 24, 172, 127, 252, 227, 31, 57, 149, 149, 171, 107, 119, 29, 234, 187, 99, 215, 242, 205, 187, 86, 223, 185, 79, 72, 79, 6, 222, 175, 190, 107, 63, 49, 25, 36, 129, 72, 6, 119, 28, 100, 27, 98, 104, 105, 104, 19, 114, 47, 170, 93, 188, 160, 122, 33, 2, 64, 15, 13, 96, 126, 211, 252, 170, 250, 166, 250, 22, 84, 209, 210, 208, 190, 184, 190, 121, 126, 213, 66, 246, 152, 64, 119, 248, 13, 251, 153, 98, 41, 255, 28, 66, 122, 184, 46, 181, 159, 128, 164, 52, 1, 50, 82, 230, 89, 165, 204, 211, 1, 96, 188, 244, 4, 72, 79, 48, 101, 178, 211, 205, 55, 153, 19, 35, 15, 46, 193, 123, 58, 0, 53, 158, 21, 49, 4, 152, 123, 193, 126, 160, 50, 83, 93, 32, 189, 210, 134, 185, 23, 151, 144, 1, 98, 72, 119, 176, 200, 118, 182, 129, 241, 249, 238, 246, 105, 182, 166, 196, 172, 196, 153, 78, 86, 153, 142, 86, 74, 6, 30, 14, 240, 62, 215, 205, 46, 213, 134, 188, 3, 92, 111, 139, 114, 106, 137, 112, 20, 174, 179, 114, 218, 157, 224, 217, 30, 229, 76, 31, 224, 20, 133, 80, 248, 209, 0, 201, 158, 68, 175, 103, 242, 198, 67, 250, 151, 202, 167, 81, 230, 5, 47, 150, 77, 149, 194, 255, 234, 28, 83, 105, 11, 74, 0, 101, 211, 206, 148, 76, 225, 210, 211, 3, 153, 176, 28, 246, 107, 77, 32, 253, 197, 141, 5, 210, 4, 192, 19, 43, 211, 200, 64, 122, 148, 64, 146, 157, 168, 2, 90, 67, 110, 168, 79, 225, 63, 119, 184, 135, 224, 162, 162, 187, 82, 2, 25, 214, 75, 199, 87, 170, 164, 182, 237, 242, 201, 85, 148, 121, 40, 14, 185, 213, 154, 217, 100, 154, 88, 139, 6, 68, 15, 92, 146, 188, 105, 66, 45, 129, 89, 82, 157, 205, 236, 6, 56, 77, 201, 143, 202, 121, 14, 222, 19, 211, 7, 210, 202, 223, 72, 43, 127, 157, 98, 47, 125, 0, 37, 104, 221, 64, 197, 177, 121, 47, 100, 245, 127, 145, 177, 250, 115, 100, 0, 185, 41, 249, 185, 107, 254, 4, 233, 89, 169, 247, 20, 126, 58, 67, 114, 239, 71, 136, 1, 13, 160, 7, 78, 83, 31, 122, 53, 243, 241, 115, 212, 123, 90, 1, 125, 0, 49, 36, 105, 85, 159, 24, 1, 16, 32, 0, 228, 145, 120, 255, 139, 42, 126, 224, 149, 251, 158, 249, 8, 13, 60, 240, 194, 39, 39, 159, 120, 239, 190, 103, 63, 122, 236, 229, 63, 62, 252, 226, 231, 8, 0, 49, 60, 116, 246, 51, 106, 63, 157, 1, 109, 156, 126, 238, 227, 7, 158, 191, 198, 30, 104, 13, 209, 97, 54, 43, 149, 254, 139, 47, 190, 32, 128, 238, 148, 124, 2, 196, 64, 43, 64, 6, 228, 69, 6, 125, 119, 236, 92, 185, 117, 47, 128, 238, 107, 118, 30, 92, 117, 231, 62, 184, 190, 114, 235, 158, 126, 77, 0, 176, 31, 49, 244, 111, 191, 27, 246, 175, 216, 178, 155, 205, 212, 248, 134, 186, 38, 248, 189, 160, 122, 17, 68, 95, 56, 175, 17, 61, 144, 108, 156, 191, 68, 139, 23, 212, 215, 168, 134, 192, 30, 180, 129, 30, 76, 48, 54, 88, 29, 152, 205, 129, 24, 164, 15, 64, 119, 52, 64, 91, 224, 42, 188, 71, 27, 156, 178, 114, 21, 246, 67, 110, 85, 236, 39, 58, 220, 252, 7, 11, 88, 78, 44, 190, 72, 24, 207, 138, 24, 84, 151, 184, 205, 142, 75, 30, 19, 29, 32, 58, 140, 71, 0, 190, 211, 221, 208, 3, 85, 31, 186, 83, 236, 201, 147, 244, 55, 245, 160, 45, 160, 7, 191, 233, 110, 108, 72, 183, 183, 128, 235, 56, 31, 154, 0, 68, 135, 253, 105, 118, 102, 152, 31, 172, 17, 181, 159, 85, 149, 127, 15, 71, 54, 224, 145, 184, 74, 153, 135, 247, 56, 156, 246, 104, 24, 239, 72, 55, 88, 26, 231, 14, 209, 169, 247, 203, 226, 221, 209, 0, 151, 0, 50, 32, 207, 230, 23, 138, 39, 65, 110, 58, 0, 92, 63, 91, 50, 133, 224, 153, 252, 241, 47, 149, 79, 167, 3, 176, 62, 91, 48, 1, 25, 80, 251, 57, 165, 45, 156, 45, 157, 10, 197, 149, 189, 217, 144, 255, 194, 186, 92, 88, 142, 18, 30, 95, 145, 202, 250, 244, 128, 106, 8, 92, 98, 69, 3, 92, 98, 229, 20, 186, 83, 215, 225, 58, 252, 198, 243, 176, 82, 239, 193, 149, 83, 171, 113, 68, 116, 134, 55, 15, 247, 144, 196, 255, 136, 35, 194, 219, 224, 124, 204, 18, 107, 105, 5, 24, 30, 136, 110, 145, 188, 192, 102, 246, 34, 251, 204, 197, 180, 2, 154, 131, 82, 72, 230, 226, 25, 9, 243, 44, 146, 231, 115, 53, 181, 236, 53, 152, 13, 168, 250, 32, 190, 240, 69, 156, 15, 26, 16, 255, 195, 85, 202, 191, 38, 128, 231, 82, 74, 95, 69, 36, 20, 120, 168, 15, 233, 41, 240, 240, 158, 218, 79, 55, 160, 15, 144, 68, 3, 144, 30, 160, 4, 241, 63, 236, 193, 255, 96, 126, 210, 31, 125, 51, 245, 161, 215, 226, 239, 61, 75, 237, 199, 8, 209, 22, 164, 222, 67, 125, 141, 253, 47, 201, 30, 84, 161, 42, 253, 75, 127, 164, 180, 195, 114, 113, 59, 152, 34, 4, 0, 221, 181, 75, 95, 60, 248, 194, 167, 202, 20, 61, 251, 17, 74, 96, 197, 252, 124, 254, 249, 231, 82, 245, 33, 61, 92, 151, 170, 143, 36, 228, 18, 167, 104, 128, 171, 210, 31, 180, 242, 191, 27, 123, 3, 86, 42, 243, 179, 159, 0, 222, 247, 110, 218, 73, 189, 31, 220, 121, 208, 16, 211, 25, 184, 10, 185, 33, 58, 38, 135, 38, 208, 188, 168, 21, 150, 215, 215, 44, 90, 84, 219, 40, 26, 160, 234, 55, 213, 55, 19, 44, 89, 212, 138, 6, 16, 137, 178, 64, 144, 27, 13, 80, 230, 225, 58, 171, 116, 3, 52, 192, 129, 6, 56, 216, 131, 42, 8, 80, 200, 184, 91, 172, 224, 55, 236, 167, 246, 211, 1, 198, 143, 179, 129, 244, 226, 248, 113, 255, 200, 3, 1, 112, 9, 16, 224, 136, 96, 188, 120, 125, 10, 252, 44, 226, 169, 46, 170, 216, 79, 119, 67, 0, 216, 30, 2, 160, 146, 150, 51, 97, 63, 221, 128, 50, 63, 219, 222, 92, 120, 79, 55, 128, 250, 148, 127, 42, 61, 133, 31, 234, 131, 124, 15, 60, 146, 45, 238, 159, 157, 72, 5, 222, 83, 221, 25, 3, 160, 56, 62, 7, 47, 68, 0, 251, 33, 61, 122, 232, 138, 247, 64, 3, 244, 4, 50, 29, 209, 46, 8, 128, 14, 128, 221, 135, 250, 84, 125, 40, 78, 177, 71, 9, 100, 88, 225, 189, 138, 11, 39, 62, 91, 112, 27, 238, 159, 75, 207, 209, 34, 190, 244, 54, 207, 173, 201, 102, 30, 144, 110, 64, 31, 120, 86, 81, 63, 139, 75, 88, 127, 106, 63, 99, 0, 82, 193, 26, 189, 117, 170, 95, 149, 246, 19, 43, 223, 190, 119, 224, 252, 209, 62, 88, 206, 138, 30, 168, 250, 208, 93, 122, 2, 236, 87, 115, 194, 177, 229, 87, 78, 174, 150, 146, 15, 251, 41, 249, 88, 124, 187, 140, 70, 202, 63, 173, 128, 194, 47, 46, 136, 13, 0, 85, 160, 7, 243, 228, 249, 20, 251, 216, 188, 51, 48, 27, 192, 120, 136, 14, 227, 233, 3, 136, 1, 222, 115, 213, 160, 144, 152, 220, 23, 146, 75, 94, 69, 0, 88, 32, 106, 63, 53, 94, 134, 1, 234, 125, 206, 154, 63, 193, 123, 229, 142, 180, 169, 128, 83, 54, 200, 54, 232, 14, 224, 55, 228, 134, 232, 244, 1, 78, 135, 74, 254, 67, 175, 166, 61, 252, 26, 194, 224, 52, 225, 190, 179, 137, 247, 189, 136, 65, 162, 3, 192, 111, 58, 0, 140, 191, 255, 185, 143, 161, 59, 101, 30, 174, 83, 242, 137, 239, 121, 234, 3, 72, 127, 255, 179, 196, 159, 16, 147, 129, 235, 28, 50, 9, 80, 230, 97, 60, 49, 25, 78, 63, 248, 224, 3, 177, 254, 36, 185, 68, 76, 158, 162, 190, 102, 231, 33, 252, 15, 62, 135, 24, 49, 32, 9, 72, 223, 115, 251, 246, 229, 91, 118, 147, 100, 30, 232, 190, 125, 59, 212, 167, 21, 48, 9, 80, 239, 25, 3, 40, 243, 181, 149, 11, 112, 56, 248, 126, 250, 0, 1, 2, 64, 24, 228, 145, 4, 194, 80, 3, 192, 34, 108, 82, 163, 9, 180, 134, 253, 248, 28, 41, 249, 16, 29, 246, 203, 88, 76, 158, 14, 0, 251, 81, 5, 167, 172, 92, 162, 180, 143, 187, 213, 26, 192, 120, 120, 79, 141, 159, 60, 201, 17, 85, 192, 120, 216, 47, 25, 186, 1, 170, 0, 100, 168, 238, 148, 121, 58, 0, 26, 96, 6, 160, 33, 192, 120, 229, 130, 204, 60, 149, 255, 225, 20, 37, 48, 254, 106, 50, 64, 45, 116, 0, 6, 92, 113, 59, 4, 218, 60, 96, 138, 219, 81, 83, 129, 139, 26, 136, 217, 64, 31, 160, 252, 163, 13, 122, 2, 164, 215, 24, 239, 170, 148, 16, 233, 36, 211, 48, 164, 71, 21, 109, 145, 78, 75, 99, 221, 144, 4, 87, 73, 178, 1, 71, 132, 171, 129, 217, 24, 30, 4, 240, 202, 156, 25, 207, 21, 42, 195, 195, 188, 171, 6, 223, 242, 233, 148, 127, 250, 3, 34, 65, 33, 175, 205, 53, 67, 0, 103, 214, 231, 41, 207, 179, 54, 135, 194, 207, 202, 41, 68, 199, 234, 188, 120, 123, 161, 12, 3, 4, 168, 2, 157, 168, 97, 96, 109, 206, 59, 248, 254, 123, 250, 225, 55, 92, 71, 6, 116, 3, 205, 250, 247, 227, 118, 52, 255, 163, 102, 98, 128, 24, 164, 69, 152, 39, 213, 169, 73, 55, 181, 30, 150, 91, 166, 44, 128, 253, 4, 204, 0, 4, 172, 204, 199, 148, 127, 250, 131, 76, 198, 72, 5, 126, 39, 20, 190, 132, 249, 97, 26, 102, 0, 32, 208, 188, 254, 171, 26, 251, 223, 64, 21, 194, 126, 180, 193, 41, 87, 197, 243, 228, 173, 253, 51, 37, 95, 220, 14, 166, 136, 14, 64, 201, 231, 18, 2, 224, 18, 27, 148, 23, 234, 249, 144, 241, 32, 225, 62, 229, 109, 226, 40, 240, 143, 188, 1, 197, 21, 238, 127, 41, 249, 129, 151, 241, 253, 196, 50, 9, 176, 135, 36, 167, 204, 9, 76, 189, 48, 27, 138, 195, 123, 10, 63, 70, 159, 86, 160, 13, 193, 31, 209, 1, 84, 31, 120, 230, 67, 37, 0, 53, 1, 127, 196, 72, 32, 37, 95, 106, 63, 43, 149, 94, 184, 142, 0, 168, 247, 104, 128, 62, 128, 36, 208, 0, 6, 137, 184, 231, 246, 29, 176, 28, 11, 36, 74, 192, 5, 137, 219, 65, 3, 76, 195, 0, 73, 192, 126, 105, 20, 236, 164, 246, 67, 116, 220, 63, 166, 95, 205, 3, 85, 245, 84, 125, 42, 61, 166, 136, 12, 122, 0, 11, 107, 27, 97, 63, 98, 64, 45, 170, 3, 112, 224, 127, 40, 255, 4, 98, 117, 132, 238, 8, 128, 12, 125, 128, 85, 38, 1, 14, 184, 14, 203, 153, 110, 41, 240, 172, 232, 129, 128, 36, 122, 128, 250, 144, 158, 36, 167, 226, 139, 80, 5, 182, 158, 98, 143, 203, 55, 216, 125, 136, 142, 18, 200, 67, 119, 146, 94, 147, 28, 105, 17, 24, 33, 28, 17, 153, 108, 103, 107, 202, 188, 114, 249, 202, 228, 88, 193, 126, 101, 138, 28, 173, 10, 61, 29, 133, 250, 248, 31, 70, 97, 246, 160, 10, 4, 32, 254, 135, 26, 79, 177, 135, 223, 24, 125, 166, 2, 53, 242, 198, 184, 178, 46, 9, 83, 188, 103, 6, 208, 188, 144, 106, 17, 48, 30, 219, 3, 168, 250, 12, 3, 140, 188, 244, 1, 72, 143, 24, 56, 69, 3, 216, 30, 90, 1, 236, 71, 21, 232, 1, 174, 139, 233, 135, 247, 79, 247, 103, 192, 120, 28, 191, 244, 4, 101, 132, 148, 23, 202, 132, 250, 207, 12, 170, 149, 61, 240, 30, 210, 67, 110, 92, 62, 2, 160, 222, 179, 190, 129, 243, 57, 212, 77, 94, 220, 63, 188, 39, 144, 75, 138, 232, 179, 23, 97, 132, 176, 248, 150, 41, 245, 184, 124, 4, 0, 209, 81, 133, 116, 6, 179, 196, 58, 10, 191, 140, 7, 244, 4, 41, 249, 16, 93, 138, 189, 120, 253, 248, 130, 23, 165, 27, 96, 123, 16, 3, 49, 61, 1, 112, 42, 230, 158, 26, 15, 203, 101, 32, 70, 0, 196, 36, 161, 62, 230, 71, 241, 190, 251, 3, 146, 104, 3, 224, 254, 41, 240, 179, 31, 81, 115, 48, 20, 167, 210, 171, 140, 246, 204, 135, 149, 36, 227, 175, 100, 48, 72, 52, 10, 40, 126, 250, 185, 107, 148, 118, 38, 1, 168, 143, 0, 80, 2, 166, 8, 97, 112, 138, 6, 48, 69, 90, 240, 193, 233, 231, 175, 177, 25, 186, 115, 192, 108, 248, 45, 46, 136, 0, 222, 35, 0, 14, 81, 2, 87, 57, 144, 1, 59, 169, 253, 216, 27, 24, 79, 201, 103, 213, 158, 252, 28, 92, 179, 235, 144, 12, 6, 88, 32, 20, 162, 141, 194, 106, 54, 64, 21, 226, 239, 25, 124, 53, 243, 163, 92, 62, 190, 31, 207, 195, 233, 2, 205, 11, 177, 1, 222, 179, 7, 97, 40, 1, 192, 108, 232, 14, 239, 209, 0, 92, 151, 110, 32, 2, 80, 99, 129, 54, 24, 16, 35, 15, 14, 182, 65, 116, 161, 187, 56, 31, 121, 236, 35, 50, 160, 222, 115, 137, 83, 145, 4, 43, 102, 137, 242, 15, 197, 225, 189, 178, 251, 218, 152, 75, 19, 80, 166, 95, 243, 253, 8, 128, 12, 166, 72, 77, 5, 166, 30, 92, 130, 223, 202, 246, 120, 56, 168, 167, 156, 206, 54, 152, 159, 116, 123, 115, 106, 63, 26, 192, 17, 209, 7, 148, 0, 156, 173, 149, 65, 178, 87, 143, 134, 224, 125, 71, 140, 107, 111, 146, 55, 101, 30, 1, 176, 98, 117, 168, 250, 80, 191, 45, 202, 25, 61, 160, 16, 54, 144, 161, 33, 32, 6, 104, 253, 114, 197, 244, 87, 42, 102, 32, 0, 154, 0, 149, 30, 198, 211, 22, 94, 40, 158, 76, 18, 222, 107, 51, 128, 57, 121, 202, 63, 194, 128, 211, 64, 102, 95, 220, 14, 171, 170, 244, 235, 114, 160, 190, 60, 253, 148, 0, 112, 9, 96, 111, 164, 186, 83, 236, 225, 58, 85, 31, 150, 11, 227, 201, 19, 147, 148, 9, 1, 169, 96, 147, 48, 247, 128, 49, 0, 25, 40, 23, 148, 209, 104, 158, 52, 31, 183, 131, 30, 96, 60, 212, 71, 0, 4, 128, 128, 36, 198, 6, 234, 107, 15, 121, 84, 32, 13, 65, 30, 254, 64, 119, 78, 17, 0, 61, 193, 208, 13, 210, 52, 231, 35, 140, 103, 21, 1, 40, 23, 164, 85, 125, 2, 166, 2, 233, 9, 200, 64, 134, 96, 88, 78, 7, 160, 228, 171, 103, 160, 15, 191, 70, 204, 40, 156, 241, 152, 26, 139, 17, 6, 253, 1, 160, 7, 25, 139, 241, 253, 148, 118, 64, 0, 203, 53, 255, 115, 13, 246, 35, 9, 197, 251, 103, 84, 19, 120, 228, 197, 207, 9, 180, 158, 48, 68, 116, 152, 45, 182, 135, 62, 192, 74, 189, 231, 32, 144, 177, 152, 86, 192, 169, 4, 12, 184, 128, 169, 23, 162, 211, 4, 52, 162, 31, 192, 246, 244, 109, 222, 69, 55, 64, 15, 212, 126, 156, 15, 26, 96, 3, 35, 50, 140, 23, 192, 251, 249, 85, 16, 93, 61, 2, 194, 2, 201, 212, 219, 220, 208, 70, 55, 160, 75, 168, 181, 74, 205, 9, 234, 61, 0, 204, 214, 12, 255, 111, 84, 133, 215, 78, 229, 145, 63, 43, 98, 224, 20, 61, 208, 4, 232, 12, 28, 48, 158, 186, 110, 40, 246, 66, 122, 105, 5, 226, 251, 201, 220, 170, 177, 95, 158, 147, 122, 76, 176, 199, 252, 200, 36, 32, 230, 71, 188, 16, 49, 1, 140, 151, 21, 37, 160, 16, 154, 0, 29, 64, 61, 235, 116, 182, 70, 0, 172, 170, 234, 59, 90, 42, 61, 56, 88, 20, 120, 162, 13, 245, 138, 128, 149, 211, 60, 55, 123, 98, 49, 57, 242, 44, 136, 2, 207, 10, 227, 81, 2, 73, 86, 109, 14, 102, 50, 118, 199, 38, 73, 163, 128, 235, 148, 121, 173, 228, 171, 97, 87, 6, 98, 184, 126, 182, 116, 10, 173, 64, 155, 131, 111, 163, 45, 176, 146, 127, 117, 174, 25, 70, 159, 26, 255, 220, 218, 108, 49, 60, 104, 224, 133, 245, 185, 82, 254, 31, 95, 169, 30, 131, 146, 127, 170, 95, 185, 127, 146, 92, 149, 209, 22, 162, 163, 4, 205, 252, 172, 102, 234, 37, 41, 157, 1, 198, 171, 245, 158, 1, 246, 112, 9, 37, 40, 99, 147, 181, 132, 218, 143, 11, 178, 78, 91, 8, 227, 225, 58, 50, 0, 228, 177, 254, 108, 128, 250, 116, 3, 54, 32, 12, 88, 46, 15, 254, 197, 225, 192, 123, 121, 220, 137, 12, 96, 60, 77, 128, 158, 32, 227, 65, 108, 222, 11, 244, 10, 108, 61, 230, 71, 156, 15, 245, 94, 61, 242, 95, 243, 39, 226, 172, 129, 63, 34, 9, 120, 47, 74, 200, 208, 158, 138, 34, 15, 161, 184, 88, 127, 198, 92, 102, 98, 252, 15, 167, 116, 3, 50, 92, 197, 255, 16, 168, 87, 1, 167, 95, 198, 38, 169, 241, 247, 185, 143, 97, 54, 68, 23, 35, 244, 232, 203, 127, 164, 234, 67, 122, 153, 128, 49, 72, 180, 136, 83, 79, 189, 143, 47, 98, 143, 144, 222, 224, 251, 169, 244, 148, 127, 98, 146, 4, 34, 3, 77, 14, 159, 147, 68, 0, 152, 28, 58, 0, 43, 236, 39, 160, 198, 19, 80, 236, 53, 219, 179, 19, 48, 0, 144, 228, 148, 145, 0, 49, 224, 127, 224, 186, 88, 124, 10, 188, 12, 0, 208, 157, 242, 15, 212, 35, 160, 134, 54, 44, 16, 121, 121, 27, 96, 34, 227, 47, 252, 22, 159, 35, 51, 0, 7, 122, 16, 59, 36, 50, 96, 27, 25, 245, 152, 232, 15, 22, 152, 254, 155, 111, 50, 71, 0, 112, 29, 222, 67, 116, 17, 0, 13, 1, 32, 3, 17, 6, 243, 49, 1, 5, 30, 174, 195, 111, 5, 11, 111, 188, 190, 170, 244, 19, 236, 113, 255, 48, 94, 10, 63, 242, 80, 109, 1, 73, 76, 118, 130, 235, 194, 108, 109, 204, 85, 134, 135, 50, 175, 13, 193, 142, 248, 31, 172, 17, 206, 7, 119, 164, 185, 32, 91, 2, 230, 90, 200, 189, 44, 222, 131, 57, 88, 89, 160, 68, 47, 168, 15, 215, 145, 129, 54, 30, 168, 206, 32, 167, 116, 6, 2, 120, 15, 209, 95, 40, 158, 164, 121, 30, 148, 160, 154, 0, 35, 1, 229, 95, 170, 190, 214, 28, 38, 194, 126, 116, 194, 41, 68, 135, 217, 0, 162, 171, 199, 157, 202, 238, 231, 64, 119, 106, 63, 151, 72, 82, 245, 9, 200, 16, 3, 72, 15, 160, 59, 53, 30, 64, 116, 252, 15, 25, 98, 154, 128, 54, 248, 174, 146, 134, 128, 18, 56, 197, 219, 80, 251, 225, 61, 246, 6, 219, 3, 227, 149, 225, 201, 106, 162, 45, 48, 0, 168, 218, 159, 160, 156, 15, 1, 73, 38, 1, 97, 60, 68, 167, 252, 139, 24, 96, 63, 140, 7, 140, 4, 144, 94, 244, 192, 76, 204, 78, 26, 130, 34, 253, 242, 107, 48, 94, 106, 63, 142, 8, 1, 136, 227, 23, 73, 16, 171, 241, 64, 123, 28, 164, 116, 162, 189, 252, 194, 249, 176, 226, 248, 41, 255, 24, 30, 146, 240, 158, 170, 175, 102, 131, 71, 223, 84, 131, 1, 167, 143, 159, 67, 42, 204, 184, 0, 186, 107, 22, 255, 61, 244, 128, 6, 232, 0, 104, 0, 234, 179, 202, 115, 33, 220, 63, 194, 32, 96, 198, 133, 217, 210, 1, 68, 9, 112, 29, 25, 200, 3, 80, 73, 74, 6, 246, 227, 136, 112, 62, 90, 129, 223, 69, 213, 23, 210, 211, 16, 86, 109, 195, 23, 169, 151, 0, 156, 174, 221, 117, 168, 119, 211, 14, 50, 107, 119, 29, 70, 33, 194, 108, 230, 96, 136, 78, 237, 95, 56, 175, 1, 61, 0, 122, 2, 74, 128, 241, 0, 131, 164, 94, 14, 204, 111, 194, 26, 153, 80, 224, 241, 57, 212, 120, 88, 14, 197, 89, 209, 3, 188, 135, 253, 92, 26, 46, 9, 182, 33, 18, 177, 55, 88, 32, 38, 93, 195, 40, 12, 221, 101, 69, 12, 226, 142, 100, 20, 230, 20, 150, 227, 127, 96, 188, 242, 57, 150, 51, 225, 186, 26, 124, 69, 18, 218, 195, 80, 78, 185, 74, 140, 6, 200, 139, 5, 130, 244, 185, 218, 51, 80, 156, 15, 163, 48, 94, 136, 100, 142, 171, 45, 13, 1, 49, 136, 35, 66, 39, 108, 147, 1, 151, 62, 64, 117, 71, 12, 172, 0, 255, 211, 28, 238, 0, 136, 145, 196, 151, 47, 4, 148, 24, 180, 2, 111, 6, 251, 197, 231, 32, 6, 36, 1, 24, 133, 149, 255, 153, 107, 166, 222, 4, 23, 77, 82, 163, 66, 193, 109, 92, 101, 246, 21, 234, 203, 48, 240, 228, 234, 217, 103, 55, 228, 171, 199, 62, 26, 251, 233, 0, 72, 130, 83, 145, 4, 219, 132, 223, 144, 91, 123, 209, 171, 158, 123, 194, 114, 108, 143, 116, 131, 243, 71, 250, 184, 36, 46, 232, 156, 246, 134, 24, 78, 195, 111, 230, 93, 155, 244, 6, 106, 60, 38, 135, 88, 60, 15, 64, 6, 228, 197, 32, 49, 39, 160, 22, 197, 105, 13, 216, 27, 121, 226, 9, 209, 97, 63, 25, 2, 137, 69, 33, 200, 128, 46, 193, 92, 75, 141, 135, 247, 50, 12, 48, 248, 14, 61, 17, 26, 252, 239, 20, 237, 53, 48, 87, 153, 13, 80, 2, 50, 224, 170, 84, 125, 41, 249, 154, 231, 121, 3, 171, 3, 245, 145, 4, 151, 56, 133, 244, 41, 15, 188, 34, 30, 73, 123, 12, 250, 1, 230, 7, 235, 207, 138, 12, 32, 58, 122, 128, 235, 12, 196, 20, 126, 124, 191, 122, 37, 252, 210, 23, 15, 191, 200, 132, 240, 49, 1, 156, 134, 253, 80, 156, 85, 158, 244, 195, 120, 216, 207, 33, 50, 32, 143, 18, 232, 3, 28, 156, 226, 115, 168, 241, 48, 155, 9, 184, 119, 147, 162, 187, 246, 210, 87, 61, 14, 162, 45, 224, 136, 122, 213, 139, 130, 61, 232, 129, 0, 23, 164, 61, 236, 175, 87, 238, 127, 97, 139, 76, 186, 4, 148, 124, 172, 63, 2, 128, 247, 170, 21, 84, 47, 34, 41, 143, 68, 77, 32, 58, 20, 135, 220, 112, 29, 25, 160, 1, 88, 78, 146, 128, 218, 79, 134, 21, 246, 203, 84, 64, 82, 241, 94, 155, 131, 213, 48, 112, 171, 181, 56, 31, 146, 116, 6, 185, 68, 213, 71, 0, 92, 37, 15, 84, 177, 159, 228, 136, 183, 129, 235, 126, 51, 220, 229, 77, 48, 182, 7, 222, 147, 167, 234, 67, 122, 68, 34, 179, 1, 54, 73, 123, 191, 107, 47, 99, 46, 77, 128, 146, 79, 55, 208, 94, 5, 152, 105, 122, 176, 164, 234, 19, 203, 59, 1, 140, 208, 80, 117, 143, 81, 3, 0, 2, 208, 78, 29, 104, 8, 180, 5, 146, 100, 228, 5, 176, 102, 129, 188, 88, 159, 43, 152, 32, 190, 159, 149, 98, 175, 4, 192, 40, 140, 0, 74, 38, 195, 120, 174, 178, 74, 55, 64, 33, 24, 36, 56, 13, 191, 33, 58, 252, 198, 8, 193, 123, 100, 64, 146, 177, 24, 73, 60, 61, 48, 212, 31, 148, 66, 52, 145, 64, 116, 241, 60, 8, 0, 150, 163, 1, 153, 119, 1, 98, 32, 3, 233, 101, 3, 25, 36, 129, 0, 148, 209, 79, 170, 195, 240, 136, 6, 88, 201, 200, 16, 204, 60, 96, 159, 185, 24, 37, 224, 130, 184, 132, 6, 164, 228, 67, 113, 169, 250, 80, 28, 174, 99, 120, 232, 6, 49, 121, 47, 196, 230, 157, 225, 20, 25, 208, 1, 144, 7, 59, 161, 181, 114, 56, 171, 62, 163, 186, 103, 106, 37, 31, 150, 51, 24, 164, 104, 31, 136, 16, 131, 132, 18, 24, 136, 201, 48, 6, 136, 191, 135, 235, 218, 235, 222, 179, 184, 124, 53, 12, 60, 252, 58, 25, 26, 2, 140, 79, 125, 232, 53, 180, 145, 116, 250, 37, 177, 64, 84, 125, 241, 54, 84, 125, 124, 14, 227, 47, 214, 159, 218, 79, 31, 80, 205, 225, 153, 143, 30, 120, 225, 19, 242, 40, 225, 161, 179, 159, 113, 10, 227, 13, 44, 71, 0, 66, 116, 84, 33, 158, 71, 84, 33, 34, 97, 30, 224, 18, 204, 214, 6, 223, 161, 199, 252, 52, 4, 124, 14, 3, 128, 248, 34, 50, 136, 129, 171, 152, 162, 21, 91, 246, 172, 216, 186, 71, 177, 92, 123, 250, 169, 158, 253, 207, 95, 34, 140, 135, 235, 212, 123, 233, 0, 72, 130, 97, 96, 201, 194, 22, 25, 6, 84, 7, 192, 216, 192, 114, 120, 15, 197, 161, 190, 84, 125, 101, 137, 52, 83, 196, 193, 158, 225, 29, 64, 152, 13, 215, 97, 63, 116, 191, 89, 251, 200, 131, 180, 5, 161, 190, 12, 0, 196, 92, 130, 247, 152, 28, 97, 57, 77, 96, 150, 153, 39, 164, 135, 235, 76, 198, 52, 1, 98, 180, 33, 49, 131, 1, 19, 2, 101, 94, 115, 56, 86, 180, 2, 166, 94, 4, 96, 136, 145, 4, 3, 49, 160, 252, 83, 251, 9, 16, 0, 254, 158, 1, 0, 222, 83, 230, 123, 180, 98, 143, 5, 66, 18, 204, 187, 202, 2, 37, 122, 209, 4, 228, 84, 13, 199, 17, 142, 47, 149, 79, 195, 255, 60, 147, 63, 30, 123, 67, 213, 87, 207, 124, 230, 154, 17, 168, 207, 62, 168, 14, 160, 62, 41, 132, 24, 160, 62, 151, 158, 47, 156, 72, 153, 103, 8, 86, 44, 95, 153, 246, 194, 186, 220, 51, 235, 243, 96, 57, 94, 31, 1, 24, 196, 192, 6, 134, 96, 153, 7, 100, 186, 189, 114, 106, 181, 240, 251, 178, 246, 46, 12, 25, 12, 81, 255, 80, 55, 87, 1, 167, 242, 92, 8, 90, 163, 1, 86, 232, 14, 191, 137, 109, 102, 55, 192, 123, 211, 132, 121, 194, 123, 106, 191, 109, 122, 131, 106, 5, 179, 23, 161, 19, 72, 143, 207, 129, 223, 112, 93, 148, 128, 233, 215, 236, 208, 107, 234, 189, 152, 186, 122, 6, 61, 16, 104, 195, 241, 43, 66, 113, 42, 189, 170, 241, 171, 62, 147, 79, 1, 33, 9, 244, 64, 67, 128, 247, 201, 189, 31, 41, 13, 244, 126, 68, 146, 206, 128, 219, 129, 217, 200, 32, 81, 27, 130, 161, 59, 125, 128, 49, 128, 33, 24, 1, 32, 3, 78, 165, 69, 112, 74, 43, 208, 202, 63, 110, 71, 125, 252, 1, 64, 122, 241, 253, 20, 123, 26, 130, 122, 242, 243, 194, 39, 116, 9, 54, 32, 140, 135, 207, 126, 142, 177, 161, 228, 83, 236, 135, 187, 29, 201, 16, 75, 6, 133, 32, 15, 100, 192, 84, 128, 183, 129, 214, 3, 59, 232, 0, 7, 169, 247, 120, 33, 50, 184, 32, 120, 79, 43, 64, 0, 36, 181, 71, 162, 88, 160, 67, 160, 174, 74, 249, 126, 60, 15, 173, 0, 219, 35, 159, 137, 64, 15, 98, 132, 144, 4, 43, 188, 39, 163, 93, 106, 84, 2, 128, 214, 194, 111, 233, 0, 136, 225, 150, 91, 110, 65, 9, 50, 30, 136, 66, 148, 251, 191, 229, 22, 98, 248, 13, 221, 69, 0, 248, 28, 78, 89, 137, 33, 61, 29, 96, 202, 100, 39, 17, 6, 13, 129, 60, 73, 138, 58, 85, 31, 102, 171, 199, 252, 218, 71, 30, 228, 217, 63, 157, 1, 85, 32, 0, 46, 209, 10, 232, 0, 178, 74, 201, 135, 217, 98, 123, 100, 32, 206, 119, 183, 79, 181, 85, 15, 61, 33, 61, 142, 136, 105, 152, 13, 120, 33, 0, 245, 187, 19, 212, 103, 224, 40, 246, 218, 36, 224, 12, 221, 25, 124, 9, 122, 147, 188, 177, 70, 200, 64, 128, 255, 105, 139, 114, 134, 250, 242, 252, 231, 140, 178, 254, 74, 6, 202, 241, 23, 76, 80, 142, 72, 30, 128, 86, 154, 147, 68, 9, 204, 0, 47, 149, 77, 163, 240, 195, 126, 28, 14, 44, 63, 179, 33, 143, 83, 216, 15, 233, 49, 66, 47, 106, 50, 32, 134, 250, 196, 104, 227, 197, 219, 11, 176, 55, 208, 26, 246, 15, 41, 225, 228, 42, 122, 2, 147, 0, 73, 46, 209, 22, 0, 121, 154, 192, 91, 247, 244, 35, 3, 24, 47, 31, 130, 80, 111, 130, 19, 230, 201, 139, 97, 186, 1, 188, 135, 238, 248, 126, 186, 1, 25, 218, 130, 216, 33, 42, 61, 228, 78, 44, 82, 207, 124, 88, 41, 246, 148, 124, 145, 4, 122, 160, 234, 147, 196, 23, 49, 15, 112, 137, 128, 122, 15, 209, 165, 204, 195, 239, 92, 237, 169, 191, 204, 190, 204, 0, 200, 131, 110, 64, 94, 116, 130, 54, 176, 58, 208, 90, 121, 158, 123, 207, 198, 223, 123, 134, 38, 192, 224, 139, 221, 23, 97, 40, 35, 164, 38, 4, 245, 120, 84, 245, 138, 199, 207, 195, 248, 123, 158, 134, 238, 127, 164, 9, 96, 247, 79, 62, 169, 158, 129, 98, 120, 24, 6, 160, 62, 74, 144, 121, 64, 125, 28, 72, 61, 30, 165, 178, 15, 29, 82, 248, 133, 232, 82, 251, 97, 63, 49, 29, 128, 128, 83, 49, 69, 240, 155, 74, 79, 141, 151, 0, 162, 67, 247, 149, 91, 247, 138, 18, 112, 255, 244, 4, 245, 252, 71, 205, 202, 170, 81, 80, 236, 27, 213, 27, 128, 118, 241, 57, 117, 149, 11, 136, 23, 171, 215, 192, 77, 24, 33, 202, 191, 242, 72, 85, 170, 15, 208, 4, 230, 87, 213, 155, 8, 239, 225, 186, 216, 30, 40, 46, 125, 128, 128, 83, 132, 33, 51, 128, 200, 128, 24, 150, 67, 122, 40, 46, 19, 240, 16, 239, 181, 103, 65, 84, 253, 91, 181, 62, 32, 170, 80, 83, 129, 246, 25, 79, 97, 54, 29, 0, 198, 19, 48, 6, 16, 75, 91, 144, 170, 143, 30, 136, 105, 11, 196, 144, 91, 61, 231, 81, 31, 249, 84, 254, 7, 183, 35, 159, 138, 147, 62, 192, 37, 85, 248, 181, 183, 96, 234, 9, 169, 131, 5, 188, 135, 220, 8, 0, 198, 99, 117, 186, 18, 84, 43, 64, 21, 20, 126, 237, 189, 152, 122, 31, 172, 189, 24, 246, 106, 14, 179, 167, 93, 208, 1, 224, 183, 114, 56, 242, 164, 159, 146, 95, 54, 21, 231, 35, 120, 169, 124, 58, 218, 192, 5, 33, 15, 202, 63, 123, 168, 250, 202, 241, 107, 79, 60, 197, 247, 163, 7, 196, 32, 166, 136, 224, 105, 245, 56, 72, 125, 48, 142, 188, 60, 6, 133, 253, 80, 28, 222, 95, 57, 185, 26, 25, 80, 233, 13, 243, 0, 26, 0, 196, 176, 159, 128, 61, 20, 126, 97, 57, 43, 164, 103, 8, 198, 252, 16, 208, 1, 224, 189, 178, 64, 89, 77, 106, 54, 72, 172, 227, 20, 192, 123, 136, 14, 32, 58, 133, 31, 246, 211, 1, 136, 169, 247, 52, 129, 184, 124, 85, 248, 9, 24, 9, 104, 14, 172, 140, 188, 212, 126, 202, 188, 12, 0, 98, 129, 40, 255, 4, 84, 125, 120, 79, 0, 164, 69, 160, 10, 234, 122, 210, 233, 151, 17, 128, 42, 240, 26, 197, 211, 31, 85, 111, 196, 72, 18, 64, 122, 244, 128, 17, 146, 7, 163, 172, 242, 210, 23, 13, 176, 82, 227, 241, 253, 39, 159, 184, 10, 251, 169, 253, 208, 93, 134, 1, 180, 65, 140, 84, 208, 128, 176, 28, 114, 11, 239, 57, 69, 3, 210, 22, 56, 12, 229, 159, 21, 11, 196, 41, 3, 0, 252, 6, 218, 167, 223, 14, 104, 111, 196, 118, 97, 120, 68, 12, 172, 218, 4, 172, 188, 16, 229, 159, 109, 245, 53, 139, 40, 243, 200, 0, 159, 3, 245, 53, 235, 175, 94, 123, 225, 133, 100, 56, 38, 143, 17, 162, 57, 52, 46, 88, 130, 48, 148, 0, 56, 132, 235, 200, 0, 49, 104, 222, 231, 231, 34, 0, 137, 197, 17, 201, 42, 181, 31, 114, 179, 66, 125, 124, 14, 49, 50, 128, 241, 114, 9, 49, 16, 112, 73, 246, 192, 126, 24, 15, 221, 69, 6, 148, 124, 78, 89, 177, 70, 208, 29, 40, 97, 104, 179, 129, 188, 17, 195, 217, 107, 254, 94, 125, 24, 14, 199, 207, 42, 239, 191, 8, 100, 38, 70, 3, 228, 153, 19, 200, 228, 186, 218, 33, 0, 13, 106, 20, 198, 226, 107, 110, 71, 77, 2, 248, 34, 153, 122, 145, 129, 196, 136, 4, 49, 96, 250, 161, 56, 164, 215, 62, 2, 173, 148, 128, 30, 160, 62, 121, 180, 129, 23, 98, 252, 37, 80, 175, 132, 75, 167, 210, 1, 160, 184, 188, 5, 163, 240, 107, 207, 58, 213, 7, 224, 80, 130, 118, 154, 135, 48, 134, 70, 97, 237, 195, 112, 228, 169, 244, 231, 143, 246, 97, 126, 160, 254, 27, 7, 187, 32, 61, 92, 39, 137, 36, 12, 118, 136, 21, 143, 164, 118, 30, 233, 85, 227, 239, 236, 6, 232, 14, 209, 169, 241, 80, 28, 13, 168, 81, 88, 251, 64, 132, 109, 122, 163, 101, 138, 250, 72, 28, 181, 95, 156, 146, 86, 242, 159, 215, 88, 254, 170, 52, 1, 86, 184, 206, 74, 249, 71, 15, 178, 162, 13, 118, 162, 7, 170, 187, 120, 27, 101, 111, 6, 254, 72, 153, 135, 229, 120, 125, 168, 79, 31, 24, 122, 30, 202, 60, 64, 208, 255, 133, 122, 35, 166, 30, 248, 168, 50, 15, 251, 105, 2, 242, 177, 31, 188, 16, 236, 167, 3, 168, 177, 88, 123, 66, 170, 94, 12, 171, 15, 74, 188, 198, 212, 43, 79, 123, 180, 183, 93, 31, 66, 125, 121, 22, 132, 17, 122, 240, 204, 167, 8, 3, 235, 175, 60, 146, 54, 43, 99, 129, 40, 234, 242, 10, 12, 246, 211, 4, 32, 189, 112, 93, 244, 192, 85, 46, 137, 6, 56, 229, 128, 241, 242, 148, 147, 21, 222, 11, 203, 1, 197, 30, 104, 85, 255, 160, 250, 88, 196, 230, 221, 92, 98, 80, 198, 219, 180, 52, 180, 193, 120, 28, 14, 197, 158, 83, 232, 78, 177, 71, 24, 116, 3, 245, 104, 104, 126, 19, 212, 87, 45, 130, 12, 29, 224, 227, 183, 29, 62, 121, 215, 233, 253, 203, 54, 159, 94, 117, 6, 239, 95, 178, 249, 252, 125, 215, 207, 222, 115, 254, 232, 45, 251, 247, 46, 89, 95, 189, 96, 245, 233, 123, 206, 215, 222, 113, 252, 226, 3, 183, 207, 222, 119, 225, 106, 207, 203, 193, 171, 223, 140, 92, 254, 106, 88, 215, 139, 129, 253, 231, 162, 122, 95, 14, 89, 253, 102, 212, 234, 115, 81, 203, 95, 11, 91, 249, 122, 196, 170, 55, 34, 89, 251, 207, 69, 15, 94, 136, 97, 67, 215, 217, 192, 162, 227, 118, 160, 240, 152, 109, 241, 9, 251, 140, 125, 51, 114, 14, 152, 151, 156, 116, 32, 46, 56, 106, 163, 2, 237, 106, 206, 65, 11, 78, 185, 74, 108, 187, 52, 223, 170, 61, 199, 109, 101, 133, 99, 79, 177, 83, 111, 177, 251, 202, 10, 219, 165, 121, 214, 29, 185, 206, 189, 37, 78, 61, 197, 14, 93, 133, 118, 75, 243, 29, 187, 139, 92, 87, 148, 59, 116, 23, 17, 248, 103, 153, 205, 202, 54, 15, 41, 176, 9, 204, 181, 12, 200, 49, 247, 205, 152, 17, 144, 99, 17, 90, 104, 203, 234, 151, 105, 170, 174, 102, 153, 133, 22, 216, 16, 7, 231, 89, 249, 103, 153, 134, 205, 154, 16, 228, 123, 107, 76, 216, 244, 168, 144, 169, 33, 254, 183, 133, 248, 141, 15, 11, 152, 16, 228, 115, 107, 100, 208, 100, 98, 201, 68, 4, 78, 138, 230, 42, 167, 126, 227, 29, 188, 220, 45, 28, 237, 205, 28, 108, 29, 189, 220, 109, 92, 157, 8, 204, 29, 108, 173, 93, 28, 205, 29, 237, 108, 221, 93, 108, 221, 92, 172, 93, 157, 236, 60, 92, 29, 60, 221, 156, 102, 122, 90, 58, 59, 204, 156, 89, 233, 229, 53, 199, 217, 185, 200, 215, 183, 218, 221, 189, 204, 197, 165, 216, 213, 181, 196, 211, 115, 142, 147, 83, 33, 73, 78, 125, 124, 170, 88, 217, 230, 225, 81, 225, 228, 84, 84, 80, 88, 152, 157, 147, 147, 151, 159, 159, 155, 151, 71, 156, 158, 145, 145, 147, 155, 155, 95, 80, 64, 38, 35, 51, 51, 43, 59, 59, 51, 43, 11, 20, 23, 23, 203, 158, 184, 232, 136, 232, 136, 144, 248, 152, 200, 232, 136, 208, 200, 176, 160, 212, 164, 56, 214, 216, 232, 240, 132, 184, 40, 130, 164, 248, 152, 152, 200, 208, 164, 248, 232, 132, 216, 200, 200, 176, 224, 216, 168, 176, 121, 179, 58, 193, 92, 239, 150, 10, 175, 37, 21, 158, 75, 170, 125, 219, 75, 220, 26, 170, 253, 218, 201, 148, 185, 47, 46, 113, 109, 32, 95, 233, 211, 202, 169, 218, 227, 185, 228, 14, 75, 203, 109, 182, 182, 59, 28, 29, 55, 89, 88, 108, 181, 177, 217, 238, 224, 0, 238, 180, 179, 35, 179, 197, 218, 26, 220, 110, 110, 126, 151, 189, 61, 151, 20, 108, 109, 95, 72, 204, 126, 50, 42, 245, 217, 216, 140, 167, 162, 211, 158, 141, 77, 127, 46, 46, 147, 83, 64, 158, 204, 227, 225, 201, 103, 147, 115, 159, 136, 76, 121, 62, 33, 235, 249, 248, 204, 23, 18, 178, 159, 169, 61, 248, 220, 252, 195, 47, 212, 31, 125, 170, 122, 63, 120, 180, 98, 23, 43, 167, 143, 206, 217, 173, 214, 138, 93, 79, 207, 59, 192, 134, 199, 43, 247, 158, 169, 63, 74, 208, 211, 31, 190, 108, 69, 112, 91, 207, 172, 158, 254, 176, 182, 110, 255, 238, 85, 161, 45, 203, 124, 155, 151, 250, 116, 46, 15, 106, 233, 242, 91, 186, 34, 184, 165, 203, 183, 123, 117, 216, 178, 149, 33, 108, 35, 88, 82, 104, 217, 89, 97, 191, 164, 208, 162, 33, 119, 70, 83, 129, 249, 226, 124, 179, 166, 66, 139, 182, 50, 219, 230, 34, 75, 133, 98, 43, 50, 141, 121, 166, 75, 138, 44, 9, 218, 74, 109, 77, 62, 123, 207, 229, 147]);
fileData11.push.apply(fileData11, [171, 78, 80, 28, 198, 127, 112, 197, 22, 61, 64, 244, 143, 223, 182, 255, 248, 29, 7, 84, 65, 230, 211, 171, 78, 156, 126, 248, 150, 221, 123, 23, 173, 88, 21, 215, 95, 13, 237, 126, 49, 168, 247, 229, 96, 128, 24, 186, 95, 10, 90, 249, 122, 120, 207, 75, 193, 189, 175, 132, 116, 157, 13, 128, 253, 171, 222, 136, 232, 121, 41, 8, 244, 189, 18, 2, 173, 243, 15, 91, 101, 237, 55, 203, 186, 91, 33, 239, 144, 37, 98, 200, 220, 111, 154, 181, 223, 20, 246, 147, 97, 3, 122, 200, 59, 108, 69, 64, 30, 138, 219, 116, 230, 66, 125, 161, 59, 188, 119, 89, 94, 134, 12, 236, 150, 229, 187, 44, 47, 117, 234, 45, 177, 238, 200, 113, 91, 81, 110, 191, 172, 128, 109, 168, 5, 90, 251, 164, 79, 135, 247, 80, 60, 172, 200, 214, 47, 115, 6, 116, 15, 202, 181, 244, 77, 159, 142, 42, 208, 6, 27, 56, 37, 73, 38, 48, 199, 34, 42, 120, 74, 100, 240, 148, 96, 120, 63, 107, 2, 252, 14, 245, 191, 45, 46, 124, 6, 25, 4, 0, 239, 17, 0, 1, 73, 36, 65, 30, 169, 88, 185, 56, 66, 116, 51, 123, 91, 123, 79, 55, 248, 109, 239, 225, 106, 235, 230, 140, 12, 200, 59, 121, 123, 58, 121, 123, 216, 184, 58, 19, 3, 54, 144, 135, 217, 158, 158, 21, 144, 30, 114, 35, 0, 196, 0, 209, 201, 184, 185, 149, 185, 185, 149, 114, 234, 227, 83, 237, 226, 82, 66, 18, 37, 176, 25, 174, 23, 151, 148, 64, 122, 0, 227, 11, 139, 138, 96, 57, 128, 238, 196, 8, 128, 24, 133, 72, 134, 83, 248, 157, 156, 16, 19, 19, 21, 6, 191, 97, 63, 98, 128, 238, 137, 113, 81, 80, 31, 13, 36, 37, 196, 144, 140, 139, 14, 7, 232, 129, 21, 246, 195, 120, 181, 186, 54, 204, 157, 217, 2, 245, 203, 60, 22, 215, 206, 90, 74, 64, 178, 202, 167, 13, 210, 19, 148, 123, 54, 213, 248, 117, 148, 186, 55, 110, 52, 55, 71, 0, 176, 31, 210, 223, 110, 97, 1, 239, 161, 187, 8, 96, 179, 149, 149, 172, 27, 205, 204, 208, 9, 123, 136, 97, 246, 51, 49, 233, 207, 196, 42, 60, 25, 153, 250, 68, 68, 202, 211, 49, 179, 9, 84, 62, 54, 253, 241, 136, 228, 51, 137, 57, 36, 209, 195, 80, 102, 238, 158, 39, 52, 114, 63, 54, 119, 207, 35, 21, 187, 32, 250, 147, 85, 251, 158, 172, 6, 251, 159, 168, 218, 71, 30, 1, 60, 91, 123, 80, 59, 221, 251, 84, 205, 126, 4, 0, 233, 33, 55, 188, 95, 186, 60, 8, 116, 46, 15, 108, 94, 230, 219, 179, 58, 172, 107, 101, 8, 194, 128, 244, 205, 203, 124, 186, 52, 97, 112, 169, 115, 142, 195, 226, 124, 115, 4, 208, 152, 111, 214, 94, 102, 215, 129, 24, 52, 234, 119, 86, 56, 52, 21, 88, 32, 134, 246, 50, 91, 146, 100, 96, 63, 167, 38, 35, 98, 63, 221, 96, 68, 236, 95, 118, 54, 96, 68, 236, 207, 61, 100, 57, 34, 246, 179, 109, 68, 236, 15, 206, 183, 30, 17, 251, 195, 3, 38, 142, 136, 253, 172, 35, 98, 191, 151, 215, 220, 17, 177, 31, 140, 136, 253, 41, 73, 113, 35, 98, 63, 155, 71, 196, 126, 174, 142, 136, 253, 79, 70, 166, 140, 136, 253, 244, 132, 17, 177, 31, 181, 140, 136, 253, 173, 37, 214, 38, 215, 222, 117, 132, 235, 87, 47, 88, 126, 254, 129, 43, 134, 7, 150, 147, 17, 231, 243, 193, 101, 4, 128, 255, 113, 184, 10, 251, 175, 216, 225, 130, 192, 138, 215, 194, 250, 94, 9, 5, 56, 31, 76, 14, 235, 138, 215, 148, 0, 96, 63, 218, 88, 249, 70, 4, 167, 128, 13, 72, 2, 59, 4, 191, 21, 245, 15, 91, 137, 219, 81, 206, 231, 132, 3, 68, 7, 48, 190, 232, 152, 45, 151, 64, 254, 17, 107, 174, 102, 31, 48, 199, 213, 216, 45, 43, 96, 133, 220, 152, 31, 88, 142, 6, 16, 128, 181, 230, 139, 224, 189, 75, 95, 169, 18, 70, 95, 41, 27, 88, 195, 139, 237, 97, 54, 16, 138, 135, 23, 219, 161, 7, 146, 156, 6, 229, 89, 225, 133, 112, 65, 17, 197, 246, 4, 172, 33, 5, 214, 97, 1, 19, 33, 55, 2, 136, 13, 155, 142, 6, 130, 125, 199, 69, 6, 79, 134, 250, 202, 17, 249, 141, 143, 13, 159, 17, 29, 58, 21, 255, 195, 30, 216, 207, 41, 228, 134, 217, 150, 78, 14, 24, 33, 43, 77, 3, 120, 30, 128, 29, 178, 112, 178, 199, 8, 97, 135, 8, 112, 65, 36, 113, 71, 51, 103, 14, 57, 28, 111, 239, 185, 16, 29, 186, 187, 186, 150, 250, 250, 214, 144, 196, 5, 161, 13, 196, 128, 54, 0, 146, 32, 15, 179, 105, 2, 8, 32, 59, 59, 155, 21, 61, 20, 21, 23, 147, 193, 246, 200, 37, 86, 180, 65, 30, 73, 32, 134, 148, 196, 216, 168, 240, 96, 100, 16, 21, 30, 130, 207, 129, 241, 244, 4, 172, 14, 98, 32, 201, 85, 17, 0, 121, 146, 0, 207, 83, 227, 223, 49, 199, 171, 185, 202, 183, 13, 162, 87, 206, 108, 69, 9, 229, 30, 77, 156, 34, 134, 82, 183, 70, 50, 200, 0, 224, 136, 216, 137, 225, 217, 225, 228, 4, 179, 161, 56, 110, 135, 134, 64, 70, 108, 15, 192, 243, 32, 0, 168, 143, 23, 146, 13, 48, 27, 135, 243, 68, 68, 178, 56, 28, 188, 208, 115, 113, 25, 4, 36, 97, 252, 153, 164, 156, 103, 227, 50, 80, 2, 194, 80, 94, 40, 34, 5, 90, 63, 58, 103, 215, 83, 53, 119, 63, 166, 121, 158, 231, 23, 28, 193, 20, 1, 244, 240, 204, 188, 3, 80, 159, 252, 51, 181, 7, 112, 68, 162, 19, 108, 15, 228, 70, 6, 210, 10, 150, 44, 245, 193, 11, 97, 126, 112, 65, 248, 159, 214, 110, 127, 188, 16, 74, 232, 232, 13, 64, 12, 108, 192, 246, 180, 20, 91, 181, 151, 219, 45, 46, 48, 135, 235, 128, 83, 60, 79, 99, 158, 242, 66, 154, 24, 236, 59, 202, 237, 12, 219, 176, 64, 206, 84, 122, 250, 0, 50, 192, 244, 195, 126, 52, 0, 134, 134, 129, 247, 93, 16, 6, 125, 128, 83, 174, 210, 7, 168, 241, 116, 0, 140, 16, 229, 127, 197, 235, 225, 240, 158, 74, 207, 72, 128, 6, 186, 95, 12, 92, 245, 102, 36, 26, 64, 9, 212, 254, 254, 243, 209, 200, 0, 1, 64, 107, 3, 197, 241, 253, 156, 178, 22, 28, 177, 54, 12, 3, 128, 75, 52, 135, 236, 187, 205, 160, 181, 77, 71, 46, 3, 128, 50, 250, 203, 203, 88, 25, 9, 84, 192, 72, 128, 36, 58, 243, 232, 0, 140, 1, 34, 3, 174, 98, 241, 253, 51, 77, 161, 123, 120, 145, 29, 85, 159, 146, 207, 170, 74, 126, 198, 116, 168, 143, 24, 164, 9, 200, 36, 16, 144, 109, 46, 68, 167, 234, 83, 242, 209, 0, 144, 1, 32, 60, 112, 18, 73, 168, 207, 120, 16, 58, 107, 2, 236, 71, 3, 92, 133, 223, 144, 222, 198, 205, 153, 0, 37, 192, 120, 233, 0, 74, 21, 206, 14, 52, 1, 75, 216, 239, 238, 202, 41, 49, 128, 226, 26, 221, 21, 239, 225, 58, 74, 160, 234, 227, 254, 9, 104, 11, 196, 30, 30, 229, 222, 222, 202, 38, 161, 16, 50, 16, 29, 126, 83, 227, 197, 241, 67, 113, 136, 206, 48, 0, 227, 129, 80, 31, 25, 48, 27, 112, 137, 24, 235, 159, 146, 24, 71, 225, 71, 6, 180, 2, 106, 191, 232, 65, 35, 125, 60, 226, 224, 106, 98, 92, 116, 148, 214, 28, 226, 99, 35, 41, 240, 162, 1, 248, 141, 203, 87, 129, 199, 98, 229, 254, 221, 26, 176, 254, 115, 188, 155, 209, 3, 80, 2, 240, 88, 204, 138, 179, 23, 114, 43, 37, 104, 147, 0, 140, 23, 1, 80, 248, 209, 134, 52, 4, 78, 69, 27, 240, 91, 124, 63, 142, 31, 138, 195, 120, 124, 63, 201, 167, 163, 103, 83, 254, 159, 38, 153, 148, 251, 84, 84, 42, 26, 32, 201, 30, 152, 141, 0, 158, 171, 59, 196, 10, 227, 113, 68, 84, 125, 100, 0, 245, 31, 175, 220, 195, 12, 240, 252, 252, 195, 240, 158, 204, 243, 11, 14, 63, 91, 119, 168, 163, 47, 144, 122, 143, 12, 160, 59, 20, 71, 12, 202, 238, 107, 229, 127, 217, 202, 96, 216, 175, 26, 66, 127, 184, 244, 4, 90, 1, 204, 134, 232, 116, 0, 4, 32, 53, 190, 181, 212, 70, 28, 63, 26, 128, 244, 36, 101, 72, 160, 9, 176, 205, 132, 2, 255, 5, 20, 127, 207, 153, 26, 255, 209, 91, 118, 40, 1, 222, 115, 138, 48, 62, 127, 223, 69, 137, 225, 138, 173, 234, 9, 23, 173, 112, 74, 232, 129, 234, 206, 224, 139, 12, 160, 56, 116, 135, 235, 204, 187, 172, 136, 129, 9, 152, 24, 176, 1, 73, 16, 144, 201, 59, 164, 236, 77, 193, 17, 53, 227, 2, 230, 93, 148, 0, 215, 145, 4, 157, 1, 1, 20, 30, 181, 33, 163, 13, 196, 246, 4, 106, 234, 237, 204, 67, 3, 110, 43, 203, 157, 251, 74, 137, 1, 92, 135, 244, 172, 104, 128, 149, 86, 64, 128, 17, 66, 27, 176, 159, 241, 23, 114, 7, 230, 90, 192, 120, 2, 16, 148, 103, 73, 19, 128, 250, 92, 229, 20, 47, 132, 66, 16, 3, 45, 34, 38, 116, 26, 44, 135, 217, 88, 29, 202, 191, 114, 62, 126, 227, 25, 12, 132, 241, 196, 52, 7, 198, 98, 36, 161, 174, 6, 77, 134, 223, 214, 46, 78, 120, 27, 72, 79, 128, 35, 162, 210, 179, 50, 28, 147, 225, 170, 189, 135, 155, 163, 151, 7, 29, 0, 224, 136, 240, 54, 104, 0, 186, 107, 236, 199, 231, 84, 209, 7, 168, 253, 34, 6, 119, 247, 114, 168, 143, 12, 136, 1, 58, 129, 244, 20, 126, 72, 15, 185, 13, 3, 49, 43, 121, 90, 1, 2, 16, 222, 139, 72, 8, 146, 19, 98, 169, 238, 67, 252, 142, 137, 144, 145, 55, 50, 60, 24, 222, 27, 102, 98, 250, 0, 65, 116, 100, 40, 87, 169, 250, 88, 29, 28, 142, 88, 32, 74, 62, 146, 128, 235, 40, 97, 158, 191, 178, 70, 104, 64, 229, 221, 27, 1, 201, 109, 118, 118, 66, 113, 105, 5, 170, 9, 152, 153, 65, 119, 78, 185, 132, 65, 18, 11, 196, 74, 76, 43, 80, 53, 62, 54, 131, 210, 254, 124, 124, 22, 44, 127, 46, 62, 83, 6, 98, 53, 28, 71, 166, 114, 21, 109, 144, 84, 65, 100, 234, 83, 81, 105, 144, 91, 99, 63, 101, 254, 32, 236, 167, 21, 40, 210, 15, 235, 3, 120, 36, 25, 133, 145, 4, 249, 206, 62, 229, 121, 112, 65, 172, 88, 32, 244, 208, 214, 227, 175, 60, 79, 151, 31, 245, 190, 181, 155, 57, 56, 8, 97, 180, 118, 249, 73, 175, 96, 222, 109, 200, 53, 133, 247, 48, 190, 185, 200, 138, 81, 24, 1, 112, 74, 19, 160, 27, 192, 126, 163, 171, 74, 0, 194, 120, 64, 153, 255, 224, 178, 13, 243, 0, 49, 110, 7, 255, 67, 115, 96, 3, 218, 160, 63, 176, 13, 25, 80, 239, 7, 206, 199, 80, 236, 81, 194, 192, 133, 24, 121, 224, 163, 122, 2, 98, 120, 45, 76, 123, 70, 20, 213, 117, 54, 144, 61, 52, 7, 54, 136, 203, 87, 133, 255, 110, 51, 106, 127, 206, 1, 115, 169, 247, 210, 16, 112, 65, 37, 180, 8, 77, 9, 128, 205, 20, 117, 236, 190, 141, 198, 123, 215, 21, 229, 248, 126, 64, 213, 167, 9, 40, 11, 212, 145, 139, 23, 162, 252, 115, 170, 46, 105, 51, 0, 213, 93, 12, 79, 64, 142, 69, 88, 145, 29, 236, 247, 203, 152, 17, 146, 111, 205, 138, 233, 87, 229, 63, 219, 92, 121, 33, 53, 39, 216, 193, 123, 232, 30, 27, 174, 4, 32, 147, 0, 158, 39, 72, 25, 33, 149, 68, 6, 40, 68, 46, 1, 228, 33, 222, 70, 185, 124, 15, 53, 6, 16, 179, 58, 120, 186, 211, 19, 28, 60, 221, 48, 66, 184, 35, 246, 96, 126, 8, 232, 15, 190, 190, 212, 251, 98, 170, 59, 92, 135, 253, 154, 219, 81, 37, 159, 21, 97, 104, 83, 129, 210, 0, 238, 31, 169, 176, 13, 78, 83, 221, 1, 140, 135, 250, 104, 128, 131, 88, 5, 90, 43, 64, 30, 234, 41, 144, 214, 7, 136, 113, 252, 98, 117, 18, 53, 247, 79, 67, 16, 13, 176, 146, 68, 18, 170, 27, 196, 68, 208, 25, 232, 3, 156, 82, 212, 161, 53, 181, 95, 209, 221, 173, 161, 216, 117, 17, 146, 32, 32, 35, 98, 80, 22, 200, 107, 9, 166, 136, 24, 49, 192, 108, 154, 0, 140, 167, 246, 75, 55, 80, 212, 183, 181, 37, 131, 24, 8, 72, 34, 15, 98, 216, 191, 201, 210, 18, 11, 4, 191, 49, 60, 20, 123, 120, 207, 72, 0, 215, 73, 82, 239, 9, 184, 36, 227, 129, 122, 254, 19, 147, 142, 83, 130, 217, 184, 32, 86, 76, 255, 11, 245, 71, 208, 0, 134, 135, 211, 231, 40, 252, 115, 118, 211, 4, 158, 155, 127, 8, 1, 144, 103, 24, 160, 75, 180, 116, 41, 246, 195, 123, 170, 190, 180, 2, 36, 33, 74, 64, 18, 237, 189, 179, 16, 3, 190, 136, 160, 123, 117, 104, 71, 95, 0, 156, 198, 232, 43, 255, 83, 110, 135, 195, 161, 246, 83, 239, 23, 229, 204, 160, 246, 47, 157, 163, 38, 1, 4, 32, 207, 136, 216, 128, 12, 212, 99, 80, 234, 186, 24, 125, 168, 79, 55, 192, 234, 124, 244, 182, 189, 58, 125, 219, 254, 189, 139, 214, 159, 188, 235, 196, 132, 64, 249, 167, 27, 112, 138, 173, 135, 223, 138, 244, 47, 49, 10, 135, 64, 125, 209, 0, 134, 7, 198, 19, 104, 243, 64, 32, 163, 48, 83, 50, 243, 49, 37, 159, 217, 87, 241, 251, 184, 29, 236, 167, 240, 139, 215, 23, 198, 51, 34, 107, 51, 177, 25, 219, 100, 56, 86, 181, 127, 69, 185, 98, 255, 242, 50, 160, 38, 224, 165, 249, 204, 0, 52, 4, 180, 1, 251, 33, 61, 27, 172, 59, 114, 217, 195, 37, 138, 58, 252, 102, 85, 22, 63, 223, 90, 53, 4, 109, 30, 160, 252, 75, 7, 224, 148, 64, 198, 0, 165, 7, 159, 91, 113, 252, 138, 250, 254, 183, 97, 241, 37, 136, 14, 157, 6, 245, 137, 161, 62, 125, 128, 83, 213, 10, 200, 4, 76, 180, 114, 118, 132, 241, 184, 124, 170, 190, 230, 248, 149, 245, 135, 253, 234, 161, 167, 147, 131, 163, 183, 135, 193, 32, 137, 35, 162, 210, 195, 108, 248, 77, 129, 39, 144, 134, 128, 41, 210, 86, 38, 96, 198, 3, 165, 10, 98, 102, 0, 146, 176, 28, 246, 67, 125, 40, 78, 141, 231, 20, 186, 83, 245, 41, 255, 176, 159, 149, 24, 176, 135, 60, 27, 18, 98, 17, 64, 44, 140, 135, 229, 4, 76, 195, 212, 126, 136, 206, 4, 204, 24, 192, 96, 0, 239, 177, 254, 12, 200, 236, 68, 30, 248, 31, 58, 128, 193, 235, 99, 253, 233, 6, 148, 124, 2, 74, 62, 3, 177, 204, 3, 74, 21, 174, 13, 156, 34, 0, 72, 79, 141, 135, 223, 194, 123, 78, 89, 137, 133, 247, 178, 129, 21, 97, 16, 192, 239, 235, 172, 253, 170, 75, 36, 100, 73, 237, 199, 252, 188, 160, 217, 30, 237, 137, 231, 30, 163, 134, 32, 27, 208, 3, 29, 128, 122, 143, 207, 161, 198, 183, 247, 6, 116, 173, 10, 145, 74, 15, 48, 253, 74, 24, 189, 1, 237, 202, 11, 133, 72, 70, 173, 229, 118, 98, 238, 213, 19, 207, 2, 243, 182, 82, 155, 134, 60, 83, 124, 17, 29, 128, 81, 152, 149, 12, 147, 0, 219, 150, 20, 170, 249, 216, 68, 61, 236, 199, 222, 48, 10, 95, 178, 129, 241, 138, 250, 23, 172, 32, 61, 140, 135, 238, 84, 125, 101, 129, 222, 113, 36, 64, 30, 248, 34, 121, 224, 35, 38, 7, 135, 195, 170, 13, 196, 145, 146, 225, 82, 255, 57, 53, 22, 107, 107, 24, 26, 192, 225, 192, 108, 24, 175, 138, 253, 73, 7, 86, 58, 0, 19, 48, 50, 200, 61, 168, 70, 97, 236, 16, 43, 77, 0, 155, 132, 60, 196, 228, 184, 174, 40, 211, 172, 78, 57, 38, 7, 210, 171, 103, 255, 61, 69, 100, 168, 253, 50, 0, 160, 13, 12, 146, 67, 87, 161, 95, 166, 41, 228, 134, 217, 16, 29, 1, 192, 242, 161, 97, 64, 19, 3, 205, 65, 61, 14, 202, 50, 35, 73, 43, 8, 99, 20, 14, 156, 36, 46, 136, 0, 126, 227, 133, 112, 59, 40, 1, 195, 67, 31, 64, 3, 226, 124, 130, 253, 198, 199, 69, 204, 160, 87, 40, 159, 163, 49, 91, 94, 2, 192, 117, 90, 129, 104, 0, 49, 96, 132, 16, 6, 25, 121, 45, 64, 82, 115, 252, 197, 66, 110, 10, 60, 37, 31, 159, 131, 42, 200, 80, 251, 165, 234, 123, 122, 206, 209, 68, 162, 158, 17, 65, 107, 136, 158, 171, 61, 5, 66, 6, 4, 98, 129, 138, 139, 139, 185, 196, 24, 204, 41, 170, 80, 19, 66, 86, 22, 93, 1, 198, 67, 107, 106, 191, 22, 40, 186, 43, 246, 199, 211, 19, 152, 134, 195, 48, 253, 240, 158, 12, 131, 1, 83, 1, 221, 128, 146, 79, 129, 167, 9, 80, 221, 161, 56, 122, 80, 254, 71, 211, 0, 121, 218, 2, 27, 112, 71, 74, 9, 90, 103, 128, 247, 66, 110, 58, 0, 192, 14, 237, 116, 114, 2, 100, 144, 1, 229, 31, 109, 112, 138, 24, 144, 4, 128, 223, 20, 123, 170, 187, 184, 124, 134, 93, 153, 119, 81, 2, 116, 151, 171, 170, 3, 36, 102, 35, 134, 199, 194, 147, 168, 235, 152, 28, 245, 18, 160, 230, 110, 97, 57, 29, 224, 217, 186, 131, 112, 157, 248, 233, 121, 119, 163, 7, 98, 230, 99, 20, 194, 102, 121, 15, 32, 44, 103, 228, 5, 212, 123, 136, 142, 227, 199, 5, 33, 15, 85, 254, 213, 227, 160, 80, 250, 131, 234, 12, 76, 136, 115, 28, 132, 229, 0, 151, 143, 30, 168, 244, 36, 59, 202, 149, 245, 231, 84, 61, 29, 42, 180, 100, 15, 146, 48, 17, 90, 203, 67, 79, 128, 0, 24, 3, 88, 169, 247, 98, 129, 136, 89, 63, 123, 207, 229, 227, 119, 28, 88, 133, 214, 80, 31, 23, 68, 64, 7, 192, 231, 176, 106, 98, 8, 165, 27, 160, 7, 2, 229, 136, 180, 201, 88, 104, 141, 225, 129, 247, 184, 124, 244, 80, 114, 194, 65, 230, 1, 84, 145, 127, 216, 154, 140, 26, 127, 15, 152, 179, 162, 10, 161, 53, 22, 136, 218, 143, 24, 12, 15, 67, 169, 250, 4, 216, 30, 41, 252, 108, 99, 37, 41, 180, 102, 0, 192, 235, 35, 0, 245, 58, 44, 219, 92, 25, 161, 92, 75, 72, 143, 239, 167, 27, 168, 25, 32, 99, 6, 25, 76, 145, 208, 90, 234, 125, 92, 132, 41, 50, 16, 198, 83, 245, 41, 255, 4, 76, 195, 168, 130, 61, 210, 7, 132, 214, 84, 122, 115, 7, 59, 43, 103, 7, 53, 242, 98, 247, 221, 93, 44, 28, 57, 117, 36, 131, 41, 114, 244, 114, 151, 39, 164, 232, 65, 104, 13, 233, 177, 61, 48, 30, 49, 96, 120, 196, 246, 104, 143, 125, 212, 99, 80, 246, 112, 74, 139, 224, 170, 208, 90, 10, 188, 12, 187, 18, 80, 236, 165, 3, 136, 53, 82, 218, 208, 6, 101, 161, 245, 208, 83, 78, 205, 243, 16, 139, 5, 162, 33, 200, 52, 44, 243, 0, 98, 96, 18, 16, 90, 83, 251, 97, 63, 188, 103, 252, 5, 244, 4, 12, 143, 154, 143, 253, 218, 145, 4, 118, 8, 85, 160, 1, 244, 32, 180, 134, 238, 226, 127, 152, 116, 9, 54, 107, 175, 192, 32, 61, 242, 64, 6, 194, 126, 25, 148, 133, 214, 172, 212, 120, 121, 36, 202, 76, 76, 177, 103, 165, 51, 32, 0, 108, 15, 157, 65, 122, 2, 194, 16, 90, 195, 111, 6, 92, 213, 1, 234, 14, 61, 94, 185, 87, 124, 63, 166, 72, 53, 132, 185, 123, 8, 24, 6, 100, 6, 16, 90, 203, 83, 32, 230, 96, 85, 242, 123, 3, 160, 62, 22, 136, 110, 32, 143, 134, 24, 136, 241, 69, 104, 0, 37, 8, 173, 89, 21, 212, 60, 48, 131, 110, 64, 204, 36, 208, 94, 102, 199, 169, 64, 205, 193, 69, 150, 140, 4, 234, 61, 0, 149, 254, 131, 203, 182, 180, 130, 207, 241, 63, 120, 30, 4, 160, 84, 161, 38, 96, 53, 15, 92, 85, 111, 133, 81, 8, 93, 2, 49, 224, 106, 224, 58, 134, 135, 85, 140, 62, 64, 9, 50, 4, 51, 0, 16, 179, 162, 4, 77, 3, 161, 76, 186, 242, 204, 135, 50, 47, 238, 31, 231, 3, 233, 137, 185, 36, 188, 23, 71, 36, 238, 8, 198, 203, 19, 30, 135, 238, 34, 198, 92, 198, 0, 156, 143, 242, 60, 210, 10, 150, 229, 99, 126, 200, 224, 148, 68, 33, 1, 57, 230, 179, 178, 213, 131, 78, 168, 175, 38, 1, 109, 32, 102, 26, 38, 160, 39, 160, 13, 90, 1, 25, 191, 204, 161, 199, 65, 56, 28, 245, 30, 32, 64, 185, 29, 250, 0, 68, 87, 142, 72, 211, 3, 98, 128, 250, 36, 213, 60, 160, 105, 0, 61, 88, 56, 218, 51, 1, 107, 143, 56, 237, 84, 213, 103, 2, 118, 115, 134, 247, 72, 130, 75, 34, 15, 134, 1, 102, 0, 218, 2, 59, 157, 156, 138, 52, 138, 207, 149, 247, 190, 212, 123, 244, 128, 24, 196, 243, 104, 238, 95, 41, 4, 234, 99, 132, 176, 67, 48, 30, 103, 15, 209, 225, 55, 49, 164, 135, 241, 148, 124, 32, 121, 146, 176, 31, 131, 68, 91, 64, 0, 177, 81, 234, 25, 63, 68, 167, 252, 107, 173, 32, 26, 150, 3, 50, 200, 0, 61, 160, 4, 78, 209, 0, 173, 0, 139, 164, 6, 128, 153, 45, 115, 188, 154, 149, 239, 159, 169, 189, 15, 166, 240, 107, 207, 254, 149, 29, 210, 174, 34, 9, 148, 80, 233, 211, 74, 55, 160, 228, 83, 227, 161, 251, 22, 27, 27, 88, 46, 190, 159, 36, 92, 39, 70, 12, 194, 123, 52, 0, 200, 195, 105, 42, 253, 211, 209, 179, 113, 249, 234, 89, 16, 99, 110, 120, 146, 193, 8, 17, 112, 74, 79, 16, 246, 163, 147, 231, 23, 28, 62, 3, 251, 107, 15, 210, 1, 232, 3, 208, 253, 233, 26, 85, 245, 73, 66, 247, 39, 171, 246, 25, 30, 10, 161, 16, 116, 66, 249, 135, 247, 203, 86, 6, 55, 47, 245, 193, 2, 17, 3, 202, 63, 167, 212, 126, 86, 20, 194, 0, 64, 43, 208, 182, 133, 64, 116, 12, 15, 254, 135, 73, 96, 145, 246, 50, 24, 246, 203, 72, 64, 64, 31, 160, 246, 147, 196, 23, 117, 106, 61, 193, 4, 126, 127, 242, 174, 35, 53, 158, 97, 128, 24, 255, 67, 140, 6, 152, 134, 213, 75, 226, 119, 157, 190, 248, 208, 13, 37, 144, 68, 27, 76, 198, 48, 91, 42, 189, 124, 14, 66, 166, 97, 168, 79, 177, 199, 247, 171, 241, 151, 49, 0, 247, 175, 205, 0, 125, 175, 134, 194, 117, 136, 78, 165, 199, 252, 192, 117, 213, 7, 78, 216, 139, 227, 87, 188, 63, 174, 120, 207, 28, 92, 120, 84, 189, 32, 227, 42, 86, 71, 62, 248, 0, 251, 85, 177, 215, 30, 245, 72, 213, 71, 18, 116, 0, 216, 79, 44, 190, 8, 61, 80, 236, 197, 234, 64, 119, 248, 77, 165, 87, 118, 191, 192, 134, 225, 152, 86, 64, 19, 160, 252, 147, 161, 246, 75, 134, 162, 46, 19, 48, 195, 0, 197, 94, 211, 195, 56, 232, 142, 11, 66, 0, 128, 60, 26, 96, 197, 17, 197, 132, 77, 151, 167, 61, 102, 246, 54, 8, 0, 210, 99, 132, 132, 244, 100, 136, 209, 3, 238, 72, 86, 4, 160, 205, 0, 202, 234, 176, 26, 220, 142, 150, 169, 128, 238, 172, 200, 192, 213, 85, 109, 64, 6, 152, 37, 39, 39, 245, 216, 135, 146, 175, 60, 79, 137, 122, 34, 132, 12, 56, 164, 216, 147, 148, 9, 129, 13, 8, 67, 100, 0, 197, 53, 207, 163, 120, 143, 239, 39, 102, 24, 16, 210, 71, 134, 7, 3, 149, 137, 14, 215, 134, 129, 40, 140, 16, 181, 95, 6, 95, 102, 128, 161, 39, 161, 126, 106, 38, 134, 253, 210, 4, 176, 70, 200, 131, 14, 192, 30, 46, 81, 224, 183, 59, 58, 82, 248, 33, 55, 94, 136, 21, 222, 171, 129, 88, 19, 3, 87, 101, 6, 128, 253, 100, 208, 195, 227, 225, 201, 80, 156, 98, 15, 245, 213, 16, 28, 203, 164, 155, 2, 209, 69, 18, 244, 4, 53, 33, 132, 39, 163, 141, 199, 195, 147, 208, 0, 20, 199, 241, 195, 111, 2, 230, 93, 230, 96, 28, 63, 125, 0, 255, 67, 18, 37, 112, 138, 48, 180, 110, 160, 30, 22, 49, 227, 82, 242, 149, 12, 150, 7, 65, 119, 177, 64, 134, 128, 194, 207, 85, 86, 26, 2, 115, 2, 25, 40, 222, 90, 98, 141, 0, 48, 63, 140, 188, 144, 30, 195, 211, 90, 98, 67, 177, 111, 41, 177, 86, 111, 199, 202, 237, 209, 3, 2, 104, 41, 182, 38, 48, 161, 246, 67, 119, 140, 62, 163, 176, 198, 123, 21, 168, 49, 128, 88, 51, 69, 31, 127, 57, 10, 43, 83, 164, 222, 4, 43, 235, 15, 209, 181, 97, 87, 77, 189, 125, 175, 40, 25, 160, 10, 2, 106, 63, 109, 1, 37, 80, 254, 73, 34, 0, 216, 15, 173, 41, 255, 144, 30, 1, 192, 114, 229, 254, 181, 110, 128, 47, 18, 25, 24, 28, 17, 160, 228, 3, 53, 7, 195, 248, 174, 66, 2, 251, 174, 66, 4, 96, 221, 145, 3, 245, 17, 131, 122, 75, 160, 117, 0, 86, 100, 64, 141, 7, 240, 30, 247, 175, 140, 80, 161, 122, 3, 64, 91, 64, 12, 116, 6, 101, 135, 216, 80, 100, 135, 0, 136, 17, 6, 142, 95, 30, 240, 67, 110, 148, 16, 21, 50, 21, 35, 36, 164, 39, 198, 26, 161, 13, 90, 68, 232, 172, 9, 72, 2, 13, 56, 120, 186, 203, 243, 77, 140, 190, 153, 189, 45, 96, 36, 0, 152, 126, 156, 15, 142, 136, 24, 133, 40, 119, 164, 129, 170, 15, 209, 1, 2, 32, 166, 21, 104, 167, 229, 24, 30, 202, 63, 122, 160, 27, 160, 1, 105, 14, 236, 129, 217, 84, 122, 97, 60, 206, 71, 244, 192, 41, 181, 159, 64, 202, 63, 194, 224, 84, 50, 154, 221, 143, 165, 180, 51, 233, 170, 103, 65, 113, 81, 74, 9, 241, 209, 90, 28, 141, 11, 226, 18, 194, 208, 134, 4, 108, 82, 132, 60, 233, 151, 39, 161, 52, 1, 2, 86, 120, 207, 4, 12, 227, 241, 60, 146, 39, 102, 26, 198, 14, 193, 111, 88, 78, 19, 96, 85, 125, 64, 155, 128, 209, 3, 230, 199, 208, 28, 224, 253, 6, 109, 27, 194, 16, 111, 195, 0, 0, 215, 165, 252, 43, 13, 68, 166, 0, 46, 177, 202, 227, 127, 146, 234, 37, 113, 84, 42, 29, 0, 138, 195, 117, 25, 3, 104, 5, 216, 30, 86, 245, 216, 167, 238, 16, 229, 255, 209, 57, 187, 30, 155, 187, 7, 121, 168, 9, 97, 238, 30, 236, 13, 198, 166, 181, 91, 189, 249, 106, 94, 230, 11, 215, 113, 62, 162, 129, 165, 43, 130, 212, 169, 122, 69, 16, 164, 204, 79, 143, 191, 154, 149, 203, 108, 23, 231, 155, 99, 123, 224, 189, 114, 62, 37, 214, 72, 2, 61, 64, 119, 4, 0, 180, 38, 160, 158, 5, 209, 19, 180, 14, 160, 61, 241, 188, 122, 193, 242, 211, 171, 78, 176, 252, 35, 138, 253, 101, 27, 49, 69, 234, 185, 231, 5, 43, 249, 176, 144, 161, 63, 104, 134, 71, 61, 252, 25, 56, 31, 77, 141, 39, 150, 151, 190, 4, 160, 231, 165, 32, 26, 2, 115, 2, 30, 73, 27, 12, 34, 40, 240, 121, 135, 172, 138, 142, 217, 66, 119, 32, 134, 7, 85, 80, 242, 139, 181, 151, 95, 136, 129, 61, 82, 254, 17, 9, 238, 31, 102, 43, 1, 116, 230, 65, 119, 71, 245, 62, 88, 121, 125, 32, 175, 129, 149, 41, 210, 94, 2, 144, 161, 81, 132, 107, 245, 94, 13, 190, 249, 214, 112, 93, 123, 251, 171, 134, 1, 234, 61, 61, 1, 95, 68, 70, 189, 0, 86, 34, 153, 78, 30, 199, 63, 244, 188, 95, 123, 240, 143, 12, 200, 16, 195, 120, 76, 191, 82, 130, 54, 12, 160, 7, 250, 3, 13, 1, 87, 131, 189, 129, 226, 248, 126, 248, 109, 237, 226, 40, 229, 95, 141, 194, 142, 246, 84, 125, 100, 160, 62, 30, 167, 61, 30, 37, 15, 221, 33, 183, 134, 18, 214, 47, 59, 64, 57, 29, 0, 222, 203, 236, 43, 207, 70, 181, 62, 48, 151, 26, 15, 239, 13, 53, 94, 234, 61, 50, 32, 150, 128, 3, 1, 32, 15, 64, 18, 219, 3, 179, 169, 244, 80, 60, 62, 38, 146, 218, 79, 64, 201, 23, 61, 32, 15, 109, 24, 208, 158, 147, 198, 69, 37, 196, 69, 225, 236, 69, 3, 2, 78, 177, 64, 48, 30, 222, 139, 255, 161, 63, 168, 183, 1, 94, 234, 109, 0, 59, 161, 181, 193, 231, 176, 66, 122, 50, 127, 241, 68, 200, 65, 125, 54, 78, 102, 101, 2, 168, 79, 141, 167, 228, 99, 250, 207, 226, 248, 35, 83, 40, 243, 172, 47, 38, 231, 209, 1, 206, 36, 230, 144, 71, 24, 100, 158, 211, 94, 9, 195, 245, 199, 230, 238, 134, 220, 84, 125, 198, 95, 52, 192, 12, 0, 200, 60, 85, 163, 10, 63, 25, 205, 20, 145, 84, 239, 197, 224, 180, 120, 27, 92, 16, 179, 47, 188, 167, 216, 99, 253, 155, 151, 249, 180, 168, 199, 160, 1, 216, 33, 6, 3, 78, 105, 17, 170, 75, 104, 79, 120, 160, 187, 124, 42, 14, 23, 132, 24, 52, 11, 164, 10, 63, 201, 198, 60, 83, 50, 154, 53, 178, 101, 53, 145, 241, 151, 234, 78, 19, 80, 37, 255, 178, 237, 251, 151, 172, 161, 187, 60, 30, 101, 48, 64, 21, 196, 184, 127, 164, 114, 237, 29, 7, 102, 0, 121, 230, 3, 215, 87, 189, 25, 249, 165, 215, 15, 131, 247, 148, 124, 24, 143, 30, 186, 149, 12, 194, 80, 8, 123, 40, 237, 240, 94, 185, 29, 237, 185, 103, 214, 126, 51, 72, 79, 64, 18, 186, 19, 192, 123, 134, 4, 73, 18, 187, 170, 151, 190, 69, 50, 6, 32, 0, 154, 0, 128, 241, 156, 114, 137, 146, 79, 160, 62, 17, 180, 18, 61, 228, 33, 3, 168, 47, 29, 128, 2, 47, 175, 123, 161, 62, 43, 99, 64, 72, 129, 141, 166, 1, 245, 225, 80, 217, 160, 230, 1, 237, 45, 47, 125, 64, 184, 206, 0, 0, 221, 105, 8, 84, 125, 232, 206, 36, 16, 228, 123, 43, 214, 31, 133, 40, 248, 223, 166, 30, 239, 104, 166, 31, 195, 163, 158, 8, 57, 217, 99, 138, 16, 3, 74, 176, 118, 81, 22, 200, 206, 221, 21, 145, 176, 162, 7, 122, 5, 101, 94, 220, 191, 155, 91, 25, 236, 151, 64, 99, 127, 9, 121, 192, 6, 98, 70, 5, 98, 196, 64, 177, 135, 223, 242, 140, 31, 186, 83, 230, 13, 99, 0, 49, 121, 32, 79, 72, 97, 63, 160, 192, 171, 55, 190, 202, 228, 168, 23, 192, 210, 13, 148, 36, 194, 130, 169, 247, 100, 196, 32, 145, 148, 15, 71, 224, 109, 168, 250, 148, 118, 120, 143, 203, 199, 249, 8, 215, 73, 138, 18, 164, 39, 176, 114, 21, 155, 132, 183, 129, 247, 178, 238, 212, 62, 19, 129, 18, 96, 63, 181, 159, 12, 129, 184, 35, 153, 13, 184, 10, 191, 169, 238, 148, 118, 245, 208, 147, 152, 62, 160, 213, 123, 53, 248, 146, 140, 196, 249, 36, 211, 34, 16, 9, 122, 96, 90, 128, 226, 212, 120, 40, 142, 233, 199, 225, 80, 227, 105, 5, 184, 29, 120, 175, 61, 12, 61, 160, 84, 161, 141, 191, 116, 3, 26, 133, 24, 27, 140, 16, 77, 64, 222, 124, 81, 236, 105, 5, 100, 208, 3, 214, 72, 158, 8, 49, 6, 104, 159, 15, 245, 133, 253, 152, 123, 202, 60, 173, 0, 40, 231, 83, 108, 69, 7, 80, 109, 129, 153, 56, 207, 148, 9, 24, 85, 44, 206, 55, 67, 30, 244, 1, 19, 121, 12, 42, 254, 231, 227, 119, 28, 208, 0, 221, 128, 245, 139, 15, 92, 181, 25, 192, 81, 4, 192, 54, 4, 64, 19, 80, 159, 113, 208, 30, 113, 98, 111, 32, 61, 206, 103, 249, 107, 234, 233, 39, 146, 32, 137, 18, 0, 151, 24, 3, 180, 254, 16, 156, 119, 200, 18, 126, 35, 3, 40, 46, 94, 8, 49, 12, 13, 0, 218, 155, 47, 28, 17, 121, 154, 0, 27, 56, 21, 115, 143, 195, 161, 210, 43, 151, 191, 52, 223, 190, 171, 128, 73, 64, 98, 233, 15, 192, 117, 69, 25, 123, 16, 131, 26, 118, 25, 124, 181, 218, 207, 152, 11, 245, 145, 129, 95, 166, 41, 121, 160, 204, 79, 166, 122, 41, 102, 216, 6, 245, 213, 71, 30, 40, 243, 242, 22, 76, 123, 43, 204, 169, 26, 0, 180, 167, 159, 204, 190, 52, 4, 46, 113, 138, 11, 130, 214, 212, 117, 52, 0, 245, 41, 246, 170, 222, 59, 218, 193, 120, 2, 195, 52, 12, 251, 113, 255, 146, 196, 216, 48, 218, 202, 67, 30, 10, 60, 46, 95, 138, 61, 25, 185, 164, 241, 94, 141, 200, 242, 90, 64, 72, 15, 221, 197, 244, 67, 125, 4, 96, 152, 134, 13, 6, 201, 176, 129, 186, 78, 141, 167, 228, 83, 254, 225, 61, 92, 151, 105, 24, 37, 104, 143, 62, 153, 7, 194, 200, 35, 3, 45, 31, 130, 239, 199, 237, 80, 233, 49, 57, 20, 120, 72, 47, 143, 65, 161, 59, 49, 98, 32, 169, 20, 162, 73, 130, 205, 144, 91, 62, 240, 3, 221, 165, 240, 195, 117, 2, 176, 73, 123, 1, 108, 24, 133, 137, 193, 245, 215, 126, 52, 192, 120, 112, 253, 181, 95, 158, 23, 93, 127, 237, 39, 131, 66, 174, 191, 246, 51, 15, 44, 41, 178, 28, 241, 255, 65, 134, 14, 29, 255, 151, 160, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 161, 11, 64, 199, 152, 134, 46, 0, 29, 99, 26, 186, 0, 116, 140, 105, 232, 2, 208, 49, 166, 241, 61, 16, 64, 163, 205, 179, 27, 66, 95, 101, 149, 192, 232, 234, 87, 241, 223, 203, 162, 255, 251, 226, 143, 135, 176, 165, 216, 232, 170, 14, 29, 195, 113, 99, 4, 176, 102, 218, 173, 2, 163, 252, 87, 33, 212, 31, 190, 26, 109, 48, 2, 140, 127, 114, 247, 127, 2, 17, 128, 10, 150, 69, 27, 237, 209, 161, 195, 128, 191, 16, 192, 209, 141, 113, 134, 184, 175, 60, 208, 16, 255, 125, 1, 239, 119, 218, 77, 4, 27, 44, 199, 255, 77, 13, 64, 250, 227, 45, 151, 133, 250, 134, 192, 104, 207, 112, 8, 239, 87, 23, 223, 52, 211, 254, 150, 3, 125, 191, 144, 83, 163, 61, 195, 113, 238, 210, 59, 231, 207, 158, 49, 74, 234, 24, 59, 24, 18, 192, 182, 154, 40, 214, 141, 43, 252, 107, 98, 92, 36, 211, 92, 236, 33, 193, 223, 23, 194, 126, 168, 191, 226, 182, 113, 127, 83, 3, 134, 170, 111, 192, 117, 10, 0, 246, 7, 187, 77, 242, 178, 188, 229, 111, 10, 224, 218, 123, 111, 0, 163, 164, 142, 177, 131, 33, 1, 28, 104, 72, 90, 56, 219, 141, 160, 32, 215, 156, 181, 37, 117, 102, 77, 134, 163, 92, 18, 12, 111, 14, 223, 5, 67, 212, 79, 156, 184, 179, 196, 146, 85, 100, 96, 180, 199, 8, 6, 222, 27, 86, 163, 13, 195, 33, 140, 151, 14, 192, 250, 55, 5, 0, 126, 19, 248, 51, 96, 56, 189, 239, 204, 159, 128, 225, 212, 128, 128, 140, 47, 236, 35, 190, 48, 74, 234, 248, 190, 99, 72, 0, 205, 169, 51, 89, 151, 36, 123, 151, 167, 216, 18, 212, 36, 57, 103, 69, 91, 14, 148, 6, 16, 15, 84, 43, 47, 212, 175, 173, 95, 139, 131, 249, 19, 47, 189, 208, 116, 181, 119, 58, 132, 99, 53, 186, 106, 132, 130, 25, 147, 68, 0, 27, 75, 172, 68, 0, 153, 211, 254, 134, 0, 96, 252, 148, 186, 91, 128, 81, 254, 107, 33, 140, 255, 11, 92, 199, 12, 48, 46, 253, 215, 19, 163, 127, 42, 49, 142, 232, 171, 61, 225, 22, 215, 47, 64, 234, 156, 63, 234, 26, 248, 63, 134, 33, 1, 180, 166, 41, 1, 128, 5, 185, 202, 2, 181, 204, 86, 29, 160, 89, 75, 30, 92, 148, 172, 54, 204, 30, 218, 96, 132, 214, 202, 48, 72, 47, 115, 231, 39, 15, 247, 254, 77, 1, 0, 52, 208, 57, 237, 15, 2, 98, 163, 171, 127, 13, 215, 41, 0, 192, 28, 124, 157, 236, 127, 234, 13, 53, 3, 16, 208, 1, 198, 121, 220, 36, 129, 161, 27, 24, 220, 209, 143, 111, 121, 232, 39, 183, 189, 14, 245, 209, 0, 1, 153, 128, 116, 189, 27, 252, 31, 193, 144, 0, 150, 36, 207, 108, 200, 81, 166, 191, 54, 197, 149, 181, 57, 101, 102, 121, 170, 237, 234, 146, 89, 42, 147, 230, 130, 47, 106, 202, 250, 250, 145, 0, 198, 191, 126, 239, 98, 58, 0, 2, 96, 189, 78, 13, 76, 182, 156, 124, 155, 231, 109, 172, 70, 249, 111, 192, 245, 11, 64, 112, 61, 251, 13, 110, 71, 72, 63, 220, 8, 161, 135, 225, 94, 8, 13, 8, 136, 97, 191, 222, 13, 254, 207, 64, 253, 111, 176, 38, 176, 183, 212, 175, 38, 217, 101, 93, 77, 120, 102, 184, 37, 116, 239, 44, 241, 154, 151, 232, 218, 85, 165, 4, 208, 89, 236, 77, 166, 38, 105, 104, 56, 30, 14, 184, 14, 227, 95, 169, 250, 221, 129, 190, 95, 120, 68, 141, 39, 184, 30, 246, 11, 216, 111, 148, 249, 102, 184, 175, 28, 129, 90, 192, 245, 239, 151, 170, 143, 11, 50, 8, 128, 216, 112, 213, 128, 31, 253, 118, 195, 212, 240, 241, 95, 237, 6, 58, 190, 215, 80, 255, 43, 138, 183, 169, 73, 116, 89, 144, 237, 130, 17, 34, 32, 67, 31, 200, 142, 177, 156, 151, 160, 186, 129, 152, 159, 165, 89, 126, 172, 95, 11, 172, 127, 92, 174, 59, 132, 62, 148, 253, 115, 163, 75, 223, 0, 246, 123, 152, 221, 124, 253, 50, 248, 90, 82, 126, 3, 70, 180, 127, 56, 251, 149, 24, 52, 59, 244, 181, 64, 3, 255, 120, 211, 62, 67, 55, 176, 13, 211, 189, 208, 247, 27, 234, 127, 101, 201, 182, 53, 9, 46, 217, 81, 86, 148, 249, 121, 154, 5, 34, 168, 201, 113, 164, 246, 207, 207, 116, 145, 218, 207, 148, 156, 29, 105, 73, 96, 132, 137, 254, 227, 32, 113, 110, 109, 80, 132, 243, 223, 152, 101, 13, 8, 203, 157, 193, 202, 45, 158, 203, 126, 63, 60, 255, 205, 24, 169, 0, 70, 100, 153, 248, 226, 144, 158, 91, 84, 240, 183, 190, 145, 210, 192, 175, 186, 98, 61, 167, 234, 147, 241, 255, 1, 168, 255, 193, 236, 121, 201, 46, 53, 153, 142, 181, 169, 174, 213, 233, 14, 245, 243, 108, 151, 228, 122, 102, 134, 90, 98, 129, 178, 35, 173, 231, 37, 185, 42, 83, 84, 48, 51, 59, 234, 107, 4, 0, 16, 64, 231, 252, 148, 235, 175, 229, 8, 0, 92, 255, 126, 193, 255, 198, 12, 48, 28, 35, 18, 88, 82, 191, 191, 52, 1, 221, 11, 125, 223, 161, 9, 32, 202, 178, 187, 90, 217, 125, 124, 127, 97, 156, 141, 114, 252, 154, 17, 90, 152, 238, 81, 87, 228, 134, 54, 200, 116, 35, 134, 232, 175, 23, 0, 192, 2, 9, 167, 71, 36, 3, 163, 204, 55, 99, 164, 29, 224, 127, 117, 191, 252, 190, 195, 189, 144, 142, 239, 41, 52, 1, 68, 91, 194, 248, 121, 89, 78, 237, 249, 94, 245, 249, 138, 238, 181, 41, 46, 57, 81, 150, 11, 82, 221, 114, 99, 172, 106, 211, 92, 219, 22, 59, 206, 75, 118, 37, 99, 184, 173, 247, 233, 112, 86, 235, 108, 245, 214, 204, 174, 192, 154, 114, 59, 201, 99, 178, 121, 129, 157, 58, 205, 85, 111, 18, 190, 10, 195, 45, 246, 121, 102, 114, 11, 167, 220, 146, 189, 57, 236, 107, 111, 249, 46, 251, 9, 12, 63, 210, 223, 220, 207, 106, 248, 21, 136, 175, 103, 127, 116, 174, 61, 251, 213, 76, 124, 211, 254, 191, 182, 95, 199, 247, 2, 38, 157, 69, 222, 133, 241, 214, 75, 178, 60, 178, 34, 173, 106, 103, 187, 100, 71, 88, 33, 0, 44, 80, 77, 150, 99, 86, 132, 149, 210, 70, 130, 11, 166, 8, 133, 224, 145, 134, 223, 153, 191, 49, 212, 54, 199, 110, 245, 83, 81, 5, 155, 67, 96, 195, 68, 175, 91, 254, 224, 125, 179, 93, 142, 197, 240, 61, 70, 24, 233, 45, 223, 247, 253, 58, 70, 63, 76, 238, 222, 146, 219, 84, 107, 215, 81, 107, 127, 199, 170, 160, 53, 205, 49, 133, 177, 182, 243, 171, 189, 230, 148, 57, 84, 85, 88, 45, 174, 119, 236, 106, 247, 89, 214, 234, 86, 83, 49, 165, 182, 210, 102, 113, 189, 123, 101, 65, 136, 209, 253, 55, 28, 85, 179, 29, 242, 99, 173, 107, 114, 188, 227, 3, 237, 91, 43, 195, 226, 125, 103, 4, 187, 77, 202, 9, 183, 36, 31, 233, 62, 5, 175, 146, 54, 203, 34, 43, 204, 34, 45, 200, 156, 124, 70, 196, 95, 104, 120, 52, 224, 213, 139, 151, 47, 190, 247, 225, 27, 111, 189, 251, 214, 71, 31, 63, 243, 250, 155, 114, 202, 250, 226, 155, 231, 89, 47, 188, 123, 213, 144, 97, 3, 73, 163, 219, 117, 124, 71, 152, 44, 107, 113, 111, 172, 179, 90, 182, 196, 121, 121, 139, 211, 64, 143, 119, 78, 234, 109, 213, 115, 28, 114, 179, 102, 100, 166, 141, 207, 207, 158, 188, 168, 206, 173, 187, 195, 163, 111, 169, 247, 220, 82, 203, 194, 220, 73, 205, 141, 234, 243, 66, 163, 10, 240, 251, 193, 245, 21, 123, 122, 102, 31, 89, 151, 123, 226, 142, 2, 64, 188, 165, 43, 141, 211, 251, 183, 151, 130, 123, 239, 44, 33, 150, 211, 249, 133, 163, 78, 192, 23, 222, 126, 7, 150, 191, 123, 237, 19, 130, 55, 175, 188, 69, 60, 124, 133, 247, 175, 94, 184, 40, 49, 27, 46, 191, 247, 190, 209, 237, 58, 190, 35, 76, 250, 123, 3, 54, 174, 12, 92, 211, 227, 187, 188, 211, 163, 167, 205, 173, 181, 193, 185, 181, 105, 102, 85, 185, 89, 121, 209, 180, 178, 34, 179, 250, 90, 219, 214, 70, 135, 230, 133, 182, 117, 85, 211, 153, 4, 234, 171, 149, 3, 30, 85, 160, 228, 195, 248, 206, 121, 145, 0, 222, 27, 86, 208, 183, 32, 90, 2, 1, 26, 40, 75, 251, 95, 249, 136, 235, 119, 1, 69, 93, 232, 110, 8, 168, 244, 134, 12, 49, 205, 129, 14, 32, 13, 1, 49, 24, 221, 174, 227, 59, 194, 164, 44, 111, 242, 174, 181, 17, 187, 215, 71, 174, 90, 230, 221, 219, 238, 182, 188, 195, 99, 176, 215, 175, 32, 123, 124, 107, 131, 91, 117, 217, 100, 216, 127, 251, 64, 200, 10, 180, 209, 225, 181, 160, 218, 108, 126, 181, 169, 209, 253, 55, 28, 233, 161, 102, 148, 118, 248, 125, 116, 67, 233, 99, 7, 26, 1, 129, 196, 195, 3, 54, 160, 147, 57, 25, 95, 255, 137, 166, 27, 136, 23, 47, 92, 164, 180, 191, 113, 73, 185, 29, 97, 63, 101, 158, 149, 24, 71, 36, 25, 168, 143, 12, 68, 3, 70, 183, 235, 248, 142, 48, 169, 175, 182, 217, 183, 49, 122, 207, 166, 184, 69, 11, 28, 106, 231, 154, 117, 54, 57, 244, 182, 185, 109, 90, 17, 48, 216, 238, 118, 247, 134, 232, 61, 131, 225, 131, 93, 94, 91, 215, 4, 55, 206, 179, 172, 170, 152, 193, 52, 108, 116, 255, 13, 135, 161, 3, 192, 114, 130, 225, 64, 24, 84, 125, 145, 1, 109, 129, 12, 155, 141, 110, 191, 225, 184, 244, 238, 187, 111, 125, 240, 1, 43, 16, 183, 35, 236, 127, 225, 220, 249, 115, 87, 174, 72, 94, 54, 188, 247, 233, 167, 100, 140, 110, 215, 241, 29, 97, 178, 99, 77, 248, 166, 94, 223, 238, 54, 175, 182, 102, 207, 245, 43, 66, 246, 108, 136, 220, 179, 49, 122, 199, 96, 232, 237, 61, 51, 79, 109, 73, 94, 219, 230, 177, 113, 133, 127, 251, 98, 231, 150, 70, 183, 202, 50, 211, 121, 115, 254, 234, 171, 128, 27, 5, 134, 93, 152, 13, 191, 197, 241, 139, 219, 1, 6, 59, 196, 85, 17, 0, 87, 105, 23, 70, 183, 223, 112, 40, 247, 255, 238, 85, 170, 62, 173, 0, 222, 163, 1, 131, 239, 71, 9, 50, 33, 112, 149, 109, 200, 0, 24, 221, 174, 227, 59, 194, 164, 173, 193, 121, 176, 107, 102, 251, 98, 183, 197, 117, 54, 119, 223, 17, 187, 123, 99, 84, 117, 185, 69, 99, 141, 221, 214, 254, 208, 237, 235, 35, 23, 213, 217, 149, 228, 79, 172, 171, 178, 90, 52, 223, 190, 113, 129, 67, 99, 157, 122, 210, 63, 170, 144, 31, 107, 13, 197, 13, 29, 96, 77, 115, 34, 158, 231, 228, 166, 57, 156, 18, 144, 23, 1, 16, 32, 128, 81, 104, 129, 196, 226, 67, 122, 28, 206, 115, 231, 84, 165, 55, 212, 123, 209, 131, 204, 190, 108, 144, 73, 192, 232, 118, 29, 223, 17, 38, 139, 106, 109, 59, 154, 157, 27, 23, 216, 85, 150, 78, 235, 89, 226, 178, 162, 219, 119, 94, 165, 245, 188, 74, 251, 21, 75, 61, 251, 187, 125, 186, 90, 189, 170, 202, 102, 48, 16, 23, 229, 89, 164, 37, 143, 219, 58, 56, 234, 158, 162, 12, 159, 1, 8, 168, 244, 162, 4, 98, 3, 239, 37, 32, 89, 87, 160, 94, 120, 143, 42, 136, 201, 193, 219, 64, 119, 3, 251, 89, 133, 253, 98, 123, 100, 131, 172, 70, 183, 235, 248, 142, 48, 89, 60, 223, 186, 178, 124, 70, 205, 92, 235, 249, 53, 54, 109, 77, 110, 213, 229, 211, 55, 172, 10, 105, 93, 228, 216, 186, 192, 166, 187, 197, 117, 89, 171, 91, 71, 139, 91, 69, 174, 75, 97, 150, 125, 97, 190, 85, 125, 173, 189, 209, 253, 55, 28, 165, 177, 182, 48, 187, 111, 65, 52, 85, 223, 160, 4, 50, 184, 127, 58, 0, 121, 233, 0, 116, 134, 123, 239, 44, 105, 173, 12, 51, 186, 253, 134, 3, 78, 11, 185, 153, 131, 169, 241, 24, 30, 229, 124, 222, 189, 42, 142, 72, 244, 192, 134, 151, 47, 93, 146, 109, 70, 183, 235, 248, 142, 48, 89, 217, 237, 91, 94, 100, 94, 148, 59, 173, 102, 142, 121, 251, 18, 207, 138, 98, 139, 154, 10, 243, 117, 171, 66, 176, 61, 160, 190, 198, 106, 85, 143, 111, 117, 145, 107, 117, 126, 72, 73, 186, 119, 89, 225, 20, 163, 251, 111, 56, 176, 64, 112, 93, 10, 255, 240, 86, 192, 138, 0, 200, 159, 184, 163, 0, 109, 144, 103, 91, 97, 194, 168, 123, 17, 6, 203, 153, 119, 95, 127, 237, 85, 113, 65, 98, 135, 134, 204, 143, 225, 169, 168, 54, 9, 200, 106, 116, 187, 142, 239, 8, 147, 147, 91, 83, 246, 246, 71, 108, 89, 238, 191, 170, 197, 173, 113, 190, 67, 117, 133, 121, 115, 131, 71, 253, 60, 219, 138, 226, 169, 11, 107, 237, 152, 1, 22, 47, 180, 109, 172, 115, 42, 205, 240, 170, 44, 176, 90, 88, 59, 234, 158, 2, 225, 106, 96, 54, 252, 134, 238, 20, 123, 2, 72, 207, 106, 0, 73, 46, 209, 1, 8, 70, 161, 0, 20, 227, 191, 124, 213, 101, 24, 127, 25, 12, 228, 213, 24, 171, 76, 192, 74, 9, 90, 55, 48, 186, 93, 199, 119, 132, 201, 131, 187, 179, 142, 172, 143, 89, 215, 238, 122, 124, 75, 98, 95, 171, 39, 147, 238, 130, 26, 139, 170, 146, 73, 119, 172, 139, 222, 220, 231, 55, 216, 225, 209, 90, 111, 95, 93, 110, 217, 56, 207, 118, 160, 219, 103, 121, 231, 168, 123, 145, 84, 147, 227, 77, 141, 135, 232, 226, 124, 0, 229, 95, 158, 249, 8, 200, 112, 73, 148, 128, 95, 50, 186, 253, 134, 3, 150, 99, 126, 96, 185, 12, 187, 114, 122, 245, 19, 53, 1, 171, 151, 3, 111, 191, 35, 239, 1, 12, 159, 146, 48, 186, 93, 199, 119, 132, 201, 178, 69, 214, 43, 154, 157, 183, 12, 132, 109, 27, 140, 236, 88, 236, 210, 219, 225, 221, 213, 238, 222, 182, 216, 113, 251, 186, 200, 141, 203, 131, 122, 154, 189, 27, 234, 156, 203, 138, 205, 155, 235, 236, 239, 94, 31, 245, 247, 250, 143, 163, 252, 29, 49, 47, 213, 29, 102, 195, 111, 202, 188, 216, 158, 123, 183, 212, 25, 98, 86, 1, 146, 96, 219, 232, 180, 64, 242, 224, 159, 85, 138, 61, 94, 223, 32, 6, 26, 2, 144, 13, 180, 5, 86, 163, 219, 117, 124, 71, 152, 108, 233, 15, 94, 181, 204, 187, 174, 202, 84, 57, 254, 74, 139, 141, 221, 51, 183, 172, 10, 60, 181, 53, 5, 174, 31, 187, 61, 190, 186, 194, 166, 185, 209, 187, 180, 208, 180, 113, 158, 195, 222, 254, 176, 189, 171, 67, 141, 238, 191, 225, 200, 9, 183, 132, 217, 6, 219, 99, 248, 248, 3, 158, 135, 216, 144, 23, 1, 140, 194, 167, 64, 134, 49, 151, 85, 21, 251, 11, 23, 153, 119, 13, 238, 159, 170, 143, 18, 136, 13, 123, 140, 110, 215, 241, 29, 97, 178, 186, 195, 245, 246, 62, 255, 238, 54, 207, 218, 185, 22, 27, 250, 195, 247, 110, 136, 89, 219, 53, 179, 113, 161, 219, 177, 59, 18, 159, 58, 84, 116, 123, 79, 208, 220, 50, 171, 166, 6, 175, 250, 90, 231, 245, 125, 126, 219, 214, 140, 58, 1, 164, 6, 154, 193, 108, 128, 17, 186, 247, 206, 18, 241, 60, 2, 102, 3, 89, 13, 201, 186, 66, 245, 153, 254, 81, 5, 161, 53, 96, 20, 54, 12, 0, 194, 126, 3, 245, 17, 9, 146, 16, 13, 24, 221, 174, 227, 59, 194, 100, 99, 183, 207, 177, 45, 137, 29, 141, 46, 115, 74, 166, 173, 93, 49, 171, 191, 219, 167, 161, 222, 185, 97, 177, 239, 142, 85, 129, 235, 218, 61, 215, 117, 5, 86, 150, 91, 47, 90, 224, 206, 186, 99, 125, 100, 127, 167, 187, 209, 253, 55, 28, 249, 177, 214, 177, 158, 83, 227, 125, 103, 128, 57, 25, 51, 203, 210, 60, 210, 67, 205, 136, 23, 205, 246, 192, 240, 16, 203, 167, 163, 201, 175, 105, 8, 172, 202, 25, 165, 239, 1, 132, 223, 66, 113, 72, 175, 38, 96, 237, 121, 40, 167, 210, 13, 222, 251, 244, 83, 100, 192, 106, 116, 187, 142, 239, 8, 147, 121, 21, 166, 43, 151, 250, 214, 84, 152, 87, 20, 79, 171, 44, 49, 93, 88, 99, 83, 87, 109, 59, 176, 212, 151, 121, 160, 105, 145, 115, 85, 185, 69, 245, 28, 219, 133, 53, 14, 3, 157, 190, 71, 238, 74, 222, 184, 50, 216, 232, 254, 27, 142, 111, 248, 247, 0, 254, 118, 227, 229, 223, 3, 136, 36, 70, 231, 191, 7, 120, 251, 131, 15, 62, 250, 226, 11, 214, 247, 63, 251, 236, 237, 143, 62, 98, 61, 255, 246, 219, 151, 223, 123, 239, 234, 181, 107, 36, 137, 129, 108, 144, 140, 209, 237, 58, 190, 35, 76, 22, 205, 179, 175, 159, 103, 219, 80, 231, 52, 176, 44, 176, 118, 174, 237, 236, 164, 155, 171, 231, 88, 170, 127, 23, 191, 200, 121, 97, 141, 109, 113, 190, 69, 128, 255, 239, 91, 106, 93, 238, 92, 238, 127, 231, 64, 248, 134, 21, 163, 206, 2, 193, 239, 133, 249, 110, 212, 126, 200, 189, 102, 83, 42, 1, 68, 135, 238, 165, 201, 118, 172, 205, 5, 193, 176, 31, 133, 160, 7, 242, 163, 240, 223, 3, 92, 249, 224, 67, 134, 221, 23, 95, 60, 123, 241, 221, 171, 242, 240, 231, 165, 75, 151, 39, 255, 254, 167, 83, 110, 250, 25, 167, 36, 217, 192, 10, 232, 6, 172, 70, 183, 235, 248, 142, 48, 217, 187, 49, 171, 189, 49, 160, 106, 142, 103, 125, 149, 123, 243, 2, 159, 185, 197, 46, 89, 169, 183, 182, 52, 186, 214, 204, 181, 152, 91, 50, 173, 32, 193, 45, 33, 202, 52, 60, 116, 252, 186, 165, 179, 86, 45, 13, 220, 182, 33, 193, 232, 254, 27, 14, 88, 62, 211, 254, 22, 152, 13, 191, 233, 0, 216, 30, 184, 142, 12, 224, 61, 214, 72, 106, 63, 254, 7, 243, 195, 134, 81, 248, 239, 1, 46, 190, 243, 206, 140, 91, 126, 57, 245, 166, 95, 124, 116, 237, 83, 219, 73, 191, 133, 226, 86, 19, 127, 227, 101, 121, 75, 128, 253, 109, 230, 19, 126, 137, 54, 200, 76, 248, 237, 79, 127, 253, 95, 255, 70, 48, 237, 230, 95, 24, 221, 174, 227, 59, 194, 228, 190, 61, 115, 115, 50, 109, 10, 114, 29, 34, 34, 172, 18, 35, 45, 102, 199, 90, 231, 166, 153, 206, 201, 179, 170, 43, 240, 41, 206, 177, 175, 204, 240, 159, 151, 27, 48, 39, 223, 203, 206, 244, 182, 212, 68, 155, 178, 255, 157, 255, 102, 250, 119, 1, 20, 7, 210, 4, 88, 209, 0, 122, 64, 6, 101, 41, 206, 172, 210, 13, 198, 121, 220, 132, 0, 200, 179, 199, 232, 246, 27, 14, 235, 137, 191, 118, 53, 187, 37, 205, 123, 186, 217, 248, 95, 218, 78, 254, 173, 197, 248, 95, 133, 57, 76, 74, 241, 48, 111, 207, 154, 153, 19, 104, 113, 27, 212, 255, 233, 191, 35, 134, 120, 183, 105, 12, 199, 227, 126, 245, 95, 70, 183, 235, 248, 142, 48, 41, 242, 141, 45, 200, 243, 13, 79, 152, 17, 232, 97, 6, 251, 103, 199, 216, 165, 197, 120, 167, 7, 186, 229, 70, 187, 130, 88, 39, 255, 242, 180, 192, 252, 168, 89, 51, 167, 89, 204, 24, 55, 62, 43, 213, 217, 232, 254, 27, 14, 248, 13, 203, 225, 55, 62, 7, 37, 80, 227, 33, 58, 214, 223, 160, 10, 54, 184, 153, 222, 84, 87, 160, 4, 64, 108, 116, 251, 13, 71, 230, 44, 203, 100, 31, 83, 127, 235, 137, 113, 78, 83, 103, 89, 222, 150, 31, 98, 29, 231, 62, 173, 40, 196, 42, 201, 211, 116, 110, 168, 93, 162, 183, 69, 71, 158, 95, 94, 160, 101, 77, 148, 109, 206, 44, 155, 252, 32, 27, 163, 219, 117, 124, 71, 152, 196, 59, 205, 202, 155, 25, 229, 50, 197, 198, 106, 220, 212, 124, 159, 228, 66, 191, 216, 34, 191, 164, 226, 152, 144, 172, 80, 247, 142, 228, 146, 36, 215, 160, 202, 208, 180, 112, 39, 159, 100, 247, 224, 154, 160, 84, 96, 116, 255, 13, 7, 134, 7, 126, 227, 248, 101, 24, 160, 234, 207, 116, 188, 13, 222, 183, 85, 120, 35, 12, 120, 15, 233, 161, 62, 242, 96, 15, 170, 48, 186, 253, 134]);
fileData11.push.apply(fileData11, [35, 219, 223, 178, 48, 212, 118, 160, 36, 40, 211, 215, 108, 94, 140, 107, 140, 203, 116, 127, 235, 9, 81, 206, 211, 58, 115, 189, 243, 3, 44, 43, 99, 157, 194, 236, 167, 6, 219, 221, 22, 231, 97, 218, 149, 231, 85, 26, 174, 255, 247, 87, 254, 206, 48, 153, 237, 30, 86, 232, 27, 23, 237, 224, 155, 227, 29, 89, 226, 31, 143, 0, 178, 189, 34, 163, 28, 124, 178, 103, 70, 180, 39, 148, 44, 77, 46, 109, 137, 45, 170, 12, 201, 206, 247, 137, 93, 24, 154, 21, 231, 60, 234, 30, 35, 194, 108, 170, 62, 44, 7, 196, 104, 128, 105, 56, 57, 212, 142, 158, 160, 50, 49, 238, 200, 0, 32, 15, 196, 48, 10, 45, 80, 67, 170, 91, 101, 178, 103, 105, 184, 125, 138, 159, 69, 94, 144, 109, 89, 148, 115, 99, 178, 91, 162, 151, 105, 126, 136, 77, 95, 222, 204, 164, 153, 230, 115, 163, 29, 115, 131, 172, 115, 252, 45, 27, 210, 220, 66, 236, 174, 247, 191, 38, 175, 227, 58, 97, 210, 18, 155, 159, 225, 25, 81, 236, 23, 155, 239, 27, 153, 224, 224, 159, 234, 26, 156, 227, 25, 153, 229, 29, 153, 238, 22, 18, 108, 227, 137, 42, 226, 157, 103, 85, 206, 74, 38, 95, 30, 16, 79, 108, 116, 255, 13, 135, 88, 29, 168, 159, 19, 110, 217, 57, 63, 133, 24, 186, 67, 116, 25, 139, 17, 131, 8, 0, 49, 160, 147, 81, 248, 38, 184, 38, 198, 169, 53, 115, 102, 134, 183, 105, 246, 44, 139, 142, 108, 207, 197, 73, 174, 49, 174, 83, 99, 93, 167, 231, 134, 58, 199, 123, 76, 143, 117, 155, 190, 52, 223, 171, 56, 216, 54, 221, 207, 204, 219, 108, 124, 101, 228, 168, 251, 56, 250, 247, 29, 38, 121, 222, 209, 24, 253, 48, 59, 175, 249, 193, 105, 205, 49, 133, 213, 161, 105, 112, 29, 37, 132, 216, 121, 230, 122, 71, 38, 185, 5, 209, 16, 218, 19, 138, 178, 61, 195, 67, 237, 188, 22, 132, 102, 26, 221, 127, 195, 81, 26, 107, 91, 147, 227, 141, 0, 240, 57, 107, 54, 165, 170, 241, 87, 107, 8, 100, 164, 240, 163, 144, 88, 207, 169, 72, 130, 204, 40, 252, 247, 0, 41, 179, 156, 115, 252, 173, 146, 189, 205, 106, 83, 156, 6, 230, 6, 100, 207, 178, 42, 9, 181, 45, 12, 181, 153, 237, 103, 158, 23, 104, 87, 25, 239, 84, 20, 106, 147, 27, 104, 153, 238, 107, 49, 63, 222, 185, 78, 251, 79, 86, 234, 248, 59, 194, 132, 1, 160, 208, 39, 102, 126, 72, 90, 162, 227, 172, 116, 143, 240, 28, 239, 168, 188, 153, 49, 113, 78, 254, 117, 193, 233, 101, 254, 9, 13, 17, 57, 217, 158, 145, 228, 23, 133, 229, 37, 186, 6, 50, 49, 27, 221, 127, 195, 1, 173, 25, 3, 0, 2, 88, 213, 148, 14, 251, 97, 60, 64, 9, 244, 4, 2, 20, 130, 18, 240, 66, 236, 36, 105, 116, 251, 13, 71, 126, 184, 237, 108, 31, 219, 101, 57, 222, 209, 174, 83, 151, 164, 120, 205, 246, 49, 45, 8, 181, 233, 43, 241, 157, 237, 109, 142, 23, 42, 14, 119, 104, 203, 198, 32, 217, 101, 251, 88, 133, 216, 78, 204, 10, 208, 255, 43, 116, 127, 103, 152, 44, 142, 204, 67, 0, 197, 126, 113, 5, 62, 209, 225, 14, 62, 240, 30, 246, 231, 248, 68, 101, 121, 132, 117, 197, 21, 19, 71, 58, 248, 134, 90, 123, 208, 7, 74, 124, 163, 75, 103, 141, 186, 247, 0, 184, 26, 169, 250, 240, 91, 86, 113, 65, 20, 123, 202, 63, 173, 64, 252, 143, 76, 195, 163, 80, 0, 179, 125, 204, 243, 130, 236, 2, 108, 39, 20, 5, 217, 230, 135, 90, 229, 5, 91, 85, 132, 217, 103, 250, 90, 22, 134, 91, 23, 132, 90, 21, 133, 218, 209, 10, 86, 149, 6, 102, 204, 178, 76, 245, 53, 13, 180, 184, 205, 232, 118, 29, 223, 17, 38, 9, 206, 1, 173, 241, 197, 41, 46, 65, 216, 253, 112, 59, 175, 52, 151, 160, 185, 179, 146, 243, 124, 162, 58, 19, 203, 231, 133, 164, 151, 6, 37, 149, 248, 197, 20, 250, 68, 199, 216, 121, 211, 28, 58, 99, 75, 140, 238, 191, 225, 192, 255, 120, 68, 141, 103, 21, 183, 131, 0, 170, 19, 157, 157, 166, 254, 110, 227, 202, 154, 248, 64, 123, 78, 233, 12, 94, 150, 183, 48, 19, 75, 55, 48, 186, 253, 134, 35, 193, 107, 198, 138, 162, 128, 92, 127, 139, 64, 251, 73, 185, 1, 150, 49, 46, 211, 90, 50, 103, 86, 197, 58, 44, 201, 240, 219, 209, 145, 178, 174, 60, 44, 220, 121, 114, 154, 143, 85, 177, 122, 60, 58, 125, 81, 250, 168, 251, 47, 243, 125, 223, 97, 82, 225, 159, 64, 93, 207, 242, 12, 95, 147, 29, 133, 209, 79, 114, 241, 159, 235, 159, 202, 24, 144, 231, 19, 157, 237, 25, 150, 238, 17, 82, 18, 144, 180, 54, 51, 174, 216, 55, 58, 193, 37, 32, 198, 222, 223, 232, 254, 27, 142, 121, 169, 234, 57, 79, 85, 182, 159, 124, 246, 129, 194, 15, 209, 221, 76, 111, 194, 14, 205, 14, 85, 255, 61, 80, 4, 32, 167, 148, 255, 81, 216, 1, 178, 252, 237, 202, 162, 108, 82, 125, 76, 43, 99, 157, 10, 2, 44, 151, 101, 207, 44, 9, 177, 207, 242, 183, 141, 116, 154, 52, 63, 205, 61, 212, 105, 90, 69, 164, 67, 78, 176, 109, 99, 154, 71, 180, 243, 212, 24, 183, 81, 247, 31, 38, 251, 190, 195, 164, 38, 48, 183, 108, 86, 220, 162, 136, 44, 166, 225, 230, 216, 194, 24, 71, 191, 82, 191, 152, 101, 241, 37, 41, 110, 129, 29, 49, 133, 237, 241, 165, 140, 197, 25, 158, 225, 17, 142, 94, 153, 94, 97, 140, 7, 70, 247, 223, 112, 96, 244, 213, 199, 224, 106, 147, 208, 128, 56, 31, 100, 96, 55, 233, 55, 48, 30, 219, 131, 42, 68, 3, 243, 102, 59, 141, 206, 167, 64, 113, 238, 51, 34, 28, 38, 87, 70, 218, 231, 4, 88, 22, 7, 219, 101, 207, 178, 206, 241, 55, 15, 118, 156, 148, 23, 96, 93, 18, 102, 87, 30, 230, 144, 21, 96, 153, 19, 96, 86, 19, 227, 144, 51, 203, 98, 78, 148, 131, 209, 237, 58, 190, 35, 76, 194, 236, 188, 40, 246, 69, 190, 81, 84, 253, 165, 113, 197, 82, 248, 115, 189, 35, 41, 252, 77, 145, 249, 115, 252, 19, 75, 253, 99, 211, 220, 66, 10, 60, 147, 151, 198, 20, 46, 141, 46, 54, 186, 255, 134, 3, 126, 131, 202, 44, 159, 218, 60, 127, 38, 93, 120, 143, 0, 92, 166, 255, 190, 56, 201, 7, 95, 84, 17, 239, 193, 213, 88, 207, 169, 212, 126, 92, 16, 190, 200, 232, 246, 27, 142, 104, 151, 169, 105, 126, 102, 179, 103, 206, 40, 10, 182, 153, 27, 235, 180, 52, 223, 59, 63, 216, 42, 206, 99, 70, 81, 132, 85, 85, 140, 83, 152, 171, 77, 89, 180, 221, 252, 4, 215, 0, 235, 9, 37, 97, 54, 139, 82, 70, 221, 155, 248, 239, 59, 76, 82, 92, 67, 91, 35, 11, 179, 60, 35, 112, 56, 20, 254, 134, 240, 92, 236, 80, 152, 189, 207, 178, 248, 178, 88, 135, 89, 177, 14, 126, 11, 34, 50, 211, 221, 66, 66, 237, 188, 210, 93, 67, 243, 125, 255, 246, 255, 233, 244, 255, 207, 192, 229, 227, 248, 25, 3, 32, 58, 212, 151, 103, 160, 202, 244, 107, 31, 255, 164, 63, 176, 98, 138, 230, 104, 31, 143, 27, 133, 29, 160, 53, 195, 127, 65, 188, 75, 101, 164, 99, 152, 227, 132, 76, 127, 179, 217, 94, 150, 73, 30, 102, 137, 158, 51, 202, 163, 28, 226, 220, 102, 20, 96, 253, 93, 167, 207, 141, 114, 204, 242, 49, 47, 12, 182, 77, 244, 24, 117, 31, 229, 248, 190, 195, 164, 51, 169, 164, 49, 170, 0, 102, 135, 219, 205, 44, 240, 137, 206, 153, 25, 139, 35, 74, 118, 11, 110, 143, 47, 73, 116, 9, 150, 135, 63, 245, 33, 25, 137, 78, 65, 205, 225, 249, 92, 58, 127, 178, 247, 210, 233, 129, 139, 247, 119, 190, 253, 112, 207, 123, 207, 111, 191, 242, 232, 224, 171, 71, 26, 95, 221, 95, 255, 214, 227, 235, 223, 121, 124, 245, 165, 211, 75, 47, 221, 187, 226, 194, 241, 230, 75, 15, 116, 189, 245, 216, 192, 197, 211, 61, 59, 118, 236, 104, 104, 104, 152, 63, 127, 126, 73, 73, 73, 97, 97, 225, 130, 5, 11, 234, 234, 234, 170, 170, 170, 200, 20, 21, 21, 205, 157, 59, 151, 181, 188, 188, 60, 47, 47, 143, 75, 196, 155, 77, 127, 55, 34, 64, 116, 52, 240, 181, 255, 30, 192, 240, 255, 15, 0, 245, 37, 159, 17, 225, 216, 213, 213, 181, 120, 241, 226, 150, 150, 150, 121, 243, 230, 85, 86, 86, 18, 183, 182, 182, 54, 53, 53, 45, 91, 182, 172, 190, 190, 190, 177, 177, 145, 31, 111, 225, 194, 133, 252, 96, 228, 107, 106, 106, 154, 179, 124, 22, 36, 184, 165, 251, 91, 250, 89, 140, 207, 154, 101, 145, 236, 101, 154, 19, 104, 129, 29, 111, 77, 243, 140, 112, 154, 154, 236, 101, 150, 29, 104, 81, 25, 101, 31, 102, 55, 169, 49, 201, 37, 55, 200, 186, 38, 209, 105, 209, 108, 247, 138, 56, 167, 242, 40, 199, 185, 113, 206, 243, 18, 156, 170, 227, 156, 26, 82, 221, 230, 37, 58, 213, 38, 185, 176, 206, 75, 116, 174, 77, 116, 89, 148, 234, 94, 155, 236, 154, 23, 106, 53, 210, 175, 207, 159, 18, 71, 236, 117, 31, 179, 255, 242, 136, 249, 202, 49, 116, 225, 203, 99, 240, 254, 63, 127, 3, 218, 142, 252, 15, 36, 147, 153, 157, 157, 153, 149, 149, 147, 147, 147, 149, 149, 149, 205, 154, 147, 157, 161, 130, 108, 150, 236, 236, 156, 76, 13, 25, 67, 107, 54, 171, 159, 235, 116, 103, 139, 113, 1, 30, 102, 182, 83, 127, 231, 227, 60, 197, 219, 113, 146, 139, 249, 77, 196, 184, 62, 15, 219, 113, 78, 230, 191, 55, 157, 240, 43, 87, 139, 63, 24, 182, 193, 81, 199, 185, 255, 243, 223, 36, 55, 139, 153, 24, 222, 239, 72, 38, 119, 171, 159, 252, 191, 108, 121, 52, 155, 2, 146, 67, 123, 70, 120, 152, 228, 120, 132, 45, 136, 200, 174, 8, 192, 234, 36, 84, 7, 166, 54, 68, 230, 23, 250, 198, 21, 250, 68, 231, 251, 196, 118, 199, 151, 96, 138, 218, 18, 74, 42, 2, 19, 114, 124, 98, 214, 230, 68, 215, 5, 167, 65, 244, 55, 14, 47, 190, 248, 208, 170, 243, 247, 180, 188, 255, 236, 214, 183, 31, 234, 57, 119, 170, 229, 229, 61, 117, 111, 30, 235, 124, 239, 153, 173, 87, 159, 90, 123, 233, 254, 142, 115, 71, 22, 93, 126, 168, 239, 221, 167, 238, 120, 255, 204, 174, 59, 239, 188, 179, 185, 185, 185, 167, 167, 103, 249, 242, 229, 136, 129, 83, 226, 218, 218, 218, 181, 218, 177, 106, 213, 170, 13, 27, 54, 244, 246, 246, 66, 196, 213, 171, 87, 139, 0, 238, 182, 188, 105, 229, 148, 223, 236, 53, 251, 221, 99, 14, 227, 192, 163, 246, 183, 238, 177, 184, 233, 33, 187, 91, 229, 116, 56, 216, 12, 191, 247, 246, 164, 236, 105, 143, 59, 184, 60, 229, 232, 186, 204, 163, 131, 185, 3, 117, 145, 123, 186, 147, 78, 172, 205, 184, 127, 91, 193, 3, 91, 11, 142, 175, 203, 58, 190, 54, 235, 206, 142, 196, 131, 171, 102, 207, 47, 12, 225, 91, 64, 119, 4, 192, 177, 102, 205, 154, 21, 43, 86, 116, 118, 118, 86, 84, 84, 116, 116, 116, 180, 181, 181, 33, 3, 242, 176, 31, 109, 240, 99, 179, 57, 201, 107, 90, 85, 180, 83, 73, 184, 125, 222, 44, 171, 210, 80, 219, 249, 137, 238, 153, 126, 22, 153, 126, 102, 185, 179, 44, 59, 179, 189, 218, 50, 189, 154, 102, 207, 172, 154, 229, 0, 113, 123, 139, 103, 86, 68, 218, 223, 51, 80, 184, 187, 47, 115, 127, 87, 246, 254, 189, 209, 251, 187, 178, 246, 119, 231, 236, 239, 202, 220, 199, 41, 113, 87, 246, 169, 129, 34, 48, 88, 23, 123, 104, 69, 225, 225, 149, 69, 189, 85, 49, 35, 253, 250, 176, 127, 232, 111, 250, 58, 32, 2, 88, 244, 151, 71, 105, 105, 169, 172, 194, 120, 163, 195, 192, 236, 175, 133, 92, 29, 46, 128, 138, 202, 202, 129, 181, 235, 86, 172, 238, 239, 95, 179, 118, 213, 192, 224, 170, 193, 193, 165, 61, 61, 29, 203, 186, 58, 187, 187, 235, 23, 53, 116, 44, 93, 86, 223, 208, 216, 182, 116, 41, 249, 193, 181, 107, 208, 64, 114, 240, 140, 222, 229, 85, 170, 93, 7, 218, 231, 197, 187, 83, 152, 146, 102, 153, 74, 193, 26, 254, 15, 152, 214, 52, 4, 178, 13, 49, 200, 47, 98, 83, 54, 5, 192, 126, 226, 137, 254, 227, 172, 147, 103, 216, 102, 89, 4, 46, 117, 35, 102, 192, 75, 216, 236, 55, 49, 250, 167, 178, 115, 164, 135, 73, 121, 96, 210, 220, 128, 228, 162, 89, 241, 213, 129, 41, 29, 177, 197, 33, 182, 94, 141, 17, 185, 165, 179, 18, 232, 9, 245, 161, 105, 168, 34, 221, 35, 156, 62, 16, 238, 224, 129, 42, 230, 204, 74, 124, 231, 201, 77, 151, 78, 181, 94, 186, 111, 229, 133, 71, 214, 190, 245, 248, 186, 119, 158, 92, 119, 249, 129, 238, 203, 143, 174, 121, 243, 200, 226, 183, 30, 91, 247, 209, 43, 251, 223, 126, 172, 255, 210, 61, 29, 175, 31, 92, 120, 249, 161, 229, 111, 61, 220, 183, 109, 219, 54, 169, 178, 208, 171, 187, 187, 155, 110, 176, 113, 227, 70, 106, 45, 49, 212, 167, 30, 247, 247, 247, 47, 213, 142, 246, 246, 118, 17, 192, 131, 182, 183, 236, 50, 255, 253, 131, 118, 183, 8, 203, 191, 65, 15, 108, 230, 79, 112, 79, 91, 220, 138, 5, 225, 253, 139, 162, 119, 244, 166, 244, 55, 68, 175, 174, 13, 31, 104, 136, 33, 216, 216, 154, 58, 208, 24, 179, 126, 113, 244, 242, 234, 224, 206, 242, 128, 131, 125, 201, 24, 36, 152, 77, 195, 161, 252, 211, 130, 168, 247, 112, 157, 239, 91, 86, 86, 86, 93, 93, 13, 245, 33, 61, 242, 160, 9, 80, 251, 217, 67, 144, 27, 96, 83, 26, 97, 151, 235, 111, 61, 39, 210, 174, 37, 221, 203, 219, 116, 220, 194, 84, 183, 252, 96, 235, 52, 63, 139, 234, 36, 199, 92, 127, 75, 236, 74, 146, 183, 169, 175, 205, 132, 236, 64, 171, 194, 16, 235, 157, 13, 81, 91, 22, 68, 28, 237, 205, 184, 125, 126, 244, 206, 214, 132, 131, 29, 73, 187, 151, 196, 238, 109, 78, 216, 222, 148, 184, 189, 137, 53, 97, 199, 146, 196, 221, 29, 25, 135, 186, 210, 239, 106, 74, 232, 44, 13, 31, 233, 215, 255, 90, 1, 60, 245, 134, 113, 70, 96, 16, 0, 116, 55, 58, 72, 114, 137, 210, 195, 175, 207, 42, 7, 73, 161, 181, 64, 136, 110, 224, 250, 215, 102, 202, 171, 171, 219, 150, 117, 183, 182, 181, 131, 150, 246, 142, 165, 93, 221, 75, 187, 21, 26, 104, 179, 237, 237, 173, 29, 29, 114, 74, 188, 122, 112, 144, 14, 64, 201, 231, 175, 204, 207, 113, 28, 5, 222, 206, 108, 28, 77, 0, 150, 211, 1, 188, 236, 111, 101, 13, 115, 55, 165, 9, 184, 91, 223, 108, 216, 198, 111, 17, 185, 54, 3, 138, 195, 120, 249, 165, 124, 22, 57, 67, 253, 113, 30, 55, 17, 88, 166, 79, 64, 12, 104, 99, 106, 248, 120, 64, 48, 196, 235, 235, 62, 76, 22, 133, 103, 111, 200, 75, 202, 243, 142, 158, 31, 156, 214, 22, 87, 176, 40, 44, 155, 97, 32, 219, 43, 122, 105, 82, 89, 177, 79, 76, 182, 87, 196, 250, 188, 212, 154, 224, 180, 12, 247, 80, 70, 225, 20, 215, 176, 171, 207, 108, 193, 234, 156, 59, 214, 116, 249, 254, 213, 231, 79, 116, 208, 7, 62, 60, 187, 231, 202, 67, 221, 175, 223, 189, 224, 181, 131, 139, 222, 125, 98, 240, 202, 35, 171, 222, 125, 114, 211, 149, 211, 43, 207, 29, 110, 56, 127, 188, 249, 240, 225, 195, 84, 122, 136, 190, 100, 201, 18, 42, 46, 164, 135, 100, 196, 84, 4, 2, 218, 2, 73, 244, 128, 0, 12, 29, 64, 136, 110, 192, 55, 232, 129, 205, 84, 139, 123, 110, 207, 93, 221, 16, 125, 106, 125, 193, 99, 187, 231, 61, 186, 187, 230, 212, 134, 162, 3, 43, 50, 31, 216, 94, 121, 116, 77, 238, 145, 129, 156, 7, 119, 84, 29, 90, 158, 217, 223, 16, 179, 191, 43, 153, 73, 128, 26, 79, 11, 66, 135, 248, 28, 126, 42, 98, 24, 192, 177, 126, 253, 122, 52, 201, 233, 186, 117, 235, 138, 139, 139, 97, 63, 186, 69, 0, 13, 179, 221, 250, 231, 134, 166, 121, 79, 175, 140, 181, 107, 206, 244, 168, 137, 117, 26, 254, 121, 253, 68, 111, 211, 254, 138, 136, 242, 48, 251, 120, 183, 105, 49, 174, 211, 162, 157, 166, 221, 181, 36, 246, 206, 166, 216, 227, 203, 51, 215, 205, 11, 219, 217, 146, 0, 136, 183, 183, 196, 31, 238, 74, 222, 181, 36, 146, 117, 103, 75, 34, 235, 93, 141, 209, 119, 53, 197, 246, 85, 4, 140, 244, 235, 255, 181, 14, 240, 198, 219, 127, 50, 196, 6, 61, 24, 4, 128, 158, 33, 189, 172, 114, 136, 0, 132, 253, 196, 114, 16, 127, 149, 232, 195, 233, 254, 85, 80, 57, 150, 15, 174, 89, 218, 221, 211, 210, 214, 190, 172, 167, 151, 21, 186, 183, 182, 117, 180, 180, 183, 145, 236, 92, 214, 165, 9, 160, 167, 179, 171, 75, 4, 128, 189, 225, 175, 12, 138, 111, 160, 64, 12, 251, 243, 217, 219, 22, 183, 175, 45, 86, 254, 124, 246, 181, 197, 25, 182, 65, 107, 202, 60, 236, 159, 228, 107, 78, 128, 213, 129, 253, 146, 228, 23, 68, 6, 97, 203, 125, 167, 212, 221, 146, 189, 35, 23, 157, 168, 223, 122, 132, 135, 73, 241, 172, 184, 108, 207, 200, 8, 71, 223, 217, 174, 225, 81, 142, 126, 101, 254, 241, 233, 30, 97, 115, 253, 19, 25, 139, 231, 135, 100, 101, 249, 68, 244, 36, 149, 151, 248, 198, 45, 12, 202, 44, 14, 80, 111, 12, 224, 250, 165, 199, 54, 190, 243, 248, 192, 219, 143, 172, 60, 127, 188, 69, 217, 125, 78, 159, 185, 157, 242, 127, 254, 84, 223, 197, 135, 6, 47, 159, 94, 246, 246, 99, 171, 223, 122, 168, 251, 194, 195, 107, 223, 126, 98, 195, 193, 131, 7, 241, 24, 43, 87, 174, 132, 226, 80, 10, 146, 225, 58, 224, 25, 127, 214, 8, 131, 242, 79, 134, 75, 91, 182, 108, 33, 79, 109, 22, 1, 124, 131, 237, 25, 174, 7, 233, 0, 251, 186, 146, 250, 27, 34, 79, 172, 43, 216, 215, 157, 188, 175, 43, 241, 224, 242, 180, 93, 61, 41, 187, 219, 226, 239, 223, 154, 143, 255, 57, 184, 60, 249, 228, 250, 130, 157, 189, 41, 92, 101, 51, 238, 139, 239, 2, 21, 56, 136, 41, 252, 80, 138, 149, 86, 128, 44, 137, 81, 35, 236, 199, 155, 113, 149, 228, 72, 63, 175, 223, 144, 234, 82, 29, 235, 80, 19, 135, 245, 119, 172, 142, 115, 110, 72, 117, 157, 159, 224, 90, 155, 228, 94, 24, 230, 48, 47, 209, 165, 50, 198, 169, 36, 218, 126, 78, 140, 253, 156, 120, 251, 5, 73, 206, 25, 254, 22, 35, 253, 250, 223, 96, 129, 254, 244, 167, 255, 209, 128, 232, 1, 1, 224, 242, 161, 187, 42, 239, 195, 14, 184, 78, 82, 180, 129, 6, 52, 242, 15, 29, 66, 235, 225, 236, 255, 102, 1, 148, 86, 206, 237, 232, 133, 253, 208, 189, 187, 185, 173, 173, 17, 123, 217, 222, 206, 41, 74, 16, 49, 192, 126, 13, 221, 253, 131, 88, 160, 28, 234, 61, 38, 135, 50, 191, 163, 37, 1, 162, 175, 175, 10, 62, 222, 151, 181, 171, 37, 105, 79, 71, 234, 157, 75, 99, 119, 183, 167, 236, 108, 77, 218, 217, 26, 111, 216, 150, 212, 239, 15, 251, 69, 0, 252, 70, 240, 30, 252, 38, 240, 103, 216, 33, 106, 63, 241, 130, 195, 138, 247, 210, 1, 16, 195, 16, 175, 175, 251, 80, 255, 32, 134, 1, 96, 125, 102, 60, 19, 240, 194, 240, 252, 217, 238, 161, 17, 246, 222, 41, 238, 33, 93, 41, 101, 229, 190, 9, 245, 97, 25, 137, 110, 33, 9, 78, 126, 121, 126, 73, 203, 19, 74, 176, 73, 111, 61, 56, 120, 238, 104, 211, 149, 7, 186, 175, 62, 187, 237, 226, 253, 75, 47, 63, 48, 120, 254, 228, 210, 139, 15, 174, 96, 38, 126, 251, 225, 181, 175, 31, 90, 120, 238, 216, 146, 115, 247, 180, 93, 125, 126, 199, 59, 143, 247, 51, 33, 156, 56, 113, 130, 210, 14, 209, 49, 217, 155, 55, 111, 230, 79, 159, 38, 64, 225, 191, 227, 142, 59, 16, 6, 83, 1, 127, 1, 196, 56, 37, 198, 3, 10, 179, 8, 224, 155, 199, 0, 78, 1, 1, 155, 241, 142, 251, 150, 37, 239, 238, 75, 61, 181, 41, 231, 244, 182, 162, 254, 198, 232, 254, 134, 168, 129, 198, 232, 219, 23, 69, 15, 54, 68, 111, 105, 141, 59, 190, 38, 243, 208, 138, 140, 93, 189, 105, 167, 183, 21, 80, 84, 96, 57, 63, 143, 244, 31, 161, 2, 1, 202, 36, 230, 18, 229, 31, 95, 68, 151, 216, 164, 29, 216, 182, 145, 126, 94, 159, 2, 182, 187, 53, 9, 199, 127, 120, 121, 225, 206, 142, 212, 189, 29, 169, 187, 218, 83, 118, 117, 166, 214, 165, 250, 30, 235, 203, 218, 221, 158, 186, 173, 61, 229, 88, 95, 6, 219, 246, 116, 166, 118, 85, 132, 141, 244, 235, 139, 0, 134, 215, 251, 111, 128, 8, 192, 48, 233, 18, 132, 106, 135, 33, 195, 193, 159, 128, 210, 132, 118, 124, 173, 0, 36, 99, 148, 55, 160, 162, 166, 122, 5, 190, 159, 170, 223, 222, 190, 180, 167, 187, 177, 105, 177, 198, 126, 165, 132, 198, 197, 77, 180, 2, 46, 161, 4, 28, 240, 170, 213, 253, 153, 57, 185, 112, 26, 163, 143, 213, 233, 175, 141, 109, 47, 13, 106, 44, 9, 235, 40, 9, 236, 40, 13, 202, 8, 114, 88, 81, 73, 28, 212, 92, 18, 184, 162, 50, 212, 176, 141, 223, 2, 102, 51, 230, 138, 0, 176, 61, 6, 174, 51, 10, 211, 13, 80, 2, 50, 48, 205, 157, 8, 212, 255, 217, 243, 8, 15, 147, 166, 168, 188, 134, 240, 156, 234, 160, 180, 28, 159, 200, 178, 192, 100, 220, 78, 75, 84, 97, 150, 119, 100, 89, 64, 226, 224, 236, 168, 236, 153, 81, 11, 195, 51, 202, 102, 197, 209, 4, 150, 68, 229, 199, 57, 5, 94, 188, 175, 13, 1, 92, 62, 61, 248, 250, 137, 150, 55, 79, 54, 95, 58, 221, 243, 242, 222, 218, 87, 239, 174, 191, 244, 224, 138, 171, 207, 110, 102, 14, 190, 112, 172, 233, 141, 131, 139, 46, 220, 187, 250, 245, 99, 77, 87, 30, 94, 117, 255, 253, 247, 67, 56, 24, 207, 223, 28, 12, 131, 253, 28, 212, 126, 170, 62, 1, 85, 159, 171, 76, 8, 156, 238, 218, 181, 11, 34, 138, 0, 174, 115, 12, 96, 115, 126, 172, 245, 198, 37, 9, 157, 101, 65, 7, 87, 100, 30, 236, 75, 221, 218, 145, 248, 216, 238, 218, 99, 171, 178, 119, 117, 165, 159, 222, 92, 62, 208, 16, 125, 160, 47, 245, 228, 186, 130, 85, 243, 35, 105, 8, 98, 129, 100, 38, 225, 47, 155, 31, 137, 74, 207, 95, 60, 25, 70, 2, 36, 202, 0, 64, 44, 238, 31, 111, 198, 15, 60, 210, 207, 235, 111, 94, 24, 217, 87, 26, 184, 181, 62, 106, 115, 125, 244, 142, 134, 232, 61, 205, 113, 187, 26, 34, 239, 108, 136, 218, 213, 20, 127, 103, 67, 196, 154, 249, 1, 135, 58, 83, 182, 212, 71, 237, 110, 142, 223, 222, 16, 217, 81, 232, 63, 210, 175, 111, 232, 0, 195, 235, 253, 95, 3, 2, 16, 219, 195, 58, 196, 119, 237, 64, 0, 226, 130, 228, 32, 35, 123, 88, 13, 204, 22, 174, 27, 209, 253, 171, 96, 6, 88, 129, 5, 234, 234, 238, 234, 238, 165, 3, 16, 52, 54, 45, 129, 241, 141, 139, 23, 215, 50, 101, 49, 9, 180, 181, 47, 82, 243, 64, 27, 29, 0, 11, 228, 97, 59, 46, 206, 123, 58, 118, 127, 117, 117, 208, 240, 63, 159, 162, 24, 55, 254, 124, 54, 205, 11, 149, 63, 31, 182, 69, 37, 218, 179, 205, 240, 187, 72, 237, 39, 80, 101, 222, 228, 207, 232, 129, 182, 144, 187, 213, 143, 62, 128, 47, 130, 253, 180, 2, 214, 33, 94, 95, 247, 97, 130, 233, 239, 74, 157, 147, 63, 51, 166, 196, 47, 166, 51, 182, 164, 37, 178, 48, 205, 45, 148, 62, 48, 39, 48, 57, 195, 51, 156, 160, 59, 121, 110, 85, 96, 10, 27, 194, 236, 189, 23, 134, 100, 94, 121, 168, 231, 194, 125, 109, 231, 143, 46, 185, 116, 122, 213, 149, 7, 6, 46, 63, 178, 246, 194, 125, 29, 84, 253, 55, 142, 117, 94, 56, 181, 140, 248, 234, 147, 131, 239, 60, 177, 254, 141, 131, 11, 24, 0, 222, 122, 112, 205, 125, 247, 221, 135, 6, 78, 158, 60, 73, 43, 32, 216, 187, 119, 47, 49, 7, 121, 198, 3, 170, 62, 121, 250, 0, 121, 86, 56, 39, 2, 48, 194, 95, 211, 3, 155, 41, 234, 167, 183, 229, 83, 236, 97, 249, 137, 117, 25, 119, 45, 77, 60, 50, 152, 187, 177, 33, 122, 91, 119, 234, 238, 101, 233, 3, 139, 162, 31, 216, 86, 112, 124, 125, 1, 83, 242, 161, 190, 212, 186, 130, 89, 242, 8, 8, 186, 67, 113, 124, 63, 194, 67, 156, 200, 224, 246, 219, 111, 167, 23, 209, 13, 16, 36, 77, 0, 54, 20, 104, 199, 72, 63, 175, 143, 139, 61, 210, 157, 74, 115, 223, 190, 36, 118, 219, 146, 56, 140, 254, 209, 174, 20, 156, 238, 170, 57, 161, 119, 242, 151, 221, 154, 120, 172, 55, 99, 87, 71, 202, 238, 142, 217, 135, 187, 146, 86, 204, 13, 25, 233, 215, 255, 6, 11, 244, 85, 32, 0, 56, 45, 7, 44, 135, 235, 82, 233, 17, 0, 241, 208, 5, 237, 146, 176, 159, 195, 136, 223, 95, 139, 225, 170, 64, 0, 237, 221, 61, 76, 192, 218, 248, 219, 211, 187, 114, 85, 3, 181, 191, 105, 9, 37, 4, 246, 179, 50, 13, 171, 110, 208, 180, 120, 149, 54, 3, 4, 59, 78, 42, 79, 178, 99, 228, 29, 254, 231, 179, 175, 53, 206, 232, 207, 135, 109, 244, 118, 53, 25, 107, 179, 47, 133, 95, 42, 189, 4, 240, 94, 126, 65, 2, 230, 224, 170, 125, 62, 185, 119, 155, 14, 61, 45, 29, 225, 97, 82, 236, 19, 91, 232, 155, 144, 71, 165, 15, 75, 223, 81, 156, 90, 236, 159, 80, 25, 144, 172, 61, 21, 141, 157, 19, 146, 223, 24, 85, 84, 21, 148, 194, 158, 124, 223, 152, 197, 145, 197, 76, 204, 23, 239, 91, 249, 214, 163, 131, 23, 31, 92, 121, 225, 222, 182, 243, 199, 91, 193, 197, 211, 75, 175, 60, 180, 252, 202, 99, 27, 206, 157, 104, 127, 117, 255, 252, 115, 167, 154, 223, 126, 180, 159, 70, 241, 246, 227, 27, 223, 56, 220, 184, 117, 235, 86, 140, 13, 7, 127, 196, 204, 157, 153, 153, 153, 24, 107, 14, 40, 200, 223, 65, 94, 94, 30, 131, 111, 126, 126, 62, 87, 171, 170, 170, 224, 159, 65, 0, 215, 51, 6, 176, 185, 52, 214, 118, 95, 119, 210, 134, 197, 49, 167, 110, 47, 61, 189, 181, 0, 37, 156, 88, 159, 191, 171, 45, 126, 71, 87, 202, 233, 205, 101, 27, 154, 98, 119, 117, 196, 237, 94, 150, 177, 186, 46, 236, 248, 154, 140, 214, 202, 48, 6, 95, 4, 64, 153, 199, 226, 227, 193, 152, 7, 248, 169, 240, 253, 148, 127, 166, 17, 121, 58, 4, 201, 228, 177, 85, 95, 95, 223, 72, 63, 175, 95, 147, 224, 84, 151, 228, 82, 171, 61, 245, 95, 144, 234, 94, 26, 229, 92, 17, 231, 76, 192, 58, 47, 201, 117, 97, 150, 91, 83, 166, 199, 156, 36, 123, 174, 46, 201, 244, 200, 11, 177, 30, 233, 215, 31, 169, 0, 12, 68, 135, 229, 98, 247, 89, 137, 145, 129, 228, 201, 136, 54, 228, 48, 42, 249, 95, 237, 0, 70, 109, 161, 162, 170, 122, 213, 154, 117, 95, 122, 253, 238, 190, 21, 43, 132, 250, 248, 31, 130, 121, 181, 181, 80, 31, 119, 132, 41, 234, 88, 214, 133, 0, 40, 234, 57, 225, 150, 172, 197, 49, 142, 229, 177, 14, 217, 129, 22, 213, 41, 30, 37, 49, 78, 165, 241, 46, 133, 9, 246, 165, 113, 206, 37, 177, 78, 37, 177, 14, 134, 109, 144, 30, 159, 35, 206, 135, 218, 207, 154, 91, 27, 228, 17, 165, 98, 146, 148, 127, 90, 1, 115, 130, 77, 217, 148, 248, 109, 234, 255, 232, 127, 164, 135, 73, 249, 172, 132, 60, 191, 232, 190, 248, 210, 92, 143, 120, 237, 37, 64, 12, 153, 213, 57, 209, 121, 51, 99, 240, 66, 85, 161, 41, 203, 226, 75, 232, 0, 69, 126, 137, 241, 78, 179, 138, 125, 163, 223, 56, 188, 248, 210, 105, 245, 194, 235, 242, 211, 119, 94, 126, 120, 245, 249, 123, 87, 92, 60, 217, 206, 48, 240, 222, 179, 91, 47, 61, 60, 128, 60, 94, 61, 218, 125, 233, 222, 190, 183, 31, 29, 248, 232, 197, 189, 151, 238, 111, 63, 112, 224, 0, 100, 98, 6, 128, 103, 212, 120, 2, 14, 254, 244, 41, 180, 140, 4, 216, 30, 86, 106, 48, 127, 43, 216, 33, 100, 96, 16, 192, 55, 143, 1, 2, 54, 99, 129, 24, 130, 119, 247, 166, 158, 88, 95, 112, 207, 166, 156, 229, 213, 193, 199, 215, 231, 63, 182, 187, 230, 208, 138, 44, 86, 242, 199, 214, 102, 158, 88, 91, 184, 114, 126, 56, 78, 169, 48, 65, 189, 8, 163, 9, 176, 86, 86, 86, 242, 29, 133, 232, 244, 1, 2, 121, 41, 193, 188, 142, 14, 81, 2, 25, 164, 50, 210, 207, 235, 239, 239, 206, 58, 214, 155, 121, 160, 43, 155, 121, 174, 103, 78, 216, 198, 5, 113, 167, 250, 11, 238, 230, 180, 51, 237, 158, 193, 162, 253, 93, 25, 4, 187, 59, 210, 246, 116, 164, 237, 234, 72, 93, 94, 25, 58, 210, 175, 255, 215, 4, 240, 215, 158, 2, 105, 21, 95, 113, 125, 56, 203, 69, 0, 114, 200, 37, 195, 85, 35, 126, 27, 98, 201, 27, 96, 216, 80, 94, 89, 189, 114, 112, 109, 107, 71, 71, 103, 87, 119, 223, 202, 149, 109, 29, 29, 148, 124, 77, 3, 74, 0, 181, 243, 149, 6, 96, 127, 91, 123, 135, 8, 0, 115, 31, 236, 54, 137, 25, 151, 63, 159, 101, 101, 161, 121, 17, 206, 199, 122, 210, 229, 207, 231, 120, 95, 230, 241, 222, 116, 249, 243, 97, 91, 116, 178, 163, 188, 7, 128, 220, 118, 53, 191, 165, 210, 203, 47, 53, 206, 227, 38, 245, 68, 40, 250, 167, 104, 3, 243, 195, 138, 42, 208, 0, 151, 220, 87, 78, 30, 226, 245, 117, 31, 38, 121, 62, 209, 165, 65, 73, 113, 206, 190, 141, 129, 115, 202, 103, 197, 149, 250, 197, 213, 71, 150, 23, 248, 197, 82, 248, 43, 252, 227, 230, 4, 198, 179, 97, 109, 182, 90, 243, 124, 162, 162, 29, 252, 223, 126, 100, 197, 185, 35, 139, 206, 29, 107, 98, 0, 80, 239, 4, 30, 94, 125, 225, 100, 183, 122, 51, 112, 255, 210, 171, 79, 111, 186, 242, 80, 47, 98, 120, 237, 238, 133, 111, 28, 89, 114, 254, 228, 178, 139, 247, 181, 227, 115, 48, 54, 16, 14, 162, 83, 113, 183, 108, 217, 178, 125, 251, 118, 196, 192, 224, 75, 125, 229, 18, 117, 151, 149, 169, 0, 242, 65, 59, 131, 0, 174, 103, 12, 96, 51, 174, 102, 119, 79, 210, 202, 249, 17, 15, 108, 174, 216, 221, 22, 191, 98, 65, 196, 142, 222, 228, 149, 11, 34, 122, 171, 131, 213, 203, 129, 134, 24, 6, 131, 135, 118, 84, 109, 233, 72, 220, 213, 30, 135, 0, 168, 253, 124, 119, 202, 60, 223, 151, 128, 214, 196, 143, 129, 24, 32, 86, 73, 73, 9, 10, 36, 64, 0, 252, 149, 201, 107, 129, 145, 126, 94, 255, 206, 37, 9, 135, 151, 165, 31, 232, 72, 222, 92, 31, 177, 187, 51, 117, 87, 83, 226, 46, 237, 109, 192, 142, 150, 148, 109, 13, 248, 162, 196, 173, 141, 177, 12, 0, 71, 186, 210, 247, 52, 39, 172, 172, 137, 25, 233, 215, 255, 134, 14, 240, 181, 79, 129, 132, 220, 70, 135, 76, 195, 134, 153, 152, 67, 146, 172, 195, 201, 61, 28, 146, 255, 170, 0, 42, 170, 107, 150, 15, 14, 48, 254, 106, 195, 110, 27, 229, 68, 171, 250, 77, 210, 13, 180, 206, 208, 173, 196, 80, 91, 135, 0, 50, 178, 179, 189, 29, 39, 197, 165, 58, 249, 56, 79, 225, 207, 103, 95, 119, 230, 246, 69, 81, 242, 231, 179, 123, 73, 236, 230, 230, 20, 195, 159, 143, 188, 7, 96, 27, 191, 5, 140, 103, 101, 14, 102, 21, 222, 211, 19, 208, 3, 94, 8, 16, 75, 139, 160, 39, 124, 27, 1, 100, 121, 134, 15, 102, 196, 150, 248, 38, 68, 59, 250, 98, 117, 24, 180, 58, 18, 139, 235, 67, 102, 183, 37, 151, 29, 173, 207, 223, 92, 144, 150, 232, 26, 88, 232, 31, 87, 57, 43, 41, 221, 35, 188, 51, 182, 136, 50, 255, 246, 19, 155, 206, 157, 106, 185, 242, 96, 207, 7, 103, 247, 92, 125, 102, 203, 185, 99, 45, 231, 143, 53, 189, 243, 196, 198, 183, 31, 238, 121, 231, 137, 129, 119, 159, 218, 114, 254, 190, 165, 175, 31, 92, 132, 29, 122, 243, 200, 98, 4, 64, 201, 135, 223, 148, 121, 10, 45, 92, 135, 250, 100, 40, 183, 20, 96, 242, 12, 154, 200, 131, 134, 176, 113, 227, 70, 177, 64, 127, 243, 233, 39, 16, 61, 176, 185, 38, 199, 123, 111, 79, 114, 95, 85, 200, 145, 193, 28, 40, 126, 176, 111, 246, 3, 91, 11, 118, 183, 198, 223, 179, 41, 247, 228, 218, 204, 7, 182, 230, 239, 237, 74, 161, 57, 48, 12, 236, 235, 74, 193, 47, 97, 117, 248, 46, 148, 121, 4, 128, 32, 249, 121, 248, 214, 112, 157, 12, 43, 25, 168, 47, 239, 131, 217, 201, 207, 57, 210, 207, 235, 239, 108, 137, 223, 221, 154, 116, 180, 43, 217, 232, 49, 223, 254, 182, 120, 170, 62, 101, 111, 95, 91, 194, 206, 214, 248, 93, 173, 73, 156, 118, 150, 6, 141, 244, 235, 27, 4, 240, 181, 47, 191, 140, 38, 99, 67, 7, 144, 131, 2, 207, 170, 73, 192, 248, 64, 3, 114, 245, 107, 5, 96, 224, 253, 87, 175, 86, 84, 87, 173, 90, 183, 86, 189, 246, 162, 100, 180, 171, 135, 63, 203, 134, 168, 175, 28, 17, 49, 121, 21, 119, 169, 199, 160, 116, 0, 56, 141, 17, 77, 137, 116, 255, 230, 199, 160, 134, 109, 208, 26, 198, 227, 245, 225, 122, 194, 102, 181, 242, 123, 193, 120, 86, 98, 105, 14, 146, 97, 6, 96, 24, 24, 226, 245, 117, 31, 38, 69, 129, 73, 181, 65, 41, 185, 222, 145, 245, 97, 25, 21, 126, 9, 221, 113, 101, 115, 131, 210, 10, 253, 227, 147, 157, 131, 26, 99, 114, 226, 221, 2, 106, 130, 211, 74, 2, 146, 90, 98, 11, 83, 93, 131, 83, 60, 194, 95, 189, 123, 1, 46, 232, 205, 163, 205, 111, 158, 106, 189, 242, 240, 170, 119, 159, 190, 253, 202, 67, 43, 46, 156, 236, 124, 243, 72, 195, 185, 123, 86, 190, 245, 216, 154, 75, 15, 174, 125, 231, 241, 1, 116, 114, 238, 232, 226, 215, 14, 212, 51, 239, 82, 251, 183, 109, 219, 6, 191, 123, 122, 122, 96, 63, 29, 64, 186, 1, 43, 73, 72, 134, 54, 118, 238, 220, 73, 7, 144, 247, 0, 223, 108, 123, 4, 162, 7, 54, 171, 255, 127, 128, 182, 248, 85, 11, 34, 31, 221, 93, 115, 114, 109, 193, 233, 205, 21, 15, 108, 159, 123, 122, 75, 197, 137, 245, 69, 247, 111, 174, 56, 58, 144, 123, 98, 67, 1, 2, 216, 213, 155, 186, 175, 39, 153, 14, 32, 158, 135, 149, 31, 6, 47, 132, 12, 228, 73, 20, 99, 0, 63, 9, 78, 140, 22, 65, 30, 125, 34, 128, 57, 115, 230, 140, 244, 243, 250, 11, 83, 221, 23, 164, 120, 205, 75, 118, 173, 75, 113, 171, 207, 240, 175, 76, 116, 155, 151, 164, 130, 218, 20, 183, 186, 84, 215, 197, 25, 158, 75, 178, 103, 206, 77, 112, 45, 141, 113, 94, 152, 238, 93, 28, 101, 55, 210, 175, 63, 188, 3, 252, 205, 135, 161, 50, 3, 24, 172, 191, 104, 0, 186, 107, 230, 255, 127, 158, 2, 17, 35, 0, 174, 178, 71, 104, 253, 85, 186, 127, 245, 84, 2, 4, 176, 109, 215, 174, 198, 37, 106, 204, 133, 253, 189, 138, 250, 93, 203, 122, 20, 251, 13, 144, 23, 2, 8, 160, 176, 164, 20, 91, 31, 31, 104, 63, 254, 166, 159, 7, 56, 76, 8, 116, 158, 230, 107, 55, 193, 199, 118, 2, 166, 104, 150, 195, 4, 63, 199, 73, 97, 206, 147, 195, 92, 166, 144, 145, 109, 206, 22, 170, 216, 35, 0, 152, 77, 128, 12, 166, 212, 221, 82, 126, 92, 249, 159, 200, 181, 25, 156, 46, 187, 47, 72, 85, 125, 237, 25, 17, 61, 33, 123, 71, 238, 16, 175, 175, 251, 48, 73, 247, 8, 75, 114, 10, 168, 11, 78, 87, 83, 111, 96, 106, 158, 95, 44, 125, 32, 206, 201, 191, 216, 47, 174, 42, 48, 181, 54, 40, 35, 43, 36, 190, 216, 39, 166, 62, 56, 131, 252, 252, 144, 217, 151, 31, 24, 120, 243, 112, 227, 229, 211, 3, 23, 238, 233, 185, 242, 240, 29, 231, 239, 237, 124, 235, 177, 254, 11, 247, 174, 130, 253, 175, 31, 168, 191, 242, 240, 237, 23, 239, 111, 191, 250, 228, 192, 123, 207, 108, 97, 207, 197, 211, 203, 78, 157, 58, 181, 126, 253, 122, 72, 15, 225, 196, 240, 16, 64, 65, 216, 15, 201, 16, 6, 25, 102, 3, 113, 68, 24, 18, 56, 253, 55, 159, 126, 202, 41, 96, 51, 163, 210, 174, 246, 248, 173, 45, 49, 184, 160, 129, 198, 232, 13, 109, 41, 3, 139, 162, 250, 170, 130, 241, 60, 3, 181, 33, 240, 126, 160, 33, 134, 201, 120, 87, 79, 202, 206, 246, 56, 252, 18, 223, 26, 138, 195, 117, 86, 58, 18, 167, 48, 0, 246, 35, 66, 126, 164, 77, 155, 54, 137, 54, 104, 2, 117, 117, 117, 92, 29, 233, 231, 245, 251, 230, 70, 236, 239, 202, 190, 91, 125, 10, 40, 155, 96, 87, 103, 234, 254, 174, 76, 236, 254, 254, 174, 172, 19, 203, 179, 246, 47, 205, 188, 119, 160, 24, 155, 187, 102, 30, 29, 41, 107, 249, 156, 208, 145, 126, 125, 35, 11, 244, 205, 15, 67, 69, 0, 28, 195, 53, 128, 0, 136, 229, 177, 143, 172, 156, 226, 127, 68, 30, 6, 126, 27, 49, 254, 175, 161, 162, 186, 250, 206, 61, 123, 224, 55, 2, 232, 91, 181, 18, 246, 119, 245, 246, 202, 19, 161, 214, 118, 249, 28, 4, 98, 80, 29, 96, 245, 224, 96, 97, 73, 73, 128, 135, 250, 239, 117, 203, 71, 24, 211, 67, 205, 154, 11, 130, 177, 58, 242, 143, 153, 200, 207, 201, 152, 57, 55, 221, 51, 35, 194, 145, 96, 97, 190, 155, 227, 116, 101, 126, 176, 248, 172, 16, 157, 146, 47, 177, 36, 229, 67, 16, 104, 131, 60, 141, 226, 91, 62, 5, 210, 254, 241, 87, 84, 158, 119, 244, 220, 89, 201, 53, 33, 105, 125, 137, 165, 101, 254, 241, 179, 61, 67, 42, 3, 226, 23, 132, 102, 102, 122, 132, 207, 11, 78, 102, 56, 142, 178, 247, 173, 10, 72, 110, 14, 207, 121, 255, 217, 173, 239, 60, 185, 230, 202, 163, 3, 151, 31, 234, 123, 243, 104, 235, 133, 83, 189, 151, 31, 93, 251, 206, 19, 107, 174, 60, 208, 125, 249, 129, 193, 55, 14, 46, 162, 240, 171, 71, 64, 143, 173, 126, 239, 153, 173, 111, 30, 105, 218, 187, 119, 47, 220, 162, 202, 82, 224, 169, 247, 212, 90, 234, 171, 88, 32, 254, 196, 97, 27, 73, 132, 129, 17, 130, 127, 252, 13, 193, 105, 3, 191, 191, 121, 12, 0, 108, 230, 79, 109, 119, 91, 220, 158, 182, 184, 195, 253, 105, 199, 6, 51, 112, 62, 251, 187, 82, 182, 53, 197, 28, 88, 158, 122, 100, 32, 253, 96, 95, 218, 145, 213, 233, 247, 220, 145, 189, 167, 61, 158, 70, 177, 113, 165, 122, 214, 4, 221, 113, 255, 152, 28, 190, 41, 118, 168, 172, 172, 140, 83, 121, 16, 196, 16, 66, 146, 131, 100, 99, 99, 35, 34, 25, 233, 231, 245, 119, 119, 102, 30, 232, 76, 222, 209, 24, 189, 187, 57, 14, 47, 123, 160, 51, 137, 211, 61, 75, 226, 183, 229, 135, 109, 109, 136, 217, 215, 28, 191, 99, 81, 196, 238, 166, 200, 141, 213, 65, 187, 155, 162, 59, 243, 125, 70, 250, 245, 191, 97, 6, 248, 42, 12, 2, 144, 131, 63, 112, 14, 17, 128, 106, 1, 195, 14, 17, 128, 161, 3, 124, 51, 134, 107, 163, 188, 170, 114, 251, 222, 61, 219, 247, 239, 101, 18, 96, 26, 94, 181, 118, 253, 138, 193, 53, 4, 203, 7, 6, 87, 173, 89, 183, 114, 205, 32, 193, 234, 117, 235, 89, 251, 7, 7, 139, 74, 74, 40, 234, 189, 203, 171, 160, 59, 236, 79, 155, 101, 17, 151, 235, 94, 16, 99, 133, 30, 40, 100, 252, 85, 146, 159, 155, 238, 66, 237, 199, 217, 222, 177, 122, 177, 124, 22, 72, 62, 254, 73, 141, 135, 232, 50, 15, 152, 230, 42, 37, 112, 74, 7, 176, 40, 250, 37, 181, 159, 12, 6, 73, 253, 214, 35, 60, 76, 186, 18, 42, 26, 194, 115, 231, 135, 100, 197, 58, 250, 21, 249, 198, 230, 204, 84, 64, 15, 243, 130, 103, 103, 120, 134, 151, 207, 74, 200, 240, 136, 172, 11, 205, 42, 244, 141, 171, 8, 72, 98, 96, 184, 120, 111, 223, 187, 79, 109, 100, 0, 120, 251, 241, 254, 247, 158, 222, 76, 67, 56, 127, 162, 3, 198, 191, 127, 102, 215, 59, 143, 244, 94, 60, 209, 76, 134, 211, 203, 15, 168, 15, 68, 176, 222, 119, 223, 125, 242, 212, 255, 208, 161, 67, 7, 15, 30, 36, 62, 113, 226, 4, 170, 224, 148, 67, 78, 153, 19, 56, 142, 31, 63, 190, 111, 223, 62, 56, 61, 34, 100, 132, 90, 132, 184, 76, 138, 245, 154, 158, 230, 103, 58, 39, 197, 189, 60, 209, 37, 39, 196, 44, 198, 107, 218, 130, 116, 231, 242, 88, 235, 146, 8, 203, 68, 207, 169, 165, 17, 86, 229, 9, 206, 181, 57, 126, 101, 169, 158, 244, 25, 254, 166, 153, 58, 32, 1, 82, 68, 0, 172, 8, 64, 134, 99, 4, 201, 1, 15, 56, 216, 73, 114, 164, 159, 215, 223, 217, 146, 112, 68, 123, 240, 143, 193, 101, 221, 190, 36, 129, 33, 239, 72, 87, 242, 238, 142, 212, 29, 45, 137, 59, 91, 19, 119, 181, 168, 177, 120, 83, 109, 40, 162, 29, 172, 9, 30, 233, 215, 71, 0, 35, 58, 52, 206, 15, 29, 194, 117, 177, 64, 156, 26, 36, 49, 60, 105, 96, 57, 184, 158, 14, 144, 158, 157, 93, 81, 83, 141, 17, 170, 168, 98, 173, 41, 175, 172, 150, 0, 148, 206, 157, 75, 127, 208, 130, 74, 146, 89, 57, 217, 116, 128, 105, 19, 126, 155, 28, 60, 131, 25, 215, 213, 226, 15, 166, 19, 126, 229, 100, 254, 123, 15, 219, 113, 116, 60, 60, 15, 49, 121, 220, 63, 49, 176, 158, 244, 27, 119, 235, 155, 97, 54, 227, 175, 60, 239, 87, 159, 250, 244, 31, 55, 46, 253, 215, 36, 41, 249, 242, 17, 9, 154, 0, 121, 86, 216, 175, 94, 26, 140, 232, 248, 243, 159, 255, 63, 69, 15, 105, 170, 23, 206, 151, 118, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'texture.png', fileData11, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_PTHREAD;
if (!ENVIRONMENT_IS_PTHREAD) ENVIRONMENT_IS_PTHREAD = false; // ENVIRONMENT_IS_PTHREAD=true will have been preset in pthread-main.js. Make it false in the main runtime thread.
var PthreadWorkerInit; // Collects together variables that are needed at initialization time for the web workers that host pthreads.
if (!ENVIRONMENT_IS_PTHREAD) PthreadWorkerInit = {};
var currentScriptUrl = (typeof document !== 'undefined' && document.currentScript) ? document.currentScript.src : undefined;


// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WEB) {
    if (document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
  } else { // worker
    scriptDirectory = self.location.href;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.split('/').slice(0, -1).join('/') + '/';
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// *** Environment setup code ***

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

if (!ENVIRONMENT_IS_PTHREAD) { // Pthreads have already initialized these variables in src/pthread-main.js, where they were passed to the thread worker at startup time
  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;
}

if (ENVIRONMENT_IS_PTHREAD) {
  staticSealed = true; // The static memory area has been initialized already in the main thread, pthreads skip this.
}



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abort('Cannot enlarge memory arrays, since compiling with pthreads support enabled (-s USE_PTHREADS=1).');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 536870912;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory


if (typeof SharedArrayBuffer !== 'undefined') {
  if (!ENVIRONMENT_IS_PTHREAD) buffer = new SharedArrayBuffer(TOTAL_MEMORY);
  // Currently SharedArrayBuffer does not have a slice() operation, so polyfill it in.
  // Adapted from https://github.com/ttaubert/node-arraybuffer-slice, (c) 2014 Tim Taubert <tim@timtaubert.de>
  // arraybuffer-slice may be freely distributed under the MIT license.
  (function (undefined) {
    "use strict";
    function clamp(val, length) {
      val = (val|0) || 0;
      if (val < 0) return Math.max(val + length, 0);
      return Math.min(val, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && !SharedArrayBuffer.prototype.slice) {
      SharedArrayBuffer.prototype.slice = function (from, to) {
        var length = this.byteLength;
        var begin = clamp(from, length);
        var end = length;
        if (to !== undefined) end = clamp(to, length);
        if (begin > end) return new ArrayBuffer(0);
        var num = end - begin;
        var target = new ArrayBuffer(num);
        var targetArray = new Uint8Array(target);
        var sourceArray = new Uint8Array(this, begin, num);
        targetArray.set(sourceArray);
        return target;
      };
    }
  })();
} else {
  if (!ENVIRONMENT_IS_PTHREAD) buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();

if (typeof Atomics === 'undefined') {
  // Polyfill singlethreaded atomics ops from http://lars-t-hansen.github.io/ecmascript_sharedmem/shmem.html#Atomics.add
  // No thread-safety needed since we don't have multithreading support.
  Atomics = {};
  Atomics['add'] = function(t, i, v) { var w = t[i]; t[i] += v; return w; }
  Atomics['and'] = function(t, i, v) { var w = t[i]; t[i] &= v; return w; }
  Atomics['compareExchange'] = function(t, i, e, r) { var w = t[i]; if (w == e) t[i] = r; return w; }
  Atomics['exchange'] = function(t, i, v) { var w = t[i]; t[i] = v; return w; }
  Atomics['wait'] = function(t, i, v, o) { if (t[i] != v) return 'not-equal'; else return 'timed-out'; }
  Atomics['wake'] = function(t, i, c) { return 0; }
  Atomics['wakeOrRequeue'] = function(t, i1, c, i2, v) { return 0; }
  Atomics['isLockFree'] = function(s) { return true; }
  Atomics['load'] = function(t, i) { return t[i]; }
  Atomics['or'] = function(t, i, v) { var w = t[i]; t[i] |= v; return w; }
  Atomics['store'] = function(t, i, v) { t[i] = v; return v; }
  Atomics['sub'] = function(t, i, v) { var w = t[i]; t[i] -= v; return w; }
  Atomics['xor'] = function(t, i, v) { var w = t[i]; t[i] ^= v; return w; }
}


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

if (ENVIRONMENT_IS_PTHREAD) runtimeInitialized = true; // The runtime is hosted in the main thread, and bits shared to pthreads via SharedArrayBuffer. No need to init again in pthread.

function preRun() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  // Pass the thread address inside the asm.js scope to store it for fast access that avoids the need for a FFI out.
  __register_pthread_ptr(PThread.mainThreadBlock, /*isMainBrowserThread=*/!ENVIRONMENT_IS_WORKER, /*isMainRuntimeThread=*/1);
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  // We should never get here in pthreads (could no-op this out if called in pthreads, but that might indicate a bug in caller side,
  // so good to be very explicit)
  assert(!ENVIRONMENT_IS_PTHREAD);
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function() { postMessage({ cmd: 'processQueuedMainThreadWork' }) },
 function() { return !!(Module['canvas']) },
 function() { Module['noExitRuntime'] = true },
 function() { throw 'Canceled!' }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 133664;
/* global initializers */ if (!ENVIRONMENT_IS_PTHREAD) __ATINIT__.push({ func: function() { ___emscripten_pthread_data_constructor() } });


if (!ENVIRONMENT_IS_PTHREAD) {
memoryInitializer = "craft.html.mem";
}





/* no memory initializer */
var tempDoublePtr;

if (!ENVIRONMENT_IS_PTHREAD) tempDoublePtr = alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  
  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};
  
  
  var __pthread_ptr=0;
  
  var __pthread_is_main_runtime_thread=0;
  
  var __pthread_is_main_browser_thread=0; var PThread={MAIN_THREAD_ID:1,mainThreadInfo:{schedPolicy:0,schedPrio:0},unusedWorkerPool:[],runningWorkers:[],initMainThreadBlock:function () {
        if (ENVIRONMENT_IS_PTHREAD) return undefined;
        PThread.mainThreadBlock = allocate(244, "i32*", ALLOC_STATIC);
  
        for (var i = 0; i < 244/4; ++i) HEAPU32[PThread.mainThreadBlock/4+i] = 0;
  
        // The pthread struct has a field that points to itself - this is used as a magic ID to detect whether the pthread_t
        // structure is 'alive'.
        HEAP32[(((PThread.mainThreadBlock)+(24))>>2)]=PThread.mainThreadBlock;
  
        // pthread struct robust_list head should point to itself.
        var headPtr = PThread.mainThreadBlock + 168;
        HEAP32[((headPtr)>>2)]=headPtr;
  
        // Allocate memory for thread-local storage.
        var tlsMemory = allocate(128 * 4, "i32*", ALLOC_STATIC);
        for (var i = 0; i < 128; ++i) HEAPU32[tlsMemory/4+i] = 0;
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 116 ) >> 2, tlsMemory); // Init thread-local-storage memory array.
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 52 ) >> 2, PThread.mainThreadBlock); // Main thread ID.
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 56 ) >> 2, PROCINFO.pid); // Process ID.
  
      },pthreads:{},pthreadIdCounter:2,exitHandlers:null,setThreadStatus:function () {},runExitHandlers:function () {
        if (PThread.exitHandlers !== null) {
          while (PThread.exitHandlers.length > 0) {
            PThread.exitHandlers.pop()();
          }
          PThread.exitHandlers = null;
        }
  
        // Call into the musl function that runs destructors of all thread-specific data.
        if (ENVIRONMENT_IS_PTHREAD && threadInfoStruct) ___pthread_tsd_run_dtors();
      },threadExit:function (exitCode) {
        var tb = _pthread_self();
        if (tb) { // If we haven't yet exited?
          Atomics.store(HEAPU32, (tb + 4 ) >> 2, exitCode);
          // When we publish this, the main thread is free to deallocate the thread object and we are done.
          // Therefore set threadInfoStruct = 0; above to 'release' the object in this worker thread.
          Atomics.store(HEAPU32, (tb + 0 ) >> 2, 1);
  
          // Disable all cancellation so that executing the cleanup handlers won't trigger another JS
          // canceled exception to be thrown.
          Atomics.store(HEAPU32, (tb + 72 ) >> 2, 1/*PTHREAD_CANCEL_DISABLE*/);
          Atomics.store(HEAPU32, (tb + 76 ) >> 2, 0/*PTHREAD_CANCEL_DEFERRED*/);
          PThread.runExitHandlers();
  
          _emscripten_futex_wake(tb + 0, 2147483647);
          __register_pthread_ptr(0, 0, 0); // Unregister the thread block also inside the asm.js scope.
          threadInfoStruct = 0;
          if (ENVIRONMENT_IS_PTHREAD) {
            // This worker no longer owns any WebGL OffscreenCanvases, so transfer them back to parent thread.
            var transferList = [];
  
  
            postMessage({ cmd: 'exit' });
          }
        }
      },threadCancel:function () {
        PThread.runExitHandlers();
        Atomics.store(HEAPU32, (threadInfoStruct + 4 ) >> 2, -1/*PTHREAD_CANCELED*/);
        Atomics.store(HEAPU32, (threadInfoStruct + 0 ) >> 2, 1); // Mark the thread as no longer running.
        _emscripten_futex_wake(threadInfoStruct + 0, 2147483647); // wake all threads
        threadInfoStruct = selfThreadId = 0; // Not hosting a pthread anymore in this worker, reset the info structures to null.
        __register_pthread_ptr(0, 0, 0); // Unregister the thread block also inside the asm.js scope.
        postMessage({ cmd: 'cancelDone' });
      },terminateAllThreads:function () {
        for (var t in PThread.pthreads) {
          var pthread = PThread.pthreads[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.pthreads = {};
        for (var t in PThread.unusedWorkerPool) {
          var pthread = PThread.unusedWorkerPool[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.unusedWorkerPool = [];
        for (var t in PThread.runningWorkers) {
          var pthread = PThread.runningWorkers[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.runningWorkers = [];
      },freeThreadData:function (pthread) {
        if (!pthread) return;
        if (pthread.threadInfoStruct) {
          var tlsMemory = HEAP32[(((pthread.threadInfoStruct)+(116))>>2)];
          HEAP32[(((pthread.threadInfoStruct)+(116))>>2)]=0;
          _free(pthread.tlsMemory);
          _free(pthread.threadInfoStruct);
        }
        pthread.threadInfoStruct = 0;
        if (pthread.allocatedOwnStack && pthread.stackBase) _free(pthread.stackBase);
        pthread.stackBase = 0;
        if (pthread.worker) pthread.worker.pthread = null;
      },receiveObjectTransfer:function (data) {
      },allocateUnusedWorkers:function (numWorkers, onFinishedLoading) {
        if (typeof SharedArrayBuffer === 'undefined') return; // No multithreading support, no-op.
        out('Preallocating ' + numWorkers + ' workers for a pthread spawn pool.');
  
        var numWorkersLoaded = 0;
        var pthreadMainJs = 'pthread-main.js';
        // Allow HTML module to configure the location where the 'pthread-main.js' file will be loaded from,
        // via Module.locateFile() function. If not specified, then the default URL 'pthread-main.js' relative
        // to the main html file is loaded.
        pthreadMainJs = locateFile(pthreadMainJs);
  
        for (var i = 0; i < numWorkers; ++i) {
          var worker = new Worker(pthreadMainJs);
  
          (function(worker) {
            worker.onmessage = function(e) {
              var d = e.data;
              // TODO: Move the proxied call mechanism into a queue inside heap.
              if (d.proxiedCall) {
                var returnValue;
                var funcTable = (d.func >= 0) ? proxiedFunctionTable : ASM_CONSTS;
                var funcIdx = (d.func >= 0) ? d.func : (-1 - d.func);
                PThread.currentProxiedOperationCallerThread = worker.pthread.threadInfoStruct; // Sometimes we need to backproxy events to the calling thread (e.g. HTML5 DOM events handlers such as emscripten_set_mousemove_callback()), so keep track in a globally accessible variable about the thread that initiated the proxying.
                switch(d.proxiedCall & 31) {
                  case 1: returnValue = funcTable[funcIdx](); break;
                  case 2: returnValue = funcTable[funcIdx](d.p0); break;
                  case 3: returnValue = funcTable[funcIdx](d.p0, d.p1); break;
                  case 4: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2); break;
                  case 5: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3); break;
                  case 6: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4); break;
                  case 7: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5); break;
                  case 8: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6); break;
                  case 9: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6, d.p7); break;
                  case 10: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6, d.p7, d.p8); break;
                  default:
                    if (d.proxiedCall) {
                      err("worker sent an unknown proxied call idx " + d.proxiedCall);
                      console.error(e.data);
                    }
                    break;
                }
                if (d.returnValue) {
                  if (d.proxiedCall < 32) HEAP32[d.returnValue >> 2] = returnValue;
                  else HEAPF64[d.returnValue >> 3] = returnValue;
                }
                var waitAddress = d.waitAddress;
                if (waitAddress) {
                  Atomics.store(HEAP32, waitAddress >> 2, 1);
                  Atomics.wake(HEAP32, waitAddress >> 2, 1);
                }
                return;
              }
  
              // If this message is intended to a recipient that is not the main thread, forward it to the target thread.
              if (d.targetThread && d.targetThread != _pthread_self()) {
                var thread = PThread.pthreads[d.targetThread];
                if (thread) {
                  thread.worker.postMessage(e.data, d.transferList);
                } else {
                  console.error('Internal error! Worker sent a message "' + d.cmd + '" to target pthread ' + d.targetThread + ', but that thread no longer exists!');
                }
                return;
              }
  
              if (d.cmd === 'processQueuedMainThreadWork') {
                // TODO: Must post message to main Emscripten thread in PROXY_TO_WORKER mode.
                _emscripten_main_thread_process_queued_calls();
              } else if (d.cmd === 'spawnThread') {
                __spawn_thread(e.data);
              } else if (d.cmd === 'cleanupThread') {
                __cleanup_thread(d.thread);
              } else if (d.cmd === 'killThread') {
                __kill_thread(d.thread);
              } else if (d.cmd === 'cancelThread') {
                __cancel_thread(d.thread);
              } else if (d.cmd === 'loaded') {
                worker.loaded = true;
                // If this Worker is already pending to start running a thread, launch the thread now
                if (worker.runPthread) {
                  worker.runPthread();
                  delete worker.runPthread;
                }
                ++numWorkersLoaded;
                if (numWorkersLoaded === numWorkers && onFinishedLoading) {
                  onFinishedLoading();
                }
              } else if (d.cmd === 'print') {
                out('Thread ' + d.threadId + ': ' + d.text);
              } else if (d.cmd === 'printErr') {
                err('Thread ' + d.threadId + ': ' + d.text);
              } else if (d.cmd === 'alert') {
                alert('Thread ' + d.threadId + ': ' + d.text);
              } else if (d.cmd === 'exit') {
                // currently no-op
              } else if (d.cmd === 'cancelDone') {
                PThread.freeThreadData(worker.pthread);
                worker.pthread = undefined; // Detach the worker from the pthread object, and return it to the worker pool as an unused worker.
                PThread.unusedWorkerPool.push(worker);
                // TODO: Free if detached.
                PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker.pthread), 1); // Not a running Worker anymore.
              } else if (d.cmd === 'objectTransfer') {
                PThread.receiveObjectTransfer(e.data);
              } else if (e.data.target === 'setimmediate') {
                worker.postMessage(e.data); // Worker wants to postMessage() to itself to implement setImmediate() emulation.
              } else {
                err("worker sent an unknown command " + d.cmd);
              }
            };
  
            worker.onerror = function(e) {
              err('pthread sent an error! ' + e.filename + ':' + e.lineno + ': ' + e.message);
            };
          }(worker));
  
          // Allocate tempDoublePtr for the worker. This is done here on the worker's behalf, since we may need to do this statically
          // if the runtime has not been loaded yet, etc. - so we just use getMemory, which is main-thread only.
          var tempDoublePtr = getMemory(8); // TODO: leaks. Cleanup after worker terminates.
  
          // Ask the new worker to load up the Emscripten-compiled page. This is a heavy operation.
          worker.postMessage({
              cmd: 'load',
              // If the application main .js file was loaded from a Blob, then it is not possible
              // to access the URL of the current script that could be passed to a Web Worker so that
              // it could load up the same file. In that case, developer must either deliver the Blob
              // object in Module['mainScriptUrlOrBlob'], or a URL to it, so that pthread Workers can
              // independently load up the same main application file.
              urlOrBlob: Module['mainScriptUrlOrBlob'] || currentScriptUrl,
              buffer: HEAPU8.buffer,
              tempDoublePtr: tempDoublePtr,
              TOTAL_MEMORY: TOTAL_MEMORY,
              STATICTOP: STATICTOP,
              DYNAMIC_BASE: DYNAMIC_BASE,
              DYNAMICTOP_PTR: DYNAMICTOP_PTR,
              PthreadWorkerInit: PthreadWorkerInit
            });
          PThread.unusedWorkerPool.push(worker);
        }
      },getNewWorker:function () {
        if (PThread.unusedWorkerPool.length == 0) PThread.allocateUnusedWorkers(1);
        if (PThread.unusedWorkerPool.length > 0) return PThread.unusedWorkerPool.pop();
        else return null;
      },busySpinWait:function (msecs) {
        var t = performance.now() + msecs;
        while(performance.now() < t) {
          ;
        }
      }};function ___call_main(argc, argv) {
      return _main(argc, argv);
    }

  
  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin; if (ENVIRONMENT_IS_PTHREAD) _stdin = PthreadWorkerInit._stdin; else PthreadWorkerInit._stdin = _stdin = allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout; if (ENVIRONMENT_IS_PTHREAD) _stdout = PthreadWorkerInit._stdout; else PthreadWorkerInit._stdout = _stdout = allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr; if (ENVIRONMENT_IS_PTHREAD) _stderr = PthreadWorkerInit._stderr; else PthreadWorkerInit._stderr = _stderr = allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //err(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 140, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 145, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 146, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 221, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 5, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 54, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 6, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  
  function _emscripten_conditional_set_current_thread_status_js(expectedStatus, newStatus) {
    } 

  
  var __main_thread_futex_wait_address; if (ENVIRONMENT_IS_PTHREAD) __main_thread_futex_wait_address = PthreadWorkerInit.__main_thread_futex_wait_address; else PthreadWorkerInit.__main_thread_futex_wait_address = __main_thread_futex_wait_address = allocate(1, "i32*", ALLOC_STATIC);function _emscripten_futex_wait(addr, val, timeout) {
      if (addr <= 0 || addr > HEAP8.length || addr&3 != 0) return -22;
  //    dump('futex_wait addr:' + addr + ' by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
      if (ENVIRONMENT_IS_WORKER) {
        var ret = Atomics.wait(HEAP32, addr >> 2, val, timeout);
  //    dump('futex_wait done by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
        if (ret === 'timed-out') return -110;
        if (ret === 'not-equal') return -11;
        if (ret === 'ok') return 0;
        throw 'Atomics.wait returned an unexpected value ' + ret;
      } else {
        // Atomics.wait is not available in the main browser thread, so simulate it via busy spinning.
        var loadedVal = Atomics.load(HEAP32, addr >> 2);
        if (val != loadedVal) return -11;
  
        var tNow = performance.now();
        var tEnd = tNow + timeout;
  
  
        // Register globally which address the main thread is simulating to be waiting on. When zero, main thread is not waiting on anything,
        // and on nonzero, the contents of address pointed by __main_thread_futex_wait_address tell which address the main thread is simulating its wait on.
        Atomics.store(HEAP32, __main_thread_futex_wait_address >> 2, addr);
        var ourWaitAddress = addr; // We may recursively re-enter this function while processing queued calls, in which case we'll do a spurious wakeup of the older wait operation.
        while (addr == ourWaitAddress) {
          tNow = performance.now();
          if (tNow > tEnd) {
            return -110;
          }
          _emscripten_main_thread_process_queued_calls(); // We are performing a blocking loop here, so must pump any pthreads if they want to perform operations that are proxied.
          addr = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2); // Look for a worker thread waking us up.
        }
        return 0;
      }
    }

  function _emscripten_futex_wake(addr, count) {
      if (addr <= 0 || addr > HEAP8.length || addr&3 != 0 || count < 0) return -22;
      if (count == 0) return 0;
  //    dump('futex_wake addr:' + addr + ' by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
  
      // See if main thread is waiting on this address? If so, wake it up by resetting its wake location to zero.
      // Note that this is not a fair procedure, since we always wake main thread first before any workers, so
      // this scheme does not adhere to real queue-based waiting.
      var mainThreadWaitAddress = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2);
      var mainThreadWoken = 0;
      if (mainThreadWaitAddress == addr) {
        var loadedAddr = Atomics.compareExchange(HEAP32, __main_thread_futex_wait_address >> 2, mainThreadWaitAddress, 0);
        if (loadedAddr == mainThreadWaitAddress) {
          --count;
          mainThreadWoken = 1;
          if (count <= 0) return 1;
        }
      }
  
      // Wake any workers waiting on this address.
      var ret = Atomics.wake(HEAP32, addr >> 2, count);
      if (ret >= 0) return ret + mainThreadWoken;
      throw 'Atomics.wake returned an unexpected value ' + ret;
    }

  function _emscripten_futex_wake_or_requeue(addr, count, addr2, cmpValue) {
      if (addr <= 0 || addr2 <= 0 || addr >= HEAP8.length || addr2 >= HEAP8.length || count < 0
        || addr&3 != 0 || addr2&3 != 0) {
        return -22;
      }
  
      // See if main thread is waiting on this address? If so, wake it up by resetting its wake location to zero,
      // or move it to wait on addr2. Note that this is not a fair procedure, since we always wake main thread first before
      // any workers, so this scheme does not adhere to real queue-based waiting.
      var mainThreadWaitAddress = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2);
      var mainThreadWoken = 0;
      if (mainThreadWaitAddress == addr) {
        // Check cmpValue precondition before taking any action.
        var val1 = Atomics.load(HEAP32, addr >> 2);
        if (val1 != cmpValue) return -11;
  
        // If we are actually waking any waiters, then new main thread wait location is reset, otherwise requeue it to wait on addr2.
        var newMainThreadWaitAddress = (count > 0) ? 0 : addr2;
        var loadedAddr = Atomics.compareExchange(HEAP32, __main_thread_futex_wait_address >> 2, mainThreadWaitAddress, newMainThreadWaitAddress);
        if (loadedAddr == mainThreadWaitAddress && count > 0) {
          --count; // Main thread was woken, so one less workers to wake up.
          mainThreadWoken = 1;
        }
      }
  
      // Wake any workers waiting on this address.
      var ret = Atomics.wakeOrRequeue(HEAP32, addr >> 2, count, addr2 >> 2, cmpValue);
      if (ret == Atomics.NOTEQUAL) return -11;
      if (ret >= 0) return ret + mainThreadWoken;
      throw 'Atomics.wakeOrRequeue returned an unexpected value ' + ret;
    }


  function _emscripten_has_threading_support() {
      return typeof SharedArrayBuffer !== 'undefined';
    }

   

  
  function _emscripten_set_current_thread_status_js(newStatus) {
    } 

  
  function _emscripten_set_thread_name_js(threadId, name) {
    } 

  function _emscripten_syscall(which, varargs) {
    switch (which) {
      case 140: return ___syscall140(which, varargs);
      case 145: return ___syscall145(which, varargs);
      case 146: return ___syscall146(which, varargs);
      case 221: return ___syscall221(which, varargs);
      case 5: return ___syscall5(which, varargs);
      case 54: return ___syscall54(which, varargs);
      case 6: return ___syscall6(which, varargs);
      default: throw "surprising proxied syscall: " + which;
    }
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          out('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_pvrtc",
                                               "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB",
                                               "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetFramebufferSize(winid, width, height) {
      var ww = 0;
      var wh = 0;
  
      var win = GLFW.WindowFromId(winid);
      if (win) {
        ww = win.width;
        wh = win.height;
      }
  
      setValue(width, ww, 'i32');
      setValue(height, wh, 'i32');
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetWindowSize(winid, width, height) {
      GLFW.getWindowSize(winid, width, height);
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSetInputMode(winid, mode, value) {
      GLFW.setInputMode(winid, mode, value);
    }

  function _glfwSetTime(time) {
      GLFW.initialTime = GLFW.getTime() - time;
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }



   

  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }

  var _llvm_floor_f32=Math_floor;

   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  
  function __spawn_thread(threadParams) {
      if (ENVIRONMENT_IS_PTHREAD) throw 'Internal Error! _spawn_thread() can only ever be called from main application thread!';
  
      var worker = PThread.getNewWorker();
      if (worker.pthread !== undefined) throw 'Internal error!';
      if (!threadParams.pthread_ptr) throw 'Internal error, no pthread ptr!';
      PThread.runningWorkers.push(worker);
  
      // Allocate memory for thread-local storage and initialize it to zero.
      var tlsMemory = _malloc(128 * 4);
      for (var i = 0; i < 128; ++i) {
        HEAP32[(((tlsMemory)+(i*4))>>2)]=0;
      }
  
      var pthread = PThread.pthreads[threadParams.pthread_ptr] = { // Create a pthread info object to represent this thread.
        worker: worker,
        stackBase: threadParams.stackBase,
        stackSize: threadParams.stackSize,
        allocatedOwnStack: threadParams.allocatedOwnStack,
        thread: threadParams.pthread_ptr,
        threadInfoStruct: threadParams.pthread_ptr // Info area for this thread in Emscripten HEAP (shared)
      };
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 0 ) >> 2, 0); // threadStatus <- 0, meaning not yet exited.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 4 ) >> 2, 0); // threadExitCode <- 0.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 20 ) >> 2, 0); // profilerBlock <- 0.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 80 ) >> 2, threadParams.detached);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 116 ) >> 2, tlsMemory); // Init thread-local-storage memory array.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 60 ) >> 2, 0); // Mark initial status to unused.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 52 ) >> 2, pthread.threadInfoStruct); // Main thread ID.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 56 ) >> 2, PROCINFO.pid); // Process ID.
  
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120) >> 2, threadParams.stackSize);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 96) >> 2, threadParams.stackSize);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 92) >> 2, threadParams.stackBase);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 8) >> 2, threadParams.stackBase);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 12) >> 2, threadParams.detached);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 20) >> 2, threadParams.schedPolicy);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 24) >> 2, threadParams.schedPrio);
  
      var global_libc = _emscripten_get_global_libc();
      var global_locale = global_libc + 40;
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 188) >> 2, global_locale);
  
  
      worker.pthread = pthread;
      var msg = {
          cmd: 'run',
          start_routine: threadParams.startRoutine,
          arg: threadParams.arg,
          threadInfoStruct: threadParams.pthread_ptr,
          selfThreadId: threadParams.pthread_ptr, // TODO: Remove this since thread ID is now the same as the thread address.
          parentThreadId: threadParams.parent_pthread_ptr,
          stackBase: threadParams.stackBase,
          stackSize: threadParams.stackSize,
        };
      worker.runPthread = function() {
        // Ask the worker to start executing its pthread entry point function.
        msg.time = performance.now();
        worker.postMessage(msg, threadParams.transferList);
      };
      if (worker.loaded) {
        worker.runPthread();
        delete worker.runPthread;
      }
    }
  
  function _pthread_getschedparam(thread, policy, schedparam) {
      if (!policy && !schedparam) return ERRNO_CODES.EINVAL;
  
      if (!thread) {
        err('pthread_getschedparam called with a null thread pointer!');
        return ERRNO_CODES.ESRCH;
      }
      var self = HEAP32[(((thread)+(24))>>2)];
      if (self != thread) {
        err('pthread_getschedparam attempted on thread ' + thread + ', which does not point to a valid thread, or does not exist anymore!');
        return ERRNO_CODES.ESRCH;
      }
  
      var schedPolicy = Atomics.load(HEAPU32, (thread + 120 + 20 ) >> 2);
      var schedPrio = Atomics.load(HEAPU32, (thread + 120 + 24 ) >> 2);
  
      if (policy) HEAP32[((policy)>>2)]=schedPolicy;
      if (schedparam) HEAP32[((schedparam)>>2)]=schedPrio;
      return 0;
    }
  
   function _pthread_create(pthread_ptr, attr, start_routine, arg) {
      if (typeof SharedArrayBuffer === 'undefined') {
        err('Current environment does not support SharedArrayBuffer, pthreads are not available!');
        return 11;
      }
      if (!pthread_ptr) {
        err('pthread_create called with a null thread pointer!');
        return 22;
      }
  
      var transferList = []; // List of JS objects that will transfer ownership to the Worker hosting the thread
  
  
      // Synchronously proxy the thread creation to main thread if possible. If we need to transfer ownership of objects, then
      // proxy asynchronously via postMessage.
      if (ENVIRONMENT_IS_PTHREAD && transferList.length == 0) {
        return _emscripten_sync_run_in_main_thread_4(137, pthread_ptr, attr, start_routine, arg);
      }
  
      var stackSize = 0;
      var stackBase = 0;
      var detached = 0; // Default thread attr is PTHREAD_CREATE_JOINABLE, i.e. start as not detached.
      var schedPolicy = 0; /*SCHED_OTHER*/
      var schedPrio = 0;
      if (attr) {
        stackSize = HEAP32[((attr)>>2)];
        // Musl has a convention that the stack size that is stored to the pthread attribute structure is always musl's #define DEFAULT_STACK_SIZE
        // smaller than the actual created stack size. That is, stored stack size of 0 would mean a stack of DEFAULT_STACK_SIZE in size. All musl
        // functions hide this impl detail, and offset the size transparently, so pthread_*() API user does not see this offset when operating with
        // the pthread API. When reading the structure directly on JS side however, we need to offset the size manually here.
        stackSize += 81920 /*DEFAULT_STACK_SIZE*/;
        stackBase = HEAP32[(((attr)+(8))>>2)];
        detached = HEAP32[(((attr)+(12))>>2)] != 0/*PTHREAD_CREATE_JOINABLE*/;
        var inheritSched = HEAP32[(((attr)+(16))>>2)] == 0/*PTHREAD_INHERIT_SCHED*/;
        if (inheritSched) {
          var prevSchedPolicy = HEAP32[(((attr)+(20))>>2)];
          var prevSchedPrio = HEAP32[(((attr)+(24))>>2)];
          _pthread_getschedparam(_pthread_self(), attr + 20, attr + 24);
          schedPolicy = HEAP32[(((attr)+(20))>>2)];
          schedPrio = HEAP32[(((attr)+(24))>>2)];
          HEAP32[(((attr)+(20))>>2)]=prevSchedPolicy;
          HEAP32[(((attr)+(24))>>2)]=prevSchedPrio;
        } else {
          schedPolicy = HEAP32[(((attr)+(20))>>2)];
          schedPrio = HEAP32[(((attr)+(24))>>2)];
        }
      } else {
        // According to http://man7.org/linux/man-pages/man3/pthread_create.3.html, default stack size if not specified is 2 MB, so follow that convention.
        stackSize = 2097152;
      }
      var allocatedOwnStack = stackBase == 0; // If allocatedOwnStack == true, then the pthread impl maintains the stack allocation.
      if (allocatedOwnStack) {
        stackBase = _malloc(stackSize); // Allocate a stack if the user doesn't want to place the stack in a custom memory area.
      } else {
        // Musl stores the stack base address assuming stack grows downwards, so adjust it to Emscripten convention that the
        // stack grows upwards instead.
        stackBase -= stackSize;
        assert(stackBase > 0);
      }
  
      // Allocate thread block (pthread_t structure).
      var threadInfoStruct = _malloc(244);
      for (var i = 0; i < 244 >> 2; ++i) HEAPU32[(threadInfoStruct>>2) + i] = 0; // zero-initialize thread structure.
      HEAP32[((pthread_ptr)>>2)]=threadInfoStruct;
  
      // The pthread struct has a field that points to itself - this is used as a magic ID to detect whether the pthread_t
      // structure is 'alive'.
      HEAP32[(((threadInfoStruct)+(24))>>2)]=threadInfoStruct;
  
      // pthread struct robust_list head should point to itself.
      var headPtr = threadInfoStruct + 168;
      HEAP32[((headPtr)>>2)]=headPtr;
  
      var threadParams = {
        stackBase: stackBase,
        stackSize: stackSize,
        allocatedOwnStack: allocatedOwnStack,
        schedPolicy: schedPolicy,
        schedPrio: schedPrio,
        detached: detached,
        startRoutine: start_routine,
        pthread_ptr: threadInfoStruct,
        parent_pthread_ptr: _pthread_self(),
        arg: arg,
        transferList: transferList
      };
  
      if (ENVIRONMENT_IS_PTHREAD) {
        // The prepopulated pool of web workers that can host pthreads is stored in the main JS thread. Therefore if a
        // pthread is attempting to spawn a new thread, the thread creation must be deferred to the main JS thread.
        threadParams.cmd = 'spawnThread';
        postMessage(threadParams, transferList);
      } else {
        // We are the main thread, so we have the pthread warmup pool in this thread and can fire off JS thread creation
        // directly ourselves.
        __spawn_thread(threadParams);
      }
  
      return 0;
    }


   

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

if (!ENVIRONMENT_IS_PTHREAD) PThread.initMainThreadBlock();;
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (ENVIRONMENT_IS_PTHREAD) {
    _emscripten_get_now = function() { return performance['now']() - __performance_now_clock_drift; };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var GLctx; GL.init();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };

 // proxiedFunctionTable specifies the list of functions that can be called either synchronously or asynchronously from other threads in postMessage()d or internally queued events. This way a pthread in a Worker can synchronously access e.g. the DOM on the main thread.

var proxiedFunctionTable = [null];

if (!ENVIRONMENT_IS_PTHREAD) {
 // Only main thread initializes these, pthreads copy them over at thread worker init time (in pthread-main.js)
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

}

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function invoke_i(index) {
  var sp = stackSave();
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmGlobalArg['Atomics'] = Atomics;
Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiiii": invoke_iiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiiii": invoke_viiiii, "___assert_fail": ___assert_fail, "___call_main": ___call_main, "___clock_gettime": ___clock_gettime, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__exit": __exit, "__spawn_thread": __spawn_thread, "_abort": _abort, "_clock_gettime": _clock_gettime, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_conditional_set_current_thread_status_js": _emscripten_conditional_set_current_thread_status_js, "_emscripten_futex_wait": _emscripten_futex_wait, "_emscripten_futex_wake": _emscripten_futex_wake, "_emscripten_futex_wake_or_requeue": _emscripten_futex_wake_or_requeue, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_has_threading_support": _emscripten_has_threading_support, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_current_thread_status_js": _emscripten_set_current_thread_status_js, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_thread_name_js": _emscripten_set_thread_name_js, "_emscripten_syscall": _emscripten_syscall, "_exit": _exit, "_gettimeofday": _gettimeofday, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glCompileShader": _glCompileShader, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteShader": _glDeleteShader, "_glDetachShader": _glDetachShader, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLineWidth": _glLineWidth, "_glLinkProgram": _glLinkProgram, "_glPolygonOffset": _glPolygonOffset, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1f": _glUniform1f, "_glUniform1i": _glUniform1i, "_glUniform3f": _glUniform3f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glewInit": _glewInit, "_glfwCreateWindow": _glfwCreateWindow, "_glfwGetFramebufferSize": _glfwGetFramebufferSize, "_glfwGetTime": _glfwGetTime, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwPollEvents": _glfwPollEvents, "_glfwSetInputMode": _glfwSetInputMode, "_glfwSetTime": _glfwSetTime, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwTerminate": _glfwTerminate, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_floor_f32": _llvm_floor_f32, "_pthread_create": _pthread_create, "_pthread_getschedparam": _pthread_getschedparam, "_time": _time, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var __pthread_ptr = 0;
  var __pthread_is_main_runtime_thread = 0;
  var __pthread_is_main_browser_thread = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiii=env.invoke_viiiii;
  var ___assert_fail=env.___assert_fail;
  var ___call_main=env.___call_main;
  var ___clock_gettime=env.___clock_gettime;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __exit=env.__exit;
  var __spawn_thread=env.__spawn_thread;
  var _abort=env._abort;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_conditional_set_current_thread_status_js=env._emscripten_conditional_set_current_thread_status_js;
  var _emscripten_futex_wait=env._emscripten_futex_wait;
  var _emscripten_futex_wake=env._emscripten_futex_wake;
  var _emscripten_futex_wake_or_requeue=env._emscripten_futex_wake_or_requeue;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_has_threading_support=env._emscripten_has_threading_support;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_current_thread_status_js=env._emscripten_set_current_thread_status_js;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_thread_name_js=env._emscripten_set_thread_name_js;
  var _emscripten_syscall=env._emscripten_syscall;
  var _exit=env._exit;
  var _gettimeofday=env._gettimeofday;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBlendFunc=env._glBlendFunc;
  var _glBufferData=env._glBufferData;
  var _glClear=env._glClear;
  var _glClearColor=env._glClearColor;
  var _glCompileShader=env._glCompileShader;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glDeleteShader=env._glDeleteShader;
  var _glDetachShader=env._glDetachShader;
  var _glDisable=env._glDisable;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _glDrawArrays=env._glDrawArrays;
  var _glEnable=env._glEnable;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetString=env._glGetString;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glLineWidth=env._glLineWidth;
  var _glLinkProgram=env._glLinkProgram;
  var _glPolygonOffset=env._glPolygonOffset;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1f=env._glUniform1f;
  var _glUniform1i=env._glUniform1i;
  var _glUniform3f=env._glUniform3f;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glViewport=env._glViewport;
  var _glewInit=env._glewInit;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwGetFramebufferSize=env._glfwGetFramebufferSize;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwPollEvents=env._glfwPollEvents;
  var _glfwSetInputMode=env._glfwSetInputMode;
  var _glfwSetTime=env._glfwSetTime;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glfwTerminate=env._glfwTerminate;
  var _llvm_exp2_f32=env._llvm_exp2_f32;
  var _llvm_floor_f32=env._llvm_floor_f32;
  var _pthread_create=env._pthread_create;
  var _pthread_getschedparam=env._pthread_getschedparam;
  var _time=env._time;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var Atomics_load=global.Atomics.load;
  var Atomics_store=global.Atomics.store;
  var Atomics_exchange=global.Atomics.exchange;
  var Atomics_compareExchange=global.Atomics.compareExchange;
  var Atomics_add=global.Atomics.add;
  var Atomics_sub=global.Atomics.sub;
  var Atomics_and=global.Atomics.and;
  var Atomics_or=global.Atomics.or;
  var Atomics_xor=global.Atomics.xor;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _lodepng_decode($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i221$i = 0, $$0$i$i$i$i227$i = 0, $$0$i$i199$i = 0, $$0$i174$i = 0, $$0$i181$i = 0, $$0$i188$i = 0, $$0$i208$i = 0, $$0$i218$ph$i = 0, $$0$i226$i = 0, $$0100122$us$us$i$i$i = 0, $$0108$i$i = 0, $$0109$i$i = 0, $$011$i$i$i = 0, $$0110$i$i = 0, $$0111$lcssa$ph$i$i = 0, $$0111142$i$i = 0, $$0121$i$i$i = 0, $$0145333$i = 0, $$0148326$i = 0, $$0151332$i = 0, $$0154331$i = 0, $$01628$us$i$i$i = 0, $$01628$us$i89$us$i$i = 0, $$02331$us$i$i$i = 0, $$02331$us$i86$us$i$i = 0, $$024$i = 0, $$02430$us$i$i$i = 0, $$02430$us$i87$us$i$i = 0, $$03032$i$i = 0, $$031$i$i = 0, $$031$i169$i = 0, $$032$i$i = 0, $$032$us$i$i$i = 0, $$032$us$i85$us$i$i = 0, $$033$i$i = 0, $$045$i$i = 0, $$046$lcssa$i$i = 0, $$04649$i$i = 0, $$052$lcssa$i$i = 0, $$05264$i$i = 0, $$055$i$i = 0, $$057$i$i = 0, $$074111$us$i$i = 0, $$088105$us$us$i$i$i = 0, $$089109$us$i$i$i = 0, $$09$lcssa$i$i$i = 0, $$090124$us$us$i$i$i = 0, $$0910$i$i$i = 0, $$091132$us$i$i$i = 0, $$092128$us$us$i$i$i = 0, $$093104$us$us$i$i$i = 0, $$099123$us$us$i$i$i = 0, $$1 = 0, $$1$i = 0, $$1113133$i$i = 0, $$1120$i$i = 0, $$1134$i$i = 0, $$1149$i$i$i = 0, $$1155$i = 0, $$12526$us$i$i$i = 0, $$12526$us$i91$us$i$i = 0, $$127$us$i$i$i = 0, $$127$us$i90$us$i$i = 0, $$2$$us$i$i = 0, $$2$i = 0, $$2$lcssa$i$i = 0, $$2$lcssa$i194$i = 0, $$2112$us$i$i = 0, $$2118$i$i = 0, $$2126$i$i = 0, $$2147$i = 0, $$2153$i = 0, $$3125$i$i = 0, $$378$i$i = 0, $$4$i$i = 0, $$5$i$i$sink = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr256$pre$i = 0, $$pre112 = 0, $$pre116 = 0, $$pre117 = 0, $$pre160$i$i$i = 0, $$pre161$i$i$i = 0, $$pre162$i$i$i = 0, $$pre163$i$i$i = 0, $$pre164$i$i$i = 0, $$pre165$i$i$i = 0, $$pre166$i$i$i = 0, $$pre167$i$i$i = 0, $$pre168$i$i$i = 0, $$sink177 = 0, $$sink178 = 0, $$sink179 = 0, $$sink180 = 0, $$sroa$0$1$ph375$i = 0, $$sroa$0$1262265$i = 0, $$sroa$0$1262265$i$ph = 0, $$sroa$0238$0329$i = 0, $$sroa$0238$1$ph$i = 0, $$sroa$0238$2$i = 0, $$sroa$0238$4255$i = 0, $$sroa$15$0327$i = 0, $$sroa$15$1$ph$i = 0, $$sroa$15$2$i = 0, $$sroa$9$0328$i = 0, $$sroa$9$2$i = 0, $10 = 0, $11 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $13 = 0, $130 = 0, $132 = 0, $14 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $177 = 0, $18 = 0, $21 = 0, $214 = 0, $22 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $259 = 0, $26 = 0, $263 = 0, $264 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $291 = 0, $293 = 0, $297 = 0, $298 = 0, $30 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $312 = 0, $313 = 0, $316 = 0, $318 = 0, $32 = 0, $321 = 0, $33 = 0, $34 = 0, $341 = 0, $343 = 0, $347 = 0, $348 = 0, $35 = 0, $352 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $369 = 0, $37 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $383 = 0, $387 = 0, $388 = 0, $39 = 0, $393 = 0, $394 = 0, $396 = 0, $398 = 0, $399 = 0, $40 = 0, $401 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $422 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0, $520 = 0, $539 = 0, $541 = 0, $55 = 0, $558 = 0, $559 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $596 = 0, $597 = 0, $6 = 0, $603 = 0, $605 = 0, $606 = 0, $609 = 0, $61 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $622 = 0, $625 = 0, $627 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $639 = 0, $640 = 0, $642 = 0, $644 = 0, $645 = 0, $66 = 0, $661 = 0, $663 = 0, $669 = 0, $679 = 0, $684 = 0, $689 = 0, $691 = 0, $692 = 0, $693 = 0, $696 = 0, $697 = 0, $699 = 0, $7 = 0, $71 = 0, $714 = 0, $716 = 0, $722 = 0, $74 = 0, $740 = 0, $752 = 0, $755 = 0, $758 = 0, $761 = 0, $771 = 0, $772 = 0, $776 = 0, $779 = 0, $789 = 0, $791 = 0, $799 = 0, $8 = 0, $801 = 0, $804 = 0, $81 = 0, $813 = 0, $82 = 0, $820 = 0, $83 = 0, $841 = 0, $853 = 0, $865 = 0, $877 = 0, $889 = 0, $896 = 0, $897 = 0, $898 = 0, $9 = 0, $907 = 0, $92 = 0, $924 = 0, $927 = 0, $930 = 0, $931 = 0, $94 = 0, $940 = 0, $942 = 0, $944 = 0, $95 = 0, $953 = 0, $960 = 0, $964 = 0, $965 = 0, $967 = 0, $973 = 0, $978 = 0, $spec$select$i$i = 0, $spec$select$i197$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $6 = sp + 288 | 0;
 $7 = sp + 256 | 0;
 $8 = sp + 224 | 0;
 $9 = sp + 192 | 0;
 $10 = sp + 160 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 96 | 0;
 $13 = sp + 64 | 0;
 $14 = sp + 32 | 0;
 $15 = sp;
 $16 = sp + 316 | 0;
 HEAP32[$0 >> 2] = 0;
 $17 = _lodepng_inspect($1, $2, $3, $4, $5) | 0;
 $18 = $3 + 292 | 0;
 HEAP32[$18 >> 2] = $17;
 if ($17 | 0) {
  $$1 = $17;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $21 = $4;
 $22 = $3 + 16 | 0;
 $23 = $3 + 152 | 0;
 $24 = $3 + 156 | 0;
 $25 = $3 + 144 | 0;
 $26 = $3 + 160 | 0;
 $27 = $3 + 172 | 0;
 $28 = $3 + 168 | 0;
 $29 = $3 + 164 | 0;
 $30 = $3 + 28 | 0;
 $31 = $3 + 176 | 0;
 $32 = $3 + 188 | 0;
 $33 = $3 + 184 | 0;
 $34 = $3 + 180 | 0;
 $35 = $3 + 132 | 0;
 $36 = $6 + 8 | 0;
 $37 = $6 + 4 | 0;
 $38 = $3 + 32 | 0;
 $39 = $6 + 8 | 0;
 $40 = $6 + 4 | 0;
 $41 = $3 + 224 | 0;
 $42 = $3 + 228 | 0;
 $43 = $3 + 232 | 0;
 $44 = $3 + 236 | 0;
 $45 = $3 + 240 | 0;
 $46 = $3 + 244 | 0;
 $47 = $3 + 248 | 0;
 $48 = $3 + 252 | 0;
 $49 = $3 + 256 | 0;
 $50 = $3 + 260 | 0;
 $51 = $3 + 264 | 0;
 $52 = $3 + 4 | 0;
 $$0145333$i = $4 + 33 | 0;
 $$0151332$i = 1;
 $$0154331$i = 0;
 $$sroa$0238$0329$i = 0;
 $$sroa$15$0327$i = 0;
 $$sroa$9$0328$i = 0;
 $978 = 1;
 L4 : while (1) {
  if (!$978) {
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
  $55 = $$0145333$i - $21 + 12 | 0;
  if ($$0145333$i >>> 0 < $4 >>> 0 | $55 >>> 0 > $5 >>> 0) {
   label = 5;
   break;
  }
  $61 = $$0145333$i + 1 | 0;
  $66 = $$0145333$i + 2 | 0;
  $71 = $$0145333$i + 3 | 0;
  $74 = HEAPU8[$61 >> 0] << 16 | HEAPU8[$$0145333$i >> 0] << 24 | HEAPU8[$66 >> 0] << 8 | HEAPU8[$71 >> 0];
  if (($74 | 0) < 0) {
   label = 7;
   break;
  }
  if (($74 + $55 | 0) >>> 0 > $5 >>> 0) {
   label = 10;
   break;
  }
  if (($$0145333$i + $74 + 12 | 0) >>> 0 < $4 >>> 0) {
   label = 10;
   break;
  }
  $81 = $$0145333$i + 8 | 0;
  $82 = $$0145333$i + 4 | 0;
  $83 = HEAP8[$82 >> 0] | 0;
  L11 : do switch ($83 << 24 >> 24) {
  case 73:
   {
    switch (HEAP8[$$0145333$i + 5 >> 0] | 0) {
    case 68:
     break;
    case 69:
     {
      if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 78) {
       label = 162;
       break L4;
      }
      if ((HEAP8[$$0145333$i + 7 >> 0] | 0) == 68) {
       $$1$i = 1;
       $$1155$i = $$0154331$i;
       $$2153$i = $$0151332$i;
       $$sroa$0238$2$i = $$sroa$0238$0329$i;
       $$sroa$15$2$i = $$sroa$15$0327$i;
       $$sroa$9$2$i = $$sroa$9$0328$i;
       break L11;
      } else {
       label = 162;
       break L4;
      }
      break;
     }
    default:
     {
      label = 162;
      break L4;
     }
    }
    if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 65) {
     label = 162;
     break L4;
    }
    if ((HEAP8[$$0145333$i + 7 >> 0] | 0) != 84) {
     label = 162;
     break L4;
    }
    $92 = $74 + $$sroa$9$0328$i | 0;
    if ($$sroa$15$0327$i >>> 0 < $92 >>> 0) {
     $94 = $92 << 1;
     $95 = _realloc($$sroa$0238$0329$i, $94) | 0;
     if (!$95) {
      label = 20;
      break L4;
     } else {
      $$sroa$0238$1$ph$i = $95;
      $$sroa$15$1$ph$i = $94;
     }
    } else {
     $$sroa$0238$1$ph$i = $$sroa$0238$0329$i;
     $$sroa$15$1$ph$i = $$sroa$15$0327$i;
    }
    if (!$74) {
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = 3;
     $$sroa$0238$2$i = $$sroa$0238$1$ph$i;
     $$sroa$15$2$i = $$sroa$15$1$ph$i;
     $$sroa$9$2$i = $92;
    } else {
     $$0148326$i = 0;
     do {
      HEAP8[$$sroa$0238$1$ph$i + ($$0148326$i + $$sroa$9$0328$i) >> 0] = HEAP8[$81 + $$0148326$i >> 0] | 0;
      $$0148326$i = $$0148326$i + 1 | 0;
     } while (($$0148326$i | 0) != ($74 | 0));
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = 3;
     $$sroa$0238$2$i = $$sroa$0238$1$ph$i;
     $$sroa$15$2$i = $$sroa$15$1$ph$i;
     $$sroa$9$2$i = $92;
    }
    break;
   }
  case 80:
   {
    if ((HEAP8[$$0145333$i + 5 >> 0] | 0) != 76) {
     label = 162;
     break L4;
    }
    if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 84) {
     label = 162;
     break L4;
    }
    if ((HEAP8[$$0145333$i + 7 >> 0] | 0) != 69) {
     label = 162;
     break L4;
    }
    $118 = HEAP32[$23 >> 2] | 0;
    if ($118 | 0) _free($118);
    $120 = ($74 >>> 0) / 3 | 0;
    HEAP32[$24 >> 2] = $120;
    $122 = _malloc($120 << 2) | 0;
    HEAP32[$23 >> 2] = $122;
    L33 : do if (!$122) {
     if ($74 >>> 0 >= 3) {
      label = 30;
      break L4;
     }
    } else {
     if ($74 >>> 0 > 770) {
      $$031$i$i = 38;
      label = 37;
      break L4;
     }
     if ($74 >>> 0 >= 3) {
      $$03032$i$i = 0;
      $$033$i$i = 0;
      $132 = $122;
      while (1) {
       $130 = $$033$i$i << 2;
       HEAP8[$132 + $130 >> 0] = HEAP8[$81 + $$03032$i$i >> 0] | 0;
       HEAP8[(HEAP32[$23 >> 2] | 0) + ($130 | 1) >> 0] = HEAP8[$81 + ($$03032$i$i + 1) >> 0] | 0;
       HEAP8[(HEAP32[$23 >> 2] | 0) + ($130 | 2) >> 0] = HEAP8[$81 + ($$03032$i$i + 2) >> 0] | 0;
       HEAP8[(HEAP32[$23 >> 2] | 0) + ($130 | 3) >> 0] = -1;
       $147 = $$033$i$i + 1 | 0;
       if ($147 >>> 0 >= (HEAP32[$24 >> 2] | 0) >>> 0) break L33;
       $$03032$i$i = $$03032$i$i + 3 | 0;
       $$033$i$i = $147;
       $132 = HEAP32[$23 >> 2] | 0;
      }
     }
    } while (0);
    HEAP32[$18 >> 2] = 0;
    $$1$i = 0;
    $$1155$i = $$0154331$i;
    $$2153$i = 2;
    $$sroa$0238$2$i = $$sroa$0238$0329$i;
    $$sroa$15$2$i = $$sroa$15$0327$i;
    $$sroa$9$2$i = $$sroa$9$0328$i;
    break;
   }
  case 116:
   {
    switch (HEAP8[$$0145333$i + 5 >> 0] | 0) {
    case 82:
     {
      if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 78) {
       label = 163;
       break L11;
      }
      if ((HEAP8[$$0145333$i + 7 >> 0] | 0) != 83) {
       label = 163;
       break L11;
      }
      switch (HEAP32[$25 >> 2] | 0) {
      case 3:
       {
        if ((HEAP32[$24 >> 2] | 0) >>> 0 < $74 >>> 0) {
         $$031$i169$i = 38;
         label = 51;
         break L4;
        }
        if ($74 | 0) {
         $$032$i$i = 0;
         do {
          HEAP8[(HEAP32[$23 >> 2] | 0) + ($$032$i$i << 2 | 3) >> 0] = HEAP8[$81 + $$032$i$i >> 0] | 0;
          $$032$i$i = $$032$i$i + 1 | 0;
         } while (($$032$i$i | 0) != ($74 | 0));
        }
        break;
       }
      case 0:
       {
        if (($74 | 0) != 2) {
         $$031$i169$i = 30;
         label = 51;
         break L4;
        }
        HEAP32[$26 >> 2] = 1;
        $177 = HEAPU8[$81 >> 0] << 8 | HEAPU8[$$0145333$i + 9 >> 0];
        HEAP32[$27 >> 2] = $177;
        HEAP32[$28 >> 2] = $177;
        HEAP32[$29 >> 2] = $177;
        break;
       }
      case 2:
       {
        if (($74 | 0) != 6) {
         $$031$i169$i = 41;
         label = 51;
         break L4;
        }
        HEAP32[$26 >> 2] = 1;
        HEAP32[$29 >> 2] = HEAPU8[$81 >> 0] << 8 | HEAPU8[$$0145333$i + 9 >> 0];
        HEAP32[$28 >> 2] = HEAPU8[$$0145333$i + 10 >> 0] << 8 | HEAPU8[$$0145333$i + 11 >> 0];
        HEAP32[$27 >> 2] = HEAPU8[$$0145333$i + 12 >> 0] << 8 | HEAPU8[$$0145333$i + 13 >> 0];
        break;
       }
      default:
       {
        $$031$i169$i = 42;
        label = 51;
        break L4;
       }
      }
      HEAP32[$18 >> 2] = 0;
      $$1$i = 0;
      $$1155$i = $$0154331$i;
      $$2153$i = $$0151332$i;
      $$sroa$0238$2$i = $$sroa$0238$0329$i;
      $$sroa$15$2$i = $$sroa$15$0327$i;
      $$sroa$9$2$i = $$sroa$9$0328$i;
      break L11;
      break;
     }
    case 69:
     {
      if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 88) {
       label = 163;
       break L11;
      }
      if ((HEAP8[$$0145333$i + 7 >> 0] | 0) != 116) {
       label = 163;
       break L11;
      }
      if (!(HEAP32[$30 >> 2] | 0)) {
       $$1$i = 0;
       $$1155$i = $$0154331$i;
       $$2153$i = $$0151332$i;
       $$sroa$0238$2$i = $$sroa$0238$0329$i;
       $$sroa$15$2$i = $$sroa$15$0327$i;
       $$sroa$9$2$i = $$sroa$9$0328$i;
       break L11;
      }
      if (!$74) {
       $$0$i181$i = 89;
       $$055$i$i = 0;
       $$057$i$i = 0;
      } else {
       $$05264$i$i = 0;
       while (1) {
        if (!(HEAP8[$81 + $$05264$i$i >> 0] | 0)) {
         $$052$lcssa$i$i = $$05264$i$i;
         break;
        }
        $259 = $$05264$i$i + 1 | 0;
        if ($259 >>> 0 < $74 >>> 0) $$05264$i$i = $259; else {
         $$052$lcssa$i$i = $259;
         break;
        }
       }
       if (($$052$lcssa$i$i + -1 | 0) >>> 0 > 78) {
        $$0$i181$i = 89;
        $$055$i$i = 0;
        $$057$i$i = 0;
       } else {
        $263 = $$052$lcssa$i$i + 1 | 0;
        $264 = _malloc($263) | 0;
        if (!$264) {
         $$0$i181$i = 83;
         $$055$i$i = 0;
         $$057$i$i = 0;
        } else {
         HEAP8[$264 + $$052$lcssa$i$i >> 0] = 0;
         _memcpy($264 | 0, $81 | 0, $$052$lcssa$i$i | 0) | 0;
         $spec$select$i$i = $74 >>> 0 < $263 >>> 0 ? 0 : $74 - $263 | 0;
         $270 = _malloc($spec$select$i$i + 1 | 0) | 0;
         if (!$270) {
          $$0$i181$i = 83;
          $$055$i$i = 0;
          $$057$i$i = $264;
         } else {
          HEAP8[$270 + $spec$select$i$i >> 0] = 0;
          if ($spec$select$i$i | 0) _memcpy($270 | 0, $81 + $263 | 0, $spec$select$i$i | 0) | 0;
          $$0$i181$i = _lodepng_add_text($35, $264, $270) | 0;
          $$055$i$i = $270;
          $$057$i$i = $264;
         }
        }
       }
      }
      _free($$057$i$i);
      _free($$055$i$i);
      HEAP32[$18 >> 2] = $$0$i181$i;
      if (!$$0$i181$i) {
       $$1$i = 0;
       $$1155$i = $$0154331$i;
       $$2153$i = $$0151332$i;
       $$sroa$0238$2$i = $$sroa$0238$0329$i;
       $$sroa$15$2$i = $$sroa$15$0327$i;
       $$sroa$9$2$i = $$sroa$9$0328$i;
       break L11;
      } else {
       $$sroa$0238$4255$i = $$sroa$0238$0329$i;
       break L4;
      }
      break;
     }
    case 73:
     {
      if ((HEAP8[$$0145333$i + 6 >> 0] | 0) != 77) {
       label = 163;
       break L11;
      }
      if ((HEAP8[$$0145333$i + 7 >> 0] | 0) != 69) {
       label = 163;
       break L11;
      }
      if (($74 | 0) != 7) {
       label = 154;
       break L4;
      }
      HEAP32[$41 >> 2] = 1;
      HEAP32[$42 >> 2] = HEAPU8[$81 >> 0] << 8 | HEAPU8[$$0145333$i + 9 >> 0];
      HEAP32[$43 >> 2] = HEAPU8[$$0145333$i + 10 >> 0];
      HEAP32[$44 >> 2] = HEAPU8[$$0145333$i + 11 >> 0];
      HEAP32[$45 >> 2] = HEAPU8[$$0145333$i + 12 >> 0];
      HEAP32[$46 >> 2] = HEAPU8[$$0145333$i + 13 >> 0];
      HEAP32[$47 >> 2] = HEAPU8[$$0145333$i + 14 >> 0];
      HEAP32[$18 >> 2] = 0;
      $$1$i = 0;
      $$1155$i = $$0154331$i;
      $$2153$i = $$0151332$i;
      $$sroa$0238$2$i = $$sroa$0238$0329$i;
      $$sroa$15$2$i = $$sroa$15$0327$i;
      $$sroa$9$2$i = $$sroa$9$0328$i;
      break L11;
      break;
     }
    default:
     {
      label = 163;
      break L11;
     }
    }
    break;
   }
  case 98:
   {
    if ((HEAP8[$$0145333$i + 5 >> 0] | 0) == 75) if ((HEAP8[$$0145333$i + 6 >> 0] | 0) == 71) if ((HEAP8[$$0145333$i + 7 >> 0] | 0) == 68) {
     switch (HEAP32[$25 >> 2] | 0) {
     case 3:
      {
       if (($74 | 0) != 1) {
        $$0$i174$i = 43;
        label = 63;
        break L4;
       }
       HEAP32[$31 >> 2] = 1;
       $214 = HEAPU8[$81 >> 0] | 0;
       HEAP32[$32 >> 2] = $214;
       HEAP32[$33 >> 2] = $214;
       HEAP32[$34 >> 2] = $214;
       break;
      }
     case 4:
     case 0:
      {
       if (($74 | 0) != 2) {
        $$0$i174$i = 44;
        label = 63;
        break L4;
       }
       HEAP32[$31 >> 2] = 1;
       $222 = HEAPU8[$81 >> 0] << 8 | HEAPU8[$$0145333$i + 9 >> 0];
       HEAP32[$32 >> 2] = $222;
       HEAP32[$33 >> 2] = $222;
       HEAP32[$34 >> 2] = $222;
       break;
      }
     case 6:
     case 2:
      {
       if (($74 | 0) != 6) {
        $$0$i174$i = 45;
        label = 63;
        break L4;
       }
       HEAP32[$31 >> 2] = 1;
       HEAP32[$34 >> 2] = HEAPU8[$81 >> 0] << 8 | HEAPU8[$$0145333$i + 9 >> 0];
       HEAP32[$33 >> 2] = HEAPU8[$$0145333$i + 10 >> 0] << 8 | HEAPU8[$$0145333$i + 11 >> 0];
       HEAP32[$32 >> 2] = HEAPU8[$$0145333$i + 12 >> 0] << 8 | HEAPU8[$$0145333$i + 13 >> 0];
       break;
      }
     default:
      {}
     }
     HEAP32[$18 >> 2] = 0;
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = $$0151332$i;
     $$sroa$0238$2$i = $$sroa$0238$0329$i;
     $$sroa$15$2$i = $$sroa$15$0327$i;
     $$sroa$9$2$i = $$sroa$9$0328$i;
    } else label = 163; else label = 163; else label = 163;
    break;
   }
  case 122:
   {
    if ((HEAP8[$$0145333$i + 5 >> 0] | 0) == 84) if ((HEAP8[$$0145333$i + 6 >> 0] | 0) == 88) if ((HEAP8[$$0145333$i + 7 >> 0] | 0) == 116) if (!(HEAP32[$30 >> 2] | 0)) {
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = $$0151332$i;
     $$sroa$0238$2$i = $$sroa$0238$0329$i;
     $$sroa$15$2$i = $$sroa$15$0327$i;
     $$sroa$9$2$i = $$sroa$9$0328$i;
    } else {
     HEAP32[$6 >> 2] = 0;
     HEAP32[$36 >> 2] = 0;
     HEAP32[$37 >> 2] = 0;
     L96 : do if (!$74) $$046$lcssa$i$i = 0; else {
      $$04649$i$i = 0;
      while (1) {
       if (!(HEAP8[$81 + $$04649$i$i >> 0] | 0)) {
        $$046$lcssa$i$i = $$04649$i$i;
        break L96;
       }
       $291 = $$04649$i$i + 1 | 0;
       if ($291 >>> 0 < $74 >>> 0) $$04649$i$i = $291; else {
        $$046$lcssa$i$i = $291;
        break;
       }
      }
     } while (0);
     $293 = $$046$lcssa$i$i + 2 | 0;
     do if ($74 >>> 0 > $293 >>> 0) if (($$046$lcssa$i$i + -1 | 0) >>> 0 > 78) {
      $$0$i188$i = 0;
      $$045$i$i = 89;
     } else {
      $297 = $$046$lcssa$i$i + 1 | 0;
      $298 = _malloc($297) | 0;
      if (!$298) {
       $$0$i188$i = 0;
       $$045$i$i = 83;
      } else {
       HEAP8[$298 + $$046$lcssa$i$i >> 0] = 0;
       _memcpy($298 | 0, $81 | 0, $$046$lcssa$i$i | 0) | 0;
       if (!(HEAP8[$81 + $297 >> 0] | 0)) if ($74 >>> 0 < $293 >>> 0) {
        $$0$i188$i = $298;
        $$045$i$i = 75;
       } else {
        $305 = $74 - $293 | 0;
        $306 = $81 + $293 | 0;
        $307 = HEAP32[$52 >> 2] | 0;
        if (!$307) $$0$i$i$i = _lodepng_zlib_decompress($6, $37, $306, $305, $3) | 0; else $$0$i$i$i = FUNCTION_TABLE_iiiiii[$307 & 0]($6, $37, $306, $305, $3) | 0;
        if ($$0$i$i$i | 0) {
         $$0$i188$i = $298;
         $$045$i$i = $$0$i$i$i;
         break;
        }
        $312 = HEAP32[$37 >> 2] | 0;
        $313 = $312 + 1 | 0;
        do if ((HEAP32[$36 >> 2] | 0) >>> 0 < $313 >>> 0) {
         $316 = $313 << 1;
         $318 = _realloc(HEAP32[$6 >> 2] | 0, $316) | 0;
         if (!$318) break;
         HEAP32[$36 >> 2] = $316;
         HEAP32[$6 >> 2] = $318;
         $321 = $318;
         label = 99;
        } else {
         $321 = HEAP32[$6 >> 2] | 0;
         label = 99;
        } while (0);
        if ((label | 0) == 99) {
         label = 0;
         HEAP32[$37 >> 2] = $313;
         HEAP8[$321 + $312 >> 0] = 0;
        }
        $$0$i188$i = $298;
        $$045$i$i = _lodepng_add_text($35, $298, HEAP32[$6 >> 2] | 0) | 0;
       } else {
        $$0$i188$i = $298;
        $$045$i$i = 72;
       }
      }
     } else {
      $$0$i188$i = 0;
      $$045$i$i = 75;
     } while (0);
     _free($$0$i188$i);
     HEAP32[$36 >> 2] = 0;
     HEAP32[$37 >> 2] = 0;
     _free(HEAP32[$6 >> 2] | 0);
     HEAP32[$18 >> 2] = $$045$i$i;
     if (!$$045$i$i) {
      $$1$i = 0;
      $$1155$i = $$0154331$i;
      $$2153$i = $$0151332$i;
      $$sroa$0238$2$i = $$sroa$0238$0329$i;
      $$sroa$15$2$i = $$sroa$15$0327$i;
      $$sroa$9$2$i = $$sroa$9$0328$i;
     } else {
      $$sroa$0238$4255$i = $$sroa$0238$0329$i;
      break L4;
     }
    } else label = 163; else label = 163; else label = 163;
    break;
   }
  case 105:
   {
    if ((HEAP8[$$0145333$i + 5 >> 0] | 0) == 84) if ((HEAP8[$$0145333$i + 6 >> 0] | 0) == 88) if ((HEAP8[$$0145333$i + 7 >> 0] | 0) == 116) if (!(HEAP32[$30 >> 2] | 0)) {
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = $$0151332$i;
     $$sroa$0238$2$i = $$sroa$0238$0329$i;
     $$sroa$15$2$i = $$sroa$15$0327$i;
     $$sroa$9$2$i = $$sroa$9$0328$i;
    } else {
     HEAP32[$6 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
     HEAP32[$40 >> 2] = 0;
     L126 : do if ($74 >>> 0 < 5) {
      $$0$i208$i = 0;
      $$0108$i$i = 0;
      $$0109$i$i = 0;
      $$0110$i$i = 30;
     } else {
      $$0111142$i$i = 0;
      while (1) {
       if (!(HEAP8[$81 + $$0111142$i$i >> 0] | 0)) {
        $$0111$lcssa$ph$i$i = $$0111142$i$i;
        break;
       }
       $341 = $$0111142$i$i + 1 | 0;
       if ($341 >>> 0 < $74 >>> 0) $$0111142$i$i = $341; else {
        $$0111$lcssa$ph$i$i = $341;
        break;
       }
      }
      $343 = $$0111$lcssa$ph$i$i + 3 | 0;
      if ($343 >>> 0 < $74 >>> 0) if (($$0111$lcssa$ph$i$i + -1 | 0) >>> 0 > 78) {
       $$0$i208$i = 0;
       $$0108$i$i = 0;
       $$0109$i$i = 0;
       $$0110$i$i = 89;
      } else {
       $347 = $$0111$lcssa$ph$i$i + 1 | 0;
       $348 = _malloc($347) | 0;
       if (!$348) {
        $$0$i208$i = 0;
        $$0108$i$i = 0;
        $$0109$i$i = 0;
        $$0110$i$i = 83;
       } else {
        HEAP8[$348 + $$0111$lcssa$ph$i$i >> 0] = 0;
        _memcpy($348 | 0, $81 | 0, $$0111$lcssa$ph$i$i | 0) | 0;
        $352 = HEAP8[$81 + $347 >> 0] | 0;
        if (!(HEAP8[$81 + ($$0111$lcssa$ph$i$i + 2) >> 0] | 0)) {
         $$1113133$i$i = $343;
         $$1134$i$i = 0;
         while (1) {
          $363 = $$1134$i$i + 1 | 0;
          if (!(HEAP8[$81 + $$1113133$i$i >> 0] | 0)) {
           $$1120$i$i = $$1134$i$i;
           $364 = $363;
           break;
          }
          $$1113133$i$i = $$1113133$i$i + 1 | 0;
          if ($$1113133$i$i >>> 0 >= $74 >>> 0) {
           label = 116;
           break;
          } else $$1134$i$i = $363;
         }
         if ((label | 0) == 116) {
          label = 0;
          $$1120$i$i = $363;
          $364 = $$1134$i$i + 2 | 0;
         }
         $365 = _malloc($364) | 0;
         if (!$365) {
          $$0$i208$i = 0;
          $$0108$i$i = 0;
          $$0109$i$i = $348;
          $$0110$i$i = 83;
         } else {
          HEAP8[$365 + $$1120$i$i >> 0] = 0;
          if ($$1120$i$i | 0) _memcpy($365 | 0, $81 + $343 | 0, $$1120$i$i | 0) | 0;
          $369 = $364 + $343 | 0;
          L146 : do if ($369 >>> 0 < $74 >>> 0) {
           $$2126$i$i = 0;
           $$3125$i$i = $369;
           while (1) {
            $377 = $$2126$i$i + 1 | 0;
            if (!(HEAP8[$81 + $$3125$i$i >> 0] | 0)) {
             $$2118$i$i = $$2126$i$i;
             $378 = $377;
             break L146;
            }
            $$3125$i$i = $$3125$i$i + 1 | 0;
            if ($$3125$i$i >>> 0 >= $74 >>> 0) {
             $$2$lcssa$i194$i = $377;
             label = 124;
             break;
            } else $$2126$i$i = $377;
           }
          } else {
           $$2$lcssa$i194$i = 0;
           label = 124;
          } while (0);
          if ((label | 0) == 124) {
           label = 0;
           $$2118$i$i = $$2$lcssa$i194$i;
           $378 = $$2$lcssa$i194$i + 1 | 0;
          }
          $379 = _malloc($378) | 0;
          if (!$379) {
           $$0$i208$i = 0;
           $$0108$i$i = $365;
           $$0109$i$i = $348;
           $$0110$i$i = 83;
           break;
          }
          HEAP8[$379 + $$2118$i$i >> 0] = 0;
          if ($$2118$i$i | 0) _memcpy($379 | 0, $81 + $369 | 0, $$2118$i$i | 0) | 0;
          $383 = $378 + $369 | 0;
          $spec$select$i197$i = $74 >>> 0 < $383 >>> 0 ? 0 : $74 - $383 | 0;
          do if (!($352 << 24 >> 24)) {
           $405 = $spec$select$i197$i + 1 | 0;
           $406 = $405 << 1;
           $407 = _realloc(0, $406) | 0;
           if (!$407) {
            $$0$i208$i = $379;
            $$0108$i$i = $365;
            $$0109$i$i = $348;
            $$0110$i$i = 83;
            break L126;
           }
           HEAP32[$39 >> 2] = $406;
           HEAP32[$6 >> 2] = $407;
           HEAP32[$40 >> 2] = $405;
           HEAP8[$407 + $spec$select$i197$i >> 0] = 0;
           if (!$spec$select$i197$i) break;
           HEAP8[$407 >> 0] = HEAP8[$81 + $383 >> 0] | 0;
           if (($spec$select$i197$i | 0) == 1) break;
           HEAP8[$407 + 1 >> 0] = HEAP8[$81 + ($383 + 1) >> 0] | 0;
           if (($spec$select$i197$i | 0) == 2) break;
           HEAP8[$407 + 2 >> 0] = HEAP8[$81 + ($383 + 2) >> 0] | 0;
           if (($spec$select$i197$i | 0) == 3) break;
           $422 = 3;
           do {
            HEAP8[(HEAP32[$6 >> 2] | 0) + $422 >> 0] = HEAP8[$81 + ($422 + $383) >> 0] | 0;
            $422 = $422 + 1 | 0;
           } while (($422 | 0) != ($spec$select$i197$i | 0));
          } else {
           $387 = $81 + $383 | 0;
           $388 = HEAP32[$52 >> 2] | 0;
           if (!$388) $$0$i$i199$i = _lodepng_zlib_decompress($6, $40, $387, $spec$select$i197$i, $3) | 0; else $$0$i$i199$i = FUNCTION_TABLE_iiiiii[$388 & 0]($6, $40, $387, $spec$select$i197$i, $3) | 0;
           if ($$0$i$i199$i | 0) {
            $$0$i208$i = $379;
            $$0108$i$i = $365;
            $$0109$i$i = $348;
            $$0110$i$i = $$0$i$i199$i;
            break L126;
           }
           $393 = HEAP32[$39 >> 2] | 0;
           $394 = HEAP32[$40 >> 2] | 0;
           if ($393 >>> 0 < $394 >>> 0) {
            HEAP32[$39 >> 2] = $394;
            $398 = $394;
           } else $398 = $393;
           $396 = $394 + 1 | 0;
           if ($398 >>> 0 < $396 >>> 0) {
            $399 = $396 << 1;
            $401 = _realloc(HEAP32[$6 >> 2] | 0, $399) | 0;
            if (!$401) break;
            HEAP32[$39 >> 2] = $399;
            HEAP32[$6 >> 2] = $401;
            $404 = $401;
           } else $404 = HEAP32[$6 >> 2] | 0;
           HEAP32[$40 >> 2] = $396;
           HEAP8[$404 + $394 >> 0] = 0;
          } while (0);
          $$0$i208$i = $379;
          $$0108$i$i = $365;
          $$0109$i$i = $348;
          $$0110$i$i = _lodepng_add_itext($35, $348, $365, $379, HEAP32[$6 >> 2] | 0) | 0;
         }
        } else {
         $$0$i208$i = 0;
         $$0108$i$i = 0;
         $$0109$i$i = $348;
         $$0110$i$i = 72;
        }
       }
      } else {
       $$0$i208$i = 0;
       $$0108$i$i = 0;
       $$0109$i$i = 0;
       $$0110$i$i = 75;
      }
     } while (0);
     _free($$0109$i$i);
     _free($$0108$i$i);
     _free($$0$i208$i);
     HEAP32[$39 >> 2] = 0;
     HEAP32[$40 >> 2] = 0;
     _free(HEAP32[$6 >> 2] | 0);
     HEAP32[$18 >> 2] = $$0110$i$i;
     if (!$$0110$i$i) {
      $$1$i = 0;
      $$1155$i = $$0154331$i;
      $$2153$i = $$0151332$i;
      $$sroa$0238$2$i = $$sroa$0238$0329$i;
      $$sroa$15$2$i = $$sroa$15$0327$i;
      $$sroa$9$2$i = $$sroa$9$0328$i;
     } else {
      $$sroa$0238$4255$i = $$sroa$0238$0329$i;
      break L4;
     }
    } else label = 163; else label = 163; else label = 163;
    break;
   }
  case 112:
   {
    if ((HEAP8[$$0145333$i + 5 >> 0] | 0) == 72) if ((HEAP8[$$0145333$i + 6 >> 0] | 0) == 89) if ((HEAP8[$$0145333$i + 7 >> 0] | 0) == 115) {
     if (($74 | 0) != 9) {
      label = 160;
      break L4;
     }
     HEAP32[$48 >> 2] = 1;
     HEAP32[$49 >> 2] = HEAPU8[$$0145333$i + 9 >> 0] << 16 | HEAPU8[$81 >> 0] << 24 | HEAPU8[$$0145333$i + 10 >> 0] << 8 | HEAPU8[$$0145333$i + 11 >> 0];
     HEAP32[$50 >> 2] = HEAPU8[$$0145333$i + 13 >> 0] << 16 | HEAPU8[$$0145333$i + 12 >> 0] << 24 | HEAPU8[$$0145333$i + 14 >> 0] << 8 | HEAPU8[$$0145333$i + 15 >> 0];
     HEAP32[$51 >> 2] = HEAPU8[$$0145333$i + 16 >> 0];
     HEAP32[$18 >> 2] = 0;
     $$1$i = 0;
     $$1155$i = $$0154331$i;
     $$2153$i = $$0151332$i;
     $$sroa$0238$2$i = $$sroa$0238$0329$i;
     $$sroa$15$2$i = $$sroa$15$0327$i;
     $$sroa$9$2$i = $$sroa$9$0328$i;
    } else label = 163; else label = 163; else label = 163;
    break;
   }
  default:
   if (!($83 & 32)) {
    label = 162;
    break L4;
   } else label = 163;
  } while (0);
  if ((label | 0) == 163) {
   label = 0;
   if (!(HEAP32[$38 >> 2] | 0)) {
    $$1$i = 0;
    $$1155$i = 1;
    $$2153$i = $$0151332$i;
    $$sroa$0238$2$i = $$sroa$0238$0329$i;
    $$sroa$15$2$i = $$sroa$15$0327$i;
    $$sroa$9$2$i = $$sroa$9$0328$i;
   } else {
    $511 = $$0151332$i + -1 | 0;
    $512 = $3 + 268 + ($511 << 2) | 0;
    $513 = $3 + 280 + ($511 << 2) | 0;
    $514 = $74 + 12 | 0;
    $515 = HEAP32[$513 >> 2] | 0;
    $516 = $515 + $514 | 0;
    if ($516 >>> 0 < $514 >>> 0 | $516 >>> 0 < $515 >>> 0) {
     $$0$i218$ph$i = 77;
     label = 166;
     break;
    }
    $520 = _realloc(HEAP32[$512 >> 2] | 0, $516) | 0;
    if (!$520) {
     $$0$i218$ph$i = 83;
     label = 166;
     break;
    }
    HEAP32[$512 >> 2] = $520;
    HEAP32[$513 >> 2] = $516;
    _memcpy($520 + $515 | 0, $$0145333$i | 0, $514 | 0) | 0;
    HEAP32[$18 >> 2] = 0;
    $$1$i = 0;
    $$1155$i = 1;
    $$2153$i = $$0151332$i;
    $$sroa$0238$2$i = $$sroa$0238$0329$i;
    $$sroa$15$2$i = $$sroa$15$0327$i;
    $$sroa$9$2$i = $$sroa$9$0328$i;
   }
  }
  if (!(HEAP32[$22 >> 2] | $$1155$i)) {
   $539 = HEAPU8[$61 >> 0] << 16 | HEAPU8[$$0145333$i >> 0] << 24 | HEAPU8[$66 >> 0] << 8 | HEAPU8[$71 >> 0];
   $541 = $$0145333$i + ($539 + 8) | 0;
   $558 = HEAPU8[$541 + 1 >> 0] << 16 | HEAPU8[$541 >> 0] << 24 | HEAPU8[$541 + 2 >> 0] << 8 | HEAPU8[$541 + 3 >> 0];
   $559 = $539 + 4 | 0;
   if (!$559) $$09$lcssa$i$i$i = 0; else {
    $$011$i$i$i = 0;
    $$0910$i$i$i = -1;
    do {
     $$0910$i$i$i = HEAP32[11664 + (($$0910$i$i$i & 255 ^ HEAPU8[$82 + $$011$i$i$i >> 0]) << 2) >> 2] ^ $$0910$i$i$i >>> 8;
     $$011$i$i$i = $$011$i$i$i + 1 | 0;
    } while (($$011$i$i$i | 0) != ($559 | 0));
    $$09$lcssa$i$i$i = ~$$0910$i$i$i;
   }
   if (($558 | 0) != ($$09$lcssa$i$i$i | 0)) {
    label = 174;
    break;
   }
  }
  if (!($$1$i << 24 >> 24)) {
   $$2$i = 0;
   $$2147$i = $$0145333$i + ((HEAPU8[$61 >> 0] << 16 | HEAPU8[$$0145333$i >> 0] << 24 | HEAPU8[$66 >> 0] << 8 | HEAPU8[$71 >> 0]) + 12) | 0;
  } else {
   $$2$i = $$1$i;
   $$2147$i = $$0145333$i;
  }
  $978 = (HEAP32[$18 >> 2] | 0) == 0;
  if ($$2$i << 24 >> 24) {
   label = 178;
   break;
  } else {
   $$0145333$i = $$2147$i;
   $$0151332$i = $$2153$i;
   $$0154331$i = $$1155$i;
   $$sroa$0238$0329$i = $$sroa$0238$2$i;
   $$sroa$15$0327$i = $$sroa$15$2$i;
   $$sroa$9$0328$i = $$sroa$9$2$i;
  }
 }
 switch (label | 0) {
 case 5:
  {
   HEAP32[$18 >> 2] = 30;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 7:
  {
   HEAP32[$18 >> 2] = 63;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 10:
  {
   HEAP32[$18 >> 2] = 64;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 20:
  {
   HEAP32[$18 >> 2] = 83;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 30:
  {
   HEAP32[$24 >> 2] = 0;
   $$031$i$i = 83;
   label = 37;
   break;
  }
 case 51:
  {
   HEAP32[$18 >> 2] = $$031$i169$i;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 63:
  {
   HEAP32[$18 >> 2] = $$0$i174$i;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 154:
  {
   HEAP32[$18 >> 2] = 73;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 160:
  {
   HEAP32[$18 >> 2] = 74;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 162:
  {
   HEAP32[$18 >> 2] = 69;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 166:
  {
   HEAP32[$18 >> 2] = $$0$i218$ph$i;
   $$sroa$0238$4255$i = $$sroa$0238$0329$i;
   break;
  }
 case 174:
  {
   HEAP32[$18 >> 2] = 57;
   $$sroa$0238$4255$i = $$sroa$0238$2$i;
   break;
  }
 case 178:
  {
   if ($978) {
    HEAP32[$16 >> 2] = 0;
    $591 = $16 + 8 | 0;
    HEAP32[$591 >> 2] = 0;
    $592 = $16 + 4 | 0;
    HEAP32[$592 >> 2] = 0;
    $593 = HEAP32[$1 >> 2] | 0;
    $594 = HEAP32[$2 >> 2] | 0;
    $596 = $3 + 148 | 0;
    $597 = HEAP32[$596 >> 2] | 0;
    switch (HEAP32[$25 >> 2] | 0) {
    case 3:
    case 0:
     {
      $$0$i$i$i$i221$i = 1;
      break;
     }
    case 2:
     {
      $$0$i$i$i$i221$i = 3;
      break;
     }
    case 4:
     {
      $$0$i$i$i$i221$i = 2;
      break;
     }
    case 6:
     {
      $$0$i$i$i$i221$i = 4;
      break;
     }
    default:
     $$0$i$i$i$i221$i = 0;
    }
    $603 = (((Math_imul(Math_imul(Math_imul($594, $593) | 0, $597) | 0, $$0$i$i$i$i221$i) | 0) + 7 | 0) >>> 3) + $594 | 0;
    do if (!$603) {
     HEAP32[$592 >> 2] = 0;
     label = 189;
    } else {
     $605 = $603 << 1;
     $606 = _realloc(0, $605) | 0;
     if (!$606) {
      HEAP32[$18 >> 2] = 83;
      break;
     } else {
      HEAP32[$591 >> 2] = $605;
      HEAP32[$16 >> 2] = $606;
      $$pr256$pre$i = HEAP32[$18 >> 2] | 0;
      HEAP32[$592 >> 2] = $603;
      if (!$$pr256$pre$i) {
       label = 189;
       break;
      } else break;
     }
    } while (0);
    if ((label | 0) == 189) {
     $609 = HEAP32[$52 >> 2] | 0;
     if (!$609) $$0$i226$i = _lodepng_zlib_decompress($16, $592, $$sroa$0238$2$i, $$sroa$9$2$i, $3) | 0; else $$0$i226$i = FUNCTION_TABLE_iiiiii[$609 & 0]($16, $592, $$sroa$0238$2$i, $$sroa$9$2$i, $3) | 0;
     HEAP32[$18 >> 2] = $$0$i226$i;
     if (!$$0$i226$i) {
      $614 = HEAP32[$1 >> 2] | 0;
      $615 = HEAP32[$2 >> 2] | 0;
      $616 = HEAP32[$25 >> 2] | 0;
      $617 = HEAP32[$596 >> 2] | 0;
      switch ($616 | 0) {
      case 3:
      case 0:
       {
        $$0$i$i$i$i227$i = 1;
        break;
       }
      case 2:
       {
        $$0$i$i$i$i227$i = 3;
        break;
       }
      case 4:
       {
        $$0$i$i$i$i227$i = 2;
        break;
       }
      case 6:
       {
        $$0$i$i$i$i227$i = 4;
        break;
       }
      default:
       $$0$i$i$i$i227$i = 0;
      }
      $622 = ((Math_imul(Math_imul(Math_imul($615, $614) | 0, $617) | 0, $$0$i$i$i$i227$i) | 0) + 7 | 0) >>> 3;
      if (!$622) {
       $$sroa$0$1$ph375$i = 0;
       $631 = $616;
       $633 = $617;
       $640 = $614;
       $644 = $615;
       label = 202;
      } else {
       $625 = _realloc(0, $622 << 1) | 0;
       if (!$625) {
        $$5$i$i$sink = 83;
        $$sroa$0$1262265$i$ph = 0;
        label = 266;
       } else {
        _memset($625 | 0, 0, $622 | 0) | 0;
        $627 = $625;
        if (!(HEAP32[$18 >> 2] | 0)) {
         $$sroa$0$1$ph375$i = $627;
         $631 = HEAP32[$25 >> 2] | 0;
         $633 = HEAP32[$596 >> 2] | 0;
         $640 = HEAP32[$1 >> 2] | 0;
         $644 = HEAP32[$2 >> 2] | 0;
         label = 202;
        } else $$sroa$0$1262265$i = $627;
       }
      }
      L238 : do if ((label | 0) == 202) {
       $629 = $$sroa$0$1$ph375$i;
       $630 = HEAP32[$16 >> 2] | 0;
       switch ($631 | 0) {
       case 3:
       case 0:
        {
         $$0$i$i$i$i$i = 1;
         break;
        }
       case 2:
        {
         $$0$i$i$i$i$i = 3;
         break;
        }
       case 4:
        {
         $$0$i$i$i$i$i = 2;
         break;
        }
       case 6:
        {
         $$0$i$i$i$i$i = 4;
         break;
        }
       default:
        $$0$i$i$i$i$i = 0;
       }
       $632 = Math_imul($$0$i$i$i$i$i, $633) | 0;
       if (!$632) {
        $$5$i$i$sink = 31;
        $$sroa$0$1262265$i$ph = $$sroa$0$1$ph375$i;
        label = 266;
       } else {
        L247 : do if (!(HEAP32[$3 + 140 >> 2] | 0)) {
         if ($632 >>> 0 < 8) {
          $639 = Math_imul($632, $640) | 0;
          $642 = $639 + 7 & -8;
          if (($639 | 0) != ($642 | 0)) {
           $645 = _unfilter($630, $630, $640, $644, $632) | 0;
           if ($645 | 0) {
            $$5$i$i$sink = $645;
            $$sroa$0$1262265$i$ph = $$sroa$0$1$ph375$i;
            label = 266;
            break L238;
           }
           if (($644 | 0) == 0 | ($639 | 0) == 0) break;
           $$02331$us$i$i$i = 0;
           $$02430$us$i$i$i = 0;
           $$032$us$i$i$i = 0;
           while (1) {
            $$01628$us$i$i$i = 0;
            $$12526$us$i$i$i = $$02430$us$i$i$i;
            $$127$us$i$i$i = $$02331$us$i$i$i;
            while (1) {
             $661 = 1 << ($$127$us$i$i$i & 7 ^ 7);
             if (!(1 << ($$12526$us$i$i$i & 7 ^ 7) & HEAPU8[$630 + ($$12526$us$i$i$i >>> 3) >> 0])) {
              $669 = $629 + ($$127$us$i$i$i >>> 3) | 0;
              $$sink177 = $669;
              $$sink178 = ($661 ^ 255) & HEAPU8[$669 >> 0];
             } else {
              $663 = $629 + ($$127$us$i$i$i >>> 3) | 0;
              $$sink177 = $663;
              $$sink178 = $661 | HEAPU8[$663 >> 0];
             }
             HEAP8[$$sink177 >> 0] = $$sink178;
             $$01628$us$i$i$i = $$01628$us$i$i$i + 1 | 0;
             if (($$01628$us$i$i$i | 0) == ($639 | 0)) break; else {
              $$12526$us$i$i$i = $$12526$us$i$i$i + 1 | 0;
              $$127$us$i$i$i = $$127$us$i$i$i + 1 | 0;
             }
            }
            $$032$us$i$i$i = $$032$us$i$i$i + 1 | 0;
            if (($$032$us$i$i$i | 0) == ($644 | 0)) break L247; else {
             $$02331$us$i$i$i = $$02331$us$i$i$i + $639 | 0;
             $$02430$us$i$i$i = $$02430$us$i$i$i + $642 | 0;
            }
           }
          }
         }
         $679 = _unfilter($629, $630, $640, $644, $632) | 0;
         if ($679 | 0) {
          $$5$i$i$sink = $679;
          $$sroa$0$1262265$i$ph = $$sroa$0$1$ph375$i;
          label = 266;
          break L238;
         }
        } else {
         _Adam7_getpassvalues($11, $12, $13, $14, $15, $640, $644, $632);
         L265 : do if ($632 >>> 0 < 8) {
          $$074111$us$i$i = 0;
          $$2112$us$i$i = 0;
          while (1) {
           $684 = $630 + (HEAP32[$14 + ($$074111$us$i$i << 2) >> 2] | 0) | 0;
           $689 = HEAP32[$11 + ($$074111$us$i$i << 2) >> 2] | 0;
           $691 = HEAP32[$12 + ($$074111$us$i$i << 2) >> 2] | 0;
           $692 = _unfilter($684, $630 + (HEAP32[$13 + ($$074111$us$i$i << 2) >> 2] | 0) | 0, $689, $691, $632) | 0;
           $693 = ($692 | 0) == 0;
           $$2$$us$i$i = $693 ? $$2112$us$i$i : $692;
           if (!$693) {
            $$378$i$i = 0;
            $$4$i$i = $692;
            break L265;
           }
           $696 = $630 + (HEAP32[$15 + ($$074111$us$i$i << 2) >> 2] | 0) | 0;
           $697 = Math_imul($689, $632) | 0;
           $699 = $697 + 7 & -8;
           if (!(($691 | 0) == 0 | ($697 | 0) == 0)) {
            $$02331$us$i86$us$i$i = 0;
            $$02430$us$i87$us$i$i = 0;
            $$032$us$i85$us$i$i = 0;
            while (1) {
             $$01628$us$i89$us$i$i = 0;
             $$12526$us$i91$us$i$i = $$02430$us$i87$us$i$i;
             $$127$us$i90$us$i$i = $$02331$us$i86$us$i$i;
             while (1) {
              $714 = 1 << ($$127$us$i90$us$i$i & 7 ^ 7);
              if (!(1 << ($$12526$us$i91$us$i$i & 7 ^ 7) & HEAPU8[$684 + ($$12526$us$i91$us$i$i >>> 3) >> 0])) {
               $722 = $696 + ($$127$us$i90$us$i$i >>> 3) | 0;
               $$sink179 = $722;
               $$sink180 = ($714 ^ 255) & HEAPU8[$722 >> 0];
              } else {
               $716 = $696 + ($$127$us$i90$us$i$i >>> 3) | 0;
               $$sink179 = $716;
               $$sink180 = $714 | HEAPU8[$716 >> 0];
              }
              HEAP8[$$sink179 >> 0] = $$sink180;
              $$01628$us$i89$us$i$i = $$01628$us$i89$us$i$i + 1 | 0;
              if (($$01628$us$i89$us$i$i | 0) == ($697 | 0)) break; else {
               $$12526$us$i91$us$i$i = $$12526$us$i91$us$i$i + 1 | 0;
               $$127$us$i90$us$i$i = $$127$us$i90$us$i$i + 1 | 0;
              }
             }
             $$032$us$i85$us$i$i = $$032$us$i85$us$i$i + 1 | 0;
             if (($$032$us$i85$us$i$i | 0) == ($691 | 0)) break; else {
              $$02331$us$i86$us$i$i = $$02331$us$i86$us$i$i + $697 | 0;
              $$02430$us$i87$us$i$i = $$02430$us$i87$us$i$i + $699 | 0;
             }
            }
           }
           $$074111$us$i$i = $$074111$us$i$i + 1 | 0;
           if ($$074111$us$i$i >>> 0 >= 7) {
            $$2$lcssa$i$i = $$2$$us$i$i;
            label = 235;
            break;
           } else $$2112$us$i$i = $$2$$us$i$i;
          }
         } else {
          $740 = _unfilter($630 + (HEAP32[$14 >> 2] | 0) | 0, $630 + (HEAP32[$13 >> 2] | 0) | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, $632) | 0;
          if (!$740) {
           $752 = _unfilter($630 + (HEAP32[$14 + 4 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 4 >> 2] | 0) | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, $632) | 0;
           if (!$752) {
            $841 = _unfilter($630 + (HEAP32[$14 + 8 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 8 >> 2] | 0) | 0, HEAP32[$11 + 8 >> 2] | 0, HEAP32[$12 + 8 >> 2] | 0, $632) | 0;
            if (!$841) {
             $853 = _unfilter($630 + (HEAP32[$14 + 12 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 12 >> 2] | 0) | 0, HEAP32[$11 + 12 >> 2] | 0, HEAP32[$12 + 12 >> 2] | 0, $632) | 0;
             if (!$853) {
              $865 = _unfilter($630 + (HEAP32[$14 + 16 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 16 >> 2] | 0) | 0, HEAP32[$11 + 16 >> 2] | 0, HEAP32[$12 + 16 >> 2] | 0, $632) | 0;
              if (!$865) {
               $877 = _unfilter($630 + (HEAP32[$14 + 20 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 20 >> 2] | 0) | 0, HEAP32[$11 + 20 >> 2] | 0, HEAP32[$12 + 20 >> 2] | 0, $632) | 0;
               if (!$877) {
                $889 = _unfilter($630 + (HEAP32[$14 + 24 >> 2] | 0) | 0, $630 + (HEAP32[$13 + 24 >> 2] | 0) | 0, HEAP32[$11 + 24 >> 2] | 0, HEAP32[$12 + 24 >> 2] | 0, $632) | 0;
                if (!$889) {
                 $$2$lcssa$i$i = 0;
                 label = 235;
                } else {
                 $$378$i$i = 0;
                 $$4$i$i = $889;
                }
               } else {
                $$378$i$i = 0;
                $$4$i$i = $877;
               }
              } else {
               $$378$i$i = 0;
               $$4$i$i = $865;
              }
             } else {
              $$378$i$i = 0;
              $$4$i$i = $853;
             }
            } else {
             $$378$i$i = 0;
             $$4$i$i = $841;
            }
           } else {
            $$378$i$i = 0;
            $$4$i$i = $752;
           }
          } else {
           $$378$i$i = 0;
           $$4$i$i = $740;
          }
         } while (0);
         if ((label | 0) == 235) {
          _Adam7_getpassvalues($6, $7, $8, $9, $10, $640, $644, $632);
          if ($632 >>> 0 > 7) {
           $755 = $632 >>> 3;
           if ($755 | 0) {
            $$0121$i$i$i = 0;
            do {
             $758 = HEAP32[$7 + ($$0121$i$i$i << 2) >> 2] | 0;
             do if ($758 | 0) {
              $761 = HEAP32[$6 + ($$0121$i$i$i << 2) >> 2] | 0;
              if (!$761) break;
              $$pre164$i$i$i = HEAP32[$10 + ($$0121$i$i$i << 2) >> 2] | 0;
              $$pre165$i$i$i = HEAP32[12784 + ($$0121$i$i$i << 2) >> 2] | 0;
              $$pre166$i$i$i = HEAP32[12752 + ($$0121$i$i$i << 2) >> 2] | 0;
              $$pre167$i$i$i = HEAP32[12720 + ($$0121$i$i$i << 2) >> 2] | 0;
              $$pre168$i$i$i = HEAP32[12688 + ($$0121$i$i$i << 2) >> 2] | 0;
              $$089109$us$i$i$i = 0;
              do {
               $771 = (Math_imul((Math_imul($$089109$us$i$i$i, $$pre166$i$i$i) | 0) + $$pre165$i$i$i | 0, $640) | 0) + $$pre167$i$i$i | 0;
               $772 = Math_imul($$089109$us$i$i$i, $761) | 0;
               $$088105$us$us$i$i$i = 0;
               do {
                $776 = (Math_imul($$088105$us$us$i$i$i + $772 | 0, $755) | 0) + $$pre164$i$i$i | 0;
                $779 = Math_imul($771 + (Math_imul($$088105$us$us$i$i$i, $$pre168$i$i$i) | 0) | 0, $755) | 0;
                $$093104$us$us$i$i$i = 0;
                do {
                 HEAP8[$629 + ($$093104$us$us$i$i$i + $779) >> 0] = HEAP8[$630 + ($776 + $$093104$us$us$i$i$i) >> 0] | 0;
                 $$093104$us$us$i$i$i = $$093104$us$us$i$i$i + 1 | 0;
                } while (($$093104$us$us$i$i$i | 0) != ($755 | 0));
                $$088105$us$us$i$i$i = $$088105$us$us$i$i$i + 1 | 0;
               } while (($$088105$us$us$i$i$i | 0) != ($761 | 0));
               $$089109$us$i$i$i = $$089109$us$i$i$i + 1 | 0;
              } while (($$089109$us$i$i$i | 0) != ($758 | 0));
             } while (0);
             $$0121$i$i$i = $$0121$i$i$i + 1 | 0;
            } while (($$0121$i$i$i | 0) != 7);
           }
          } else {
           $$1149$i$i$i = 0;
           do {
            $789 = HEAP32[$6 + ($$1149$i$i$i << 2) >> 2] | 0;
            $791 = HEAP32[$7 + ($$1149$i$i$i << 2) >> 2] | 0;
            if (!(($789 | 0) == 0 | ($791 | 0) == 0)) {
             $$pre160$i$i$i = HEAP32[12784 + ($$1149$i$i$i << 2) >> 2] | 0;
             $$pre161$i$i$i = HEAP32[12752 + ($$1149$i$i$i << 2) >> 2] | 0;
             $$pre162$i$i$i = HEAP32[12720 + ($$1149$i$i$i << 2) >> 2] | 0;
             $$pre163$i$i$i = HEAP32[12688 + ($$1149$i$i$i << 2) >> 2] | 0;
             $799 = HEAP32[$10 + ($$1149$i$i$i << 2) >> 2] << 3;
             $$091132$us$i$i$i = 0;
             do {
              $801 = Math_imul($$091132$us$i$i$i, $789) | 0;
              $804 = (Math_imul((Math_imul($$091132$us$i$i$i, $$pre161$i$i$i) | 0) + $$pre160$i$i$i | 0, $640) | 0) + $$pre162$i$i$i | 0;
              $$092128$us$us$i$i$i = 0;
              do {
               $$0100122$us$us$i$i$i = Math_imul($804 + (Math_imul($$092128$us$us$i$i$i, $$pre163$i$i$i) | 0) | 0, $632) | 0;
               $$090124$us$us$i$i$i = 0;
               $$099123$us$us$i$i$i = (Math_imul($$092128$us$us$i$i$i + $801 | 0, $632) | 0) + $799 | 0;
               while (1) {
                $813 = (HEAPU8[$630 + ($$099123$us$us$i$i$i >>> 3) >> 0] | 0) >>> ($$099123$us$us$i$i$i & 7 ^ 7) & 1;
                if ($813 | 0) {
                 $820 = $629 + ($$0100122$us$us$i$i$i >>> 3) | 0;
                 HEAP8[$820 >> 0] = $813 << ($$0100122$us$us$i$i$i & 7 ^ 7) | HEAPU8[$820 >> 0];
                }
                $$090124$us$us$i$i$i = $$090124$us$us$i$i$i + 1 | 0;
                if (($$090124$us$us$i$i$i | 0) == ($632 | 0)) break; else {
                 $$0100122$us$us$i$i$i = $$0100122$us$us$i$i$i + 1 | 0;
                 $$099123$us$us$i$i$i = $$099123$us$us$i$i$i + 1 | 0;
                }
               }
               $$092128$us$us$i$i$i = $$092128$us$us$i$i$i + 1 | 0;
              } while (($$092128$us$us$i$i$i | 0) != ($789 | 0));
              $$091132$us$i$i$i = $$091132$us$i$i$i + 1 | 0;
             } while (($$091132$us$i$i$i | 0) != ($791 | 0));
            }
            $$1149$i$i$i = $$1149$i$i$i + 1 | 0;
           } while (($$1149$i$i$i | 0) != 7);
          }
          $$378$i$i = 1;
          $$4$i$i = $$2$lcssa$i$i;
         }
         if (!$$378$i$i) {
          $$5$i$i$sink = $$4$i$i;
          $$sroa$0$1262265$i$ph = $$sroa$0$1$ph375$i;
          label = 266;
          break L238;
         }
        } while (0);
        $$5$i$i$sink = 0;
        $$sroa$0$1262265$i$ph = $$sroa$0$1$ph375$i;
        label = 266;
       }
      } while (0);
      if ((label | 0) == 266) {
       HEAP32[$18 >> 2] = $$5$i$i$sink;
       $$sroa$0$1262265$i = $$sroa$0$1262265$i$ph;
      }
      HEAP32[$0 >> 2] = $$sroa$0$1262265$i;
     }
    }
    HEAP32[$591 >> 2] = 0;
    HEAP32[$592 >> 2] = 0;
    _free(HEAP32[$16 >> 2] | 0);
    $$sroa$0238$4255$i = $$sroa$0238$2$i;
   } else $$sroa$0238$4255$i = $$sroa$0238$2$i;
   break;
  }
 }
 if ((label | 0) == 37) {
  HEAP32[$18 >> 2] = $$031$i$i;
  $$sroa$0238$4255$i = $$sroa$0238$0329$i;
 }
 _free($$sroa$0238$4255$i);
 $$pr = HEAP32[$18 >> 2] | 0;
 if ($$pr | 0) {
  $$1 = $$pr;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if (!(HEAP32[$3 + 24 >> 2] | 0)) {
  $$phi$trans$insert = $3 + 108 | 0;
  $$pre112 = HEAP32[$$phi$trans$insert >> 2] | 0;
  $$pre116 = $3 + 100 | 0;
  $$pre117 = $3 + 144 | 0;
  if ($$pre112 | 0) _free($$pre112);
  HEAP32[$$pre116 >> 2] = HEAP32[$$pre117 >> 2];
  HEAP32[$$pre116 + 4 >> 2] = HEAP32[$$pre117 + 4 >> 2];
  HEAP32[$$pre116 + 8 >> 2] = HEAP32[$$pre117 + 8 >> 2];
  HEAP32[$$pre116 + 12 >> 2] = HEAP32[$$pre117 + 12 >> 2];
  HEAP32[$$pre116 + 16 >> 2] = HEAP32[$$pre117 + 16 >> 2];
  HEAP32[$$pre116 + 20 >> 2] = HEAP32[$$pre117 + 20 >> 2];
  HEAP32[$$pre116 + 24 >> 2] = HEAP32[$$pre117 + 24 >> 2];
  HEAP32[$$pre116 + 28 >> 2] = HEAP32[$$pre117 + 28 >> 2];
  $940 = HEAP32[$23 >> 2] | 0;
  do if ($940 | 0) {
   $942 = _malloc(1024) | 0;
   HEAP32[$$phi$trans$insert >> 2] = $942;
   $944 = HEAP32[$24 >> 2] | 0;
   if (!$942) {
    if (!$944) break;
    HEAP32[$18 >> 2] = 83;
    $$1 = 83;
    STACKTOP = sp;
    return $$1 | 0;
   }
   if ($944 & 1073741823 | 0) {
    HEAP8[$942 >> 0] = HEAP8[$940 >> 0] | 0;
    HEAP8[$942 + 1 >> 0] = HEAP8[$940 + 1 >> 0] | 0;
    if (HEAP32[$24 >> 2] & 1073741823 | 0) {
     $953 = 2;
     do {
      HEAP8[(HEAP32[$$phi$trans$insert >> 2] | 0) + $953 >> 0] = HEAP8[(HEAP32[$23 >> 2] | 0) + $953 >> 0] | 0;
      $953 = $953 + 1 | 0;
     } while ($953 >>> 0 < HEAP32[$24 >> 2] << 2 >>> 0);
    }
   }
  } while (0);
  HEAP32[$18 >> 2] = 0;
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $896 = $3 + 100 | 0;
 $897 = $3 + 144 | 0;
 $898 = HEAP32[$896 >> 2] | 0;
 L369 : do if (($898 | 0) == (HEAP32[$897 >> 2] | 0)) if ((HEAP32[$3 + 104 >> 2] | 0) == (HEAP32[$3 + 148 >> 2] | 0)) {
  $907 = HEAP32[$3 + 116 >> 2] | 0;
  if (($907 | 0) == (HEAP32[$26 >> 2] | 0)) {
   if ($907 | 0) {
    if ((HEAP32[$3 + 120 >> 2] | 0) != (HEAP32[$29 >> 2] | 0)) break;
    if ((HEAP32[$3 + 124 >> 2] | 0) != (HEAP32[$28 >> 2] | 0)) break;
    if ((HEAP32[$3 + 128 >> 2] | 0) != (HEAP32[$27 >> 2] | 0)) break;
   }
   $924 = HEAP32[$3 + 112 >> 2] | 0;
   if (($924 | 0) == (HEAP32[$24 >> 2] | 0)) {
    $927 = $924 << 2;
    if (!$927) {
     $$1 = 0;
     STACKTOP = sp;
     return $$1 | 0;
    }
    $930 = HEAP32[$3 + 108 >> 2] | 0;
    $931 = HEAP32[$23 >> 2] | 0;
    $$024$i = 0;
    while (1) {
     if ((HEAP8[$930 + $$024$i >> 0] | 0) != (HEAP8[$931 + $$024$i >> 0] | 0)) break L369;
     $$024$i = $$024$i + 1 | 0;
     if ($$024$i >>> 0 >= $927 >>> 0) {
      $$1 = 0;
      break;
     }
    }
    STACKTOP = sp;
    return $$1 | 0;
   }
  }
 } while (0);
 $960 = HEAP32[$0 >> 2] | 0;
 switch ($898 | 0) {
 case 6:
 case 2:
  break;
 default:
  if ((HEAP32[$3 + 104 >> 2] | 0) != 8) {
   $$1 = 56;
   STACKTOP = sp;
   return $$1 | 0;
  }
 }
 $964 = HEAP32[$1 >> 2] | 0;
 $965 = HEAP32[$2 >> 2] | 0;
 $967 = HEAP32[$3 + 104 >> 2] | 0;
 switch ($898 | 0) {
 case 3:
 case 0:
  {
   $$0$i$i$i$i = 1;
   break;
  }
 case 2:
  {
   $$0$i$i$i$i = 3;
   break;
  }
 case 4:
  {
   $$0$i$i$i$i = 2;
   break;
  }
 case 6:
  {
   $$0$i$i$i$i = 4;
   break;
  }
 default:
  $$0$i$i$i$i = 0;
 }
 $973 = _malloc(((Math_imul(Math_imul(Math_imul($965, $964) | 0, $967) | 0, $$0$i$i$i$i) | 0) + 7 | 0) >>> 3) | 0;
 HEAP32[$0 >> 2] = $973;
 if (!$973) $storemerge = 83; else $storemerge = _lodepng_convert($973, $960, $896, $897, $964, $965, HEAP32[$3 + 20 >> 2] | 0) | 0;
 HEAP32[$18 >> 2] = $storemerge;
 _free($960);
 $$1 = HEAP32[$18 >> 2] | 0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0198 = 0, $$0200 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024364$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1 = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124463$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2 = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i204 = 0, $$3$i204217 = 0, $$3229$i = 0, $$3235$i = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4230$i = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$7$i = 0, $$7239$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i210Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $100 = 0, $1000 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1016 = 0, $1021 = 0, $1022 = 0, $1025 = 0, $1027 = 0, $1030 = 0, $1035 = 0, $104 = 0, $1041 = 0, $1044 = 0, $1045 = 0, $1052 = 0, $1064 = 0, $1069 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1087 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $119 = 0, $125 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $140 = 0, $142 = 0, $144 = 0, $146 = 0, $151 = 0, $157 = 0, $160 = 0, $163 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $173 = 0, $175 = 0, $178 = 0, $180 = 0, $183 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $2 = 0, $201 = 0, $202 = 0, $210 = 0, $215 = 0, $219 = 0, $225 = 0, $23 = 0, $232 = 0, $236 = 0, $24 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $25 = 0, $253 = 0, $254 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $266 = 0, $267 = 0, $272 = 0, $273 = 0, $276 = 0, $278 = 0, $281 = 0, $286 = 0, $293 = 0, $303 = 0, $307 = 0, $31 = 0, $316 = 0, $319 = 0, $323 = 0, $325 = 0, $326 = 0, $328 = 0, $33 = 0, $330 = 0, $332 = 0, $334 = 0, $336 = 0, $338 = 0, $34 = 0, $340 = 0, $35 = 0, $350 = 0, $351 = 0, $353 = 0, $358 = 0, $36 = 0, $363 = 0, $365 = 0, $368 = 0, $37 = 0, $370 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $382 = 0, $384 = 0, $385 = 0, $387 = 0, $388 = 0, $390 = 0, $391 = 0, $396 = 0, $397 = 0, $402 = 0, $405 = 0, $410 = 0, $414 = 0, $420 = 0, $427 = 0, $431 = 0, $439 = 0, $44 = 0, $442 = 0, $443 = 0, $444 = 0, $448 = 0, $449 = 0, $455 = 0, $460 = 0, $461 = 0, $464 = 0, $466 = 0, $469 = 0, $47 = 0, $474 = 0, $480 = 0, $482 = 0, $484 = 0, $486 = 0, $492 = 0, $504 = 0, $509 = 0, $51 = 0, $516 = 0, $517 = 0, $518 = 0, $527 = 0, $529 = 0, $530 = 0, $532 = 0, $54 = 0, $541 = 0, $545 = 0, $547 = 0, $548 = 0, $549 = 0, $566 = 0, $567 = 0, $568 = 0, $571 = 0, $573 = 0, $575 = 0, $576 = 0, $58 = 0, $582 = 0, $584 = 0, $591 = 0, $593 = 0, $595 = 0, $596 = 0, $597 = 0, $605 = 0, $606 = 0, $609 = 0, $61 = 0, $613 = 0, $616 = 0, $620 = 0, $623 = 0, $629 = 0, $633 = 0, $637 = 0, $64 = 0, $647 = 0, $648 = 0, $654 = 0, $656 = 0, $659 = 0, $66 = 0, $662 = 0, $664 = 0, $668 = 0, $67 = 0, $670 = 0, $675 = 0, $676 = 0, $677 = 0, $683 = 0, $685 = 0, $689 = 0, $69 = 0, $691 = 0, $700 = 0, $702 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $715 = 0, $717 = 0, $721 = 0, $727 = 0, $73 = 0, $731 = 0, $737 = 0, $739 = 0, $745 = 0, $749 = 0, $75 = 0, $750 = 0, $755 = 0, $761 = 0, $766 = 0, $769 = 0, $77 = 0, $770 = 0, $773 = 0, $775 = 0, $777 = 0, $780 = 0, $79 = 0, $791 = 0, $796 = 0, $798 = 0, $801 = 0, $803 = 0, $806 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $813 = 0, $815 = 0, $816 = 0, $818 = 0, $819 = 0, $824 = 0, $825 = 0, $834 = 0, $839 = 0, $84 = 0, $842 = 0, $843 = 0, $849 = 0, $857 = 0, $86 = 0, $863 = 0, $866 = 0, $867 = 0, $868 = 0, $87 = 0, $872 = 0, $873 = 0, $879 = 0, $88 = 0, $884 = 0, $885 = 0, $888 = 0, $89 = 0, $890 = 0, $893 = 0, $898 = 0, $90 = 0, $904 = 0, $906 = 0, $908 = 0, $909 = 0, $916 = 0, $928 = 0, $933 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $950 = 0, $954 = 0, $958 = 0, $960 = 0, $966 = 0, $967 = 0, $969 = 0, $97 = 0, $970 = 0, $972 = 0, $974 = 0, $979 = 0, $980 = 0, $981 = 0, $987 = 0, $989 = 0, $995 = 0, $spec$select$i206 = 0, $spec$select3$i = 0, $spec$select42$i = 0, label = 0, sp = 0, $989$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (!(HEAP32[33114] | 0)) {
  ___pthread_mutex_lock(132480) | 0;
  if (!(HEAP32[33114] | 0)) {
   HEAP32[33116] = 4096;
   HEAP32[33115] = 4096;
   HEAP32[33117] = -1;
   HEAP32[33118] = -1;
   HEAP32[33119] = 2;
   HEAP32[33238] = 2;
   if (!(_pthread_mutexattr_init($1) | 0)) if (!(_pthread_mutex_init(132956, $1) | 0)) {}
   Atomics_store(HEAP32, 33114, $2 & -16 ^ 1431655768) | 0;
  }
  ___pthread_mutex_unlock(132480) | 0;
 }
 if (HEAP32[33238] & 2 | 0) if (___pthread_mutex_lock(132956) | 0) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 do if ($0 >>> 0 < 245) {
  $23 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $24 = $23 >>> 3;
  $25 = HEAP32[33127] | 0;
  $26 = $25 >>> $24;
  if ($26 & 3 | 0) {
   $31 = ($26 & 1 ^ 1) + $24 | 0;
   $33 = 132548 + ($31 << 1 << 2) | 0;
   $34 = $33 + 8 | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   $36 = $35 + 8 | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   do if (($37 | 0) == ($33 | 0)) HEAP32[33127] = $25 & ~(1 << $31); else {
    if ((HEAP32[33131] | 0) >>> 0 > $37 >>> 0) _abort();
    $44 = $37 + 12 | 0;
    if ((HEAP32[$44 >> 2] | 0) == ($35 | 0)) {
     HEAP32[$44 >> 2] = $33;
     HEAP32[$34 >> 2] = $37;
     break;
    } else _abort();
   } while (0);
   $47 = $31 << 3;
   HEAP32[$35 + 4 >> 2] = $47 | 3;
   $51 = $35 + $47 + 4 | 0;
   HEAP32[$51 >> 2] = HEAP32[$51 >> 2] | 1;
   $$2 = $36;
   break;
  }
  $54 = HEAP32[33129] | 0;
  if ($23 >>> 0 > $54 >>> 0) {
   if ($26 | 0) {
    $58 = 2 << $24;
    $61 = $26 << $24 & ($58 | 0 - $58);
    $64 = ($61 & 0 - $61) + -1 | 0;
    $66 = $64 >>> 12 & 16;
    $67 = $64 >>> $66;
    $69 = $67 >>> 5 & 8;
    $71 = $67 >>> $69;
    $73 = $71 >>> 2 & 4;
    $75 = $71 >>> $73;
    $77 = $75 >>> 1 & 2;
    $79 = $75 >>> $77;
    $81 = $79 >>> 1 & 1;
    $84 = ($69 | $66 | $73 | $77 | $81) + ($79 >>> $81) | 0;
    $86 = 132548 + ($84 << 1 << 2) | 0;
    $87 = $86 + 8 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = $88 + 8 | 0;
    $90 = HEAP32[$89 >> 2] | 0;
    do if (($90 | 0) == ($86 | 0)) {
     $94 = $25 & ~(1 << $84);
     HEAP32[33127] = $94;
     $115 = $94;
    } else {
     if ((HEAP32[33131] | 0) >>> 0 > $90 >>> 0) _abort();
     $97 = $90 + 12 | 0;
     if ((HEAP32[$97 >> 2] | 0) == ($88 | 0)) {
      HEAP32[$97 >> 2] = $86;
      HEAP32[$87 >> 2] = $90;
      $115 = $25;
      break;
     } else _abort();
    } while (0);
    $100 = $84 << 3;
    $101 = $100 - $23 | 0;
    HEAP32[$88 + 4 >> 2] = $23 | 3;
    $104 = $88 + $23 | 0;
    HEAP32[$104 + 4 >> 2] = $101 | 1;
    HEAP32[$88 + $100 >> 2] = $101;
    if ($54 | 0) {
     $109 = HEAP32[33132] | 0;
     $110 = $54 >>> 3;
     $112 = 132548 + ($110 << 1 << 2) | 0;
     $113 = 1 << $110;
     if (!($115 & $113)) {
      HEAP32[33127] = $115 | $113;
      $$0200 = $112;
      $$pre$phiZ2D = $112 + 8 | 0;
     } else {
      $118 = $112 + 8 | 0;
      $119 = HEAP32[$118 >> 2] | 0;
      if ((HEAP32[33131] | 0) >>> 0 > $119 >>> 0) _abort(); else {
       $$0200 = $119;
       $$pre$phiZ2D = $118;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $109;
     HEAP32[$$0200 + 12 >> 2] = $109;
     HEAP32[$109 + 8 >> 2] = $$0200;
     HEAP32[$109 + 12 >> 2] = $112;
    }
    HEAP32[33129] = $101;
    HEAP32[33132] = $104;
    $$2 = $89;
    break;
   }
   $125 = HEAP32[33128] | 0;
   if (!$125) {
    $$0198 = $23;
    label = 163;
   } else {
    $129 = ($125 & 0 - $125) + -1 | 0;
    $131 = $129 >>> 12 & 16;
    $132 = $129 >>> $131;
    $134 = $132 >>> 5 & 8;
    $136 = $132 >>> $134;
    $138 = $136 >>> 2 & 4;
    $140 = $136 >>> $138;
    $142 = $140 >>> 1 & 2;
    $144 = $140 >>> $142;
    $146 = $144 >>> 1 & 1;
    $151 = HEAP32[132812 + (($134 | $131 | $138 | $142 | $146) + ($144 >>> $146) << 2) >> 2] | 0;
    $$0189$i = $151;
    $$0190$i = $151;
    $$0191$i = (HEAP32[$151 + 4 >> 2] & -8) - $23 | 0;
    while (1) {
     $157 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$157) {
      $160 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$160) break; else $163 = $160;
     } else $163 = $157;
     $166 = (HEAP32[$163 + 4 >> 2] & -8) - $23 | 0;
     $167 = $166 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $163;
     $$0190$i = $167 ? $163 : $$0190$i;
     $$0191$i = $167 ? $166 : $$0191$i;
    }
    $168 = HEAP32[33131] | 0;
    if ($168 >>> 0 > $$0190$i >>> 0) _abort();
    $170 = $$0190$i + $23 | 0;
    if ($170 >>> 0 <= $$0190$i >>> 0) _abort();
    $173 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $175 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($175 | 0) == ($$0190$i | 0)) {
     $186 = $$0190$i + 20 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $189 = $$0190$i + 16 | 0;
      $190 = HEAP32[$189 >> 2] | 0;
      if (!$190) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $190;
       $$1196$i$ph = $189;
      }
     } else {
      $$1194$i$ph = $187;
      $$1196$i$ph = $186;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $192 = $$1194$i + 20 | 0;
      $193 = HEAP32[$192 >> 2] | 0;
      if (!$193) {
       $195 = $$1194$i + 16 | 0;
       $196 = HEAP32[$195 >> 2] | 0;
       if (!$196) break; else {
        $$1194$i$be = $196;
        $$1196$i$be = $195;
       }
      } else {
       $$1194$i$be = $193;
       $$1196$i$be = $192;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($168 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $178 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($168 >>> 0 > $178 >>> 0) _abort();
     $180 = $178 + 12 | 0;
     if ((HEAP32[$180 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $183 = $175 + 8 | 0;
     if ((HEAP32[$183 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$180 >> 2] = $175;
      HEAP32[$183 >> 2] = $178;
      $$3$i = $175;
      break;
     } else _abort();
    } while (0);
    L90 : do if ($173 | 0) {
     $201 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $202 = 132812 + ($201 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$202 >> 2] | 0)) {
      HEAP32[$202 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[33128] = $125 & ~(1 << $201);
       break L90;
      }
     } else if ((HEAP32[33131] | 0) >>> 0 > $173 >>> 0) _abort(); else {
      $210 = $173 + 16 | 0;
      HEAP32[((HEAP32[$210 >> 2] | 0) == ($$0190$i | 0) ? $210 : $173 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L90; else break;
     } while (0);
     $215 = HEAP32[33131] | 0;
     if ($215 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $173;
     $219 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($219 | 0) if ($215 >>> 0 > $219 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $219;
      HEAP32[$219 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $225 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($225 | 0) if ((HEAP32[33131] | 0) >>> 0 > $225 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $225;
      HEAP32[$225 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $232 = $$0191$i + $23 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $232 | 3;
     $236 = $$0190$i + $232 + 4 | 0;
     HEAP32[$236 >> 2] = HEAP32[$236 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $23 | 3;
     HEAP32[$170 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$170 + $$0191$i >> 2] = $$0191$i;
     if ($54 | 0) {
      $245 = HEAP32[33132] | 0;
      $246 = $54 >>> 3;
      $248 = 132548 + ($246 << 1 << 2) | 0;
      $249 = 1 << $246;
      if (!($249 & $25)) {
       HEAP32[33127] = $249 | $25;
       $$0187$i = $248;
       $$pre$phi$iZ2D = $248 + 8 | 0;
      } else {
       $253 = $248 + 8 | 0;
       $254 = HEAP32[$253 >> 2] | 0;
       if ((HEAP32[33131] | 0) >>> 0 > $254 >>> 0) _abort(); else {
        $$0187$i = $254;
        $$pre$phi$iZ2D = $253;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $245;
      HEAP32[$$0187$i + 12 >> 2] = $245;
      HEAP32[$245 + 8 >> 2] = $$0187$i;
      HEAP32[$245 + 12 >> 2] = $248;
     }
     HEAP32[33129] = $$0191$i;
     HEAP32[33132] = $170;
    }
    $$2 = $$0190$i + 8 | 0;
   }
  } else {
   $$0198 = $23;
   label = 163;
  }
 } else if ($0 >>> 0 > 4294967231) {
  $$0198 = -1;
  label = 163;
 } else {
  $262 = $0 + 11 | 0;
  $263 = $262 & -8;
  $264 = HEAP32[33128] | 0;
  if (!$264) {
   $$0198 = $263;
   label = 163;
  } else {
   $266 = 0 - $263 | 0;
   $267 = $262 >>> 8;
   if (!$267) $$0357$i = 0; else if ($263 >>> 0 > 16777215) $$0357$i = 31; else {
    $272 = ($267 + 1048320 | 0) >>> 16 & 8;
    $273 = $267 << $272;
    $276 = ($273 + 520192 | 0) >>> 16 & 4;
    $278 = $273 << $276;
    $281 = ($278 + 245760 | 0) >>> 16 & 2;
    $286 = 14 - ($276 | $272 | $281) + ($278 << $281 >>> 15) | 0;
    $$0357$i = $263 >>> ($286 + 7 | 0) & 1 | $286 << 1;
   }
   $293 = HEAP32[132812 + ($$0357$i << 2) >> 2] | 0;
   L133 : do if (!$293) {
    $$2353$i = 0;
    $$3$i204 = 0;
    $$3348$i = $266;
    label = 94;
   } else {
    $$0340$i = 0;
    $$0345$i = $266;
    $$0351$i = $293;
    $$0358$i = $263 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $303 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $263 | 0;
     if ($303 >>> 0 < $$0345$i >>> 0) if (!$303) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 98;
      break L133;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $303;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $307 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($307 | 0) == 0 | ($307 | 0) == ($$0351$i | 0) ? $$0361$i : $307;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i204 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 94;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 94) {
    if (($$2353$i | 0) == 0 & ($$3$i204 | 0) == 0) {
     $316 = 2 << $$0357$i;
     $319 = ($316 | 0 - $316) & $264;
     if (!$319) {
      $$0198 = $263;
      label = 163;
      break;
     }
     $323 = ($319 & 0 - $319) + -1 | 0;
     $325 = $323 >>> 12 & 16;
     $326 = $323 >>> $325;
     $328 = $326 >>> 5 & 8;
     $330 = $326 >>> $328;
     $332 = $330 >>> 2 & 4;
     $334 = $330 >>> $332;
     $336 = $334 >>> 1 & 2;
     $338 = $334 >>> $336;
     $340 = $338 >>> 1 & 1;
     $$3$i204217 = 0;
     $$4355$i = HEAP32[132812 + (($328 | $325 | $332 | $336 | $340) + ($338 >>> $340) << 2) >> 2] | 0;
    } else {
     $$3$i204217 = $$3$i204;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i204217;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i204217;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 98;
    }
   }
   if ((label | 0) == 98) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $350 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $263 | 0;
     $351 = $350 >>> 0 < $$434919$i >>> 0;
     $spec$select$i206 = $351 ? $350 : $$434919$i;
     $spec$select3$i = $351 ? $$535618$i : $$420$i;
     $353 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$353) $358 = HEAP32[$$535618$i + 20 >> 2] | 0; else $358 = $353;
     if (!$358) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i206;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i206;
      $$535618$i = $358;
     }
    }
   }
   if (!$$4$lcssa$i) {
    $$0198 = $263;
    label = 163;
   } else if ($$4349$lcssa$i >>> 0 < ((HEAP32[33129] | 0) - $263 | 0) >>> 0) {
    $363 = HEAP32[33131] | 0;
    if ($363 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $365 = $$4$lcssa$i + $263 | 0;
    if ($365 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $368 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $370 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($370 | 0) == ($$4$lcssa$i | 0)) {
     $381 = $$4$lcssa$i + 20 | 0;
     $382 = HEAP32[$381 >> 2] | 0;
     if (!$382) {
      $384 = $$4$lcssa$i + 16 | 0;
      $385 = HEAP32[$384 >> 2] | 0;
      if (!$385) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $385;
       $$1373$i$ph = $384;
      }
     } else {
      $$1369$i$ph = $382;
      $$1373$i$ph = $381;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $387 = $$1369$i + 20 | 0;
      $388 = HEAP32[$387 >> 2] | 0;
      if (!$388) {
       $390 = $$1369$i + 16 | 0;
       $391 = HEAP32[$390 >> 2] | 0;
       if (!$391) break; else {
        $$1369$i$be = $391;
        $$1373$i$be = $390;
       }
      } else {
       $$1369$i$be = $388;
       $$1373$i$be = $387;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($363 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $373 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($363 >>> 0 > $373 >>> 0) _abort();
     $375 = $373 + 12 | 0;
     if ((HEAP32[$375 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $378 = $370 + 8 | 0;
     if ((HEAP32[$378 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$375 >> 2] = $370;
      HEAP32[$378 >> 2] = $373;
      $$3371$i = $370;
      break;
     } else _abort();
    } while (0);
    L187 : do if (!$368) $486 = $264; else {
     $396 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $397 = 132812 + ($396 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$397 >> 2] | 0)) {
      HEAP32[$397 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $402 = $264 & ~(1 << $396);
       HEAP32[33128] = $402;
       $486 = $402;
       break L187;
      }
     } else if ((HEAP32[33131] | 0) >>> 0 > $368 >>> 0) _abort(); else {
      $405 = $368 + 16 | 0;
      HEAP32[((HEAP32[$405 >> 2] | 0) == ($$4$lcssa$i | 0) ? $405 : $368 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $486 = $264;
       break L187;
      } else break;
     } while (0);
     $410 = HEAP32[33131] | 0;
     if ($410 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $368;
     $414 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($414 | 0) if ($410 >>> 0 > $414 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $414;
      HEAP32[$414 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $420 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$420) $486 = $264; else if ((HEAP32[33131] | 0) >>> 0 > $420 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $420;
      HEAP32[$420 + 24 >> 2] = $$3371$i;
      $486 = $264;
      break;
     }
    } while (0);
    L211 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $427 = $$4349$lcssa$i + $263 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $427 | 3;
     $431 = $$4$lcssa$i + $427 + 4 | 0;
     HEAP32[$431 >> 2] = HEAP32[$431 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $263 | 3;
     HEAP32[$365 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$365 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $439 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $442 = 132548 + ($439 << 1 << 2) | 0;
      $443 = HEAP32[33127] | 0;
      $444 = 1 << $439;
      do if (!($443 & $444)) {
       HEAP32[33127] = $443 | $444;
       $$0367$i = $442;
       $$pre$phi$i210Z2D = $442 + 8 | 0;
      } else {
       $448 = $442 + 8 | 0;
       $449 = HEAP32[$448 >> 2] | 0;
       if ((HEAP32[33131] | 0) >>> 0 <= $449 >>> 0) {
        $$0367$i = $449;
        $$pre$phi$i210Z2D = $448;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i210Z2D >> 2] = $365;
      HEAP32[$$0367$i + 12 >> 2] = $365;
      HEAP32[$365 + 8 >> 2] = $$0367$i;
      HEAP32[$365 + 12 >> 2] = $442;
      break;
     }
     $455 = $$4349$lcssa$i >>> 8;
     if (!$455) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $460 = ($455 + 1048320 | 0) >>> 16 & 8;
      $461 = $455 << $460;
      $464 = ($461 + 520192 | 0) >>> 16 & 4;
      $466 = $461 << $464;
      $469 = ($466 + 245760 | 0) >>> 16 & 2;
      $474 = 14 - ($464 | $460 | $469) + ($466 << $469 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($474 + 7 | 0) & 1 | $474 << 1;
     }
     $480 = 132812 + ($$0360$i << 2) | 0;
     HEAP32[$365 + 28 >> 2] = $$0360$i;
     $482 = $365 + 16 | 0;
     HEAP32[$482 + 4 >> 2] = 0;
     HEAP32[$482 >> 2] = 0;
     $484 = 1 << $$0360$i;
     if (!($486 & $484)) {
      HEAP32[33128] = $486 | $484;
      HEAP32[$480 >> 2] = $365;
      HEAP32[$365 + 24 >> 2] = $480;
      HEAP32[$365 + 12 >> 2] = $365;
      HEAP32[$365 + 8 >> 2] = $365;
      break;
     }
     $492 = HEAP32[$480 >> 2] | 0;
     L229 : do if ((HEAP32[$492 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $492; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $492;
      while (1) {
       $509 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $504 = HEAP32[$509 >> 2] | 0;
       if (!$504) break;
       if ((HEAP32[$504 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $504;
        break L229;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $504;
       }
      }
      if ((HEAP32[33131] | 0) >>> 0 > $509 >>> 0) _abort(); else {
       HEAP32[$509 >> 2] = $365;
       HEAP32[$365 + 24 >> 2] = $$034316$i;
       HEAP32[$365 + 12 >> 2] = $365;
       HEAP32[$365 + 8 >> 2] = $365;
       break L211;
      }
     } while (0);
     $516 = $$0343$lcssa$i + 8 | 0;
     $517 = HEAP32[$516 >> 2] | 0;
     $518 = HEAP32[33131] | 0;
     if ($518 >>> 0 <= $517 >>> 0 & $518 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$517 + 12 >> 2] = $365;
      HEAP32[$516 >> 2] = $365;
      HEAP32[$365 + 8 >> 2] = $517;
      HEAP32[$365 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$365 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$2 = $$4$lcssa$i + 8 | 0;
   } else {
    $$0198 = $263;
    label = 163;
   }
  }
 } while (0);
 L243 : do if ((label | 0) == 163) {
  $527 = HEAP32[33129] | 0;
  if ($527 >>> 0 >= $$0198 >>> 0) {
   $529 = $527 - $$0198 | 0;
   $530 = HEAP32[33132] | 0;
   if ($529 >>> 0 > 15) {
    $532 = $530 + $$0198 | 0;
    HEAP32[33132] = $532;
    HEAP32[33129] = $529;
    HEAP32[$532 + 4 >> 2] = $529 | 1;
    HEAP32[$530 + $527 >> 2] = $529;
    HEAP32[$530 + 4 >> 2] = $$0198 | 3;
   } else {
    HEAP32[33129] = 0;
    HEAP32[33132] = 0;
    HEAP32[$530 + 4 >> 2] = $527 | 3;
    $541 = $530 + $527 + 4 | 0;
    HEAP32[$541 >> 2] = HEAP32[$541 >> 2] | 1;
   }
   $$2 = $530 + 8 | 0;
   break;
  }
  $545 = HEAP32[33130] | 0;
  if ($545 >>> 0 > $$0198 >>> 0) {
   $547 = $545 - $$0198 | 0;
   HEAP32[33130] = $547;
   $548 = HEAP32[33133] | 0;
   $549 = $548 + $$0198 | 0;
   HEAP32[33133] = $549;
   HEAP32[$549 + 4 >> 2] = $547 | 1;
   HEAP32[$548 + 4 >> 2] = $$0198 | 3;
   $$2 = $548 + 8 | 0;
   break;
  }
  if (!(HEAP32[33114] | 0)) {
   ___pthread_mutex_lock(132480) | 0;
   if (!(HEAP32[33114] | 0)) {
    HEAP32[33116] = 4096;
    HEAP32[33115] = 4096;
    HEAP32[33117] = -1;
    HEAP32[33118] = -1;
    HEAP32[33119] = 2;
    HEAP32[33238] = 2;
    if (!(_pthread_mutexattr_init($1) | 0)) if (!(_pthread_mutex_init(132956, $1) | 0)) {}
    Atomics_store(HEAP32, 33114, $2 & -16 ^ 1431655768) | 0;
   }
   ___pthread_mutex_unlock(132480) | 0;
  }
  $566 = $$0198 + 48 | 0;
  $567 = HEAP32[33116] | 0;
  $568 = $$0198 + 47 | 0;
  $571 = $567 + $568 & 0 - $567;
  if ($571 >>> 0 > $$0198 >>> 0) {
   $573 = HEAP32[33237] | 0;
   if ($573 | 0) {
    $575 = HEAP32[33235] | 0;
    $576 = $575 + $571 | 0;
    if ($576 >>> 0 <= $575 >>> 0 | $576 >>> 0 > $573 >>> 0) {
     $$2 = 0;
     break;
    }
   }
   if (!(HEAP32[33238] & 4)) {
    $582 = HEAP32[33133] | 0;
    L271 : do if (!$582) label = 186; else {
     $$0$i$i = 132984;
     while (1) {
      $584 = HEAP32[$$0$i$i >> 2] | 0;
      if ($584 >>> 0 <= $582 >>> 0) if (($584 + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $582 >>> 0) break;
      $591 = HEAP32[$$0$i$i + 8 >> 2] | 0;
      if (!$591) {
       label = 186;
       break L271;
      } else $$0$i$i = $591;
     }
     ___pthread_mutex_lock(132480) | 0;
     $616 = HEAP32[33116] | 0;
     $620 = $568 - (HEAP32[33130] | 0) + $616 & 0 - $616;
     if ($620 >>> 0 < 2147483647) {
      $623 = _sbrk($620 | 0) | 0;
      if (($623 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0)) if (($623 | 0) == (-1 | 0)) {
       $$2234243136$i = $620;
       label = 200;
      } else {
       $$3229$i = $623;
       $$3235$i = $620;
      } else {
       $$2247$ph$i = $623;
       $$2253$ph$i = $620;
       label = 194;
      }
     } else {
      $$2234243136$i = 0;
      label = 200;
     }
    } while (0);
    do if ((label | 0) == 186) {
     ___pthread_mutex_lock(132480) | 0;
     $593 = _sbrk(0) | 0;
     if (($593 | 0) == (-1 | 0)) {
      $$2234243136$i = 0;
      label = 200;
     } else {
      $595 = $593;
      $596 = HEAP32[33115] | 0;
      $597 = $596 + -1 | 0;
      $spec$select42$i = (($597 & $595 | 0) == 0 ? 0 : ($597 + $595 & 0 - $596) - $595 | 0) + $571 | 0;
      $605 = HEAP32[33235] | 0;
      $606 = $spec$select42$i + $605 | 0;
      if ($spec$select42$i >>> 0 > $$0198 >>> 0 & $spec$select42$i >>> 0 < 2147483647) {
       $609 = HEAP32[33237] | 0;
       if ($609 | 0) if ($606 >>> 0 <= $605 >>> 0 | $606 >>> 0 > $609 >>> 0) {
        $$2234243136$i = 0;
        label = 200;
        break;
       }
       $613 = _sbrk($spec$select42$i | 0) | 0;
       if (($613 | 0) == ($593 | 0)) {
        $$3229$i = $593;
        $$3235$i = $spec$select42$i;
       } else {
        $$2247$ph$i = $613;
        $$2253$ph$i = $spec$select42$i;
        label = 194;
       }
      } else {
       $$2234243136$i = 0;
       label = 200;
      }
     }
    } while (0);
    do if ((label | 0) == 194) {
     $629 = 0 - $$2253$ph$i | 0;
     if (!($566 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
      $$2234243136$i = 0;
      label = 200;
      break;
     } else {
      $$3229$i = $$2247$ph$i;
      $$3235$i = $$2253$ph$i;
      break;
     }
     $633 = HEAP32[33116] | 0;
     $637 = $568 - $$2253$ph$i + $633 & 0 - $633;
     if ($637 >>> 0 < 2147483647) if ((_sbrk($637 | 0) | 0) == (-1 | 0)) {
      _sbrk($629 | 0) | 0;
      $$2234243136$i = 0;
      label = 200;
      break;
     } else {
      $$3229$i = $$2247$ph$i;
      $$3235$i = $637 + $$2253$ph$i | 0;
      break;
     } else {
      $$3229$i = $$2247$ph$i;
      $$3235$i = $$2253$ph$i;
     }
    } while (0);
    if ((label | 0) == 200) {
     HEAP32[33238] = HEAP32[33238] | 4;
     $$3229$i = -1;
     $$3235$i = $$2234243136$i;
    }
    ___pthread_mutex_unlock(132480) | 0;
    $$4230$i = $$3229$i;
    $$4236$i = $$3235$i;
   } else {
    $$4230$i = -1;
    $$4236$i = 0;
   }
   if ($571 >>> 0 < 2147483647 & ($$4230$i | 0) == (-1 | 0)) {
    ___pthread_mutex_lock(132480) | 0;
    $647 = _sbrk($571 | 0) | 0;
    $648 = _sbrk(0) | 0;
    ___pthread_mutex_unlock(132480) | 0;
    $654 = $648 - $647 | 0;
    $656 = $654 >>> 0 > ($$0198 + 40 | 0) >>> 0;
    if ($647 >>> 0 < $648 >>> 0 & (($647 | 0) != (-1 | 0) & ($648 | 0) != (-1 | 0))) {
     $$7$i = $656 ? $647 : -1;
     $$7239$i = $656 ? $654 : $$4236$i;
     label = 204;
    }
   } else {
    $$7$i = $$4230$i;
    $$7239$i = $$4236$i;
    label = 204;
   }
   if ((label | 0) == 204) if (($$7$i | 0) != (-1 | 0)) {
    $659 = (HEAP32[33235] | 0) + $$7239$i | 0;
    HEAP32[33235] = $659;
    if ($659 >>> 0 > (HEAP32[33236] | 0) >>> 0) HEAP32[33236] = $659;
    $662 = HEAP32[33133] | 0;
    L309 : do if (!$662) {
     $664 = HEAP32[33131] | 0;
     if (($664 | 0) == 0 | $$7$i >>> 0 < $664 >>> 0) HEAP32[33131] = $$7$i;
     HEAP32[33246] = $$7$i;
     HEAP32[33247] = $$7239$i;
     HEAP32[33249] = 0;
     HEAP32[33136] = HEAP32[33114];
     HEAP32[33135] = -1;
     HEAP32[33140] = 132548;
     HEAP32[33139] = 132548;
     HEAP32[33142] = 132556;
     HEAP32[33141] = 132556;
     HEAP32[33144] = 132564;
     HEAP32[33143] = 132564;
     HEAP32[33146] = 132572;
     HEAP32[33145] = 132572;
     HEAP32[33148] = 132580;
     HEAP32[33147] = 132580;
     HEAP32[33150] = 132588;
     HEAP32[33149] = 132588;
     HEAP32[33152] = 132596;
     HEAP32[33151] = 132596;
     HEAP32[33154] = 132604;
     HEAP32[33153] = 132604;
     HEAP32[33156] = 132612;
     HEAP32[33155] = 132612;
     HEAP32[33158] = 132620;
     HEAP32[33157] = 132620;
     HEAP32[33160] = 132628;
     HEAP32[33159] = 132628;
     HEAP32[33162] = 132636;
     HEAP32[33161] = 132636;
     HEAP32[33164] = 132644;
     HEAP32[33163] = 132644;
     HEAP32[33166] = 132652;
     HEAP32[33165] = 132652;
     HEAP32[33168] = 132660;
     HEAP32[33167] = 132660;
     HEAP32[33170] = 132668;
     HEAP32[33169] = 132668;
     HEAP32[33172] = 132676;
     HEAP32[33171] = 132676;
     HEAP32[33174] = 132684;
     HEAP32[33173] = 132684;
     HEAP32[33176] = 132692;
     HEAP32[33175] = 132692;
     HEAP32[33178] = 132700;
     HEAP32[33177] = 132700;
     HEAP32[33180] = 132708;
     HEAP32[33179] = 132708;
     HEAP32[33182] = 132716;
     HEAP32[33181] = 132716;
     HEAP32[33184] = 132724;
     HEAP32[33183] = 132724;
     HEAP32[33186] = 132732;
     HEAP32[33185] = 132732;
     HEAP32[33188] = 132740;
     HEAP32[33187] = 132740;
     HEAP32[33190] = 132748;
     HEAP32[33189] = 132748;
     HEAP32[33192] = 132756;
     HEAP32[33191] = 132756;
     HEAP32[33194] = 132764;
     HEAP32[33193] = 132764;
     HEAP32[33196] = 132772;
     HEAP32[33195] = 132772;
     HEAP32[33198] = 132780;
     HEAP32[33197] = 132780;
     HEAP32[33200] = 132788;
     HEAP32[33199] = 132788;
     HEAP32[33202] = 132796;
     HEAP32[33201] = 132796;
     $668 = $$7239$i + -40 | 0;
     $670 = $$7$i + 8 | 0;
     $675 = ($670 & 7 | 0) == 0 ? 0 : 0 - $670 & 7;
     $676 = $$7$i + $675 | 0;
     $677 = $668 - $675 | 0;
     HEAP32[33133] = $676;
     HEAP32[33130] = $677;
     HEAP32[$676 + 4 >> 2] = $677 | 1;
     HEAP32[$$7$i + $668 + 4 >> 2] = 40;
     HEAP32[33134] = HEAP32[33118];
    } else {
     $$024364$i = 132984;
     while (1) {
      $683 = HEAP32[$$024364$i >> 2] | 0;
      $685 = HEAP32[$$024364$i + 4 >> 2] | 0;
      if (($$7$i | 0) == ($683 + $685 | 0)) {
       label = 214;
       break;
      }
      $689 = HEAP32[$$024364$i + 8 >> 2] | 0;
      if (!$689) break; else $$024364$i = $689;
     }
     if ((label | 0) == 214) {
      $691 = $$024364$i + 4 | 0;
      if (!(HEAP32[$$024364$i + 12 >> 2] & 8)) if ($$7$i >>> 0 > $662 >>> 0 & $683 >>> 0 <= $662 >>> 0) {
       HEAP32[$691 >> 2] = $685 + $$7239$i;
       $700 = (HEAP32[33130] | 0) + $$7239$i | 0;
       $702 = $662 + 8 | 0;
       $707 = ($702 & 7 | 0) == 0 ? 0 : 0 - $702 & 7;
       $708 = $662 + $707 | 0;
       $709 = $700 - $707 | 0;
       HEAP32[33133] = $708;
       HEAP32[33130] = $709;
       HEAP32[$708 + 4 >> 2] = $709 | 1;
       HEAP32[$662 + $700 + 4 >> 2] = 40;
       HEAP32[33134] = HEAP32[33118];
       break;
      }
     }
     $715 = HEAP32[33131] | 0;
     if ($$7$i >>> 0 < $715 >>> 0) {
      HEAP32[33131] = $$7$i;
      $780 = $$7$i;
     } else $780 = $715;
     $717 = $$7$i + $$7239$i | 0;
     $$124463$i = 132984;
     while (1) {
      if ((HEAP32[$$124463$i >> 2] | 0) == ($717 | 0)) {
       label = 222;
       break;
      }
      $721 = HEAP32[$$124463$i + 8 >> 2] | 0;
      if (!$721) break; else $$124463$i = $721;
     }
     if ((label | 0) == 222) if (!(HEAP32[$$124463$i + 12 >> 2] & 8)) {
      HEAP32[$$124463$i >> 2] = $$7$i;
      $727 = $$124463$i + 4 | 0;
      HEAP32[$727 >> 2] = (HEAP32[$727 >> 2] | 0) + $$7239$i;
      $731 = $$7$i + 8 | 0;
      $737 = $$7$i + (($731 & 7 | 0) == 0 ? 0 : 0 - $731 & 7) | 0;
      $739 = $717 + 8 | 0;
      $745 = $717 + (($739 & 7 | 0) == 0 ? 0 : 0 - $739 & 7) | 0;
      $749 = $737 + $$0198 | 0;
      $750 = $745 - $737 - $$0198 | 0;
      HEAP32[$737 + 4 >> 2] = $$0198 | 3;
      L332 : do if (($662 | 0) == ($745 | 0)) {
       $755 = (HEAP32[33130] | 0) + $750 | 0;
       HEAP32[33130] = $755;
       HEAP32[33133] = $749;
       HEAP32[$749 + 4 >> 2] = $755 | 1;
      } else {
       if ((HEAP32[33132] | 0) == ($745 | 0)) {
        $761 = (HEAP32[33129] | 0) + $750 | 0;
        HEAP32[33129] = $761;
        HEAP32[33132] = $749;
        HEAP32[$749 + 4 >> 2] = $761 | 1;
        HEAP32[$749 + $761 >> 2] = $761;
        break;
       }
       $766 = HEAP32[$745 + 4 >> 2] | 0;
       if (($766 & 3 | 0) == 1) {
        $769 = $766 & -8;
        $770 = $766 >>> 3;
        L340 : do if ($766 >>> 0 < 256) {
         $773 = HEAP32[$745 + 8 >> 2] | 0;
         $775 = HEAP32[$745 + 12 >> 2] | 0;
         $777 = 132548 + ($770 << 1 << 2) | 0;
         do if (($773 | 0) != ($777 | 0)) {
          if ($780 >>> 0 > $773 >>> 0) _abort();
          if ((HEAP32[$773 + 12 >> 2] | 0) == ($745 | 0)) break;
          _abort();
         } while (0);
         if (($775 | 0) == ($773 | 0)) {
          HEAP32[33127] = HEAP32[33127] & ~(1 << $770);
          break;
         }
         do if (($775 | 0) == ($777 | 0)) $$pre$phi17$i$iZ2D = $775 + 8 | 0; else {
          if ($780 >>> 0 > $775 >>> 0) _abort();
          $791 = $775 + 8 | 0;
          if ((HEAP32[$791 >> 2] | 0) == ($745 | 0)) {
           $$pre$phi17$i$iZ2D = $791;
           break;
          }
          _abort();
         } while (0);
         HEAP32[$773 + 12 >> 2] = $775;
         HEAP32[$$pre$phi17$i$iZ2D >> 2] = $773;
        } else {
         $796 = HEAP32[$745 + 24 >> 2] | 0;
         $798 = HEAP32[$745 + 12 >> 2] | 0;
         do if (($798 | 0) == ($745 | 0)) {
          $809 = $745 + 16 | 0;
          $810 = $809 + 4 | 0;
          $811 = HEAP32[$810 >> 2] | 0;
          if (!$811) {
           $813 = HEAP32[$809 >> 2] | 0;
           if (!$813) {
            $$3$i$i = 0;
            break;
           } else {
            $$1290$i$i$ph = $813;
            $$1292$i$i$ph = $809;
           }
          } else {
           $$1290$i$i$ph = $811;
           $$1292$i$i$ph = $810;
          }
          $$1290$i$i = $$1290$i$i$ph;
          $$1292$i$i = $$1292$i$i$ph;
          while (1) {
           $815 = $$1290$i$i + 20 | 0;
           $816 = HEAP32[$815 >> 2] | 0;
           if (!$816) {
            $818 = $$1290$i$i + 16 | 0;
            $819 = HEAP32[$818 >> 2] | 0;
            if (!$819) break; else {
             $$1290$i$i$be = $819;
             $$1292$i$i$be = $818;
            }
           } else {
            $$1290$i$i$be = $816;
            $$1292$i$i$be = $815;
           }
           $$1290$i$i = $$1290$i$i$be;
           $$1292$i$i = $$1292$i$i$be;
          }
          if ($780 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
           HEAP32[$$1292$i$i >> 2] = 0;
           $$3$i$i = $$1290$i$i;
           break;
          }
         } else {
          $801 = HEAP32[$745 + 8 >> 2] | 0;
          if ($780 >>> 0 > $801 >>> 0) _abort();
          $803 = $801 + 12 | 0;
          if ((HEAP32[$803 >> 2] | 0) != ($745 | 0)) _abort();
          $806 = $798 + 8 | 0;
          if ((HEAP32[$806 >> 2] | 0) == ($745 | 0)) {
           HEAP32[$803 >> 2] = $798;
           HEAP32[$806 >> 2] = $801;
           $$3$i$i = $798;
           break;
          } else _abort();
         } while (0);
         if (!$796) break;
         $824 = HEAP32[$745 + 28 >> 2] | 0;
         $825 = 132812 + ($824 << 2) | 0;
         do if ((HEAP32[$825 >> 2] | 0) == ($745 | 0)) {
          HEAP32[$825 >> 2] = $$3$i$i;
          if ($$3$i$i | 0) break;
          HEAP32[33128] = HEAP32[33128] & ~(1 << $824);
          break L340;
         } else if ((HEAP32[33131] | 0) >>> 0 > $796 >>> 0) _abort(); else {
          $834 = $796 + 16 | 0;
          HEAP32[((HEAP32[$834 >> 2] | 0) == ($745 | 0) ? $834 : $796 + 20 | 0) >> 2] = $$3$i$i;
          if (!$$3$i$i) break L340; else break;
         } while (0);
         $839 = HEAP32[33131] | 0;
         if ($839 >>> 0 > $$3$i$i >>> 0) _abort();
         HEAP32[$$3$i$i + 24 >> 2] = $796;
         $842 = $745 + 16 | 0;
         $843 = HEAP32[$842 >> 2] | 0;
         do if ($843 | 0) if ($839 >>> 0 > $843 >>> 0) _abort(); else {
          HEAP32[$$3$i$i + 16 >> 2] = $843;
          HEAP32[$843 + 24 >> 2] = $$3$i$i;
          break;
         } while (0);
         $849 = HEAP32[$842 + 4 >> 2] | 0;
         if (!$849) break;
         if ((HEAP32[33131] | 0) >>> 0 > $849 >>> 0) _abort(); else {
          HEAP32[$$3$i$i + 20 >> 2] = $849;
          HEAP32[$849 + 24 >> 2] = $$3$i$i;
          break;
         }
        } while (0);
        $$0$i16$i = $745 + $769 | 0;
        $$0286$i$i = $769 + $750 | 0;
       } else {
        $$0$i16$i = $745;
        $$0286$i$i = $750;
       }
       $857 = $$0$i16$i + 4 | 0;
       HEAP32[$857 >> 2] = HEAP32[$857 >> 2] & -2;
       HEAP32[$749 + 4 >> 2] = $$0286$i$i | 1;
       HEAP32[$749 + $$0286$i$i >> 2] = $$0286$i$i;
       $863 = $$0286$i$i >>> 3;
       if ($$0286$i$i >>> 0 < 256) {
        $866 = 132548 + ($863 << 1 << 2) | 0;
        $867 = HEAP32[33127] | 0;
        $868 = 1 << $863;
        do if (!($867 & $868)) {
         HEAP32[33127] = $867 | $868;
         $$0294$i$i = $866;
         $$pre$phi$i$iZ2D = $866 + 8 | 0;
        } else {
         $872 = $866 + 8 | 0;
         $873 = HEAP32[$872 >> 2] | 0;
         if ((HEAP32[33131] | 0) >>> 0 <= $873 >>> 0) {
          $$0294$i$i = $873;
          $$pre$phi$i$iZ2D = $872;
          break;
         }
         _abort();
        } while (0);
        HEAP32[$$pre$phi$i$iZ2D >> 2] = $749;
        HEAP32[$$0294$i$i + 12 >> 2] = $749;
        HEAP32[$749 + 8 >> 2] = $$0294$i$i;
        HEAP32[$749 + 12 >> 2] = $866;
        break;
       }
       $879 = $$0286$i$i >>> 8;
       do if (!$879) $$0295$i$i = 0; else {
        if ($$0286$i$i >>> 0 > 16777215) {
         $$0295$i$i = 31;
         break;
        }
        $884 = ($879 + 1048320 | 0) >>> 16 & 8;
        $885 = $879 << $884;
        $888 = ($885 + 520192 | 0) >>> 16 & 4;
        $890 = $885 << $888;
        $893 = ($890 + 245760 | 0) >>> 16 & 2;
        $898 = 14 - ($888 | $884 | $893) + ($890 << $893 >>> 15) | 0;
        $$0295$i$i = $$0286$i$i >>> ($898 + 7 | 0) & 1 | $898 << 1;
       } while (0);
       $904 = 132812 + ($$0295$i$i << 2) | 0;
       HEAP32[$749 + 28 >> 2] = $$0295$i$i;
       $906 = $749 + 16 | 0;
       HEAP32[$906 + 4 >> 2] = 0;
       HEAP32[$906 >> 2] = 0;
       $908 = HEAP32[33128] | 0;
       $909 = 1 << $$0295$i$i;
       if (!($908 & $909)) {
        HEAP32[33128] = $908 | $909;
        HEAP32[$904 >> 2] = $749;
        HEAP32[$749 + 24 >> 2] = $904;
        HEAP32[$749 + 12 >> 2] = $749;
        HEAP32[$749 + 8 >> 2] = $749;
        break;
       }
       $916 = HEAP32[$904 >> 2] | 0;
       L425 : do if ((HEAP32[$916 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $916; else {
        $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
        $$028810$i$i = $916;
        while (1) {
         $933 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
         $928 = HEAP32[$933 >> 2] | 0;
         if (!$928) break;
         if ((HEAP32[$928 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
          $$0288$lcssa$i$i = $928;
          break L425;
         } else {
          $$028711$i$i = $$028711$i$i << 1;
          $$028810$i$i = $928;
         }
        }
        if ((HEAP32[33131] | 0) >>> 0 > $933 >>> 0) _abort(); else {
         HEAP32[$933 >> 2] = $749;
         HEAP32[$749 + 24 >> 2] = $$028810$i$i;
         HEAP32[$749 + 12 >> 2] = $749;
         HEAP32[$749 + 8 >> 2] = $749;
         break L332;
        }
       } while (0);
       $940 = $$0288$lcssa$i$i + 8 | 0;
       $941 = HEAP32[$940 >> 2] | 0;
       $942 = HEAP32[33131] | 0;
       if ($942 >>> 0 <= $941 >>> 0 & $942 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
        HEAP32[$941 + 12 >> 2] = $749;
        HEAP32[$940 >> 2] = $749;
        HEAP32[$749 + 8 >> 2] = $941;
        HEAP32[$749 + 12 >> 2] = $$0288$lcssa$i$i;
        HEAP32[$749 + 24 >> 2] = 0;
        break;
       } else _abort();
      } while (0);
      $$2 = $737 + 8 | 0;
      break L243;
     }
     $$0$i$i$i = 132984;
     while (1) {
      $950 = HEAP32[$$0$i$i$i >> 2] | 0;
      if ($950 >>> 0 <= $662 >>> 0) {
       $954 = $950 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
       if ($954 >>> 0 > $662 >>> 0) break;
      }
      $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
     }
     $958 = $954 + -47 | 0;
     $960 = $958 + 8 | 0;
     $966 = $958 + (($960 & 7 | 0) == 0 ? 0 : 0 - $960 & 7) | 0;
     $967 = $662 + 16 | 0;
     $969 = $966 >>> 0 < $967 >>> 0 ? $662 : $966;
     $970 = $969 + 8 | 0;
     $972 = $$7239$i + -40 | 0;
     $974 = $$7$i + 8 | 0;
     $979 = ($974 & 7 | 0) == 0 ? 0 : 0 - $974 & 7;
     $980 = $$7$i + $979 | 0;
     $981 = $972 - $979 | 0;
     HEAP32[33133] = $980;
     HEAP32[33130] = $981;
     HEAP32[$980 + 4 >> 2] = $981 | 1;
     HEAP32[$$7$i + $972 + 4 >> 2] = 40;
     HEAP32[33134] = HEAP32[33118];
     $987 = $969 + 4 | 0;
     HEAP32[$987 >> 2] = 27;
     HEAP32[$970 >> 2] = HEAP32[33246];
     HEAP32[$970 + 4 >> 2] = HEAP32[33247];
     HEAP32[$970 + 8 >> 2] = HEAP32[33248];
     HEAP32[$970 + 12 >> 2] = HEAP32[33249];
     HEAP32[33246] = $$7$i;
     HEAP32[33247] = $$7239$i;
     HEAP32[33249] = 0;
     HEAP32[33248] = $970;
     $989 = $969 + 24 | 0;
     do {
      $989$looptemp = $989;
      $989 = $989 + 4 | 0;
      HEAP32[$989 >> 2] = 7;
     } while (($989$looptemp + 8 | 0) >>> 0 < $954 >>> 0);
     if (($969 | 0) != ($662 | 0)) {
      $995 = $969 - $662 | 0;
      HEAP32[$987 >> 2] = HEAP32[$987 >> 2] & -2;
      HEAP32[$662 + 4 >> 2] = $995 | 1;
      HEAP32[$969 >> 2] = $995;
      $1000 = $995 >>> 3;
      if ($995 >>> 0 < 256) {
       $1003 = 132548 + ($1000 << 1 << 2) | 0;
       $1004 = HEAP32[33127] | 0;
       $1005 = 1 << $1000;
       do if (!($1004 & $1005)) {
        HEAP32[33127] = $1004 | $1005;
        $$0211$i$i = $1003;
        $$pre$phi$i18$iZ2D = $1003 + 8 | 0;
       } else {
        $1009 = $1003 + 8 | 0;
        $1010 = HEAP32[$1009 >> 2] | 0;
        if ((HEAP32[33131] | 0) >>> 0 <= $1010 >>> 0) {
         $$0211$i$i = $1010;
         $$pre$phi$i18$iZ2D = $1009;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$$pre$phi$i18$iZ2D >> 2] = $662;
       HEAP32[$$0211$i$i + 12 >> 2] = $662;
       HEAP32[$662 + 8 >> 2] = $$0211$i$i;
       HEAP32[$662 + 12 >> 2] = $1003;
       break;
      }
      $1016 = $995 >>> 8;
      do if (!$1016) $$0212$i$i = 0; else {
       if ($995 >>> 0 > 16777215) {
        $$0212$i$i = 31;
        break;
       }
       $1021 = ($1016 + 1048320 | 0) >>> 16 & 8;
       $1022 = $1016 << $1021;
       $1025 = ($1022 + 520192 | 0) >>> 16 & 4;
       $1027 = $1022 << $1025;
       $1030 = ($1027 + 245760 | 0) >>> 16 & 2;
       $1035 = 14 - ($1025 | $1021 | $1030) + ($1027 << $1030 >>> 15) | 0;
       $$0212$i$i = $995 >>> ($1035 + 7 | 0) & 1 | $1035 << 1;
      } while (0);
      $1041 = 132812 + ($$0212$i$i << 2) | 0;
      HEAP32[$662 + 28 >> 2] = $$0212$i$i;
      HEAP32[$662 + 20 >> 2] = 0;
      HEAP32[$967 >> 2] = 0;
      $1044 = HEAP32[33128] | 0;
      $1045 = 1 << $$0212$i$i;
      if (!($1044 & $1045)) {
       HEAP32[33128] = $1044 | $1045;
       HEAP32[$1041 >> 2] = $662;
       HEAP32[$662 + 24 >> 2] = $1041;
       HEAP32[$662 + 12 >> 2] = $662;
       HEAP32[$662 + 8 >> 2] = $662;
       break;
      }
      $1052 = HEAP32[$1041 >> 2] | 0;
      L465 : do if ((HEAP32[$1052 + 4 >> 2] & -8 | 0) == ($995 | 0)) $$0207$lcssa$i$i = $1052; else {
       $$02065$i$i = $995 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
       $$02074$i$i = $1052;
       while (1) {
        $1069 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
        $1064 = HEAP32[$1069 >> 2] | 0;
        if (!$1064) break;
        if ((HEAP32[$1064 + 4 >> 2] & -8 | 0) == ($995 | 0)) {
         $$0207$lcssa$i$i = $1064;
         break L465;
        } else {
         $$02065$i$i = $$02065$i$i << 1;
         $$02074$i$i = $1064;
        }
       }
       if ((HEAP32[33131] | 0) >>> 0 > $1069 >>> 0) _abort(); else {
        HEAP32[$1069 >> 2] = $662;
        HEAP32[$662 + 24 >> 2] = $$02074$i$i;
        HEAP32[$662 + 12 >> 2] = $662;
        HEAP32[$662 + 8 >> 2] = $662;
        break L309;
       }
      } while (0);
      $1076 = $$0207$lcssa$i$i + 8 | 0;
      $1077 = HEAP32[$1076 >> 2] | 0;
      $1078 = HEAP32[33131] | 0;
      if ($1078 >>> 0 <= $1077 >>> 0 & $1078 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
       HEAP32[$1077 + 12 >> 2] = $662;
       HEAP32[$1076 >> 2] = $662;
       HEAP32[$662 + 8 >> 2] = $1077;
       HEAP32[$662 + 12 >> 2] = $$0207$lcssa$i$i;
       HEAP32[$662 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $1087 = HEAP32[33130] | 0;
    if ($1087 >>> 0 > $$0198 >>> 0) {
     $1089 = $1087 - $$0198 | 0;
     HEAP32[33130] = $1089;
     $1090 = HEAP32[33133] | 0;
     $1091 = $1090 + $$0198 | 0;
     HEAP32[33133] = $1091;
     HEAP32[$1091 + 4 >> 2] = $1089 | 1;
     HEAP32[$1090 + 4 >> 2] = $$0198 | 3;
     $$2 = $1090 + 8 | 0;
     break;
    }
   }
   HEAP32[(___errno_location() | 0) >> 2] = 12;
   $$2 = 0;
  } else $$2 = 0;
 } while (0);
 if (!(HEAP32[33238] & 2)) {
  $$1 = $$2;
  STACKTOP = sp;
  return $$1 | 0;
 }
 ___pthread_mutex_unlock(132956) | 0;
 $$1 = $$2;
 STACKTOP = sp;
 return $$1 | 0;
}

function _compute_chunk($0) {
 $0 = $0 | 0;
 var $$0667772$lcssa = 0.0, $$0667772$lcssa$1 = 0.0, $$0667772$lcssa$2 = 0.0, $$0669776 = 0, $$0670778 = 0, $$0671777 = 0, $$0683818 = 0, $$0684817 = 0, $$0686813 = 0, $$0686813$1 = 0, $$0686813$2 = 0, $$0688812 = 0, $$0688812$1 = 0, $$0688812$2 = 0, $$0690811 = 0, $$0690811$1 = 0, $$0690811$2 = 0, $$0692810 = 0, $$0692810$1 = 0, $$0692810$2 = 0, $$0693809 = 0, $$0694808 = 0, $$0696804 = 0, $$0696804$1 = 0, $$0696804$2 = 0, $$0698789 = 0, $$0699788 = 0, $$0701787 = 0, $$0703786 = 0, $$0705785 = 0, $$0708803 = 0, $$0708803$1 = 0, $$0708803$2 = 0, $$0712802 = 0, $$0712802$1 = 0, $$0712802$2 = 0, $$0714801 = 0, $$0714801$1 = 0, $$0714801$2 = 0, $$0721$lcssa = 0, $$0721794 = 0, $$0724793 = 0, $$0726792 = 0, $$0728791 = 0, $$0730790 = 0, $$1666$ = 0.0, $$1666$$1 = 0.0, $$1666$$1$1 = 0.0, $$1666$$1$2 = 0.0, $$1666$$1$3 = 0.0, $$1666$$1$4 = 0.0, $$1666$$1$5 = 0.0, $$1666$$1835 = 0.0, $$1666$$2 = 0.0, $$1666$$2$1 = 0.0, $$1666$$2$2 = 0.0, $$1666$$2$3 = 0.0, $$1666$$2$4 = 0.0, $$1666$$2$5 = 0.0, $$1666$$2836 = 0.0, $$1666$$3 = 0.0, $$1666$$3$1 = 0.0, $$1666$$3$2 = 0.0, $$1666$$3$3 = 0.0, $$1666$$3$4 = 0.0, $$1666$$3837 = 0.0, $$1666$$4 = 0.0, $$1666$$5 = 0.0, $$1672775 = 0, $$1675 = 0, $$2707 = 0, $$2723 = 0, $$3 = 0, $$3$1 = 0, $$3$1$1 = 0, $$3$1$1$1 = 0, $$3$1$1$2 = 0, $$3$1$1854 = 0, $$3$1$2 = 0, $$3$1$2$1 = 0, $$3$1$2$2 = 0, $$3$1$2860 = 0, $$3$1847 = 0, $$3$1847$1 = 0, $$3$1847$2 = 0, $$3$1852 = 0, $$3$2 = 0, $$3$2$1 = 0, $$3$2$1$1 = 0, $$3$2$1$2 = 0, $$3$2$1856 = 0, $$3$2$2 = 0, $$3$2$2$1 = 0, $$3$2$2$2 = 0, $$3$2$2862 = 0, $$3$2849 = 0, $$3$2849$1 = 0, $$3$2849$2 = 0, $$3$2858 = 0, $$neg = 0, $$neg766 = 0, $$neg767 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1005 = 0, $1006 = 0, $101 = 0, $102 = 0, $11 = 0, $111 = 0, $113 = 0, $124 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $2 = 0, $208 = 0, $21 = 0, $211 = 0, $214 = 0, $219 = 0, $220 = 0, $227 = 0, $235 = 0, $242 = 0, $250 = 0, $257 = 0, $265 = 0, $27 = 0, $270 = 0, $274 = 0, $275 = 0, $276 = 0, $279 = 0, $281 = 0, $282 = 0, $283 = 0, $285 = 0, $286 = 0, $288 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $297 = 0, $298 = 0, $3 = 0, $300 = 0, $301 = 0, $307 = 0, $308 = 0, $315 = 0, $317 = 0, $32 = 0, $323 = 0, $330 = 0, $332 = 0, $337 = 0, $34 = 0, $343 = 0, $345 = 0, $350 = 0, $353 = 0, $359 = 0, $360 = 0, $361 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $371 = 0, $372 = 0, $375 = 0, $376 = 0, $379 = 0, $38 = 0, $386 = 0, $387 = 0, $39 = 0, $391 = 0, $394 = 0, $4 = 0, $403 = 0, $407 = 0, $410 = 0, $412 = 0.0, $414 = 0.0, $416 = 0.0, $417 = 0.0, $419 = 0.0, $421 = 0.0, $422 = 0.0, $424 = 0.0, $426 = 0.0, $427 = 0.0, $429 = 0.0, $431 = 0.0, $432 = 0.0, $434 = 0.0, $436 = 0.0, $437 = 0.0, $439 = 0.0, $441 = 0.0, $442 = 0.0, $444 = 0.0, $446 = 0.0, $447 = 0.0, $449 = 0.0, $45 = 0, $451 = 0.0, $452 = 0.0, $454 = 0.0, $456 = 0.0, $457 = 0.0, $459 = 0.0, $46 = 0, $461 = 0.0, $462 = 0.0, $464 = 0.0, $466 = 0.0, $467 = 0.0, $469 = 0.0, $471 = 0.0, $472 = 0.0, $474 = 0.0, $476 = 0.0, $477 = 0.0, $479 = 0.0, $48 = 0, $481 = 0.0, $482 = 0.0, $484 = 0.0, $486 = 0.0, $487 = 0.0, $489 = 0.0, $491 = 0.0, $492 = 0.0, $494 = 0.0, $496 = 0.0, $497 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $501 = 0.0, $502 = 0.0, $504 = 0.0, $506 = 0.0, $507 = 0.0, $509 = 0.0, $511 = 0.0, $512 = 0.0, $514 = 0.0, $516 = 0.0, $517 = 0.0, $519 = 0.0, $52 = 0, $521 = 0.0, $522 = 0.0, $524 = 0.0, $526 = 0.0, $527 = 0.0, $529 = 0.0, $532 = 0.0, $533 = 0.0, $54 = 0, $546 = 0, $56 = 0, $6 = 0, $626 = 0, $630 = 0, $633 = 0, $680 = 0, $683 = 0, $684 = 0, $685 = 0, $694 = 0, $696 = 0, $7 = 0, $707 = 0, $709 = 0, $712 = 0, $713 = 0, $714 = 0, $723 = 0, $725 = 0, $736 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $747 = 0, $748 = 0, $750 = 0, $752 = 0, $754 = 0, $756 = 0, $758 = 0, $76 = 0, $776 = 0, $778 = 0, $784 = 0, $786 = 0, $793 = 0, $795 = 0, $798 = 0, $799 = 0, $8 = 0, $800 = 0, $806 = 0, $807 = 0, $809 = 0, $811 = 0, $813 = 0, $815 = 0, $817 = 0, $82 = 0, $835 = 0, $837 = 0, $84 = 0, $843 = 0, $845 = 0, $856 = 0, $862 = 0, $868 = 0, $874 = 0, $880 = 0, $886 = 0, $892 = 0, $898 = 0, $9 = 0, $904 = 0, $91 = 0, $910 = 0, $916 = 0, $922 = 0, $928 = 0, $934 = 0, $940 = 0, $946 = 0, $95 = 0, $952 = 0, $958 = 0, $964 = 0, $97 = 0, $970 = 0, $976 = 0, $982 = 0, $988 = 0, $994 = 0, $indvar = 0, $indvar829 = 0, $scevgep = 0, $scevgep831 = 0, $spec$select744 = 0, $spec$select745 = 0, $spec$select746 = 0, dest = 0, sp = 0, stop = 0, $$0686813$looptemp = 0, $$0688812$looptemp = 0, $$0690811$looptemp = 0, $$0686813$1$looptemp = 0, $$0688812$1$looptemp = 0, $$0690811$1$looptemp = 0, $$0686813$2$looptemp = 0, $$0688812$2$looptemp = 0, $$0690811$2$looptemp = 0, $$0724793$looptemp = 0, $$0726792$looptemp = 0, $$0728791$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 $1 = sp + 336 | 0;
 $2 = sp + 304 | 0;
 $3 = sp + 192 | 0;
 $4 = sp + 96 | 0;
 $5 = sp;
 $6 = _calloc(941192, 1) | 0;
 $7 = _calloc(941192, 1) | 0;
 $8 = _calloc(9604, 1) | 0;
 $9 = HEAP32[$0 >> 2] | 0;
 $10 = $9 << 5;
 $11 = $10 + -33 | 0;
 $13 = HEAP32[$0 + 8 >> 2] | 0;
 $14 = $13 << 5;
 $15 = $14 + -33 | 0;
 $18 = HEAP32[$0 + 4 >> 2] << 5;
 $19 = $18 + -33 | 0;
 $21 = HEAP32[$0 + 124 >> 2] | 0;
 if (!$21) $$3 = 0; else $$3 = (HEAP32[$21 + 16 >> 2] | 0) != 0 & 1;
 $27 = HEAP32[$0 + 128 >> 2] | 0;
 if (!$27) $$3$1 = $$3; else $$3$1 = (HEAP32[$27 + 16 >> 2] | 0) == 0 ? $$3 : 1;
 $856 = HEAP32[$0 + 132 >> 2] | 0;
 if (!$856) $$3$2 = $$3$1; else $$3$2 = (HEAP32[$856 + 16 >> 2] | 0) == 0 ? $$3$1 : 1;
 $862 = HEAP32[$0 + 136 >> 2] | 0;
 if (!$862) $$3$1847 = $$3$2; else $$3$1847 = (HEAP32[$862 + 16 >> 2] | 0) == 0 ? $$3$2 : 1;
 $868 = HEAP32[$0 + 140 >> 2] | 0;
 if (!$868) $$3$1$1 = $$3$1847; else $$3$1$1 = (HEAP32[$868 + 16 >> 2] | 0) == 0 ? $$3$1847 : 1;
 $874 = HEAP32[$0 + 144 >> 2] | 0;
 if (!$874) $$3$2$1 = $$3$1$1; else $$3$2$1 = (HEAP32[$874 + 16 >> 2] | 0) == 0 ? $$3$1$1 : 1;
 $880 = HEAP32[$0 + 148 >> 2] | 0;
 if (!$880) $$3$2849 = $$3$2$1; else $$3$2849 = (HEAP32[$880 + 16 >> 2] | 0) == 0 ? $$3$2$1 : 1;
 $886 = HEAP32[$0 + 152 >> 2] | 0;
 if (!$886) $$3$1$2 = $$3$2849; else $$3$1$2 = (HEAP32[$886 + 16 >> 2] | 0) == 0 ? $$3$2849 : 1;
 $892 = HEAP32[$0 + 156 >> 2] | 0;
 if (!$892) $$3$2$2 = $$3$1$2; else $$3$2$2 = (HEAP32[$892 + 16 >> 2] | 0) == 0 ? $$3$1$2 : 1;
 $898 = HEAP32[$0 + 160 >> 2] | 0;
 if (!$898) $$3$1852 = $$3$2$2; else $$3$1852 = (HEAP32[$898 + 16 >> 2] | 0) == 0 ? $$3$2$2 : 1;
 $904 = HEAP32[$0 + 164 >> 2] | 0;
 if (!$904) $$3$1$1854 = $$3$1852; else $$3$1$1854 = (HEAP32[$904 + 16 >> 2] | 0) == 0 ? $$3$1852 : 1;
 $910 = HEAP32[$0 + 168 >> 2] | 0;
 if (!$910) $$3$2$1856 = $$3$1$1854; else $$3$2$1856 = (HEAP32[$910 + 16 >> 2] | 0) == 0 ? $$3$1$1854 : 1;
 $916 = HEAP32[$0 + 172 >> 2] | 0;
 if (!$916) $$3$1847$1 = $$3$2$1856; else $$3$1847$1 = (HEAP32[$916 + 16 >> 2] | 0) == 0 ? $$3$2$1856 : 1;
 $922 = HEAP32[$0 + 176 >> 2] | 0;
 if (!$922) $$3$1$1$1 = $$3$1847$1; else $$3$1$1$1 = (HEAP32[$922 + 16 >> 2] | 0) == 0 ? $$3$1847$1 : 1;
 $928 = HEAP32[$0 + 180 >> 2] | 0;
 if (!$928) $$3$2$1$1 = $$3$1$1$1; else $$3$2$1$1 = (HEAP32[$928 + 16 >> 2] | 0) == 0 ? $$3$1$1$1 : 1;
 $934 = HEAP32[$0 + 184 >> 2] | 0;
 if (!$934) $$3$2849$1 = $$3$2$1$1; else $$3$2849$1 = (HEAP32[$934 + 16 >> 2] | 0) == 0 ? $$3$2$1$1 : 1;
 $940 = HEAP32[$0 + 188 >> 2] | 0;
 if (!$940) $$3$1$2$1 = $$3$2849$1; else $$3$1$2$1 = (HEAP32[$940 + 16 >> 2] | 0) == 0 ? $$3$2849$1 : 1;
 $946 = HEAP32[$0 + 192 >> 2] | 0;
 if (!$946) $$3$2$2$1 = $$3$1$2$1; else $$3$2$2$1 = (HEAP32[$946 + 16 >> 2] | 0) == 0 ? $$3$1$2$1 : 1;
 $952 = HEAP32[$0 + 196 >> 2] | 0;
 if (!$952) $$3$2858 = $$3$2$2$1; else $$3$2858 = (HEAP32[$952 + 16 >> 2] | 0) == 0 ? $$3$2$2$1 : 1;
 $958 = HEAP32[$0 + 200 >> 2] | 0;
 if (!$958) $$3$1$2860 = $$3$2858; else $$3$1$2860 = (HEAP32[$958 + 16 >> 2] | 0) == 0 ? $$3$2858 : 1;
 $964 = HEAP32[$0 + 204 >> 2] | 0;
 if (!$964) $$3$2$2862 = $$3$1$2860; else $$3$2$2862 = (HEAP32[$964 + 16 >> 2] | 0) == 0 ? $$3$1$2860 : 1;
 $970 = HEAP32[$0 + 208 >> 2] | 0;
 if (!$970) $$3$1847$2 = $$3$2$2862; else $$3$1847$2 = (HEAP32[$970 + 16 >> 2] | 0) == 0 ? $$3$2$2862 : 1;
 $976 = HEAP32[$0 + 212 >> 2] | 0;
 if (!$976) $$3$1$1$2 = $$3$1847$2; else $$3$1$1$2 = (HEAP32[$976 + 16 >> 2] | 0) == 0 ? $$3$1847$2 : 1;
 $982 = HEAP32[$0 + 216 >> 2] | 0;
 if (!$982) $$3$2$1$2 = $$3$1$1$2; else $$3$2$1$2 = (HEAP32[$982 + 16 >> 2] | 0) == 0 ? $$3$1$1$2 : 1;
 $988 = HEAP32[$0 + 220 >> 2] | 0;
 if (!$988) $$3$2849$2 = $$3$2$1$2; else $$3$2849$2 = (HEAP32[$988 + 16 >> 2] | 0) == 0 ? $$3$2$1$2 : 1;
 $994 = HEAP32[$0 + 224 >> 2] | 0;
 if (!$994) $$3$1$2$2 = $$3$2849$2; else $$3$1$2$2 = (HEAP32[$994 + 16 >> 2] | 0) == 0 ? $$3$2849$2 : 1;
 $1000 = HEAP32[$0 + 228 >> 2] | 0;
 if (!$1000) $$3$2$2$2 = $$3$1$2$2; else $$3$2$2$2 = (HEAP32[$1000 + 16 >> 2] | 0) == 0 ? $$3$1$2$2 : 1;
 $$neg = 33 - $10 | 0;
 $$neg766 = 33 - $14 | 0;
 $$neg767 = 33 - $18 | 0;
 $$0683818 = 0;
 do {
  $$0684817 = 0;
  do {
   $32 = HEAP32[$0 + 16 + ($$0683818 * 36 | 0) + ($$0684817 * 12 | 0) >> 2] | 0;
   do if ($32 | 0) {
    $34 = $32 + 16 | 0;
    if (!(HEAP32[$34 >> 2] | 0)) break;
    $37 = $32 + 20 | 0;
    $38 = $32 + 4 | 0;
    $39 = $32 + 8 | 0;
    $$0686813 = 0;
    $$0688812 = 0;
    $$0690811 = 0;
    $$0692810 = 0;
    do {
     $45 = HEAP8[(HEAP32[$37 >> 2] | 0) + ($$0692810 << 1) + 1 >> 0] | 0;
     $46 = $45 << 24 >> 24;
     $48 = ($$0686813 | 0) > 30;
     $50 = ($$0688812 | 0) > 30;
     $$0690811$looptemp = $$0690811;
     $$0690811 = $$0690811 + ($50 & $48 & 1) | 0;
     $$0688812$looptemp = $$0688812;
     $$0688812 = $48 ? ($50 ? 0 : $$0688812 + 1 | 0) : $$0688812;
     $$0686813$looptemp = $$0686813;
     $$0686813 = $48 ? 0 : $$0686813 + 1 | 0;
     $52 = $$0686813$looptemp + $$neg + (HEAP32[$32 >> 2] | 0) | 0;
     $54 = $$0688812$looptemp + $$neg766 + (HEAP32[$38 >> 2] | 0) | 0;
     $56 = $$0690811$looptemp + $$neg767 + (HEAP32[$39 >> 2] | 0) | 0;
     L91 : do if (($54 | $52 | $56 | 0) >= 0) {
      if (($52 | 0) > 97 | ($54 | 0) > 97 | ($56 | 0) > 97) break;
      switch ($45 << 24 >> 24) {
      case 0:
       {
        HEAP8[$6 + (($54 * 9604 | 0) + ($52 * 98 | 0) + $56) >> 0] = 2;
        break L91;
        break;
       }
      case 12:
       {
        HEAP8[$6 + (($54 * 9604 | 0) + ($52 * 98 | 0) + $56) >> 0] = 4;
        break L91;
        break;
       }
      default:
       {
        $74 = (_is_transparent($46) | 0) & 255;
        $76 = $52 * 98 | 0;
        HEAP8[$6 + (($54 * 9604 | 0) + $76 + $56) >> 0] = $74;
        if ($74 << 24 >> 24) break L91;
        $82 = $8 + ($56 + $76) | 0;
        $84 = HEAP8[$82 >> 0] | 0;
        HEAP8[$82 >> 0] = ($54 | 0) < ($84 | 0) ? $84 : $54;
        break L91;
       }
      }
     } while (0);
     $$0692810 = $$0692810 + 1 | 0;
    } while ($$0692810 >>> 0 < (HEAP32[$34 >> 2] | 0) >>> 0);
   } while (0);
   $91 = HEAP32[$0 + 16 + ($$0683818 * 36 | 0) + ($$0684817 * 12 | 0) + 4 >> 2] | 0;
   do if ($91 | 0) {
    $736 = $91 + 16 | 0;
    if (!(HEAP32[$736 >> 2] | 0)) break;
    $739 = $91 + 20 | 0;
    $740 = $91 + 4 | 0;
    $741 = $91 + 8 | 0;
    $$0686813$1 = 0;
    $$0688812$1 = 0;
    $$0690811$1 = 0;
    $$0692810$1 = 0;
    do {
     $747 = HEAP8[(HEAP32[$739 >> 2] | 0) + ($$0692810$1 << 1) + 1 >> 0] | 0;
     $748 = $747 << 24 >> 24;
     $750 = ($$0686813$1 | 0) > 30;
     $752 = ($$0688812$1 | 0) > 30;
     $$0690811$1$looptemp = $$0690811$1;
     $$0690811$1 = $$0690811$1 + ($752 & $750 & 1) | 0;
     $$0688812$1$looptemp = $$0688812$1;
     $$0688812$1 = $750 ? ($752 ? 0 : $$0688812$1 + 1 | 0) : $$0688812$1;
     $$0686813$1$looptemp = $$0686813$1;
     $$0686813$1 = $750 ? 0 : $$0686813$1 + 1 | 0;
     $754 = $$0686813$1$looptemp + $$neg + (HEAP32[$91 >> 2] | 0) | 0;
     $756 = $$0688812$1$looptemp + $$neg766 + (HEAP32[$740 >> 2] | 0) | 0;
     $758 = $$0690811$1$looptemp + $$neg767 + (HEAP32[$741 >> 2] | 0) | 0;
     L106 : do if (($756 | $754 | $758 | 0) >= 0) {
      if (($754 | 0) > 97 | ($756 | 0) > 97 | ($758 | 0) > 97) break;
      switch ($747 << 24 >> 24) {
      case 0:
       {
        HEAP8[$6 + (($756 * 9604 | 0) + ($754 * 98 | 0) + $758) >> 0] = 2;
        break L106;
        break;
       }
      case 12:
       {
        HEAP8[$6 + (($756 * 9604 | 0) + ($754 * 98 | 0) + $758) >> 0] = 4;
        break L106;
        break;
       }
      default:
       {
        $776 = (_is_transparent($748) | 0) & 255;
        $778 = $754 * 98 | 0;
        HEAP8[$6 + (($756 * 9604 | 0) + $778 + $758) >> 0] = $776;
        if ($776 << 24 >> 24) break L106;
        $784 = $8 + ($758 + $778) | 0;
        $786 = HEAP8[$784 >> 0] | 0;
        HEAP8[$784 >> 0] = ($756 | 0) < ($786 | 0) ? $786 : $756;
        break L106;
       }
      }
     } while (0);
     $$0692810$1 = $$0692810$1 + 1 | 0;
    } while ($$0692810$1 >>> 0 < (HEAP32[$736 >> 2] | 0) >>> 0);
   } while (0);
   $793 = HEAP32[$0 + 16 + ($$0683818 * 36 | 0) + ($$0684817 * 12 | 0) + 8 >> 2] | 0;
   do if ($793 | 0) {
    $795 = $793 + 16 | 0;
    if (!(HEAP32[$795 >> 2] | 0)) break;
    $798 = $793 + 20 | 0;
    $799 = $793 + 4 | 0;
    $800 = $793 + 8 | 0;
    $$0686813$2 = 0;
    $$0688812$2 = 0;
    $$0690811$2 = 0;
    $$0692810$2 = 0;
    do {
     $806 = HEAP8[(HEAP32[$798 >> 2] | 0) + ($$0692810$2 << 1) + 1 >> 0] | 0;
     $807 = $806 << 24 >> 24;
     $809 = ($$0686813$2 | 0) > 30;
     $811 = ($$0688812$2 | 0) > 30;
     $$0690811$2$looptemp = $$0690811$2;
     $$0690811$2 = $$0690811$2 + ($811 & $809 & 1) | 0;
     $$0688812$2$looptemp = $$0688812$2;
     $$0688812$2 = $809 ? ($811 ? 0 : $$0688812$2 + 1 | 0) : $$0688812$2;
     $$0686813$2$looptemp = $$0686813$2;
     $$0686813$2 = $809 ? 0 : $$0686813$2 + 1 | 0;
     $813 = $$0686813$2$looptemp + $$neg + (HEAP32[$793 >> 2] | 0) | 0;
     $815 = $$0688812$2$looptemp + $$neg766 + (HEAP32[$799 >> 2] | 0) | 0;
     $817 = $$0690811$2$looptemp + $$neg767 + (HEAP32[$800 >> 2] | 0) | 0;
     L121 : do if (($815 | $813 | $817 | 0) >= 0) {
      if (($813 | 0) > 97 | ($815 | 0) > 97 | ($817 | 0) > 97) break;
      switch ($806 << 24 >> 24) {
      case 0:
       {
        HEAP8[$6 + (($815 * 9604 | 0) + ($813 * 98 | 0) + $817) >> 0] = 2;
        break L121;
        break;
       }
      case 12:
       {
        HEAP8[$6 + (($815 * 9604 | 0) + ($813 * 98 | 0) + $817) >> 0] = 4;
        break L121;
        break;
       }
      default:
       {
        $835 = (_is_transparent($807) | 0) & 255;
        $837 = $813 * 98 | 0;
        HEAP8[$6 + (($815 * 9604 | 0) + $837 + $817) >> 0] = $835;
        if ($835 << 24 >> 24) break L121;
        $843 = $8 + ($817 + $837) | 0;
        $845 = HEAP8[$843 >> 0] | 0;
        HEAP8[$843 >> 0] = ($815 | 0) < ($845 | 0) ? $845 : $815;
        break L121;
       }
      }
     } while (0);
     $$0692810$2 = $$0692810$2 + 1 | 0;
    } while ($$0692810$2 >>> 0 < (HEAP32[$795 >> 2] | 0) >>> 0);
   } while (0);
   $$0684817 = $$0684817 + 1 | 0;
  } while (($$0684817 | 0) != 3);
  $$0683818 = $$0683818 + 1 | 0;
 } while (($$0683818 | 0) != 3);
 if ($$3$2$2$2 | 0) {
  $$0693809 = 0;
  do {
   $$0694808 = 0;
   do {
    $95 = HEAP32[$0 + 124 + ($$0693809 * 36 | 0) + ($$0694808 * 12 | 0) >> 2] | 0;
    do if ($95 | 0) {
     $97 = $95 + 16 | 0;
     if (!(HEAP32[$97 >> 2] | 0)) break;
     $100 = $95 + 20 | 0;
     $101 = $95 + 4 | 0;
     $102 = $95 + 8 | 0;
     $$0696804 = 0;
     $$0708803 = 0;
     $$0712802 = 0;
     $$0714801 = 0;
     while (1) {
      $111 = ($$0696804 | 0) > 30;
      $113 = ($$0708803 | 0) > 30;
      _light_fill($6, $7, $$0696804 + $$neg + (HEAP32[$95 >> 2] | 0) | 0, $$0708803 + $$neg766 + (HEAP32[$101 >> 2] | 0) | 0, $$0712802 + $$neg767 + (HEAP32[$102 >> 2] | 0) | 0, HEAP8[(HEAP32[$100 >> 2] | 0) + ($$0714801 << 1) + 1 >> 0] | 0, 1);
      $$0714801 = $$0714801 + 1 | 0;
      if ($$0714801 >>> 0 >= (HEAP32[$97 >> 2] | 0) >>> 0) break; else {
       $$0696804 = $111 ? 0 : $$0696804 + 1 | 0;
       $$0708803 = $111 ? ($113 ? 0 : $$0708803 + 1 | 0) : $$0708803;
       $$0712802 = $$0712802 + ($113 & $111 & 1) | 0;
      }
     }
    } while (0);
    $124 = HEAP32[$0 + 124 + ($$0693809 * 36 | 0) + ($$0694808 * 12 | 0) + 4 >> 2] | 0;
    do if ($124 | 0) {
     $680 = $124 + 16 | 0;
     if (!(HEAP32[$680 >> 2] | 0)) break;
     $683 = $124 + 20 | 0;
     $684 = $124 + 4 | 0;
     $685 = $124 + 8 | 0;
     $$0696804$1 = 0;
     $$0708803$1 = 0;
     $$0712802$1 = 0;
     $$0714801$1 = 0;
     while (1) {
      $694 = ($$0696804$1 | 0) > 30;
      $696 = ($$0708803$1 | 0) > 30;
      _light_fill($6, $7, $$0696804$1 + $$neg + (HEAP32[$124 >> 2] | 0) | 0, $$0708803$1 + $$neg766 + (HEAP32[$684 >> 2] | 0) | 0, $$0712802$1 + $$neg767 + (HEAP32[$685 >> 2] | 0) | 0, HEAP8[(HEAP32[$683 >> 2] | 0) + ($$0714801$1 << 1) + 1 >> 0] | 0, 1);
      $$0714801$1 = $$0714801$1 + 1 | 0;
      if ($$0714801$1 >>> 0 >= (HEAP32[$680 >> 2] | 0) >>> 0) break; else {
       $$0696804$1 = $694 ? 0 : $$0696804$1 + 1 | 0;
       $$0708803$1 = $694 ? ($696 ? 0 : $$0708803$1 + 1 | 0) : $$0708803$1;
       $$0712802$1 = $$0712802$1 + ($696 & $694 & 1) | 0;
      }
     }
    } while (0);
    $707 = HEAP32[$0 + 124 + ($$0693809 * 36 | 0) + ($$0694808 * 12 | 0) + 8 >> 2] | 0;
    do if ($707 | 0) {
     $709 = $707 + 16 | 0;
     if (!(HEAP32[$709 >> 2] | 0)) break;
     $712 = $707 + 20 | 0;
     $713 = $707 + 4 | 0;
     $714 = $707 + 8 | 0;
     $$0696804$2 = 0;
     $$0708803$2 = 0;
     $$0712802$2 = 0;
     $$0714801$2 = 0;
     while (1) {
      $723 = ($$0696804$2 | 0) > 30;
      $725 = ($$0708803$2 | 0) > 30;
      _light_fill($6, $7, $$0696804$2 + $$neg + (HEAP32[$707 >> 2] | 0) | 0, $$0708803$2 + $$neg766 + (HEAP32[$713 >> 2] | 0) | 0, $$0712802$2 + $$neg767 + (HEAP32[$714 >> 2] | 0) | 0, HEAP8[(HEAP32[$712 >> 2] | 0) + ($$0714801$2 << 1) + 1 >> 0] | 0, 1);
      $$0714801$2 = $$0714801$2 + 1 | 0;
      if ($$0714801$2 >>> 0 >= (HEAP32[$709 >> 2] | 0) >>> 0) break; else {
       $$0696804$2 = $723 ? 0 : $$0696804$2 + 1 | 0;
       $$0708803$2 = $723 ? ($725 ? 0 : $$0708803$2 + 1 | 0) : $$0708803$2;
       $$0712802$2 = $$0712802$2 + ($725 & $723 & 1) | 0;
      }
     }
    } while (0);
    $$0694808 = $$0694808 + 1 | 0;
   } while (($$0694808 | 0) != 3);
   $$0693809 = $$0693809 + 1 | 0;
  } while (($$0693809 | 0) != 3);
 }
 $127 = HEAP32[$0 + 68 >> 2] | 0;
 $128 = $127 + 16 | 0;
 $129 = HEAP32[$128 >> 2] | 0;
 if (!$129) $$0721$lcssa = 0; else {
  $131 = $127 + 20 | 0;
  $132 = $127 + 4 | 0;
  $133 = $127 + 8 | 0;
  $$0721794 = 0;
  $$0724793 = 0;
  $$0726792 = 0;
  $$0728791 = 0;
  $$0730790 = 0;
  $1005 = $129;
  while (1) {
   $193 = HEAP8[(HEAP32[$131 >> 2] | 0) + ($$0730790 << 1) + 1 >> 0] | 0;
   $194 = $193 << 24 >> 24;
   $196 = ($$0724793 | 0) > 30;
   $198 = ($$0726792 | 0) > 30;
   $$0728791$looptemp = $$0728791;
   $$0728791 = $$0728791 + ($198 & $196 & 1) | 0;
   $$0726792$looptemp = $$0726792;
   $$0726792 = $196 ? ($198 ? 0 : $$0726792 + 1 | 0) : $$0726792;
   $$0724793$looptemp = $$0724793;
   $$0724793 = $196 ? 0 : $$0724793 + 1 | 0;
   do if ($193 << 24 >> 24 < 1) {
    $$2723 = $$0721794;
    $274 = $1005;
   } else {
    $208 = $$0728791$looptemp + $$neg767 + (HEAP32[$133 >> 2] | 0) | 0;
    $211 = (($$0724793$looptemp + $$neg + (HEAP32[$127 >> 2] | 0) | 0) * 98 | 0) + (((HEAP32[$132 >> 2] | 0) + $$0726792$looptemp - $15 | 0) * 9604 | 0) | 0;
    $214 = HEAP8[$6 + ($211 + $208) >> 0] | 0;
    $219 = $214 ^ 15;
    $220 = HEAP8[$6 + ($211 + -98 + $208) >> 0] & $219;
    $227 = HEAP8[$6 + ($211 + 98 + $208) >> 0] & $219;
    $235 = HEAP8[$6 + ($211 + 9604 + $208) >> 0] & $219;
    $242 = HEAP8[$6 + ($211 + -9604 + $208) >> 0] & $219;
    $250 = HEAP8[$6 + ($208 + -1 + $211) >> 0] & $219;
    $257 = HEAP8[$6 + ($208 + 1 + $211) >> 0] & $219;
    $265 = (($227 << 24 >> 24 < 1 ? $227 : 1) << 24 >> 24) + (($220 << 24 >> 24 < 1 ? $220 : 1) << 24 >> 24) + (($235 << 24 >> 24 < 1 ? $235 : 1) << 24 >> 24) + (($242 << 24 >> 24 < 1 ? $242 : 1) << 24 >> 24) + (($250 << 24 >> 24 < 1 ? $250 : 1) << 24 >> 24) + (($257 << 24 >> 24 < 1 ? $257 : 1) << 24 >> 24) | 0;
    if (!$265) {
     $$2723 = $$0721794;
     $274 = $1005;
     break;
    }
    $270 = (_is_plant($194) | 0) == 0;
    $$2723 = ($270 ? $265 << ($214 << 24 >> 24 != 0 & 1) : 4) + $$0721794 | 0;
    $274 = HEAP32[$128 >> 2] | 0;
   } while (0);
   $$0730790 = $$0730790 + 1 | 0;
   if ($$0730790 >>> 0 >= $274 >>> 0) {
    $$0721$lcssa = $$2723;
    break;
   } else {
    $$0721794 = $$2723;
    $1005 = $274;
   }
  }
 }
 $134 = _malloc_faces(15, $$0721$lcssa) | 0;
 $135 = HEAP32[$128 >> 2] | 0;
 if (!$135) {
  _free($6);
  _free($7);
  _free($8);
  $275 = $0 + 12 | 0;
  HEAP32[$275 >> 2] = $$0721$lcssa;
  $276 = $0 + 232 | 0;
  HEAP32[$276 >> 2] = $134;
  STACKTOP = sp;
  return;
 }
 $137 = $127 + 20 | 0;
 $138 = $127 + 4 | 0;
 $139 = $127 + 8 | 0;
 $144 = 310496 - $18 + (Math_imul($9, -3136) | 0) + (Math_imul($13, -307328) | 0) | 0;
 $145 = $4 + 4 | 0;
 $146 = $5 + 4 | 0;
 $147 = $4 + 8 | 0;
 $148 = $5 + 8 | 0;
 $149 = $4 + 12 | 0;
 $150 = $5 + 12 | 0;
 $151 = $4 + 16 | 0;
 $152 = $5 + 16 | 0;
 $153 = $4 + 20 | 0;
 $154 = $5 + 20 | 0;
 $155 = $4 + 24 | 0;
 $156 = $5 + 24 | 0;
 $157 = $4 + 28 | 0;
 $158 = $5 + 28 | 0;
 $159 = $4 + 32 | 0;
 $160 = $5 + 32 | 0;
 $161 = $4 + 36 | 0;
 $162 = $5 + 36 | 0;
 $163 = $4 + 40 | 0;
 $164 = $5 + 40 | 0;
 $165 = $4 + 44 | 0;
 $166 = $5 + 44 | 0;
 $167 = $4 + 48 | 0;
 $168 = $5 + 48 | 0;
 $169 = $4 + 52 | 0;
 $170 = $5 + 52 | 0;
 $171 = $4 + 56 | 0;
 $172 = $5 + 56 | 0;
 $173 = $4 + 60 | 0;
 $174 = $5 + 60 | 0;
 $175 = $4 + 64 | 0;
 $176 = $5 + 64 | 0;
 $177 = $4 + 68 | 0;
 $178 = $5 + 68 | 0;
 $179 = $4 + 72 | 0;
 $180 = $5 + 72 | 0;
 $181 = $4 + 76 | 0;
 $182 = $5 + 76 | 0;
 $183 = $4 + 80 | 0;
 $184 = $5 + 80 | 0;
 $185 = $4 + 84 | 0;
 $186 = $5 + 84 | 0;
 $187 = $4 + 88 | 0;
 $188 = $5 + 88 | 0;
 $189 = $4 + 92 | 0;
 $190 = $5 + 92 | 0;
 $$0698789 = 0;
 $$0699788 = 0;
 $$0701787 = 0;
 $$0703786 = 0;
 $$0705785 = 0;
 $1006 = $135;
 while (1) {
  $279 = (HEAP32[$127 >> 2] | 0) + $$0703786 | 0;
  $281 = (HEAP32[$138 >> 2] | 0) + $$0701787 | 0;
  $282 = HEAP32[$139 >> 2] | 0;
  $283 = $282 + $$0699788 | 0;
  $285 = HEAP8[(HEAP32[$137 >> 2] | 0) + ($$0698789 << 1) + 1 >> 0] | 0;
  $286 = $285 << 24 >> 24;
  $288 = ($$0703786 | 0) > 30;
  $290 = ($$0701787 | 0) > 30;
  $$0703786 = $288 ? 0 : $$0703786 + 1 | 0;
  $$0701787 = $288 ? ($290 ? 0 : $$0701787 + 1 | 0) : $$0701787;
  do if ($285 << 24 >> 24 < 1) {
   $$2707 = $$0705785;
   $546 = $1006;
  } else {
   $292 = $279 - $11 | 0;
   $293 = $281 - $15 | 0;
   $294 = $283 - $19 | 0;
   $297 = ($293 * 9604 | 0) + ($292 * 98 | 0) | 0;
   $298 = $297 + $294 | 0;
   $300 = HEAP8[$6 + $298 >> 0] | 0;
   $301 = $300 << 24 >> 24;
   $307 = $301 ^ 15;
   $308 = $307 & HEAP8[$6 + ($297 + -98 + $294) >> 0];
   $spec$select744 = ($308 | 0) < 1 ? $308 : 1;
   $315 = $307 & HEAP8[$6 + ($297 + 98 + $294) >> 0];
   $317 = ($315 | 0) < 1 ? $315 : 1;
   $323 = $307 & HEAP8[$6 + ($297 + 9604 + $294) >> 0];
   $spec$select745 = ($323 | 0) < 1 ? $323 : 1;
   $330 = $307 & HEAP8[$6 + ($297 + -9604 + $294) >> 0];
   $332 = ($330 | 0) < 1 ? $330 : 1;
   $337 = $307 & HEAP8[$6 + ($298 + -1) >> 0];
   $spec$select746 = ($337 | 0) < 1 ? $337 : 1;
   $343 = $307 & HEAP8[$6 + ($298 + 1) >> 0];
   $345 = ($343 | 0) < 1 ? $343 : 1;
   $350 = $317 + $spec$select744 + $spec$select745 + $332 + $spec$select746 + $345 | 0;
   if (!$350) {
    $$2707 = $$0705785;
    $546 = $1006;
    break;
   }
   $353 = $300 << 24 >> 24 != 0 & 1;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP16[$1 + 24 >> 1] = 0;
   HEAP8[$1 + 26 >> 0] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP16[$2 + 24 >> 1] = 0;
   HEAP8[$2 + 26 >> 0] = 0;
   dest = $3;
   stop = dest + 108 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $359 = $144 + $$0699788 + $282 + ($281 * 9604 | 0) + ($279 * 98 | 0) | 0;
   $360 = $294 + -1 | 0;
   $361 = $294 + 1 | 0;
   $$0670778 = -1;
   $$0671777 = 0;
   $indvar829 = 0;
   while (1) {
    $365 = $359 + ($indvar829 * 98 | 0) | 0;
    $367 = ($$0670778 + $292 | 0) * 98 | 0;
    $368 = $360 + $367 | 0;
    $371 = HEAP8[$8 + $368 >> 0] | 0;
    $372 = $294 + $367 | 0;
    $375 = HEAP8[$8 + $372 >> 0] | 0;
    $376 = $361 + $367 | 0;
    $379 = HEAP8[$8 + $376 >> 0] | 0;
    $$0669776 = -1;
    $$1672775 = $$0671777;
    $indvar = 0;
    while (1) {
     $scevgep = $2 + ($$0671777 + ($indvar * 3 | 0)) | 0;
     $scevgep831 = $7 + ($365 + ($indvar * 9604 | 0)) | 0;
     $386 = $$0669776 + $293 | 0;
     $387 = $386 * 9604 | 0;
     HEAP8[$scevgep >> 0] = HEAP8[$scevgep831 >> 0] | 0;
     HEAP8[$scevgep + 1 >> 0] = HEAP8[$scevgep831 + 1 >> 0] | 0;
     HEAP8[$scevgep + 2 >> 0] = HEAP8[$scevgep831 + 2 >> 0] | 0;
     $391 = (HEAP8[$6 + ($368 + $387) >> 0] | 0) == 0;
     HEAP8[$1 + $$1672775 >> 0] = $391 & 1;
     $394 = $3 + ($$1672775 << 2) | 0;
     HEAPF32[$394 >> 2] = 0.0;
     L180 : do if (($386 | 0) <= ($371 | 0)) {
      do if ($391) $$0667772$lcssa = 0.0; else {
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 9604)) >> 0] | 0)) {
        $$0667772$lcssa = .125;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 19208)) >> 0] | 0)) {
        $$0667772$lcssa = .25;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 28812)) >> 0] | 0)) {
        $$0667772$lcssa = .375;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 38416)) >> 0] | 0)) {
        $$0667772$lcssa = .5;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 48020)) >> 0] | 0)) {
        $$0667772$lcssa = .625;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 57624)) >> 0] | 0)) {
        $$0667772$lcssa = .75;
        break;
       }
       if (!(HEAP8[$6 + ($368 + (($386 * 9604 | 0) + 67228)) >> 0] | 0)) $$0667772$lcssa = .875; else break L180;
      } while (0);
      HEAPF32[$394 >> 2] = 1.0 - $$0667772$lcssa;
     } while (0);
     $403 = $$1672775 + 1 | 0;
     $407 = (HEAP8[$6 + ($372 + $387) >> 0] | 0) == 0;
     HEAP8[$1 + $403 >> 0] = $407 & 1;
     $410 = $3 + ($403 << 2) | 0;
     HEAPF32[$410 >> 2] = 0.0;
     L192 : do if (($386 | 0) <= ($375 | 0)) {
      do if ($407) $$0667772$lcssa$1 = 0.0; else {
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 9604)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .125;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 19208)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .25;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 28812)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .375;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 38416)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .5;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 48020)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .625;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 57624)) >> 0] | 0)) {
        $$0667772$lcssa$1 = .75;
        break;
       }
       if (!(HEAP8[$6 + ($372 + (($386 * 9604 | 0) + 67228)) >> 0] | 0)) $$0667772$lcssa$1 = .875; else break L192;
      } while (0);
      HEAPF32[$410 >> 2] = 1.0 - $$0667772$lcssa$1;
     } while (0);
     $626 = $$1672775 + 2 | 0;
     $630 = (HEAP8[$6 + ($376 + $387) >> 0] | 0) == 0;
     HEAP8[$1 + $626 >> 0] = $630 & 1;
     $633 = $3 + ($626 << 2) | 0;
     HEAPF32[$633 >> 2] = 0.0;
     L204 : do if (($386 | 0) <= ($379 | 0)) {
      do if ($630) $$0667772$lcssa$2 = 0.0; else {
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 9604)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .125;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 19208)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .25;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 28812)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .375;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 38416)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .5;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 48020)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .625;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 57624)) >> 0] | 0)) {
        $$0667772$lcssa$2 = .75;
        break;
       }
       if (!(HEAP8[$6 + ($376 + (($386 * 9604 | 0) + 67228)) >> 0] | 0)) $$0667772$lcssa$2 = .875; else break L204;
      } while (0);
      HEAPF32[$633 >> 2] = 1.0 - $$0667772$lcssa$2;
     } while (0);
     $indvar = $indvar + 1 | 0;
     if (($indvar | 0) == 3) break; else {
      $$0669776 = $$0669776 + 1 | 0;
      $$1672775 = $$1672775 + 3 | 0;
     }
    }
    $indvar829 = $indvar829 + 1 | 0;
    if (($indvar829 | 0) == 3) break; else {
     $$0670778 = $$0670778 + 1 | 0;
     $$0671777 = $$0671777 + 9 | 0;
    }
   }
   _occlusion($1, $2, $3, $4, $5);
   if (!(_is_plant($286) | 0)) {
    _make_cube($134 + ($$0705785 << 2) | 0, $4, $5, $spec$select744, $317, $spec$select745, $332, $spec$select746, $345, +($279 | 0), +($281 | 0), +($283 | 0), .5, $286, $301);
    $$1675 = $350 << $353;
   } else {
    $412 = +HEAPF32[$4 >> 2];
    $$1666$ = $412 > 1.0 ? 1.0 : $412;
    $414 = +HEAPF32[$5 >> 2];
    $416 = $414 < 0.0 ? 0.0 : $414;
    $417 = +HEAPF32[$145 >> 2];
    $$1666$$1 = $$1666$ < $417 ? $$1666$ : $417;
    $419 = +HEAPF32[$146 >> 2];
    $421 = $416 > $419 ? $416 : $419;
    $422 = +HEAPF32[$147 >> 2];
    $$1666$$2 = $$1666$$1 < $422 ? $$1666$$1 : $422;
    $424 = +HEAPF32[$148 >> 2];
    $426 = $421 > $424 ? $421 : $424;
    $427 = +HEAPF32[$149 >> 2];
    $$1666$$3 = $$1666$$2 < $427 ? $$1666$$2 : $427;
    $429 = +HEAPF32[$150 >> 2];
    $431 = $426 > $429 ? $426 : $429;
    $432 = +HEAPF32[$151 >> 2];
    $$1666$$1835 = $$1666$$3 < $432 ? $$1666$$3 : $432;
    $434 = +HEAPF32[$152 >> 2];
    $436 = $431 > $434 ? $431 : $434;
    $437 = +HEAPF32[$153 >> 2];
    $$1666$$1$1 = $$1666$$1835 < $437 ? $$1666$$1835 : $437;
    $439 = +HEAPF32[$154 >> 2];
    $441 = $436 > $439 ? $436 : $439;
    $442 = +HEAPF32[$155 >> 2];
    $$1666$$2$1 = $$1666$$1$1 < $442 ? $$1666$$1$1 : $442;
    $444 = +HEAPF32[$156 >> 2];
    $446 = $441 > $444 ? $441 : $444;
    $447 = +HEAPF32[$157 >> 2];
    $$1666$$3$1 = $$1666$$2$1 < $447 ? $$1666$$2$1 : $447;
    $449 = +HEAPF32[$158 >> 2];
    $451 = $446 > $449 ? $446 : $449;
    $452 = +HEAPF32[$159 >> 2];
    $$1666$$2836 = $$1666$$3$1 < $452 ? $$1666$$3$1 : $452;
    $454 = +HEAPF32[$160 >> 2];
    $456 = $451 > $454 ? $451 : $454;
    $457 = +HEAPF32[$161 >> 2];
    $$1666$$1$2 = $$1666$$2836 < $457 ? $$1666$$2836 : $457;
    $459 = +HEAPF32[$162 >> 2];
    $461 = $456 > $459 ? $456 : $459;
    $462 = +HEAPF32[$163 >> 2];
    $$1666$$2$2 = $$1666$$1$2 < $462 ? $$1666$$1$2 : $462;
    $464 = +HEAPF32[$164 >> 2];
    $466 = $461 > $464 ? $461 : $464;
    $467 = +HEAPF32[$165 >> 2];
    $$1666$$3$2 = $$1666$$2$2 < $467 ? $$1666$$2$2 : $467;
    $469 = +HEAPF32[$166 >> 2];
    $471 = $466 > $469 ? $466 : $469;
    $472 = +HEAPF32[$167 >> 2];
    $$1666$$3837 = $$1666$$3$2 < $472 ? $$1666$$3$2 : $472;
    $474 = +HEAPF32[$168 >> 2];
    $476 = $471 > $474 ? $471 : $474;
    $477 = +HEAPF32[$169 >> 2];
    $$1666$$1$3 = $$1666$$3837 < $477 ? $$1666$$3837 : $477;
    $479 = +HEAPF32[$170 >> 2];
    $481 = $476 > $479 ? $476 : $479;
    $482 = +HEAPF32[$171 >> 2];
    $$1666$$2$3 = $$1666$$1$3 < $482 ? $$1666$$1$3 : $482;
    $484 = +HEAPF32[$172 >> 2];
    $486 = $481 > $484 ? $481 : $484;
    $487 = +HEAPF32[$173 >> 2];
    $$1666$$3$3 = $$1666$$2$3 < $487 ? $$1666$$2$3 : $487;
    $489 = +HEAPF32[$174 >> 2];
    $491 = $486 > $489 ? $486 : $489;
    $492 = +HEAPF32[$175 >> 2];
    $$1666$$4 = $$1666$$3$3 < $492 ? $$1666$$3$3 : $492;
    $494 = +HEAPF32[$176 >> 2];
    $496 = $491 > $494 ? $491 : $494;
    $497 = +HEAPF32[$177 >> 2];
    $$1666$$1$4 = $$1666$$4 < $497 ? $$1666$$4 : $497;
    $499 = +HEAPF32[$178 >> 2];
    $501 = $496 > $499 ? $496 : $499;
    $502 = +HEAPF32[$179 >> 2];
    $$1666$$2$4 = $$1666$$1$4 < $502 ? $$1666$$1$4 : $502;
    $504 = +HEAPF32[$180 >> 2];
    $506 = $501 > $504 ? $501 : $504;
    $507 = +HEAPF32[$181 >> 2];
    $$1666$$3$4 = $$1666$$2$4 < $507 ? $$1666$$2$4 : $507;
    $509 = +HEAPF32[$182 >> 2];
    $511 = $506 > $509 ? $506 : $509;
    $512 = +HEAPF32[$183 >> 2];
    $$1666$$5 = $$1666$$3$4 < $512 ? $$1666$$3$4 : $512;
    $514 = +HEAPF32[$184 >> 2];
    $516 = $511 > $514 ? $511 : $514;
    $517 = +HEAPF32[$185 >> 2];
    $$1666$$1$5 = $$1666$$5 < $517 ? $$1666$$5 : $517;
    $519 = +HEAPF32[$186 >> 2];
    $521 = $516 > $519 ? $516 : $519;
    $522 = +HEAPF32[$187 >> 2];
    $$1666$$2$5 = $$1666$$1$5 < $522 ? $$1666$$1$5 : $522;
    $524 = +HEAPF32[$188 >> 2];
    $526 = $521 > $524 ? $521 : $524;
    $527 = +HEAPF32[$189 >> 2];
    $529 = +HEAPF32[$190 >> 2];
    $532 = +($279 | 0);
    $533 = +($283 | 0);
    _make_plant($134 + ($$0705785 << 2) | 0, $$1666$$2$5 < $527 ? $$1666$$2$5 : $527, $526 > $529 ? $526 : $529, $532, +($281 | 0), $533, .5, $286, +_simplex2($532, $533, 4, .5, 2.0) * 360.0);
    $$1675 = 4;
   }
   $$2707 = ($$1675 * 90 | 0) + $$0705785 | 0;
   $546 = HEAP32[$128 >> 2] | 0;
  } while (0);
  $$0699788 = $$0699788 + ($288 & $290 & 1) | 0;
  $$0698789 = $$0698789 + 1 | 0;
  if ($$0698789 >>> 0 >= $546 >>> 0) break; else {
   $$0705785 = $$2707;
   $1006 = $546;
  }
 }
 _free($6);
 _free($7);
 _free($8);
 $275 = $0 + 12 | 0;
 HEAP32[$275 >> 2] = $$0721$lcssa;
 $276 = $0 + 232 | 0;
 HEAP32[$276 >> 2] = $134;
 STACKTOP = sp;
 return;
}

function _lodepng_inflate($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i$i = 0, $$012$lcssa$i$i$i = 0, $$012$lcssa$i122$i$i = 0, $$01213$i$i$i = 0, $$01213$i120$i$i = 0, $$014$i$i$i = 0, $$014$i119$i$i = 0, $$0166$i$i = 0, $$0171$i$i$i = 0, $$0171$i$i$i$i = 0, $$0171$i112$i$i = 0, $$0173297$i$i$i = 0, $$0177302$i$i$i = 0, $$0189288$i$i$i = 0, $$025108$i = 0, $$028107$i = 0, $$04447$i$i = 0, $$045$lcssa$i$i = 0, $$04546$i$i = 0, $$095165$i$i = 0, $$10104$i = 0, $$11$i = 0, $$11$i$i$i = 0, $$11188$i$i$i = 0, $$1190280$i$i$i = 0, $$12$i = 0, $$126$i = 0, $$129$i = 0, $$13$i = 0, $$14$i = 0, $$15$i = 0, $$16$i = 0, $$1745$i = 0, $$2191274$i$i$i = 0, $$227$i = 0, $$228$i = 0, $$3180296$i$i$i = 0, $$331$i = 0, $$4105$i = 0, $$4181289$i$i$i = 0, $$432$i = 0, $$496$i = 0, $$5$i = 0, $$533$i = 0, $$6$i = 0, $$6$i$i = 0, $$6183281$i$i$i = 0, $$634$i = 0, $$7$i = 0, $$735$i = 0, $$8185275$i$i$i = 0, $$836$i = 0, $$846$i = 0, $$9$i$i$i = 0, $$937$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i$i = 0, $$idx100$i$i = 0, $$idx100$val$i$i = 0, $$idx101$val$i$i = 0, $$idx102$i$i = 0, $$idx102$val$i$i = 0, $$idx192$val$i$i$i = 0, $$pre$i203$i$i$i = 0, $$pre$i203328$i$i$i = 0, $$sink = 0, $$sroa$0$0 = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$0$4 = 0, $$sroa$0$5 = 0, $$sroa$0$6 = 0, $$sroa$0$7 = 0, $$sroa$0$8 = 0, $$sroa$0$9 = 0, $$sroa$15$0 = 0, $$sroa$15$1 = 0, $$sroa$15$2 = 0, $$sroa$15$3 = 0, $$sroa$15$4 = 0, $$sroa$15$5 = 0, $$sroa$15$6 = 0, $$sroa$15$7 = 0, $$sroa$15$8 = 0, $$sroa$15$9 = 0, $$sroa$28$0 = 0, $$sroa$28$1 = 0, $$sroa$28$2 = 0, $$sroa$28$3 = 0, $$sroa$28$4 = 0, $$sroa$28$5 = 0, $$sroa$28$6 = 0, $$sroa$28$7 = 0, $$sroa$28$8 = 0, $10 = 0, $104 = 0, $11 = 0, $114 = 0, $12 = 0, $124 = 0, $13 = 0, $134 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $153 = 0, $16 = 0, $163 = 0, $17 = 0, $173 = 0, $18 = 0, $183 = 0, $19 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $22 = 0, $221 = 0, $23 = 0, $231 = 0, $232 = 0, $233 = 0, $243 = 0, $253 = 0, $263 = 0, $268 = 0, $270 = 0, $272 = 0, $273 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $283 = 0, $29 = 0, $292 = 0, $293 = 0, $30 = 0, $313 = 0, $323 = 0, $324 = 0, $335 = 0, $346 = 0, $356 = 0, $366 = 0, $367 = 0, $373 = 0, $384 = 0, $394 = 0, $404 = 0, $414 = 0, $424 = 0, $434 = 0, $44 = 0, $444 = 0, $445 = 0, $452 = 0, $459 = 0, $461 = 0, $463 = 0, $466 = 0, $467 = 0, $475 = 0, $484 = 0, $485 = 0, $49 = 0, $493 = 0, $495 = 0, $497 = 0, $5 = 0, $50 = 0, $506 = 0, $509 = 0, $511 = 0, $515 = 0, $527 = 0, $53 = 0, $531 = 0, $540 = 0, $541 = 0, $552 = 0, $554 = 0, $557 = 0, $569 = 0, $571 = 0, $572 = 0, $574 = 0, $576 = 0, $578 = 0, $582 = 0, $587 = 0, $594 = 0, $6 = 0, $607 = 0, $608 = 0, $63 = 0, $7 = 0, $74 = 0, $77 = 0, $80 = 0, $82 = 0, $85 = 0, $88 = 0, $9 = 0, $96 = 0, $trunc$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 20 | 0;
 $7 = sp;
 $9 = HEAP32[$1 >> 2] | 0;
 $10 = $3 << 3;
 $11 = $6 + 4 | 0;
 $12 = $6 + 8 | 0;
 $13 = $7 + 4 | 0;
 $14 = $7 + 8 | 0;
 $$idx102$i$i = $6 + 16 | 0;
 $$idx100$i$i = $7 + 16 | 0;
 $15 = $3 + -2 | 0;
 $16 = $3 + -4 | 0;
 $17 = $5 + 4 | 0;
 $18 = $5 + 8 | 0;
 $19 = $5 + 16 | 0;
 $20 = $5 + 12 | 0;
 $21 = $6 + 12 | 0;
 $22 = $7 + 12 | 0;
 $$025108$i = 0;
 $$028107$i = 0;
 $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
 $$sroa$15$0 = $9;
 $$sroa$28$0 = $9;
 L1 : while (1) {
  $23 = $$028107$i + 2 | 0;
  if ($23 >>> 0 >= $10 >>> 0) {
   $$228$i = 52;
   $$sroa$0$9 = $$sroa$0$0;
   $$sroa$15$9 = $$sroa$15$0;
   label = 106;
   break;
  }
  $28 = HEAPU8[$2 + ($$028107$i >>> 3) >> 0] | 0;
  $29 = $$028107$i & 7;
  $30 = $$028107$i + 1 | 0;
  $44 = $$028107$i + 3 | 0;
  $trunc$i = ((HEAPU8[$2 + ($23 >>> 3) >> 0] | 0) >>> ($23 & 7) << 1 | (HEAPU8[$2 + ($30 >>> 3) >> 0] | 0) >>> ($30 & 7) & 1) & 255;
  switch ($trunc$i & 3) {
  case 3:
   {
    $$228$i = 20;
    $$sroa$0$9 = $$sroa$0$0;
    $$sroa$15$9 = $$sroa$15$0;
    label = 106;
    break L1;
    break;
   }
  case 0:
   {
    if (!($44 & 7)) $$129$i = $44; else {
     $50 = $44;
     while (1) {
      $49 = $50 + 1 | 0;
      if (!($49 & 7)) {
       $$129$i = $49;
       break;
      } else $50 = $49;
     }
    }
    $53 = $$129$i >>> 3;
    if ($53 >>> 0 >= $16 >>> 0) {
     $$228$i = 52;
     $$sroa$0$9 = $$sroa$0$0;
     $$sroa$15$9 = $$sroa$15$0;
     label = 106;
     break L1;
    }
    $63 = (HEAPU8[$2 + ($53 + 1) >> 0] | 0) << 8 | (HEAPU8[$2 + $53 >> 0] | 0);
    $74 = $53 + 4 | 0;
    if ((((HEAPU8[$2 + ($53 + 3) >> 0] | 0) << 8 | (HEAPU8[$2 + ($53 + 2) >> 0] | 0)) + $63 | 0) != 65535) {
     $$228$i = 21;
     $$sroa$0$9 = $$sroa$0$0;
     $$sroa$15$9 = $$sroa$15$0;
     label = 106;
     break L1;
    }
    $77 = $63 + $$025108$i | 0;
    if ($77 >>> 0 < $$sroa$15$0 >>> 0) {
     $$sroa$0$1 = $$sroa$0$0;
     $$sroa$15$1 = $$sroa$15$0;
     $$sroa$28$1 = $$sroa$28$0;
    } else if ($$sroa$28$0 >>> 0 < $77 >>> 0) {
     $80 = $77 << 1;
     $82 = _realloc($$sroa$0$0, $80) | 0;
     if (!$82) {
      $$228$i = 83;
      $$sroa$0$9 = $$sroa$0$0;
      $$sroa$15$9 = $$sroa$15$0;
      label = 106;
      break L1;
     }
     $$sroa$0$1 = $82;
     $$sroa$15$1 = $77;
     $$sroa$28$1 = $80;
    } else {
     $$sroa$0$1 = $$sroa$0$0;
     $$sroa$15$1 = $77;
     $$sroa$28$1 = $$sroa$28$0;
    }
    $85 = $63 + $74 | 0;
    if ($85 >>> 0 > $3 >>> 0) {
     $$228$i = 23;
     $$sroa$0$9 = $$sroa$0$1;
     $$sroa$15$9 = $$sroa$15$1;
     label = 106;
     break L1;
    }
    if (!$63) {
     $$045$lcssa$i$i = $74;
     $$227$i = $$025108$i;
    } else {
     $88 = $$sroa$0$1;
     $$04447$i$i = 0;
     $$04546$i$i = $74;
     $$126$i = $$025108$i;
     while (1) {
      HEAP8[$88 + $$126$i >> 0] = HEAP8[$2 + $$04546$i$i >> 0] | 0;
      $$04447$i$i = $$04447$i$i + 1 | 0;
      if (($$04447$i$i | 0) == ($63 | 0)) {
       $$045$lcssa$i$i = $85;
       $$227$i = $77;
       break;
      } else {
       $$04546$i$i = $$04546$i$i + 1 | 0;
       $$126$i = $$126$i + 1 | 0;
      }
     }
    }
    $$1745$i = $$045$lcssa$i$i << 3;
    $$846$i = $$227$i;
    $$sroa$0$8 = $$sroa$0$1;
    $$sroa$15$8 = $$sroa$15$1;
    $$sroa$28$8 = $$sroa$28$1;
    break;
   }
  default:
   {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$14 >> 2] = 0;
    L6 : do switch ($trunc$i & 3) {
    case 1:
     {
      _generateFixedLitLenTree($6);
      _generateFixedDistanceTree($7);
      $$937$i = $44;
      label = 63;
      break;
     }
    case 2:
     {
      $96 = $44 >>> 3;
      if ($96 >>> 0 >= $15 >>> 0) {
       $$16$i = $44;
       $$6$i$i = 49;
       $$7$i = $$025108$i;
       $$sroa$0$7 = $$sroa$0$0;
       $$sroa$15$7 = $$sroa$15$0;
       $$sroa$28$7 = $$sroa$28$0;
       $594 = 0;
       break L6;
      }
      $104 = $$028107$i + 4 | 0;
      $114 = $$028107$i + 5 | 0;
      $124 = $$028107$i + 6 | 0;
      $134 = $$028107$i + 7 | 0;
      $143 = (HEAPU8[$2 + ($104 >>> 3) >> 0] | 0) >>> ($104 & 7) << 1 & 2 | (HEAPU8[$2 + $96 >> 0] | 0) >>> ($44 & 7) & 1 | (HEAPU8[$2 + ($114 >>> 3) >> 0] | 0) >>> ($114 & 7) << 2 & 4 | (HEAPU8[$2 + ($124 >>> 3) >> 0] | 0) >>> ($124 & 7) << 3 & 8 | (HEAPU8[$2 + ($134 >>> 3) >> 0] | 0) >>> ($134 & 7) << 4 & 16;
      $144 = $$028107$i + 8 | 0;
      $145 = $143 + 257 | 0;
      $153 = $$028107$i + 9 | 0;
      $163 = $$028107$i + 10 | 0;
      $173 = $$028107$i + 11 | 0;
      $183 = $$028107$i + 12 | 0;
      $192 = (HEAPU8[$2 + ($153 >>> 3) >> 0] | 0) >>> ($153 & 7) << 1 & 2 | (HEAPU8[$2 + ($144 >>> 3) >> 0] | 0) >>> ($144 & 7) & 1 | (HEAPU8[$2 + ($163 >>> 3) >> 0] | 0) >>> ($163 & 7) << 2 & 4 | (HEAPU8[$2 + ($173 >>> 3) >> 0] | 0) >>> ($173 & 7) << 3 & 8 | (HEAPU8[$2 + ($183 >>> 3) >> 0] | 0) >>> ($183 & 7) << 4 & 16;
      $193 = $$028107$i + 13 | 0;
      $201 = $$028107$i + 14 | 0;
      $211 = $$028107$i + 15 | 0;
      $221 = $$028107$i + 16 | 0;
      $231 = $$028107$i + 17 | 0;
      $232 = ((HEAPU8[$2 + ($201 >>> 3) >> 0] | 0) >>> ($201 & 7) << 1 & 2 | (HEAPU8[$2 + ($193 >>> 3) >> 0] | 0) >>> ($193 & 7) & 1 | (HEAPU8[$2 + ($211 >>> 3) >> 0] | 0) >>> ($211 & 7) << 2 & 4 | (HEAPU8[$2 + ($221 >>> 3) >> 0] | 0) >>> ($221 & 7) << 3 & 8) + 4 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$17 >> 2] = 0;
      HEAP32[$18 >> 2] = 0;
      $233 = _malloc(76) | 0;
      L12 : do if (!$233) {
       $$11$i$i$i = 83;
       $$836$i = $231;
       $466 = 0;
       $467 = 0;
      } else {
       $$0177302$i$i$i = 0;
       $$331$i = $231;
       $$pre$i203$i$i$i = $231;
       while (1) {
        if ($$0177302$i$i$i >>> 0 < $232 >>> 0) {
         $243 = $$pre$i203$i$i$i + 1 | 0;
         $253 = $$pre$i203$i$i$i + 2 | 0;
         $263 = $$pre$i203$i$i$i + 3 | 0;
         $$432$i = $263;
         $$pre$i203328$i$i$i = $263;
         $$sink = (HEAPU8[$2 + ($243 >>> 3) >> 0] | 0) >>> ($243 & 7) << 1 & 2 | (HEAPU8[$2 + ($$pre$i203$i$i$i >>> 3) >> 0] | 0) >>> ($$pre$i203$i$i$i & 7) & 1 | (HEAPU8[$2 + ($253 >>> 3) >> 0] | 0) >>> ($253 & 7) << 2 & 4;
        } else {
         $$432$i = $$331$i;
         $$pre$i203328$i$i$i = $$pre$i203$i$i$i;
         $$sink = 0;
        }
        HEAP32[$233 + (HEAP32[11072 + ($$0177302$i$i$i << 2) >> 2] << 2) >> 2] = $$sink;
        $$0177302$i$i$i = $$0177302$i$i$i + 1 | 0;
        if (($$0177302$i$i$i | 0) == 19) break; else {
         $$331$i = $$432$i;
         $$pre$i203$i$i$i = $$pre$i203328$i$i$i;
        }
       }
       $268 = _malloc(76) | 0;
       HEAP32[$18 >> 2] = $268;
       if (!$268) {
        $$11$i$i$i = 83;
        $$836$i = $$432$i;
        $466 = 0;
        $467 = 0;
       } else {
        dest = $268;
        src = $233;
        stop = dest + 76 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$19 >> 2] = 19;
        HEAP32[$20 >> 2] = 7;
        $270 = _HuffmanTree_makeFromLengths2($5) | 0;
        if (!$270) {
         $272 = _malloc(1152) | 0;
         $273 = _malloc(128) | 0;
         if (($272 | 0) != 0 & ($273 | 0) != 0) {
          _memset($272 | 0, 0, 1152) | 0;
          dest = $273;
          stop = dest + 128 | 0;
          do {
           HEAP32[dest >> 2] = 0;
           dest = dest + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          $276 = $143 + 258 | 0;
          $277 = $192 + $276 | 0;
          if (!$277) {
           $$11$i$i$i = 64;
           $$836$i = $$432$i;
           $466 = $272;
           $467 = $273;
          } else {
           $$idx$val$i$i$i = HEAP32[$5 >> 2] | 0;
           $$idx192$val$i$i$i = HEAP32[$19 >> 2] | 0;
           $279 = -258 - $143 | 0;
           $$0173297$i$i$i = 0;
           $$3180296$i$i$i = 0;
           $$533$i = $$432$i;
           L24 : while (1) {
            if ($$533$i >>> 0 >= $10 >>> 0) {
             $$634$i = $$533$i;
             label = 53;
             break;
            }
            $$0171$i$i$i$i = 0;
            $283 = $$533$i;
            while (1) {
             $292 = HEAP32[$$idx$val$i$i$i + (((HEAPU8[$2 + ($283 >>> 3) >> 0] | 0) >>> ($283 & 7) & 1 | $$0171$i$i$i$i << 1) << 2) >> 2] | 0;
             $293 = $283 + 1 | 0;
             if ($292 >>> 0 < $$idx192$val$i$i$i >>> 0) break;
             $$0171$i$i$i$i = $292 - $$idx192$val$i$i$i | 0;
             if (!($293 >>> 0 < $10 >>> 0 & $$0171$i$i$i$i >>> 0 < $$idx192$val$i$i$i >>> 0)) {
              $$634$i = $293;
              label = 53;
              break L24;
             } else $283 = $293;
            }
            L31 : do if ($292 >>> 0 < 16) {
             HEAP32[($$3180296$i$i$i >>> 0 < $145 >>> 0 ? $272 + ($$3180296$i$i$i << 2) | 0 : $273 + ($$3180296$i$i$i - $145 << 2) | 0) >> 2] = $292;
             $$11188$i$i$i = $$3180296$i$i$i + 1 | 0;
             $$735$i = $293;
             $$9$i$i$i = $$0173297$i$i$i;
            } else switch ($292 | 0) {
            case 16:
             {
              if ($293 >>> 0 >= $10 >>> 0) {
               $$11$i$i$i = 50;
               $$836$i = $293;
               $466 = $272;
               $467 = $273;
               break L12;
              }
              if (!$$3180296$i$i$i) {
               $$11$i$i$i = 54;
               $$836$i = $293;
               $466 = $272;
               $467 = $273;
               break L12;
              }
              $313 = $283 + 2 | 0;
              $323 = $283 + 3 | 0;
              $324 = ((HEAPU8[$2 + ($313 >>> 3) >> 0] | 0) >>> ($313 & 7) << 1 & 2 | (HEAPU8[$2 + ($293 >>> 3) >> 0] | 0) >>> ($293 & 7) & 1) + 3 | 0;
              $$0$i$i$i = HEAP32[($$3180296$i$i$i >>> 0 < $276 >>> 0 ? $272 + ($$3180296$i$i$i + -1 << 2) | 0 : $273 + ($279 + $$3180296$i$i$i << 2) | 0) >> 2] | 0;
              $$0189288$i$i$i = 0;
              $$4181289$i$i$i = $$3180296$i$i$i;
              while (1) {
               if ($$4181289$i$i$i >>> 0 >= $277 >>> 0) {
                $$11188$i$i$i = $$4181289$i$i$i;
                $$735$i = $323;
                $$9$i$i$i = 13;
                break L31;
               }
               HEAP32[($$4181289$i$i$i >>> 0 < $145 >>> 0 ? $272 + ($$4181289$i$i$i << 2) | 0 : $273 + ($$4181289$i$i$i - $145 << 2) | 0) >> 2] = $$0$i$i$i;
               $335 = $$4181289$i$i$i + 1 | 0;
               $$0189288$i$i$i = $$0189288$i$i$i + 1 | 0;
               if ($$0189288$i$i$i >>> 0 >= $324 >>> 0) {
                $$11188$i$i$i = $335;
                $$735$i = $323;
                $$9$i$i$i = $$0173297$i$i$i;
                break;
               } else $$4181289$i$i$i = $335;
              }
              break;
             }
            case 17:
             {
              if ($293 >>> 0 >= $10 >>> 0) {
               $$11$i$i$i = 50;
               $$836$i = $293;
               $466 = $272;
               $467 = $273;
               break L12;
              }
              $346 = $283 + 2 | 0;
              $356 = $283 + 3 | 0;
              $366 = $283 + 4 | 0;
              $367 = ((HEAPU8[$2 + ($346 >>> 3) >> 0] | 0) >>> ($346 & 7) << 1 & 2 | (HEAPU8[$2 + ($293 >>> 3) >> 0] | 0) >>> ($293 & 7) & 1 | (HEAPU8[$2 + ($356 >>> 3) >> 0] | 0) >>> ($356 & 7) << 2 & 4) + 3 | 0;
              $$1190280$i$i$i = 0;
              $$6183281$i$i$i = $$3180296$i$i$i;
              while (1) {
               if ($$6183281$i$i$i >>> 0 >= $277 >>> 0) {
                $$11188$i$i$i = $$6183281$i$i$i;
                $$735$i = $366;
                $$9$i$i$i = 14;
                break L31;
               }
               HEAP32[($$6183281$i$i$i >>> 0 < $145 >>> 0 ? $272 + ($$6183281$i$i$i << 2) | 0 : $273 + ($$6183281$i$i$i - $145 << 2) | 0) >> 2] = 0;
               $373 = $$6183281$i$i$i + 1 | 0;
               $$1190280$i$i$i = $$1190280$i$i$i + 1 | 0;
               if ($$1190280$i$i$i >>> 0 >= $367 >>> 0) {
                $$11188$i$i$i = $373;
                $$735$i = $366;
                $$9$i$i$i = $$0173297$i$i$i;
                break;
               } else $$6183281$i$i$i = $373;
              }
              break;
             }
            case 18:
             {
              if ($293 >>> 0 >= $10 >>> 0) {
               $$11$i$i$i = 50;
               $$836$i = $293;
               $466 = $272;
               $467 = $273;
               break L12;
              }
              $384 = $283 + 2 | 0;
              $394 = $283 + 3 | 0;
              $404 = $283 + 4 | 0;
              $414 = $283 + 5 | 0;
              $424 = $283 + 6 | 0;
              $434 = $283 + 7 | 0;
              $444 = $283 + 8 | 0;
              $445 = ((HEAPU8[$2 + ($384 >>> 3) >> 0] | 0) >>> ($384 & 7) << 1 & 2 | (HEAPU8[$2 + ($293 >>> 3) >> 0] | 0) >>> ($293 & 7) & 1 | (HEAPU8[$2 + ($394 >>> 3) >> 0] | 0) >>> ($394 & 7) << 2 & 4 | (HEAPU8[$2 + ($404 >>> 3) >> 0] | 0) >>> ($404 & 7) << 3 & 8 | (HEAPU8[$2 + ($414 >>> 3) >> 0] | 0) >>> ($414 & 7) << 4 & 16 | (HEAPU8[$2 + ($424 >>> 3) >> 0] | 0) >>> ($424 & 7) << 5 & 32 | (HEAPU8[$2 + ($434 >>> 3) >> 0] | 0) >>> ($434 & 7) << 6 & 64) + 11 | 0;
              if (!$445) {
               $$11188$i$i$i = $$3180296$i$i$i;
               $$735$i = $444;
               $$9$i$i$i = $$0173297$i$i$i;
               break L31;
              }
              $$2191274$i$i$i = 0;
              $$8185275$i$i$i = $$3180296$i$i$i;
              while (1) {
               if ($$8185275$i$i$i >>> 0 >= $277 >>> 0) {
                $$11188$i$i$i = $$8185275$i$i$i;
                $$735$i = $444;
                $$9$i$i$i = 15;
                break L31;
               }
               HEAP32[($$8185275$i$i$i >>> 0 < $145 >>> 0 ? $272 + ($$8185275$i$i$i << 2) | 0 : $273 + ($$8185275$i$i$i - $145 << 2) | 0) >> 2] = 0;
               $452 = $$8185275$i$i$i + 1 | 0;
               $$2191274$i$i$i = $$2191274$i$i$i + 1 | 0;
               if ($$2191274$i$i$i >>> 0 >= $445 >>> 0) {
                $$11188$i$i$i = $452;
                $$735$i = $444;
                $$9$i$i$i = $$0173297$i$i$i;
                break;
               } else $$8185275$i$i$i = $452;
              }
              break;
             }
            default:
             {
              $$11$i$i$i = 16;
              $$836$i = $293;
              $466 = $272;
              $467 = $273;
              break L12;
             }
            } while (0);
            if ($$11188$i$i$i >>> 0 < $277 >>> 0) {
             $$0173297$i$i$i = $$9$i$i$i;
             $$3180296$i$i$i = $$11188$i$i$i;
             $$533$i = $$735$i;
            } else break;
           }
           if ((label | 0) == 53) {
            label = 0;
            $$11$i$i$i = $$634$i >>> 0 > $10 >>> 0 ? 10 : 11;
            $$836$i = $$634$i;
            $466 = $272;
            $467 = $273;
            break;
           }
           if (!$$9$i$i$i) if (!(HEAP32[$272 + 1024 >> 2] | 0)) {
            $$11$i$i$i = 64;
            $$836$i = $$735$i;
            $466 = $272;
            $467 = $273;
           } else {
            $459 = _malloc(1152) | 0;
            HEAP32[$12 >> 2] = $459;
            if (!$459) {
             $$11$i$i$i = 83;
             $$836$i = $$735$i;
             $466 = $272;
             $467 = $273;
            } else {
             _memcpy($459 | 0, $272 | 0, 1152) | 0;
             HEAP32[$$idx102$i$i >> 2] = 288;
             HEAP32[$21 >> 2] = 15;
             $461 = _HuffmanTree_makeFromLengths2($6) | 0;
             if (!$461) {
              $463 = _malloc(128) | 0;
              HEAP32[$14 >> 2] = $463;
              if (!$463) {
               $$11$i$i$i = 83;
               $$836$i = $$735$i;
               $466 = $272;
               $467 = $273;
              } else {
               dest = $463;
               src = $273;
               stop = dest + 128 | 0;
               do {
                HEAP32[dest >> 2] = HEAP32[src >> 2];
                dest = dest + 4 | 0;
                src = src + 4 | 0;
               } while ((dest | 0) < (stop | 0));
               HEAP32[$$idx100$i$i >> 2] = 32;
               HEAP32[$22 >> 2] = 15;
               $$11$i$i$i = _HuffmanTree_makeFromLengths2($7) | 0;
               $$836$i = $$735$i;
               $466 = $272;
               $467 = $273;
              }
             } else {
              $$11$i$i$i = $461;
              $$836$i = $$735$i;
              $466 = $272;
              $467 = $273;
             }
            }
           } else {
            $$11$i$i$i = $$9$i$i$i;
            $$836$i = $$735$i;
            $466 = $272;
            $467 = $273;
           }
          }
         } else {
          $$11$i$i$i = 83;
          $$836$i = $$432$i;
          $466 = $272;
          $467 = $273;
         }
        } else {
         $$11$i$i$i = $270;
         $$836$i = $$432$i;
         $466 = 0;
         $467 = 0;
        }
       }
      } while (0);
      _free($233);
      _free($466);
      _free($467);
      _free(HEAP32[$5 >> 2] | 0);
      _free(HEAP32[$17 >> 2] | 0);
      _free(HEAP32[$18 >> 2] | 0);
      if (!$$11$i$i$i) {
       $$937$i = $$836$i;
       label = 63;
      } else {
       $$16$i = $$836$i;
       $$6$i$i = $$11$i$i$i;
       $$7$i = $$025108$i;
       $$sroa$0$7 = $$sroa$0$0;
       $$sroa$15$7 = $$sroa$15$0;
       $$sroa$28$7 = $$sroa$28$0;
       $594 = HEAP32[$6 >> 2] | 0;
      }
      break;
     }
    default:
     {
      $$937$i = $44;
      label = 63;
     }
    } while (0);
    L63 : do if ((label | 0) == 63) {
     label = 0;
     $$idx101$val$i$i = HEAP32[$6 >> 2] | 0;
     $$idx102$val$i$i = HEAP32[$$idx102$i$i >> 2] | 0;
     $$idx$val$i$i = HEAP32[$7 >> 2] | 0;
     $$idx100$val$i$i = HEAP32[$$idx100$i$i >> 2] | 0;
     L65 : do if ($$937$i >>> 0 < $10 >>> 0) {
      $$10104$i = $$937$i;
      $$4105$i = $$025108$i;
      $$sroa$0$2 = $$sroa$0$0;
      $$sroa$15$2 = $$sroa$15$0;
      $$sroa$28$2 = $$sroa$28$0;
      L67 : while (1) {
       $$0171$i$i$i = 0;
       $475 = $$10104$i;
       while (1) {
        $484 = HEAP32[$$idx101$val$i$i + (((HEAPU8[$2 + ($475 >>> 3) >> 0] | 0) >>> ($475 & 7) & 1 | $$0171$i$i$i << 1) << 2) >> 2] | 0;
        $485 = $475 + 1 | 0;
        if ($484 >>> 0 < $$idx102$val$i$i >>> 0) break;
        $$0171$i$i$i = $484 - $$idx102$val$i$i | 0;
        if (!($485 >>> 0 < $10 >>> 0 & $$0171$i$i$i >>> 0 < $$idx102$val$i$i >>> 0)) {
         $$14$i = $485;
         $$496$i = $$4105$i;
         $$sroa$0$5 = $$sroa$0$2;
         $$sroa$15$5 = $$sroa$15$2;
         $$sroa$28$5 = $$sroa$28$2;
         break L65;
        } else $475 = $485;
       }
       if ($484 >>> 0 < 256) {
        if ($$4105$i >>> 0 < $$sroa$15$2 >>> 0) {
         $$sroa$0$3 = $$sroa$0$2;
         $$sroa$15$3 = $$sroa$15$2;
         $$sroa$28$3 = $$sroa$28$2;
        } else {
         $493 = ($$4105$i << 1) + 2 | 0;
         if ($$sroa$28$2 >>> 0 < $493 >>> 0) {
          $495 = $493 << 1;
          $497 = _realloc($$sroa$0$2, $495) | 0;
          if (!$497) {
           $$16$i = $485;
           $$6$i$i = 83;
           $$7$i = $$4105$i;
           $$sroa$0$7 = $$sroa$0$2;
           $$sroa$15$7 = $$sroa$15$2;
           $$sroa$28$7 = $$sroa$28$2;
           $594 = $$idx101$val$i$i;
           break L63;
          }
          $$sroa$0$3 = $497;
          $$sroa$15$3 = $493;
          $$sroa$28$3 = $495;
         } else {
          $$sroa$0$3 = $$sroa$0$2;
          $$sroa$15$3 = $493;
          $$sroa$28$3 = $$sroa$28$2;
         }
        }
        HEAP8[$$sroa$0$3 + $$4105$i >> 0] = $484;
        $$15$i = $485;
        $$6$i = $$4105$i + 1 | 0;
        $$sroa$0$6 = $$sroa$0$3;
        $$sroa$15$6 = $$sroa$15$3;
        $$sroa$28$6 = $$sroa$28$3;
       } else {
        if (!(($484 | 0) != 256 & $484 >>> 0 < 286)) {
         label = 99;
         break;
        }
        $506 = $484 + -257 | 0;
        if ($485 >>> 0 >= $10 >>> 0) {
         $$16$i = $485;
         $$6$i$i = 51;
         $$7$i = $$4105$i;
         $$sroa$0$7 = $$sroa$0$2;
         $$sroa$15$7 = $$sroa$15$2;
         $$sroa$28$7 = $$sroa$28$2;
         $594 = $$idx101$val$i$i;
         break L63;
        }
        $509 = HEAP32[11152 + ($506 << 2) >> 2] | 0;
        $511 = HEAP32[11280 + ($506 << 2) >> 2] | 0;
        if (($484 + -265 | 0) >>> 0 > 19) {
         $$012$lcssa$i$i$i = 0;
         $$11$i = $485;
        } else {
         $$01213$i$i$i = 0;
         $$014$i$i$i = 0;
         $515 = $485;
         while (1) {
          $$01213$i$i$i = (((HEAPU8[$2 + ($515 >>> 3) >> 0] | 0) >>> ($515 & 7) & 1) << $$014$i$i$i) + $$01213$i$i$i | 0;
          $$014$i$i$i = $$014$i$i$i + 1 | 0;
          if (($$014$i$i$i | 0) == ($509 | 0)) break; else $515 = $515 + 1 | 0;
         }
         $$012$lcssa$i$i$i = $$01213$i$i$i;
         $$11$i = $509 + $485 | 0;
        }
        $527 = $$012$lcssa$i$i$i + $511 | 0;
        if ($$11$i >>> 0 >= $10 >>> 0) {
         $$12$i = $$11$i;
         label = 85;
         break;
        }
        $$0171$i112$i$i = 0;
        $531 = $$11$i;
        while (1) {
         $540 = HEAP32[$$idx$val$i$i + (((HEAPU8[$2 + ($531 >>> 3) >> 0] | 0) >>> ($531 & 7) & 1 | $$0171$i112$i$i << 1) << 2) >> 2] | 0;
         $541 = $531 + 1 | 0;
         if ($540 >>> 0 < $$idx100$val$i$i >>> 0) break;
         $$0171$i112$i$i = $540 - $$idx100$val$i$i | 0;
         if (!($541 >>> 0 < $10 >>> 0 & $$0171$i112$i$i >>> 0 < $$idx100$val$i$i >>> 0)) {
          $$12$i = $541;
          label = 85;
          break L67;
         } else $531 = $541;
        }
        if ($540 >>> 0 > 29) {
         $$12$i = $541;
         label = 85;
         break;
        }
        if ($541 >>> 0 >= $10 >>> 0) {
         $$16$i = $541;
         $$6$i$i = 51;
         $$7$i = $$4105$i;
         $$sroa$0$7 = $$sroa$0$2;
         $$sroa$15$7 = $$sroa$15$2;
         $$sroa$28$7 = $$sroa$28$2;
         $594 = $$idx101$val$i$i;
         break L63;
        }
        $552 = HEAP32[11408 + ($540 << 2) >> 2] | 0;
        $554 = HEAP32[11536 + ($540 << 2) >> 2] | 0;
        if ($540 >>> 0 < 4) {
         $$012$lcssa$i122$i$i = 0;
         $$13$i = $541;
        } else {
         $$01213$i120$i$i = 0;
         $$014$i119$i$i = 0;
         $557 = $541;
         while (1) {
          $$01213$i120$i$i = (((HEAPU8[$2 + ($557 >>> 3) >> 0] | 0) >>> ($557 & 7) & 1) << $$014$i119$i$i) + $$01213$i120$i$i | 0;
          $$014$i119$i$i = $$014$i119$i$i + 1 | 0;
          if (($$014$i119$i$i | 0) == ($552 | 0)) break; else $557 = $557 + 1 | 0;
         }
         $$012$lcssa$i122$i$i = $$01213$i120$i$i;
         $$13$i = $552 + $541 | 0;
        }
        $569 = $$012$lcssa$i122$i$i + $554 | 0;
        if ($$4105$i >>> 0 < $569 >>> 0) {
         $$16$i = $$13$i;
         $$6$i$i = 52;
         $$7$i = $$4105$i;
         $$sroa$0$7 = $$sroa$0$2;
         $$sroa$15$7 = $$sroa$15$2;
         $$sroa$28$7 = $$sroa$28$2;
         $594 = $$idx101$val$i$i;
         break L63;
        }
        $571 = $$4105$i - $569 | 0;
        $572 = $527 + $$4105$i | 0;
        if ($572 >>> 0 < $$sroa$15$2 >>> 0) {
         $$sroa$0$4 = $$sroa$0$2;
         $$sroa$15$4 = $$sroa$15$2;
         $$sroa$28$4 = $$sroa$28$2;
        } else {
         $574 = $572 << 1;
         if ($$sroa$28$2 >>> 0 < $574 >>> 0) {
          $576 = $572 << 2;
          $578 = _realloc($$sroa$0$2, $576) | 0;
          if (!$578) {
           $$16$i = $$13$i;
           $$6$i$i = 83;
           $$7$i = $$4105$i;
           $$sroa$0$7 = $$sroa$0$2;
           $$sroa$15$7 = $$sroa$15$2;
           $$sroa$28$7 = $$sroa$28$2;
           $594 = $$idx101$val$i$i;
           break L63;
          }
          $$sroa$0$4 = $578;
          $$sroa$15$4 = $574;
          $$sroa$28$4 = $576;
         } else {
          $$sroa$0$4 = $$sroa$0$2;
          $$sroa$15$4 = $574;
          $$sroa$28$4 = $$sroa$28$2;
         }
        }
        if (!$527) {
         $$15$i = $$13$i;
         $$6$i = $$4105$i;
         $$sroa$0$6 = $$sroa$0$4;
         $$sroa$15$6 = $$sroa$15$4;
         $$sroa$28$6 = $$sroa$28$4;
        } else {
         $582 = $$sroa$0$4;
         $$0166$i$i = $571;
         $$095165$i$i = 0;
         $$5$i = $$4105$i;
         while (1) {
          HEAP8[$582 + $$5$i >> 0] = HEAP8[$582 + $$0166$i$i >> 0] | 0;
          $587 = $$0166$i$i + 1 | 0;
          $$095165$i$i = $$095165$i$i + 1 | 0;
          if (($$095165$i$i | 0) == ($527 | 0)) {
           $$15$i = $$13$i;
           $$6$i = $572;
           $$sroa$0$6 = $$sroa$0$4;
           $$sroa$15$6 = $$sroa$15$4;
           $$sroa$28$6 = $$sroa$28$4;
           break;
          } else {
           $$0166$i$i = $587 >>> 0 < $$4105$i >>> 0 ? $587 : $571;
           $$5$i = $$5$i + 1 | 0;
          }
         }
        }
       }
       if ($$15$i >>> 0 < $10 >>> 0) {
        $$10104$i = $$15$i;
        $$4105$i = $$6$i;
        $$sroa$0$2 = $$sroa$0$6;
        $$sroa$15$2 = $$sroa$15$6;
        $$sroa$28$2 = $$sroa$28$6;
       } else {
        $$14$i = $$15$i;
        $$496$i = $$6$i;
        $$sroa$0$5 = $$sroa$0$6;
        $$sroa$15$5 = $$sroa$15$6;
        $$sroa$28$5 = $$sroa$28$6;
        break L65;
       }
      }
      if ((label | 0) == 85) {
       label = 0;
       $$16$i = $$12$i;
       $$6$i$i = ($484 | 0) == -1 ? ($$12$i >>> 0 > $10 >>> 0 ? 10 : 11) : 18;
       $$7$i = $$4105$i;
       $$sroa$0$7 = $$sroa$0$2;
       $$sroa$15$7 = $$sroa$15$2;
       $$sroa$28$7 = $$sroa$28$2;
       $594 = $$idx101$val$i$i;
       break L63;
      } else if ((label | 0) == 99) {
       label = 0;
       if (($484 | 0) == 256) {
        $$16$i = $485;
        $$6$i$i = 0;
        $$7$i = $$4105$i;
        $$sroa$0$7 = $$sroa$0$2;
        $$sroa$15$7 = $$sroa$15$2;
        $$sroa$28$7 = $$sroa$28$2;
        $594 = $$idx101$val$i$i;
        break L63;
       } else {
        $$14$i = $485;
        $$496$i = $$4105$i;
        $$sroa$0$5 = $$sroa$0$2;
        $$sroa$15$5 = $$sroa$15$2;
        $$sroa$28$5 = $$sroa$28$2;
        break;
       }
      }
     } else {
      $$14$i = $$937$i;
      $$496$i = $$025108$i;
      $$sroa$0$5 = $$sroa$0$0;
      $$sroa$15$5 = $$sroa$15$0;
      $$sroa$28$5 = $$sroa$28$0;
     } while (0);
     $$16$i = $$14$i;
     $$6$i$i = $$14$i >>> 0 > $10 >>> 0 ? 10 : 11;
     $$7$i = $$496$i;
     $$sroa$0$7 = $$sroa$0$5;
     $$sroa$15$7 = $$sroa$15$5;
     $$sroa$28$7 = $$sroa$28$5;
     $594 = $$idx101$val$i$i;
    } while (0);
    _free($594);
    _free(HEAP32[$11 >> 2] | 0);
    _free(HEAP32[$12 >> 2] | 0);
    _free(HEAP32[$7 >> 2] | 0);
    _free(HEAP32[$13 >> 2] | 0);
    _free(HEAP32[$14 >> 2] | 0);
    if (!$$6$i$i) {
     $$1745$i = $$16$i;
     $$846$i = $$7$i;
     $$sroa$0$8 = $$sroa$0$7;
     $$sroa$15$8 = $$sroa$15$7;
     $$sroa$28$8 = $$sroa$28$7;
    } else {
     $$228$i = $$6$i$i;
     $$sroa$0$9 = $$sroa$0$7;
     $$sroa$15$9 = $$sroa$15$7;
     label = 106;
     break L1;
    }
   }
  }
  if (!(1 << $29 & $28)) {
   $$025108$i = $$846$i;
   $$028107$i = $$1745$i;
   $$sroa$0$0 = $$sroa$0$8;
   $$sroa$15$0 = $$sroa$15$8;
   $$sroa$28$0 = $$sroa$28$8;
  } else {
   label = 104;
   break;
  }
 }
 if ((label | 0) == 104) {
  if ($$sroa$28$8 >>> 0 >= $$846$i >>> 0) {
   $$228$i = 0;
   $$sroa$0$9 = $$sroa$0$8;
   $$sroa$15$9 = $$846$i;
   HEAP32[$0 >> 2] = $$sroa$0$9;
   HEAP32[$1 >> 2] = $$sroa$15$9;
   STACKTOP = sp;
   return $$228$i | 0;
  }
  $607 = _realloc($$sroa$0$8, $$846$i << 1) | 0;
  $608 = ($607 | 0) == 0;
  $$228$i = $608 ? 83 : 0;
  $$sroa$0$9 = $608 ? $$sroa$0$8 : $607;
  $$sroa$15$9 = $608 ? $$sroa$15$8 : $$846$i;
  HEAP32[$0 >> 2] = $$sroa$0$9;
  HEAP32[$1 >> 2] = $$sroa$15$9;
  STACKTOP = sp;
  return $$228$i | 0;
 } else if ((label | 0) == 106) {
  HEAP32[$0 >> 2] = $$sroa$0$9;
  HEAP32[$1 >> 2] = $$sroa$15$9;
  STACKTOP = sp;
  return $$228$i | 0;
 }
 return 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0.0, $151 = 0, $154 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $188 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $273 = 0, $286 = 0, $291 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $34 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $38 = 0.0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $393 = 0, $395 = 0, $398 = 0, $401 = 0, $412 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_670($1) | 0;
 $13 = tempRet0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_670($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 20672;
  $25 = tempRet0;
  $412 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 20673 : 20678) : 20675;
  $25 = $13;
  $412 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_669($0, 32, $2, $34, $4 & -65537);
  _out($0, $$0523, $$0522);
  _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 20699 : 20703) : $30 ? 20691 : 20695, 3);
  _pad_669($0, 32, $2, $34, $4 ^ 8192);
  $$sink757 = $34;
 } else {
  $38 = +_frexpl($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[13984 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi717Z2D = $103;
    $$pre$phi718Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre720 | 0;
    $$pre$phi717Z2D = $108;
    $$pre$phi718Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_669($0, 32, $2, $113, $4);
   _out($0, $spec$select, $47);
   _pad_669($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre720 - $9 | 0;
   _out($0, $8, $115);
   $116 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_669($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out($0, $79, $116);
   _pad_669($0, 32, $2, $113, $4 ^ 8192);
   $$sink757 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $132 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $135 = $$pr;
   while (1) {
    $136 = ($135 | 0) < 29 ? $135 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $139 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $136 | 0) | 0;
      $141 = _i64Add($139 | 0, tempRet0 | 0, $$0497670 | 0, 0) | 0;
      $142 = tempRet0;
      $$0497670 = ___udivdi3($141 | 0, $142 | 0, 1e9, 0) | 0;
      $145 = ___muldi3($$0497670 | 0, tempRet0 | 0, 1e9, 0) | 0;
      $147 = _i64Subtract($141 | 0, $142 | 0, $145 | 0, tempRet0 | 0) | 0;
      HEAP32[$$0488671 >> 2] = $147;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $151 = $$1482683 + -4 | 0;
      HEAP32[$151 >> 2] = $$0497670;
      $$2483 = $151;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $154 = $$3501676 + -4 | 0;
      if (HEAP32[$154 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($154 >>> 0 > $$2483 >>> 0) $$3501676 = $154; else {
       $$3501$lcssa = $154;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $158 = (HEAP32[$7 >> 2] | 0) - $136 | 0;
    HEAP32[$7 >> 2] = $158;
    if (($158 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $135 = $158;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $158;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $163 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $164 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $166 = $$pr564;
   while (1) {
    $165 = 0 - $166 | 0;
    $168 = ($165 | 0) < 9 ? $165 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $174 = (1 << $168) + -1 | 0;
     $175 = 1e9 >>> $168;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $176 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($176 >>> $168) + $$0487657;
      $$0487657 = Math_imul($176 & $174, $175) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $188 = $164 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $188 >> 2 | 0) > ($163 | 0) ? $188 + ($163 << 2) | 0 : $$5503;
    $166 = (HEAP32[$7 >> 2] | 0) + $168 | 0;
    HEAP32[$7 >> 2] = $166;
    if (($166 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($132 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $132 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 - ($223 * 9 | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = $231 - (Math_imul($232, $$1533$lcssa) | 0) | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    $248 = $231 - $234 | 0;
    HEAP32[$225 >> 2] = $248;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $248 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($132 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $273 = $$9507625 + -4 | 0;
    if (HEAP32[$273 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($273 >>> 0 > $$9 >>> 0) $$9507625 = $273; else {
     $$9507$lcssa = $273;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $132 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $11) | 0;
   $320 = $11;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_669($0, 32, $2, $339, $4);
  _out($0, $$0523, $$0522);
  _pad_669($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out($0, 20707, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_669($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = 0 - $9 | 0;
    $387 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $389 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($389 | 0) == ($382 | 0)) {
      HEAP8[$387 >> 0] = 48;
      $$0 = $387;
     } else $$0 = $389;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $395 = $$0 + 1 | 0;
      _out($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $395;
       break;
      }
      _out($0, 20707, 1);
      $$2 = $395;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $386 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $393 = $$1604 + -1 | 0;
       if ($393 >>> 0 > $8 >>> 0) $$1604 = $393; else {
        $$2 = $393;
        break;
       }
      }
     } while (0);
     $398 = $385 - $$2 | 0;
     _out($0, $$2, ($$5609 | 0) > ($398 | 0) ? $398 : $$5609);
     $401 = $$5609 - $398 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($401 | 0) > -1)) {
      $$5$lcssa = $401;
      break;
     } else $$5609 = $401;
    }
   } else $$5$lcssa = $$3477;
   _pad_669($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_669($0, 32, $2, $339, $4 ^ 8192);
  $$sink757 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function _getPixelColorsRGBA8($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$011$lcssa$i = 0, $$011$lcssa$i$us = 0, $$01113$i = 0, $$01113$i$us = 0, $$01113$i242 = 0, $$01113$i242$us = 0, $$014$i = 0, $$014$i$us = 0, $$014$i241 = 0, $$014$i241$us = 0, $$0220 = 0, $$0220$us = 0, $$0222272 = 0, $$0222272$us = 0, $$0224271 = 0, $$0224271$us = 0, $$0250283 = 0, $$0250283$us = 0, $$0253268 = 0, $$0253268$us = 0, $$1 = 0, $$1223275 = 0, $$1223275$us = 0, $$1225274 = 0, $$1225274$us = 0, $$1254 = 0, $$1254$us = 0, $$2226269 = 0, $$2226269$us = 0, $$2252 = 0, $$2252$us = 0, $$2270 = 0, $$2270$us = 0, $$3227277 = 0, $$3227277$us = 0, $$3278 = 0, $$3278$us = 0, $$4228280 = 0, $$4228280$us = 0, $$4281 = 0, $$4281$us = 0, $$5229284 = 0, $$5229284$us = 0, $$5285 = 0, $$5285$us = 0, $$6230287 = 0, $$6230287$us = 0, $$6288 = 0, $$6288$us = 0, $$7231290 = 0, $$7231290$us = 0, $$7291 = 0, $$7291$us = 0, $$8232293 = 0, $$8232293$us = 0, $$8294 = 0, $$8294$us = 0, $$9233296 = 0, $$9233296$us = 0, $$9297 = 0, $$9297$us = 0, $10 = 0, $102 = 0, $104 = 0, $112 = 0, $114 = 0, $118 = 0, $12 = 0, $121 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $136 = 0, $14 = 0, $140 = 0, $15 = 0, $153 = 0, $158 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $179 = 0, $183 = 0, $218 = 0, $223 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $245 = 0, $253 = 0, $255 = 0, $263 = 0, $284 = 0, $289 = 0, $297 = 0, $299 = 0, $30 = 0, $307 = 0, $331 = 0, $332 = 0, $334 = 0, $345 = 0, $350 = 0, $352 = 0, $36 = 0, $363 = 0, $37 = 0, $371 = 0, $372 = 0, $38 = 0, $389 = 0, $39 = 0, $40 = 0, $402 = 0, $419 = 0, $55 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $75 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $96 = 0, $99 = 0, label = 0;
 $6 = ($2 | 0) != 0;
 $7 = $6 ? 4 : 3;
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   $9 = $4 + 4 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   switch ($10 | 0) {
   case 8:
    {
     if (!$1) {
      $$1 = 0;
      return $$1 | 0;
     }
     $12 = $4 + 16 | 0;
     $13 = $4 + 20 | 0;
     if (!$6) {
      $$0222272 = $0;
      $$0224271 = 0;
      while (1) {
       $30 = HEAP8[$3 + $$0224271 >> 0] | 0;
       HEAP8[$$0222272 + 2 >> 0] = $30;
       HEAP8[$$0222272 + 1 >> 0] = $30;
       HEAP8[$$0222272 >> 0] = $30;
       $$0224271 = $$0224271 + 1 | 0;
       if (($$0224271 | 0) == ($1 | 0)) {
        $$1 = 0;
        break;
       } else $$0222272 = $$0222272 + $7 | 0;
      }
      return $$1 | 0;
     }
     $$0222272$us = $0;
     $$0224271$us = 0;
     while (1) {
      $14 = $3 + $$0224271$us | 0;
      $15 = HEAP8[$14 >> 0] | 0;
      HEAP8[$$0222272$us + 2 >> 0] = $15;
      HEAP8[$$0222272$us + 1 >> 0] = $15;
      HEAP8[$$0222272$us >> 0] = $15;
      if (!(HEAP32[$12 >> 2] | 0)) $24 = 0; else $24 = (HEAP32[$13 >> 2] | 0) == (HEAPU8[$14 >> 0] | 0 | 0);
      HEAP8[$$0222272$us + 3 >> 0] = ($24 ^ 1) << 31 >> 31;
      $$0224271$us = $$0224271$us + 1 | 0;
      if (($$0224271$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$0222272$us = $$0222272$us + $7 | 0;
     }
     return $$1 | 0;
    }
   case 16:
    {
     if (!$1) {
      $$1 = 0;
      return $$1 | 0;
     }
     $36 = $4 + 16 | 0;
     $37 = $4 + 20 | 0;
     if (!$6) {
      $$1223275 = $0;
      $$1225274 = 0;
      while (1) {
       $62 = HEAP8[$3 + ($$1225274 << 1) >> 0] | 0;
       HEAP8[$$1223275 + 2 >> 0] = $62;
       HEAP8[$$1223275 + 1 >> 0] = $62;
       HEAP8[$$1223275 >> 0] = $62;
       $$1225274 = $$1225274 + 1 | 0;
       if (($$1225274 | 0) == ($1 | 0)) {
        $$1 = 0;
        break;
       } else $$1223275 = $$1223275 + $7 | 0;
      }
      return $$1 | 0;
     }
     $$1223275$us = $0;
     $$1225274$us = 0;
     while (1) {
      $38 = $$1225274$us << 1;
      $39 = $3 + $38 | 0;
      $40 = HEAP8[$39 >> 0] | 0;
      HEAP8[$$1223275$us + 2 >> 0] = $40;
      HEAP8[$$1223275$us + 1 >> 0] = $40;
      HEAP8[$$1223275$us >> 0] = $40;
      if (!(HEAP32[$36 >> 2] | 0)) $55 = 0; else $55 = ((HEAPU8[$39 >> 0] | 0) << 8 | (HEAPU8[$3 + ($38 | 1) >> 0] | 0) | 0) == (HEAP32[$37 >> 2] | 0);
      HEAP8[$$1223275$us + 3 >> 0] = ($55 ^ 1) << 31 >> 31;
      $$1225274$us = $$1225274$us + 1 | 0;
      if (($$1225274$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$1223275$us = $$1223275$us + $7 | 0;
     }
     return $$1 | 0;
    }
   default:
    {
     $68 = (1 << $10) + -1 | 0;
     if (!$1) {
      $$1 = 0;
      return $$1 | 0;
     }
     $70 = $4 + 16 | 0;
     $71 = $4 + 20 | 0;
     if (!$6) {
      $$0253268 = 0;
      $$2226269 = 0;
      $$2270 = $0;
      $102 = $10;
      while (1) {
       if (!$102) {
        $$011$lcssa$i = 0;
        $$1254 = $$0253268;
       } else {
        $$01113$i = 0;
        $$014$i = $102 + -1 | 0;
        $104 = $$0253268;
        while (1) {
         $112 = $104 + 1 | 0;
         $114 = (((HEAPU8[$3 + ($104 >>> 3) >> 0] | 0) >>> ($104 & 7 ^ 7) & 1) << $$014$i) + $$01113$i | 0;
         $$014$i = $$014$i + -1 | 0;
         if ($$014$i >>> 0 >= $102 >>> 0) {
          $$011$lcssa$i = $114;
          $$1254 = $112;
          break;
         } else {
          $$01113$i = $114;
          $104 = $112;
         }
        }
       }
       $118 = ((($$011$lcssa$i * 255 | 0) >>> 0) / ($68 >>> 0) | 0) & 255;
       HEAP8[$$2270 + 2 >> 0] = $118;
       HEAP8[$$2270 + 1 >> 0] = $118;
       HEAP8[$$2270 >> 0] = $118;
       $121 = $$2226269 + 1 | 0;
       if (($121 | 0) == ($1 | 0)) {
        $$1 = 0;
        break;
       }
       $$0253268 = $$1254;
       $$2226269 = $121;
       $$2270 = $$2270 + $7 | 0;
       $102 = HEAP32[$9 >> 2] | 0;
      }
      return $$1 | 0;
     }
     $$0253268$us = 0;
     $$2226269$us = 0;
     $$2270$us = $0;
     $73 = $10;
     while (1) {
      if (!$73) {
       $$011$lcssa$i$us = 0;
       $$1254$us = $$0253268$us;
      } else {
       $$01113$i$us = 0;
       $$014$i$us = $73 + -1 | 0;
       $75 = $$0253268$us;
       while (1) {
        $83 = $75 + 1 | 0;
        $85 = (((HEAPU8[$3 + ($75 >>> 3) >> 0] | 0) >>> ($75 & 7 ^ 7) & 1) << $$014$i$us) + $$01113$i$us | 0;
        $$014$i$us = $$014$i$us + -1 | 0;
        if ($$014$i$us >>> 0 >= $73 >>> 0) {
         $$011$lcssa$i$us = $85;
         $$1254$us = $83;
         break;
        } else {
         $$01113$i$us = $85;
         $75 = $83;
        }
       }
      }
      $89 = ((($$011$lcssa$i$us * 255 | 0) >>> 0) / ($68 >>> 0) | 0) & 255;
      HEAP8[$$2270$us + 2 >> 0] = $89;
      HEAP8[$$2270$us + 1 >> 0] = $89;
      HEAP8[$$2270$us >> 0] = $89;
      if (!(HEAP32[$70 >> 2] | 0)) $96 = 0; else $96 = ($$011$lcssa$i$us | 0) == (HEAP32[$71 >> 2] | 0);
      HEAP8[$$2270$us + 3 >> 0] = ($96 ^ 1) << 31 >> 31;
      $99 = $$2226269$us + 1 | 0;
      if (($99 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      }
      $$0253268$us = $$1254$us;
      $$2226269$us = $99;
      $$2270$us = $$2270$us + $7 | 0;
      $73 = HEAP32[$9 >> 2] | 0;
     }
     return $$1 | 0;
    }
   }
   break;
  }
 case 2:
  {
   $126 = ($1 | 0) != 0;
   if ((HEAP32[$4 + 4 >> 2] | 0) == 8) {
    if (!$126) {
     $$1 = 0;
     return $$1 | 0;
    }
    $127 = $4 + 16 | 0;
    $128 = $4 + 20 | 0;
    $129 = $4 + 24 | 0;
    $130 = $4 + 28 | 0;
    if (!$6) {
     $$3227277 = 0;
     $$3278 = $0;
     while (1) {
      $158 = $$3227277 * 3 | 0;
      HEAP8[$$3278 >> 0] = HEAP8[$3 + $158 >> 0] | 0;
      HEAP8[$$3278 + 1 >> 0] = HEAP8[$3 + ($158 + 1) >> 0] | 0;
      HEAP8[$$3278 + 2 >> 0] = HEAP8[$3 + ($158 + 2) >> 0] | 0;
      $$3227277 = $$3227277 + 1 | 0;
      if (($$3227277 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$3278 = $$3278 + $7 | 0;
     }
     return $$1 | 0;
    }
    $$3227277$us = 0;
    $$3278$us = $0;
    while (1) {
     $131 = $$3227277$us * 3 | 0;
     $133 = HEAP8[$3 + $131 >> 0] | 0;
     HEAP8[$$3278$us >> 0] = $133;
     $136 = HEAP8[$3 + ($131 + 1) >> 0] | 0;
     HEAP8[$$3278$us + 1 >> 0] = $136;
     $140 = HEAP8[$3 + ($131 + 2) >> 0] | 0;
     HEAP8[$$3278$us + 2 >> 0] = $140;
     if (!(HEAP32[$127 >> 2] | 0)) $153 = 0; else if ((HEAP32[$128 >> 2] | 0) == ($133 & 255 | 0)) if ((HEAP32[$129 >> 2] | 0) == ($136 & 255 | 0)) $153 = (HEAP32[$130 >> 2] | 0) == ($140 & 255 | 0); else $153 = 0; else $153 = 0;
     HEAP8[$$3278$us + 3 >> 0] = ($153 ^ 1) << 31 >> 31;
     $$3227277$us = $$3227277$us + 1 | 0;
     if (($$3227277$us | 0) == ($1 | 0)) {
      $$1 = 0;
      break;
     } else $$3278$us = $$3278$us + $7 | 0;
    }
    return $$1 | 0;
   } else {
    if (!$126) {
     $$1 = 0;
     return $$1 | 0;
    }
    $171 = $4 + 16 | 0;
    $172 = $4 + 20 | 0;
    $173 = $4 + 24 | 0;
    $174 = $4 + 28 | 0;
    if (!$6) {
     $$4228280 = 0;
     $$4281 = $0;
     while (1) {
      $223 = $$4228280 * 6 | 0;
      HEAP8[$$4281 >> 0] = HEAP8[$3 + $223 >> 0] | 0;
      HEAP8[$$4281 + 1 >> 0] = HEAP8[$3 + ($223 + 2) >> 0] | 0;
      HEAP8[$$4281 + 2 >> 0] = HEAP8[$3 + ($223 + 4) >> 0] | 0;
      $$4228280 = $$4228280 + 1 | 0;
      if (($$4228280 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$4281 = $$4281 + $7 | 0;
     }
     return $$1 | 0;
    }
    $$4228280$us = 0;
    $$4281$us = $0;
    while (1) {
     $175 = $$4228280$us * 6 | 0;
     $176 = $3 + $175 | 0;
     HEAP8[$$4281$us >> 0] = HEAP8[$176 >> 0] | 0;
     $179 = $3 + ($175 + 2) | 0;
     HEAP8[$$4281$us + 1 >> 0] = HEAP8[$179 >> 0] | 0;
     $183 = $3 + ($175 + 4) | 0;
     HEAP8[$$4281$us + 2 >> 0] = HEAP8[$183 >> 0] | 0;
     if (!(HEAP32[$171 >> 2] | 0)) $218 = 0; else if (((HEAPU8[$176 >> 0] | 0) << 8 | (HEAPU8[$3 + ($175 | 1) >> 0] | 0) | 0) == (HEAP32[$172 >> 2] | 0)) if (((HEAPU8[$179 >> 0] | 0) << 8 | (HEAPU8[$3 + ($175 + 3) >> 0] | 0) | 0) == (HEAP32[$173 >> 2] | 0)) $218 = ((HEAPU8[$183 >> 0] | 0) << 8 | (HEAPU8[$3 + ($175 + 5) >> 0] | 0) | 0) == (HEAP32[$174 >> 2] | 0); else $218 = 0; else $218 = 0;
     HEAP8[$$4281$us + 3 >> 0] = ($218 ^ 1) << 31 >> 31;
     $$4228280$us = $$4228280$us + 1 | 0;
     if (($$4228280$us | 0) == ($1 | 0)) {
      $$1 = 0;
      break;
     } else $$4281$us = $$4281$us + $7 | 0;
    }
    return $$1 | 0;
   }
   break;
  }
 case 3:
  {
   if (!$1) {
    $$1 = 0;
    return $$1 | 0;
   }
   $237 = $4 + 4 | 0;
   $238 = $4 + 12 | 0;
   $239 = $4 + 8 | 0;
   if ($5 | 0) {
    $$0250283 = 0;
    $$5229284 = 0;
    $$5285 = $0;
    while (1) {
     $284 = HEAP32[$237 >> 2] | 0;
     switch ($284 | 0) {
     case 8:
      {
       $$0220 = HEAPU8[$3 + $$5229284 >> 0] | 0;
       $$2252 = $$0250283;
       break;
      }
     case 0:
      {
       $$0220 = $284;
       $$2252 = $$0250283;
       break;
      }
     default:
      {
       $$01113$i242 = 0;
       $$014$i241 = $284 + -1 | 0;
       $289 = $$0250283;
       while (1) {
        $297 = $289 + 1 | 0;
        $299 = (((HEAPU8[$3 + ($289 >>> 3) >> 0] | 0) >>> ($289 & 7 ^ 7) & 1) << $$014$i241) + $$01113$i242 | 0;
        $$014$i241 = $$014$i241 + -1 | 0;
        if ($$014$i241 >>> 0 >= $284 >>> 0) {
         $$0220 = $299;
         $$2252 = $297;
         break;
        } else {
         $$01113$i242 = $299;
         $289 = $297;
        }
       }
      }
     }
     if ($$0220 >>> 0 < (HEAP32[$238 >> 2] | 0) >>> 0) {
      $307 = $$0220 << 2;
      HEAP8[$$5285 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + $307 >> 0] | 0;
      HEAP8[$$5285 + 1 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($307 | 1) >> 0] | 0;
      HEAP8[$$5285 + 2 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($307 | 2) >> 0] | 0;
      if ($6) HEAP8[$$5285 + 3 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($307 | 3) >> 0] | 0;
     } else {
      HEAP8[$$5285 + 2 >> 0] = 0;
      HEAP8[$$5285 + 1 >> 0] = 0;
      HEAP8[$$5285 >> 0] = 0;
      if ($6) HEAP8[$$5285 + 3 >> 0] = -1;
     }
     $$5229284 = $$5229284 + 1 | 0;
     if (($$5229284 | 0) == ($1 | 0)) {
      $$1 = 0;
      break;
     } else {
      $$0250283 = $$2252;
      $$5285 = $$5285 + $7 | 0;
     }
    }
    return $$1 | 0;
   }
   $$0250283$us = 0;
   $$5229284$us = 0;
   $$5285$us = $0;
   while (1) {
    $241 = HEAP32[$237 >> 2] | 0;
    $242 = ($241 | 0) == 8;
    if ($242) {
     $$0220$us = HEAPU8[$3 + $$5229284$us >> 0] | 0;
     $$2252$us = $$0250283$us;
    } else if (!$241) {
     $$0220$us = 0;
     $$2252$us = $$0250283$us;
    } else {
     $$01113$i242$us = 0;
     $$014$i241$us = $241 + -1 | 0;
     $245 = $$0250283$us;
     while (1) {
      $253 = $245 + 1 | 0;
      $255 = (((HEAPU8[$3 + ($245 >>> 3) >> 0] | 0) >>> ($245 & 7 ^ 7) & 1) << $$014$i241$us) + $$01113$i242$us | 0;
      $$014$i241$us = $$014$i241$us + -1 | 0;
      if ($$014$i241$us >>> 0 >= $241 >>> 0) {
       $$0220$us = $255;
       $$2252$us = $253;
       break;
      } else {
       $$01113$i242$us = $255;
       $245 = $253;
      }
     }
    }
    if ($$0220$us >>> 0 >= (HEAP32[$238 >> 2] | 0) >>> 0) break;
    $263 = $$0220$us << 2;
    HEAP8[$$5285$us >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + $263 >> 0] | 0;
    HEAP8[$$5285$us + 1 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($263 | 1) >> 0] | 0;
    HEAP8[$$5285$us + 2 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($263 | 2) >> 0] | 0;
    if ($6) HEAP8[$$5285$us + 3 >> 0] = HEAP8[(HEAP32[$239 >> 2] | 0) + ($263 | 3) >> 0] | 0;
    $$5229284$us = $$5229284$us + 1 | 0;
    if ($$5229284$us >>> 0 >= $1 >>> 0) {
     $$1 = 0;
     label = 106;
     break;
    } else {
     $$0250283$us = $$2252$us;
     $$5285$us = $$5285$us + $7 | 0;
    }
   }
   if ((label | 0) == 106) return $$1 | 0;
   $$1 = $242 ? 46 : 47;
   return $$1 | 0;
  }
 case 4:
  {
   $331 = ($1 | 0) != 0;
   if ((HEAP32[$4 + 4 >> 2] | 0) == 8) {
    if (!$331) {
     $$1 = 0;
     return $$1 | 0;
    }
    if ($6) {
     $$6230287$us = 0;
     $$6288$us = $0;
     while (1) {
      $332 = $$6230287$us << 1;
      $334 = HEAP8[$3 + $332 >> 0] | 0;
      HEAP8[$$6288$us + 2 >> 0] = $334;
      HEAP8[$$6288$us + 1 >> 0] = $334;
      HEAP8[$$6288$us >> 0] = $334;
      HEAP8[$$6288$us + 3 >> 0] = HEAP8[$3 + ($332 | 1) >> 0] | 0;
      $$6230287$us = $$6230287$us + 1 | 0;
      if (($$6230287$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$6288$us = $$6288$us + $7 | 0;
     }
     return $$1 | 0;
    } else {
     $$6230287 = 0;
     $$6288 = $0;
     while (1) {
      $345 = HEAP8[$3 + ($$6230287 << 1) >> 0] | 0;
      HEAP8[$$6288 + 2 >> 0] = $345;
      HEAP8[$$6288 + 1 >> 0] = $345;
      HEAP8[$$6288 >> 0] = $345;
      $$6230287 = $$6230287 + 1 | 0;
      if (($$6230287 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$6288 = $$6288 + $7 | 0;
     }
     return $$1 | 0;
    }
   } else {
    if (!$331) {
     $$1 = 0;
     return $$1 | 0;
    }
    if ($6) {
     $$7231290$us = 0;
     $$7291$us = $0;
     while (1) {
      $350 = $$7231290$us << 2;
      $352 = HEAP8[$3 + $350 >> 0] | 0;
      HEAP8[$$7291$us + 2 >> 0] = $352;
      HEAP8[$$7291$us + 1 >> 0] = $352;
      HEAP8[$$7291$us >> 0] = $352;
      HEAP8[$$7291$us + 3 >> 0] = HEAP8[$3 + ($350 | 2) >> 0] | 0;
      $$7231290$us = $$7231290$us + 1 | 0;
      if (($$7231290$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$7291$us = $$7291$us + $7 | 0;
     }
     return $$1 | 0;
    } else {
     $$7231290 = 0;
     $$7291 = $0;
     while (1) {
      $363 = HEAP8[$3 + ($$7231290 << 2) >> 0] | 0;
      HEAP8[$$7291 + 2 >> 0] = $363;
      HEAP8[$$7291 + 1 >> 0] = $363;
      HEAP8[$$7291 >> 0] = $363;
      $$7231290 = $$7231290 + 1 | 0;
      if (($$7231290 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$7291 = $$7291 + $7 | 0;
     }
     return $$1 | 0;
    }
   }
   break;
  }
 case 6:
  {
   $371 = ($1 | 0) != 0;
   if ((HEAP32[$4 + 4 >> 2] | 0) == 8) {
    if (!$371) {
     $$1 = 0;
     return $$1 | 0;
    }
    if ($6) {
     $$8232293$us = 0;
     $$8294$us = $0;
     while (1) {
      $372 = $$8232293$us << 2;
      HEAP8[$$8294$us >> 0] = HEAP8[$3 + $372 >> 0] | 0;
      HEAP8[$$8294$us + 1 >> 0] = HEAP8[$3 + ($372 | 1) >> 0] | 0;
      HEAP8[$$8294$us + 2 >> 0] = HEAP8[$3 + ($372 | 2) >> 0] | 0;
      HEAP8[$$8294$us + 3 >> 0] = HEAP8[$3 + ($372 | 3) >> 0] | 0;
      $$8232293$us = $$8232293$us + 1 | 0;
      if (($$8232293$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$8294$us = $$8294$us + $7 | 0;
     }
     return $$1 | 0;
    } else {
     $$8232293 = 0;
     $$8294 = $0;
     while (1) {
      $389 = $$8232293 << 2;
      HEAP8[$$8294 >> 0] = HEAP8[$3 + $389 >> 0] | 0;
      HEAP8[$$8294 + 1 >> 0] = HEAP8[$3 + ($389 | 1) >> 0] | 0;
      HEAP8[$$8294 + 2 >> 0] = HEAP8[$3 + ($389 | 2) >> 0] | 0;
      $$8232293 = $$8232293 + 1 | 0;
      if (($$8232293 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$8294 = $$8294 + $7 | 0;
     }
     return $$1 | 0;
    }
   } else {
    if (!$371) {
     $$1 = 0;
     return $$1 | 0;
    }
    if ($6) {
     $$9233296$us = 0;
     $$9297$us = $0;
     while (1) {
      $402 = $$9233296$us << 3;
      HEAP8[$$9297$us >> 0] = HEAP8[$3 + $402 >> 0] | 0;
      HEAP8[$$9297$us + 1 >> 0] = HEAP8[$3 + ($402 | 2) >> 0] | 0;
      HEAP8[$$9297$us + 2 >> 0] = HEAP8[$3 + ($402 | 4) >> 0] | 0;
      HEAP8[$$9297$us + 3 >> 0] = HEAP8[$3 + ($402 | 6) >> 0] | 0;
      $$9233296$us = $$9233296$us + 1 | 0;
      if (($$9233296$us | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$9297$us = $$9297$us + $7 | 0;
     }
     return $$1 | 0;
    } else {
     $$9233296 = 0;
     $$9297 = $0;
     while (1) {
      $419 = $$9233296 << 3;
      HEAP8[$$9297 >> 0] = HEAP8[$3 + $419 >> 0] | 0;
      HEAP8[$$9297 + 1 >> 0] = HEAP8[$3 + ($419 | 2) >> 0] | 0;
      HEAP8[$$9297 + 2 >> 0] = HEAP8[$3 + ($419 | 4) >> 0] | 0;
      $$9233296 = $$9233296 + 1 | 0;
      if (($$9233296 | 0) == ($1 | 0)) {
       $$1 = 0;
       break;
      } else $$9297 = $$9297 + $7 | 0;
     }
     return $$1 | 0;
    }
   }
   break;
  }
 default:
  {
   $$1 = 0;
   return $$1 | 0;
  }
 }
 return 0;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre363 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $163 = 0, $164 = 0, $169 = 0, $172 = 0, $177 = 0, $178 = 0, $183 = 0, $185 = 0, $192 = 0, $193 = 0, $20 = 0, $204 = 0, $21 = 0, $216 = 0, $223 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $238 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $248 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $259 = 0, $260 = 0, $261 = 0, $27 = 0, $271 = 0, $272 = 0, $277 = 0, $279 = 0, $280 = 0, $286 = 0, $298 = 0, $30 = 0, $301 = 0, $302 = 0, $315 = 0, $317 = 0, $318 = 0, $322 = 0, $326 = 0, $328 = 0, $339 = 0, $341 = 0, $348 = 0, $351 = 0, $358 = 0, $359 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $spec$select = 0, $spec$select284 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 40 | 0;
 $7 = sp;
 $8 = sp + 48 | 0;
 $9 = sp + 60 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != 0;
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243$ph = 0;
 $$0247$ph = 0;
 $$0269$ph = 0;
 L1 : while (1) {
  $$0243 = $$0243$ph;
  $$0247 = $$0247$ph;
  while (1) {
   do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $$1248 = -1;
    break;
   } else {
    $$1248 = $$0243 + $$0247 | 0;
    break;
   } else $$1248 = $$0247; while (0);
   $20 = HEAP32[$5 >> 2] | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    label = 94;
    break L1;
   }
   $23 = $21;
   $25 = $20;
   L12 : while (1) {
    switch ($23 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0249$lcssa = $25;
      break L12;
      break;
     }
    default:
     {}
    }
    $24 = $25 + 1 | 0;
    HEAP32[$5 >> 2] = $24;
    $23 = HEAP8[$24 >> 0] | 0;
    $25 = $24;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0249321 = $25;
    $27 = $25;
    while (1) {
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249321;
      break L15;
     }
     $30 = $$0249321 + 1 | 0;
     $27 = $27 + 2 | 0;
     HEAP32[$5 >> 2] = $27;
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30;
      break;
     } else $$0249321 = $30;
    }
   } while (0);
   $$0243 = $$0249$lcssa - $20 | 0;
   if ($10) _out($0, $20, $$0243);
   if (!$$0243) break; else $$0247 = $$1248;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre360 = HEAP32[$5 >> 2] | 0;
  if ($43) {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  } else if ((HEAP8[$$pre360 + 2 >> 0] | 0) == 36) {
   $$0253 = (HEAP8[$$pre360 + 1 >> 0] | 0) + -48 | 0;
   $$1270 = 1;
   $$sink = 3;
  } else {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  }
  $51 = $$pre360 + $$sink | 0;
  HEAP32[$5 >> 2] = $51;
  $52 = HEAP8[$51 >> 0] | 0;
  $54 = ($52 << 24 >> 24) + -32 | 0;
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0;
   $$lcssa308 = $52;
   $storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;
   $60 = $54;
   $storemerge273327 = $51;
   while (1) {
    $61 = 1 << $60 | $$0262328;
    $62 = $storemerge273327 + 1 | 0;
    HEAP32[$5 >> 2] = $62;
    $63 = HEAP8[$62 >> 0] | 0;
    $60 = ($63 << 24 >> 24) + -32 | 0;
    if ($60 >>> 0 > 31 | (1 << $60 & 75913 | 0) == 0) {
     $$0262$lcssa = $61;
     $$lcssa308 = $63;
     $storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;
     $storemerge273327 = $62;
    }
   }
  }
  if ($$lcssa308 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge273$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $76 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$76 + 2 >> 0] | 0) == 36) {
     $80 = $76 + 1 | 0;
     HEAP32[$4 + ((HEAP8[$80 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $$0259 = HEAP32[$3 + ((HEAP8[$80 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $$2271 = 1;
     $storemerge274 = $76 + 3 | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $102 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $103 = HEAP32[$102 >> 2] | 0;
     HEAP32[$2 >> 2] = $102 + 4;
     $358 = $103;
    } else $358 = 0;
    $$0259 = $358;
    $$2271 = 0;
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   }
   HEAP32[$5 >> 2] = $storemerge274;
   $106 = ($$0259 | 0) < 0;
   $$1260 = $106 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $106 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $112 = $storemerge274;
  } else {
   $109 = _getint($5) | 0;
   if (($109 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $109;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $112 = HEAP32[$5 >> 2] | 0;
  }
  do if ((HEAP8[$112 >> 0] | 0) == 46) {
   $114 = $112 + 1 | 0;
   if ((HEAP8[$114 >> 0] | 0) != 42) {
    HEAP32[$5 >> 2] = $114;
    $152 = _getint($5) | 0;
    $$0254 = $152;
    $$pre363 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[$112 + 2 >> 0] | 0) | 0) {
    $122 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$122 + 3 >> 0] | 0) == 36) {
     $126 = $122 + 2 | 0;
     HEAP32[$4 + ((HEAP8[$126 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $137 = HEAP32[$3 + ((HEAP8[$126 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $141 = $122 + 4 | 0;
     HEAP32[$5 >> 2] = $141;
     $$0254 = $137;
     $$pre363 = $141;
     break;
    }
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($10) {
    $148 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$2 >> 2] = $148 + 4;
    $359 = $149;
   } else $359 = 0;
   $151 = (HEAP32[$5 >> 2] | 0) + 2 | 0;
   HEAP32[$5 >> 2] = $151;
   $$0254 = $359;
   $$pre363 = $151;
  } else {
   $$0254 = -1;
   $$pre363 = $112;
  } while (0);
  $$0252 = 0;
  $154 = $$pre363;
  while (1) {
   if (((HEAP8[$154 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $154$looptemp = $154;
   $154 = $154 + 1 | 0;
   HEAP32[$5 >> 2] = $154;
   $163 = HEAP8[(HEAP8[$154$looptemp >> 0] | 0) + -65 + (13520 + ($$0252 * 58 | 0)) >> 0] | 0;
   $164 = $163 & 255;
   if (($164 + -1 | 0) >>> 0 >= 8) break; else $$0252 = $164;
  }
  if (!($163 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $169 = ($$0253 | 0) > -1;
  do if ($163 << 24 >> 24 == 19) if ($169) {
   $$0 = -1;
   break L1;
  } else label = 54; else {
   if ($169) {
    HEAP32[$4 + ($$0253 << 2) >> 2] = $164;
    $172 = $3 + ($$0253 << 3) | 0;
    $177 = HEAP32[$172 + 4 >> 2] | 0;
    $178 = $6;
    HEAP32[$178 >> 2] = HEAP32[$172 >> 2];
    HEAP32[$178 + 4 >> 2] = $177;
    label = 54;
    break;
   }
   if (!$10) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($6, $164, $2);
   $183 = HEAP32[$5 >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($10) {
    $183 = $154;
    label = 55;
   } else $$0243$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $185 = HEAP8[$183 + -1 >> 0] | 0;
   $$0235 = ($$0252 | 0) != 0 & ($185 & 15 | 0) == 3 ? $185 & -33 : $185;
   $192 = $$1263 & -65537;
   $spec$select = ($$1263 & 8192 | 0) == 0 ? $$1263 : $192;
   L79 : do switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $204 = HEAP32[$6 >> 2] | 0;
       HEAP32[$204 >> 2] = $$1248;
       HEAP32[$204 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $216 = HEAP32[$6 >> 2] | 0;
       HEAP32[$216 >> 2] = $$1248;
       HEAP32[$216 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $$0243$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120;
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
     $$3265 = $spec$select | 8;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $spec$select;
     label = 67;
     break;
    }
   case 111:
    {
     $238 = $6;
     $240 = HEAP32[$238 >> 2] | 0;
     $243 = HEAP32[$238 + 4 >> 2] | 0;
     $244 = _fmt_o($240, $243, $11) | 0;
     $248 = $12 - $244 | 0;
     $$0228 = $244;
     $$1233 = 0;
     $$1238 = 20655;
     $$2256 = ($spec$select & 8 | 0) == 0 | ($$0254 | 0) > ($248 | 0) ? $$0254 : $248 + 1 | 0;
     $$4266 = $spec$select;
     $277 = $240;
     $279 = $243;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $252 = $6;
     $254 = HEAP32[$252 >> 2] | 0;
     $257 = HEAP32[$252 + 4 >> 2] | 0;
     if (($257 | 0) < 0) {
      $259 = _i64Subtract(0, 0, $254 | 0, $257 | 0) | 0;
      $260 = tempRet0;
      $261 = $6;
      HEAP32[$261 >> 2] = $259;
      HEAP32[$261 + 4 >> 2] = $260;
      $$0232 = 1;
      $$0237 = 20655;
      $271 = $259;
      $272 = $260;
      label = 72;
      break L79;
     } else {
      $$0232 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0237 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 20655 : 20657) : 20656;
      $271 = $254;
      $272 = $257;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $193 = $6;
     $$0232 = 0;
     $$0237 = 20655;
     $271 = HEAP32[$193 >> 2] | 0;
     $272 = HEAP32[$193 + 4 >> 2] | 0;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
     $$2 = $13;
     $$2234 = 0;
     $$2239 = 20655;
     $$5 = 1;
     $$6268 = $192;
     $$pre$phiZ2D = $12;
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
     label = 77;
     break;
    }
   case 115:
    {
     $298 = HEAP32[$6 >> 2] | 0;
     $$1 = ($298 | 0) == 0 ? 20665 : $298;
     label = 77;
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$14 >> 2] = 0;
     HEAP32[$6 >> 2] = $8;
     $$4258370 = -1;
     label = 81;
     break;
    }
   case 83:
    {
     if (!$$0254) {
      _pad_669($0, 32, $$1260, 0, $spec$select);
      $$0240313371 = 0;
      label = 91;
     } else {
      $$4258370 = $$0254;
      label = 81;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243$ph$be = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $spec$select, $$0235) | 0;
     break L77;
     break;
    }
   default:
    {
     $$2 = $20;
     $$2234 = 0;
     $$2239 = 20655;
     $$5 = $$0254;
     $$6268 = $spec$select;
     $$pre$phiZ2D = $12;
    }
   } while (0);
   L103 : do if ((label | 0) == 67) {
    label = 0;
    $223 = $6;
    $225 = HEAP32[$223 >> 2] | 0;
    $228 = HEAP32[$223 + 4 >> 2] | 0;
    $230 = _fmt_x($225, $228, $11, $$1236 & 32) | 0;
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($225 | 0) == 0 & ($228 | 0) == 0;
    $$0228 = $230;
    $$1233 = $or$cond278 ? 0 : 2;
    $$1238 = $or$cond278 ? 20655 : 20655 + ($$1236 >>> 4) | 0;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $277 = $225;
    $279 = $228;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $$0228 = _fmt_u($271, $272, $11) | 0;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $spec$select;
    $277 = $271;
    $279 = $272;
    label = 73;
   } else if ((label | 0) == 77) {
    label = 0;
    $301 = _memchr($$1, 0, $$0254) | 0;
    $302 = ($301 | 0) == 0;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 20655;
    $$5 = $302 ? $$0254 : $301 - $$1 | 0;
    $$6268 = $192;
    $$pre$phiZ2D = $302 ? $$1 + $$0254 | 0 : $301;
   } else if ((label | 0) == 81) {
    label = 0;
    $$0229334 = HEAP32[$6 >> 2] | 0;
    $$0240333 = 0;
    while (1) {
     $315 = HEAP32[$$0229334 >> 2] | 0;
     if (!$315) {
      $$0240313 = $$0240333;
      break;
     }
     $317 = _wctomb($9, $315) | 0;
     $318 = ($317 | 0) < 0;
     if ($318 | $317 >>> 0 > ($$4258370 - $$0240333 | 0) >>> 0) {
      label = 85;
      break;
     }
     $322 = $317 + $$0240333 | 0;
     if ($$4258370 >>> 0 > $322 >>> 0) {
      $$0229334 = $$0229334 + 4 | 0;
      $$0240333 = $322;
     } else {
      $$0240313 = $322;
      break;
     }
    }
    if ((label | 0) == 85) {
     label = 0;
     if ($318) {
      $$0 = -1;
      break L1;
     } else $$0240313 = $$0240333;
    }
    _pad_669($0, 32, $$1260, $$0240313, $spec$select);
    if (!$$0240313) {
     $$0240313371 = 0;
     label = 91;
    } else {
     $$1230340 = HEAP32[$6 >> 2] | 0;
     $$1241339 = 0;
     while (1) {
      $326 = HEAP32[$$1230340 >> 2] | 0;
      if (!$326) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      $328 = _wctomb($9, $326) | 0;
      $$1241339 = $328 + $$1241339 | 0;
      if (($$1241339 | 0) > ($$0240313 | 0)) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      _out($0, $9, $328);
      if ($$1241339 >>> 0 >= $$0240313 >>> 0) {
       $$0240313371 = $$0240313;
       label = 91;
       break;
      } else $$1230340 = $$1230340 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $280 = ($277 | 0) != 0 | ($279 | 0) != 0;
    $or$cond = ($$2256 | 0) != 0 | $280;
    $286 = $12 - $$0228 + (($280 ^ 1) & 1) | 0;
    $$2 = $or$cond ? $$0228 : $11;
    $$2234 = $$1233;
    $$2239 = $$1238;
    $$5 = $or$cond ? (($$2256 | 0) > ($286 | 0) ? $$2256 : $286) : 0;
    $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
    $$pre$phiZ2D = $12;
   } else if ((label | 0) == 91) {
    label = 0;
    _pad_669($0, 32, $$1260, $$0240313371, $spec$select ^ 8192);
    $$0243$ph$be = ($$1260 | 0) > ($$0240313371 | 0) ? $$1260 : $$0240313371;
    break;
   }
   $339 = $$pre$phiZ2D - $$2 | 0;
   $spec$select284 = ($$5 | 0) < ($339 | 0) ? $339 : $$5;
   $341 = $spec$select284 + $$2234 | 0;
   $$2261 = ($$1260 | 0) < ($341 | 0) ? $341 : $$1260;
   _pad_669($0, 32, $$2261, $341, $$6268);
   _out($0, $$2239, $$2234);
   _pad_669($0, 48, $$2261, $341, $$6268 ^ 65536);
   _pad_669($0, 48, $spec$select284, $339, 0);
   _out($0, $$2, $339);
   _pad_669($0, 32, $$2261, $341, $$6268 ^ 8192);
   $$0243$ph$be = $$2261;
  } while (0);
  $$0243$ph = $$0243$ph$be;
  $$0247$ph = $$1248;
  $$0269$ph = $$3272;
 }
 L125 : do if ((label | 0) == 94) if (!$0) if (!$$0269$ph) $$0 = 0; else {
  $$2242320 = 1;
  while (1) {
   $348 = HEAP32[$4 + ($$2242320 << 2) >> 2] | 0;
   if (!$348) break;
   _pop_arg($3 + ($$2242320 << 3) | 0, $348, $2);
   $351 = $$2242320 + 1 | 0;
   if ($351 >>> 0 < 10) $$2242320 = $351; else {
    $$0 = 1;
    break L125;
   }
  }
  $$3317 = $$2242320;
  while (1) {
   if (HEAP32[$4 + ($$3317 << 2) >> 2] | 0) {
    $$0 = -1;
    break L125;
   }
   $$3317 = $$3317 + 1 | 0;
   if ($$3317 >>> 0 >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _set_matrix_3d($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$pre$i = 0.0, $$pre48$i = 0.0, $$pre50$i = 0.0, $$pre52$i = 0.0, $$pre54$i = 0.0, $$pre56$i = 0.0, $$pre58$i = 0.0, $$pre60$i = 0.0, $$pre62$i = 0.0, $$pre63$i = 0.0, $$pre65$i = 0.0, $$pre67$i = 0.0, $$pre69$i = 0.0, $$sink175 = 0.0, $$sink176 = 0.0, $$sroa$0$0 = 0.0, $$sroa$102$0 = 0.0, $$sroa$116$0 = 0.0, $$sroa$38$0 = 0.0, $$sroa$63$0 = 0.0, $$sroa$70$0 = 0.0, $$sroa$77$0 = 0.0, $$sroa$86$0 = 0.0, $$sroa$95$0 = 0.0, $101 = 0.0, $104 = 0.0, $105 = 0.0, $11 = 0, $12 = 0, $128 = 0.0, $131 = 0.0, $134 = 0.0, $137 = 0.0, $138 = 0.0, $16 = 0, $161 = 0.0, $164 = 0.0, $167 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $18 = 0, $19 = 0, $194 = 0.0, $197 = 0.0, $20 = 0, $200 = 0.0, $203 = 0.0, $204 = 0.0, $21 = 0, $22 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $242 = 0.0, $245 = 0.0, $248 = 0.0, $249 = 0.0, $26 = 0.0, $27 = 0.0, $272 = 0.0, $275 = 0.0, $278 = 0.0, $28 = 0, $281 = 0.0, $282 = 0.0, $29 = 0.0, $30 = 0.0, $305 = 0.0, $308 = 0.0, $31 = 0, $311 = 0.0, $314 = 0.0, $315 = 0.0, $32 = 0, $33 = 0, $338 = 0.0, $34 = 0, $341 = 0.0, $344 = 0.0, $347 = 0.0, $348 = 0.0, $35 = 0.0, $36 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $379 = 0.0, $38 = 0, $381 = 0.0, $39 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $40 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $412 = 0.0, $413 = 0.0, $415 = 0.0, $418 = 0.0, $42 = 0, $422 = 0.0, $429 = 0.0, $43 = 0, $438 = 0.0, $44 = 0, $441 = 0.0, $442 = 0.0, $444 = 0.0, $447 = 0.0, $451 = 0.0, $458 = 0.0, $46 = 0, $467 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $473 = 0.0, $476 = 0.0, $48 = 0, $480 = 0.0, $487 = 0.0, $49 = 0, $496 = 0.0, $499 = 0.0, $50 = 0, $500 = 0.0, $502 = 0.0, $505 = 0.0, $509 = 0.0, $516 = 0.0, $52 = 0, $525 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $535 = 0.0, $537 = 0.0, $539 = 0.0, $54 = 0, $542 = 0.0, $544 = 0.0, $546 = 0.0, $549 = 0.0, $551 = 0.0, $553 = 0.0, $556 = 0.0, $558 = 0.0, $56 = 0, $560 = 0.0, $563 = 0.0, $568 = 0.0, $57 = 0, $573 = 0.0, $578 = 0.0, $582 = 0.0, $585 = 0.0, $588 = 0.0, $59 = 0.0, $591 = 0.0, $595 = 0.0, $598 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $94 = 0.0, $95 = 0.0, $98 = 0.0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $11 = sp + 64 | 0;
 $12 = sp;
 HEAPF32[$12 >> 2] = 1.0;
 $16 = $12 + 4 | 0;
 $17 = $12 + 20 | 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 HEAP32[$16 + 12 >> 2] = 0;
 HEAPF32[$17 >> 2] = 1.0;
 $18 = $12 + 24 | 0;
 $19 = $12 + 40 | 0;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$18 + 4 >> 2] = 0;
 HEAP32[$18 + 8 >> 2] = 0;
 HEAP32[$18 + 12 >> 2] = 0;
 HEAPF32[$19 >> 2] = 1.0;
 $20 = $12 + 44 | 0;
 $21 = $12 + 60 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 HEAP32[$20 + 12 >> 2] = 0;
 $22 = $12 + 8 | 0;
 $23 = $12 + 12 | 0;
 $24 = $3 * 0.0;
 HEAPF32[$11 >> 2] = 1.0 - $24;
 $26 = $4 * 0.0;
 $27 = 0.0 - $26;
 $28 = $11 + 4 | 0;
 HEAPF32[$28 >> 2] = $27;
 $29 = $5 * 0.0;
 $30 = 0.0 - $29;
 $31 = $11 + 8 | 0;
 HEAPF32[$31 >> 2] = $30;
 $32 = $11 + 12 | 0;
 HEAPF32[$32 >> 2] = 0.0;
 $33 = $12 + 16 | 0;
 $34 = $12 + 28 | 0;
 $35 = 0.0 - $24;
 $36 = $11 + 16 | 0;
 HEAPF32[$36 >> 2] = $35;
 $38 = $11 + 20 | 0;
 HEAPF32[$38 >> 2] = 1.0 - $26;
 $39 = $11 + 24 | 0;
 HEAPF32[$39 >> 2] = $30;
 $40 = $11 + 28 | 0;
 HEAPF32[$40 >> 2] = 0.0;
 $41 = $12 + 32 | 0;
 $42 = $12 + 36 | 0;
 $43 = $11 + 32 | 0;
 HEAPF32[$43 >> 2] = $35;
 $44 = $11 + 36 | 0;
 HEAPF32[$44 >> 2] = $27;
 $46 = $11 + 40 | 0;
 HEAPF32[$46 >> 2] = 1.0 - $29;
 $47 = $11 + 44 | 0;
 HEAPF32[$47 >> 2] = 0.0;
 $48 = $12 + 48 | 0;
 $49 = $12 + 52 | 0;
 $50 = $12 + 56 | 0;
 $52 = $11 + 48 | 0;
 HEAPF32[$52 >> 2] = 0.0 - $3;
 $54 = $11 + 52 | 0;
 HEAPF32[$54 >> 2] = 0.0 - $4;
 $56 = $11 + 56 | 0;
 HEAPF32[$56 >> 2] = 0.0 - $5;
 $57 = $11 + 60 | 0;
 HEAPF32[$57 >> 2] = 1.0;
 $59 = +($1 | 0) / +($2 | 0);
 $60 = +(($10 << 5) + 64 | 0);
 dest = $12;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $61 = +Math_cos(+$6);
 $62 = +Math_sin(+$6);
 $67 = +Math_sqrt(+($62 * $62 + ($61 * $61 + 0.0)));
 $68 = $61 / $67;
 $69 = 0.0 / $67;
 $70 = $62 / $67;
 $71 = +Math_sin(+$7);
 $72 = +Math_cos(+$7);
 $73 = 1.0 - $72;
 $74 = $73 * $68;
 $76 = $72 + $68 * $74;
 $77 = $69 * $74;
 $78 = $71 * $70;
 $79 = $77 - $78;
 $80 = $73 * $70;
 $81 = $68 * $80;
 $82 = $71 * $69;
 $83 = $82 + $81;
 $84 = $78 + $77;
 $85 = $73 * $69;
 $87 = $72 + $69 * $85;
 $88 = $70 * $85;
 $89 = $71 * $68;
 $90 = $88 - $89;
 $91 = $81 - $82;
 $92 = $89 + $88;
 $94 = $72 + $70 * $80;
 $95 = +HEAPF32[$12 >> 2];
 $98 = +HEAPF32[$16 >> 2];
 $101 = +HEAPF32[$22 >> 2];
 $104 = +HEAPF32[$23 >> 2];
 $105 = $104 * 0.0;
 HEAPF32[$11 >> 2] = $76 * $95 + 0.0 + $84 * $98 + $91 * $101 + $105;
 HEAPF32[$28 >> 2] = $79 * $95 + 0.0 + $87 * $98 + $92 * $101 + $105;
 HEAPF32[$31 >> 2] = $83 * $95 + 0.0 + $90 * $98 + $94 * $101 + $105;
 HEAPF32[$32 >> 2] = $104 + ($95 * 0.0 + 0.0 + $98 * 0.0 + $101 * 0.0);
 $128 = +HEAPF32[$33 >> 2];
 $131 = +HEAPF32[$17 >> 2];
 $134 = +HEAPF32[$18 >> 2];
 $137 = +HEAPF32[$34 >> 2];
 $138 = $137 * 0.0;
 HEAPF32[$36 >> 2] = $76 * $128 + 0.0 + $84 * $131 + $91 * $134 + $138;
 HEAPF32[$38 >> 2] = $79 * $128 + 0.0 + $87 * $131 + $92 * $134 + $138;
 HEAPF32[$39 >> 2] = $83 * $128 + 0.0 + $90 * $131 + $94 * $134 + $138;
 HEAPF32[$40 >> 2] = $137 + ($128 * 0.0 + 0.0 + $131 * 0.0 + $134 * 0.0);
 $161 = +HEAPF32[$41 >> 2];
 $164 = +HEAPF32[$42 >> 2];
 $167 = +HEAPF32[$19 >> 2];
 $170 = +HEAPF32[$20 >> 2];
 $171 = $170 * 0.0;
 HEAPF32[$43 >> 2] = $76 * $161 + 0.0 + $84 * $164 + $91 * $167 + $171;
 HEAPF32[$44 >> 2] = $79 * $161 + 0.0 + $87 * $164 + $92 * $167 + $171;
 HEAPF32[$46 >> 2] = $83 * $161 + 0.0 + $90 * $164 + $94 * $167 + $171;
 HEAPF32[$47 >> 2] = $170 + ($161 * 0.0 + 0.0 + $164 * 0.0 + $167 * 0.0);
 $194 = +HEAPF32[$48 >> 2];
 $197 = +HEAPF32[$49 >> 2];
 $200 = +HEAPF32[$50 >> 2];
 $203 = +HEAPF32[$21 >> 2];
 $204 = $203 * 0.0;
 HEAPF32[$52 >> 2] = $76 * $194 + 0.0 + $84 * $197 + $91 * $200 + $204;
 HEAPF32[$54 >> 2] = $79 * $194 + 0.0 + $87 * $197 + $92 * $200 + $204;
 HEAPF32[$56 >> 2] = $83 * $194 + 0.0 + $90 * $197 + $94 * $200 + $204;
 HEAPF32[$57 >> 2] = $203 + ($194 * 0.0 + 0.0 + $197 * 0.0 + $200 * 0.0);
 dest = $12;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $228 = +Math_sin(+-$6);
 $229 = 1.0 - $61;
 $230 = $229 * 0.0;
 $231 = $230 * 0.0;
 $232 = $61 + $231;
 $233 = $228 * 0.0;
 $234 = $230 - $233;
 $235 = $228 + $231;
 $236 = $233 + $230;
 $237 = $61 + $229;
 $238 = $231 - $228;
 $239 = +HEAPF32[$12 >> 2];
 $242 = +HEAPF32[$16 >> 2];
 $245 = +HEAPF32[$22 >> 2];
 $248 = +HEAPF32[$23 >> 2];
 $249 = $248 * 0.0;
 HEAPF32[$11 >> 2] = $232 * $239 + 0.0 + $236 * $242 + $238 * $245 + $249;
 HEAPF32[$28 >> 2] = $234 * $239 + 0.0 + $237 * $242 + $236 * $245 + $249;
 HEAPF32[$31 >> 2] = $235 * $239 + 0.0 + $234 * $242 + $232 * $245 + $249;
 HEAPF32[$32 >> 2] = $248 + ($239 * 0.0 + 0.0 + $242 * 0.0 + $245 * 0.0);
 $272 = +HEAPF32[$33 >> 2];
 $275 = +HEAPF32[$17 >> 2];
 $278 = +HEAPF32[$18 >> 2];
 $281 = +HEAPF32[$34 >> 2];
 $282 = $281 * 0.0;
 HEAPF32[$36 >> 2] = $232 * $272 + 0.0 + $236 * $275 + $238 * $278 + $282;
 HEAPF32[$38 >> 2] = $234 * $272 + 0.0 + $237 * $275 + $236 * $278 + $282;
 HEAPF32[$39 >> 2] = $235 * $272 + 0.0 + $234 * $275 + $232 * $278 + $282;
 HEAPF32[$40 >> 2] = $281 + ($272 * 0.0 + 0.0 + $275 * 0.0 + $278 * 0.0);
 $305 = +HEAPF32[$41 >> 2];
 $308 = +HEAPF32[$42 >> 2];
 $311 = +HEAPF32[$19 >> 2];
 $314 = +HEAPF32[$20 >> 2];
 $315 = $314 * 0.0;
 HEAPF32[$43 >> 2] = $232 * $305 + 0.0 + $236 * $308 + $238 * $311 + $315;
 HEAPF32[$44 >> 2] = $234 * $305 + 0.0 + $237 * $308 + $236 * $311 + $315;
 HEAPF32[$46 >> 2] = $235 * $305 + 0.0 + $234 * $308 + $232 * $311 + $315;
 HEAPF32[$47 >> 2] = $314 + ($305 * 0.0 + 0.0 + $308 * 0.0 + $311 * 0.0);
 $338 = +HEAPF32[$48 >> 2];
 $341 = +HEAPF32[$49 >> 2];
 $344 = +HEAPF32[$50 >> 2];
 $347 = +HEAPF32[$21 >> 2];
 $348 = $347 * 0.0;
 HEAPF32[$52 >> 2] = $232 * $338 + 0.0 + $236 * $341 + $238 * $344 + $348;
 HEAPF32[$54 >> 2] = $234 * $338 + 0.0 + $237 * $341 + $236 * $344 + $348;
 HEAPF32[$56 >> 2] = $235 * $338 + 0.0 + $234 * $341 + $232 * $344 + $348;
 HEAPF32[$57 >> 2] = $347 + ($338 * 0.0 + 0.0 + $341 * 0.0 + $344 * 0.0);
 dest = $12;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!$9) {
  $393 = +Math_tan(+($8 * 3.1415927410125732 / 360.0)) * .125;
  $394 = $59 * $393;
  $395 = $394 + $394;
  $396 = $393 + $393;
  $397 = $60 + -.125;
  $$sink175 = $397;
  $$sink176 = $60 * .25;
  $$sroa$0$0 = .25 / $395;
  $$sroa$102$0 = 0.0;
  $$sroa$116$0 = 0.0;
  $$sroa$38$0 = .25 / $396;
  $$sroa$63$0 = ($394 - $394) / $395;
  $$sroa$70$0 = ($393 - $393) / $396;
  $$sroa$77$0 = (-.125 - $60) / $397;
  $$sroa$86$0 = -1.0;
  $$sroa$95$0 = 0.0;
 } else {
  $373 = +(0 - $9 | 0);
  $374 = $59 * $373;
  $375 = +($9 | 0);
  $376 = $59 * $375;
  $377 = $376 - $374;
  $379 = $375 - $373;
  $381 = $60 + $60;
  $$sink175 = $381;
  $$sink176 = $60 - $60;
  $$sroa$0$0 = 2.0 / $377;
  $$sroa$102$0 = -($373 + $375) / $379;
  $$sroa$116$0 = 1.0;
  $$sroa$38$0 = 2.0 / $379;
  $$sroa$63$0 = 0.0;
  $$sroa$70$0 = 0.0;
  $$sroa$77$0 = -2.0 / $381;
  $$sroa$86$0 = 0.0;
  $$sroa$95$0 = -($374 + $376) / $377;
 }
 $408 = -$$sink176 / $$sink175;
 $409 = +HEAPF32[$12 >> 2];
 $412 = +HEAPF32[$16 >> 2];
 $413 = $412 * 0.0;
 $415 = +HEAPF32[$22 >> 2];
 $418 = +HEAPF32[$23 >> 2];
 HEAPF32[$11 >> 2] = $$sroa$0$0 * $409 + 0.0 + $413 + $$sroa$63$0 * $415 + $$sroa$95$0 * $418;
 $422 = $409 * 0.0 + 0.0;
 HEAPF32[$28 >> 2] = $422 + $$sroa$38$0 * $412 + $$sroa$70$0 * $415 + $$sroa$102$0 * $418;
 $429 = $422 + $413;
 HEAPF32[$31 >> 2] = $429 + $$sroa$77$0 * $415 + $408 * $418;
 HEAPF32[$32 >> 2] = $429 + $$sroa$86$0 * $415 + $$sroa$116$0 * $418;
 $438 = +HEAPF32[$33 >> 2];
 $441 = +HEAPF32[$17 >> 2];
 $442 = $441 * 0.0;
 $444 = +HEAPF32[$18 >> 2];
 $447 = +HEAPF32[$34 >> 2];
 HEAPF32[$36 >> 2] = $$sroa$0$0 * $438 + 0.0 + $442 + $$sroa$63$0 * $444 + $$sroa$95$0 * $447;
 $451 = $438 * 0.0 + 0.0;
 HEAPF32[$38 >> 2] = $451 + $$sroa$38$0 * $441 + $$sroa$70$0 * $444 + $$sroa$102$0 * $447;
 $458 = $451 + $442;
 HEAPF32[$39 >> 2] = $458 + $$sroa$77$0 * $444 + $408 * $447;
 HEAPF32[$40 >> 2] = $458 + $$sroa$86$0 * $444 + $$sroa$116$0 * $447;
 $467 = +HEAPF32[$41 >> 2];
 $470 = +HEAPF32[$42 >> 2];
 $471 = $470 * 0.0;
 $473 = +HEAPF32[$19 >> 2];
 $476 = +HEAPF32[$20 >> 2];
 HEAPF32[$43 >> 2] = $$sroa$0$0 * $467 + 0.0 + $471 + $$sroa$63$0 * $473 + $$sroa$95$0 * $476;
 $480 = $467 * 0.0 + 0.0;
 HEAPF32[$44 >> 2] = $480 + $$sroa$38$0 * $470 + $$sroa$70$0 * $473 + $$sroa$102$0 * $476;
 $487 = $480 + $471;
 HEAPF32[$46 >> 2] = $487 + $$sroa$77$0 * $473 + $408 * $476;
 HEAPF32[$47 >> 2] = $487 + $$sroa$86$0 * $473 + $$sroa$116$0 * $476;
 $496 = +HEAPF32[$48 >> 2];
 $499 = +HEAPF32[$49 >> 2];
 $500 = $499 * 0.0;
 $502 = +HEAPF32[$50 >> 2];
 $505 = +HEAPF32[$21 >> 2];
 HEAPF32[$52 >> 2] = $$sroa$0$0 * $496 + 0.0 + $500 + $$sroa$63$0 * $502 + $$sroa$95$0 * $505;
 $509 = $496 * 0.0 + 0.0;
 HEAPF32[$54 >> 2] = $509 + $$sroa$38$0 * $499 + $$sroa$70$0 * $502 + $$sroa$102$0 * $505;
 $516 = $509 + $500;
 HEAPF32[$56 >> 2] = $516 + $$sroa$77$0 * $502 + $408 * $505;
 HEAPF32[$57 >> 2] = $516 + $$sroa$86$0 * $502 + $$sroa$116$0 * $505;
 dest = $12;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$0 >> 2] = 1.0;
 $525 = $0 + 4 | 0;
 HEAP32[$525 >> 2] = 0;
 HEAP32[$525 + 4 >> 2] = 0;
 HEAP32[$525 + 8 >> 2] = 0;
 HEAP32[$525 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 1.0;
 $527 = $0 + 24 | 0;
 HEAP32[$527 >> 2] = 0;
 HEAP32[$527 + 4 >> 2] = 0;
 HEAP32[$527 + 8 >> 2] = 0;
 HEAP32[$527 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 1.0;
 $529 = $0 + 44 | 0;
 $530 = $0 + 60 | 0;
 HEAP32[$529 >> 2] = 0;
 HEAP32[$529 + 4 >> 2] = 0;
 HEAP32[$529 + 8 >> 2] = 0;
 HEAP32[$529 + 12 >> 2] = 0;
 HEAPF32[$530 >> 2] = 1.0;
 $$pre$i = +HEAPF32[$48 >> 2];
 $$pre48$i = +HEAPF32[$16 >> 2];
 $$pre50$i = +HEAPF32[$17 >> 2];
 $$pre52$i = +HEAPF32[$42 >> 2];
 $$pre54$i = +HEAPF32[$49 >> 2];
 $$pre56$i = +HEAPF32[$22 >> 2];
 $$pre58$i = +HEAPF32[$18 >> 2];
 $$pre60$i = +HEAPF32[$19 >> 2];
 $$pre62$i = +HEAPF32[$50 >> 2];
 $$pre63$i = +HEAPF32[$23 >> 2];
 $$pre65$i = +HEAPF32[$34 >> 2];
 $$pre67$i = +HEAPF32[$20 >> 2];
 $$pre69$i = +HEAPF32[$21 >> 2];
 $531 = +HEAPF32[$12 >> 2];
 $532 = +HEAPF32[$33 >> 2];
 $533 = +HEAPF32[$41 >> 2];
 $535 = $532 * 0.0;
 $537 = $533 * 0.0;
 $539 = $$pre$i * 0.0;
 HEAPF32[$11 >> 2] = $531 + 0.0 + $535 + $537 + $539;
 $542 = $$pre50$i * 0.0;
 $544 = $$pre52$i * 0.0;
 $546 = $$pre54$i * 0.0;
 HEAPF32[$28 >> 2] = $$pre48$i + 0.0 + $542 + $544 + $546;
 $549 = $$pre58$i * 0.0;
 $551 = $$pre60$i * 0.0;
 $553 = $$pre62$i * 0.0;
 HEAPF32[$31 >> 2] = $$pre56$i + 0.0 + $549 + $551 + $553;
 $556 = $$pre65$i * 0.0;
 $558 = $$pre67$i * 0.0;
 $560 = $$pre69$i * 0.0;
 HEAPF32[$32 >> 2] = $$pre63$i + 0.0 + $556 + $558 + $560;
 $563 = $531 * 0.0 + 0.0;
 HEAPF32[$36 >> 2] = $563 + $532 + $537 + $539;
 $568 = $$pre48$i * 0.0 + 0.0;
 HEAPF32[$38 >> 2] = $568 + $$pre50$i + $544 + $546;
 $573 = $$pre56$i * 0.0 + 0.0;
 HEAPF32[$39 >> 2] = $573 + $$pre58$i + $551 + $553;
 $578 = $$pre63$i * 0.0 + 0.0;
 HEAPF32[$40 >> 2] = $578 + $$pre65$i + $558 + $560;
 $582 = $563 + $535;
 HEAPF32[$43 >> 2] = $582 + $533 + $539;
 $585 = $568 + $542;
 HEAPF32[$44 >> 2] = $585 + $$pre52$i + $546;
 $588 = $573 + $549;
 HEAPF32[$46 >> 2] = $588 + $$pre60$i + $553;
 $591 = $578 + $556;
 HEAPF32[$47 >> 2] = $591 + $$pre67$i + $560;
 $595 = +HEAPF32[$0 + 56 >> 2];
 $598 = +HEAPF32[$530 >> 2];
 HEAPF32[$52 >> 2] = $582 + $533 * $595 + $$pre$i * $598;
 HEAPF32[$54 >> 2] = $585 + $$pre52$i * $595 + $$pre54$i * $598;
 HEAPF32[$56 >> 2] = $588 + $$pre60$i * $595 + $$pre62$i * $598;
 HEAPF32[$57 >> 2] = $591 + $$pre67$i * $595 + $$pre69$i * $598;
 dest = $0;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $104 = 0, $11 = 0, $110 = 0, $111 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $129 = 0, $137 = 0, $14 = 0, $142 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $165 = 0, $170 = 0, $172 = 0, $175 = 0, $178 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $2 = 0, $200 = 0, $201 = 0, $21 = 0, $210 = 0, $215 = 0, $218 = 0, $219 = 0, $22 = 0, $225 = 0, $240 = 0, $243 = 0, $244 = 0, $245 = 0, $249 = 0, $250 = 0, $256 = 0, $26 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $270 = 0, $275 = 0, $281 = 0, $285 = 0, $286 = 0, $29 = 0, $293 = 0, $305 = 0, $31 = 0, $310 = 0, $317 = 0, $318 = 0, $319 = 0, $328 = 0, $33 = 0, $46 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $80 = 0, $89 = 0, $94 = 0, $97 = 0, $98 = 0, label = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 if (HEAP32[33238] & 2 | 0) if (___pthread_mutex_lock(132956) | 0) return;
 $8 = HEAP32[33131] | 0;
 if ($2 >>> 0 < $8 >>> 0) _abort();
 $11 = HEAP32[$0 + -4 >> 2] | 0;
 $12 = $11 & 3;
 if (($12 | 0) == 1) _abort();
 $14 = $11 & -8;
 $15 = $2 + $14 | 0;
 L14 : do if (!($11 & 1)) {
  $18 = HEAP32[$2 >> 2] | 0;
  if ($12 | 0) {
   $21 = $2 + (0 - $18) | 0;
   $22 = $18 + $14 | 0;
   if ($21 >>> 0 < $8 >>> 0) _abort();
   if ((HEAP32[33132] | 0) == ($21 | 0)) {
    $110 = $15 + 4 | 0;
    $111 = HEAP32[$110 >> 2] | 0;
    if (($111 & 3 | 0) != 3) {
     $$1 = $21;
     $$1380 = $22;
     $119 = $21;
     label = 57;
     break;
    }
    HEAP32[33129] = $22;
    HEAP32[$110 >> 2] = $111 & -2;
    HEAP32[$21 + 4 >> 2] = $22 | 1;
    HEAP32[$21 + $22 >> 2] = $22;
    break;
   }
   $26 = $18 >>> 3;
   if ($18 >>> 0 < 256) {
    $29 = HEAP32[$21 + 8 >> 2] | 0;
    $31 = HEAP32[$21 + 12 >> 2] | 0;
    $33 = 132548 + ($26 << 1 << 2) | 0;
    if (($29 | 0) != ($33 | 0)) {
     if ($8 >>> 0 > $29 >>> 0) _abort();
     if ((HEAP32[$29 + 12 >> 2] | 0) != ($21 | 0)) _abort();
    }
    if (($31 | 0) == ($29 | 0)) {
     HEAP32[33127] = HEAP32[33127] & ~(1 << $26);
     $$1 = $21;
     $$1380 = $22;
     $119 = $21;
     label = 57;
     break;
    }
    if (($31 | 0) == ($33 | 0)) $$pre$phi446Z2D = $31 + 8 | 0; else {
     if ($8 >>> 0 > $31 >>> 0) _abort();
     $46 = $31 + 8 | 0;
     if ((HEAP32[$46 >> 2] | 0) == ($21 | 0)) $$pre$phi446Z2D = $46; else _abort();
    }
    HEAP32[$29 + 12 >> 2] = $31;
    HEAP32[$$pre$phi446Z2D >> 2] = $29;
    $$1 = $21;
    $$1380 = $22;
    $119 = $21;
    label = 57;
    break;
   }
   $51 = HEAP32[$21 + 24 >> 2] | 0;
   $53 = HEAP32[$21 + 12 >> 2] | 0;
   do if (($53 | 0) == ($21 | 0)) {
    $64 = $21 + 16 | 0;
    $65 = $64 + 4 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = HEAP32[$64 >> 2] | 0;
     if (!$68) {
      $$3 = 0;
      break;
     } else {
      $$1385$ph = $68;
      $$1388$ph = $64;
     }
    } else {
     $$1385$ph = $66;
     $$1388$ph = $65;
    }
    $$1385 = $$1385$ph;
    $$1388 = $$1388$ph;
    while (1) {
     $70 = $$1385 + 20 | 0;
     $71 = HEAP32[$70 >> 2] | 0;
     if (!$71) {
      $73 = $$1385 + 16 | 0;
      $74 = HEAP32[$73 >> 2] | 0;
      if (!$74) break; else {
       $$1385$be = $74;
       $$1388$be = $73;
      }
     } else {
      $$1385$be = $71;
      $$1388$be = $70;
     }
     $$1385 = $$1385$be;
     $$1388 = $$1388$be;
    }
    if ($8 >>> 0 > $$1388 >>> 0) _abort(); else {
     HEAP32[$$1388 >> 2] = 0;
     $$3 = $$1385;
     break;
    }
   } else {
    $56 = HEAP32[$21 + 8 >> 2] | 0;
    if ($8 >>> 0 > $56 >>> 0) _abort();
    $58 = $56 + 12 | 0;
    if ((HEAP32[$58 >> 2] | 0) != ($21 | 0)) _abort();
    $61 = $53 + 8 | 0;
    if ((HEAP32[$61 >> 2] | 0) == ($21 | 0)) {
     HEAP32[$58 >> 2] = $53;
     HEAP32[$61 >> 2] = $56;
     $$3 = $53;
     break;
    } else _abort();
   } while (0);
   if (!$51) {
    $$1 = $21;
    $$1380 = $22;
    $119 = $21;
    label = 57;
   } else {
    $79 = HEAP32[$21 + 28 >> 2] | 0;
    $80 = 132812 + ($79 << 2) | 0;
    do if ((HEAP32[$80 >> 2] | 0) == ($21 | 0)) {
     HEAP32[$80 >> 2] = $$3;
     if (!$$3) {
      HEAP32[33128] = HEAP32[33128] & ~(1 << $79);
      $$1 = $21;
      $$1380 = $22;
      $119 = $21;
      label = 57;
      break L14;
     }
    } else if ((HEAP32[33131] | 0) >>> 0 > $51 >>> 0) _abort(); else {
     $89 = $51 + 16 | 0;
     HEAP32[((HEAP32[$89 >> 2] | 0) == ($21 | 0) ? $89 : $51 + 20 | 0) >> 2] = $$3;
     if (!$$3) {
      $$1 = $21;
      $$1380 = $22;
      $119 = $21;
      label = 57;
      break L14;
     } else break;
    } while (0);
    $94 = HEAP32[33131] | 0;
    if ($94 >>> 0 > $$3 >>> 0) _abort();
    HEAP32[$$3 + 24 >> 2] = $51;
    $97 = $21 + 16 | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    do if ($98 | 0) if ($94 >>> 0 > $98 >>> 0) _abort(); else {
     HEAP32[$$3 + 16 >> 2] = $98;
     HEAP32[$98 + 24 >> 2] = $$3;
     break;
    } while (0);
    $104 = HEAP32[$97 + 4 >> 2] | 0;
    if (!$104) {
     $$1 = $21;
     $$1380 = $22;
     $119 = $21;
     label = 57;
    } else if ((HEAP32[33131] | 0) >>> 0 > $104 >>> 0) _abort(); else {
     HEAP32[$$3 + 20 >> 2] = $104;
     HEAP32[$104 + 24 >> 2] = $$3;
     $$1 = $21;
     $$1380 = $22;
     $119 = $21;
     label = 57;
     break;
    }
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $14;
  $119 = $2;
  label = 57;
 } while (0);
 do if ((label | 0) == 57) {
  if ($119 >>> 0 >= $15 >>> 0) _abort();
  $120 = $15 + 4 | 0;
  $121 = HEAP32[$120 >> 2] | 0;
  if (!($121 & 1)) _abort();
  if (!($121 & 2)) {
   if ((HEAP32[33133] | 0) == ($15 | 0)) {
    $129 = (HEAP32[33130] | 0) + $$1380 | 0;
    HEAP32[33130] = $129;
    HEAP32[33133] = $$1;
    HEAP32[$$1 + 4 >> 2] = $129 | 1;
    if (($$1 | 0) != (HEAP32[33132] | 0)) break;
    HEAP32[33132] = 0;
    HEAP32[33129] = 0;
    break;
   }
   if ((HEAP32[33132] | 0) == ($15 | 0)) {
    $137 = (HEAP32[33129] | 0) + $$1380 | 0;
    HEAP32[33129] = $137;
    HEAP32[33132] = $119;
    HEAP32[$$1 + 4 >> 2] = $137 | 1;
    HEAP32[$119 + $137 >> 2] = $137;
    break;
   }
   $142 = ($121 & -8) + $$1380 | 0;
   $143 = $121 >>> 3;
   L109 : do if ($121 >>> 0 < 256) {
    $146 = HEAP32[$15 + 8 >> 2] | 0;
    $148 = HEAP32[$15 + 12 >> 2] | 0;
    $150 = 132548 + ($143 << 1 << 2) | 0;
    if (($146 | 0) != ($150 | 0)) {
     if ((HEAP32[33131] | 0) >>> 0 > $146 >>> 0) _abort();
     if ((HEAP32[$146 + 12 >> 2] | 0) != ($15 | 0)) _abort();
    }
    if (($148 | 0) == ($146 | 0)) {
     HEAP32[33127] = HEAP32[33127] & ~(1 << $143);
     break;
    }
    if (($148 | 0) == ($150 | 0)) $$pre$phi444Z2D = $148 + 8 | 0; else {
     if ((HEAP32[33131] | 0) >>> 0 > $148 >>> 0) _abort();
     $165 = $148 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($15 | 0)) $$pre$phi444Z2D = $165; else _abort();
    }
    HEAP32[$146 + 12 >> 2] = $148;
    HEAP32[$$pre$phi444Z2D >> 2] = $146;
   } else {
    $170 = HEAP32[$15 + 24 >> 2] | 0;
    $172 = HEAP32[$15 + 12 >> 2] | 0;
    do if (($172 | 0) == ($15 | 0)) {
     $184 = $15 + 16 | 0;
     $185 = $184 + 4 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = HEAP32[$184 >> 2] | 0;
      if (!$188) {
       $$3398 = 0;
       break;
      } else {
       $$1396$ph = $188;
       $$1400$ph = $184;
      }
     } else {
      $$1396$ph = $186;
      $$1400$ph = $185;
     }
     $$1396 = $$1396$ph;
     $$1400 = $$1400$ph;
     while (1) {
      $190 = $$1396 + 20 | 0;
      $191 = HEAP32[$190 >> 2] | 0;
      if (!$191) {
       $193 = $$1396 + 16 | 0;
       $194 = HEAP32[$193 >> 2] | 0;
       if (!$194) break; else {
        $$1396$be = $194;
        $$1400$be = $193;
       }
      } else {
       $$1396$be = $191;
       $$1400$be = $190;
      }
      $$1396 = $$1396$be;
      $$1400 = $$1400$be;
     }
     if ((HEAP32[33131] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
      HEAP32[$$1400 >> 2] = 0;
      $$3398 = $$1396;
      break;
     }
    } else {
     $175 = HEAP32[$15 + 8 >> 2] | 0;
     if ((HEAP32[33131] | 0) >>> 0 > $175 >>> 0) _abort();
     $178 = $175 + 12 | 0;
     if ((HEAP32[$178 >> 2] | 0) != ($15 | 0)) _abort();
     $181 = $172 + 8 | 0;
     if ((HEAP32[$181 >> 2] | 0) == ($15 | 0)) {
      HEAP32[$178 >> 2] = $172;
      HEAP32[$181 >> 2] = $175;
      $$3398 = $172;
      break;
     } else _abort();
    } while (0);
    if ($170 | 0) {
     $200 = HEAP32[$15 + 28 >> 2] | 0;
     $201 = 132812 + ($200 << 2) | 0;
     do if ((HEAP32[$201 >> 2] | 0) == ($15 | 0)) {
      HEAP32[$201 >> 2] = $$3398;
      if (!$$3398) {
       HEAP32[33128] = HEAP32[33128] & ~(1 << $200);
       break L109;
      }
     } else if ((HEAP32[33131] | 0) >>> 0 > $170 >>> 0) _abort(); else {
      $210 = $170 + 16 | 0;
      HEAP32[((HEAP32[$210 >> 2] | 0) == ($15 | 0) ? $210 : $170 + 20 | 0) >> 2] = $$3398;
      if (!$$3398) break L109; else break;
     } while (0);
     $215 = HEAP32[33131] | 0;
     if ($215 >>> 0 > $$3398 >>> 0) _abort();
     HEAP32[$$3398 + 24 >> 2] = $170;
     $218 = $15 + 16 | 0;
     $219 = HEAP32[$218 >> 2] | 0;
     do if ($219 | 0) if ($215 >>> 0 > $219 >>> 0) _abort(); else {
      HEAP32[$$3398 + 16 >> 2] = $219;
      HEAP32[$219 + 24 >> 2] = $$3398;
      break;
     } while (0);
     $225 = HEAP32[$218 + 4 >> 2] | 0;
     if ($225 | 0) if ((HEAP32[33131] | 0) >>> 0 > $225 >>> 0) _abort(); else {
      HEAP32[$$3398 + 20 >> 2] = $225;
      HEAP32[$225 + 24 >> 2] = $$3398;
      break;
     }
    }
   } while (0);
   HEAP32[$$1 + 4 >> 2] = $142 | 1;
   HEAP32[$119 + $142 >> 2] = $142;
   if (($$1 | 0) == (HEAP32[33132] | 0)) {
    HEAP32[33129] = $142;
    break;
   } else $$2 = $142;
  } else {
   HEAP32[$120 >> 2] = $121 & -2;
   HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
   HEAP32[$119 + $$1380 >> 2] = $$1380;
   $$2 = $$1380;
  }
  $240 = $$2 >>> 3;
  if ($$2 >>> 0 < 256) {
   $243 = 132548 + ($240 << 1 << 2) | 0;
   $244 = HEAP32[33127] | 0;
   $245 = 1 << $240;
   if (!($244 & $245)) {
    HEAP32[33127] = $244 | $245;
    $$0401 = $243;
    $$pre$phiZ2D = $243 + 8 | 0;
   } else {
    $249 = $243 + 8 | 0;
    $250 = HEAP32[$249 >> 2] | 0;
    if ((HEAP32[33131] | 0) >>> 0 > $250 >>> 0) _abort(); else {
     $$0401 = $250;
     $$pre$phiZ2D = $249;
    }
   }
   HEAP32[$$pre$phiZ2D >> 2] = $$1;
   HEAP32[$$0401 + 12 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $$0401;
   HEAP32[$$1 + 12 >> 2] = $243;
   break;
  }
  $256 = $$2 >>> 8;
  if (!$256) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
   $261 = ($256 + 1048320 | 0) >>> 16 & 8;
   $262 = $256 << $261;
   $265 = ($262 + 520192 | 0) >>> 16 & 4;
   $267 = $262 << $265;
   $270 = ($267 + 245760 | 0) >>> 16 & 2;
   $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0;
   $$0394 = $$2 >>> ($275 + 7 | 0) & 1 | $275 << 1;
  }
  $281 = 132812 + ($$0394 << 2) | 0;
  HEAP32[$$1 + 28 >> 2] = $$0394;
  HEAP32[$$1 + 20 >> 2] = 0;
  HEAP32[$$1 + 16 >> 2] = 0;
  $285 = HEAP32[33128] | 0;
  $286 = 1 << $$0394;
  L193 : do if (!($285 & $286)) {
   HEAP32[33128] = $285 | $286;
   HEAP32[$281 >> 2] = $$1;
   HEAP32[$$1 + 24 >> 2] = $281;
   HEAP32[$$1 + 12 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $$1;
  } else {
   $293 = HEAP32[$281 >> 2] | 0;
   L196 : do if ((HEAP32[$293 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $293; else {
    $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
    $$0382437 = $293;
    while (1) {
     $310 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
     $305 = HEAP32[$310 >> 2] | 0;
     if (!$305) break;
     if ((HEAP32[$305 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
      $$0382$lcssa = $305;
      break L196;
     } else {
      $$0381438 = $$0381438 << 1;
      $$0382437 = $305;
     }
    }
    if ((HEAP32[33131] | 0) >>> 0 > $310 >>> 0) _abort(); else {
     HEAP32[$310 >> 2] = $$1;
     HEAP32[$$1 + 24 >> 2] = $$0382437;
     HEAP32[$$1 + 12 >> 2] = $$1;
     HEAP32[$$1 + 8 >> 2] = $$1;
     break L193;
    }
   } while (0);
   $317 = $$0382$lcssa + 8 | 0;
   $318 = HEAP32[$317 >> 2] | 0;
   $319 = HEAP32[33131] | 0;
   if ($319 >>> 0 <= $318 >>> 0 & $319 >>> 0 <= $$0382$lcssa >>> 0) {
    HEAP32[$318 + 12 >> 2] = $$1;
    HEAP32[$317 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $318;
    HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
    HEAP32[$$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  } while (0);
  $328 = (HEAP32[33135] | 0) + -1 | 0;
  HEAP32[33135] = $328;
  if (!$328) {
   $$0211$in$i = 132992;
   while (1) {
    $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
    if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
   }
   HEAP32[33135] = -1;
  }
 } while (0);
 if (!(HEAP32[33238] & 2)) return;
 ___pthread_mutex_unlock(132956) | 0;
 return;
}

function _set_matrix_item($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$pre$i = 0.0, $$pre48$i = 0.0, $$pre50$i = 0.0, $$pre52$i = 0.0, $$pre54$i = 0.0, $$pre56$i = 0.0, $$pre58$i = 0.0, $$pre60$i = 0.0, $$pre62$i = 0.0, $$pre63$i = 0.0, $$pre65$i = 0.0, $$pre67$i = 0.0, $$pre69$i = 0.0, $102 = 0.0, $104 = 0.0, $105 = 0.0, $107 = 0.0, $108 = 0.0, $110 = 0.0, $111 = 0.0, $114 = 0.0, $128 = 0.0, $130 = 0.0, $131 = 0.0, $133 = 0.0, $134 = 0.0, $136 = 0.0, $137 = 0.0, $140 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $16 = 0, $161 = 0.0, $164 = 0.0, $165 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $171 = 0.0, $172 = 0.0, $174 = 0.0, $178 = 0.0, $18 = 0, $184 = 0.0, $19 = 0, $190 = 0.0, $193 = 0.0, $194 = 0.0, $196 = 0.0, $197 = 0.0, $199 = 0.0, $20 = 0, $203 = 0.0, $209 = 0.0, $21 = 0, $215 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $221 = 0.0, $222 = 0.0, $224 = 0.0, $228 = 0.0, $23 = 0, $234 = 0.0, $24 = 0, $240 = 0.0, $243 = 0.0, $244 = 0.0, $246 = 0.0, $247 = 0.0, $249 = 0.0, $25 = 0, $253 = 0.0, $259 = 0.0, $26 = 0, $265 = 0.0, $267 = 0.0, $268 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $273 = 0.0, $277 = 0.0, $28 = 0, $282 = 0.0, $288 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $293 = 0.0, $294 = 0.0, $296 = 0.0, $30 = 0, $300 = 0.0, $305 = 0.0, $31 = 0, $311 = 0.0, $313 = 0.0, $314 = 0.0, $316 = 0.0, $317 = 0.0, $319 = 0.0, $32 = 0, $323 = 0.0, $328 = 0.0, $33 = 0, $334 = 0.0, $336 = 0.0, $337 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $342 = 0.0, $346 = 0.0, $35 = 0, $351 = 0.0, $357 = 0, $359 = 0, $36 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $367 = 0.0, $369 = 0.0, $37 = 0, $371 = 0.0, $374 = 0.0, $376 = 0.0, $378 = 0.0, $38 = 0, $381 = 0.0, $383 = 0.0, $385 = 0.0, $388 = 0.0, $39 = 0, $390 = 0.0, $392 = 0.0, $395 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $405 = 0.0, $41 = 0, $410 = 0.0, $414 = 0.0, $417 = 0.0, $42 = 0, $420 = 0.0, $423 = 0.0, $427 = 0.0, $43 = 0, $430 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $52 = 0.0, $53 = 0.0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $62 = 0.0, $7 = 0.0, $76 = 0.0, $78 = 0.0, $79 = 0.0, $81 = 0.0, $82 = 0.0, $84 = 0.0, $85 = 0.0, $88 = 0.0, $9 = 0.0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 64 | 0;
 $5 = sp;
 $6 = +($1 | 0);
 $7 = +($2 | 0);
 $9 = +($3 << 6 | 0);
 HEAPF32[$5 >> 2] = 1.0;
 $16 = $5 + 4 | 0;
 $17 = $5 + 20 | 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 HEAP32[$16 + 12 >> 2] = 0;
 HEAPF32[$17 >> 2] = 1.0;
 $18 = $5 + 24 | 0;
 $19 = $5 + 40 | 0;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$18 + 4 >> 2] = 0;
 HEAP32[$18 + 8 >> 2] = 0;
 HEAP32[$18 + 12 >> 2] = 0;
 HEAPF32[$19 >> 2] = 1.0;
 $20 = $5 + 44 | 0;
 $21 = $5 + 60 | 0;
 $22 = $5 + 8 | 0;
 $23 = $5 + 12 | 0;
 HEAPF32[$4 >> 2] = .7071067690849304;
 $24 = $4 + 4 | 0;
 HEAPF32[$24 >> 2] = 0.0;
 $25 = $4 + 8 | 0;
 HEAPF32[$25 >> 2] = -.7071067690849304;
 $26 = $4 + 12 | 0;
 HEAPF32[$26 >> 2] = 0.0;
 $27 = $5 + 16 | 0;
 $28 = $5 + 28 | 0;
 $29 = $4 + 16 | 0;
 HEAPF32[$29 >> 2] = 0.0;
 $30 = $4 + 20 | 0;
 HEAPF32[$30 >> 2] = 1.0;
 $31 = $4 + 24 | 0;
 HEAPF32[$31 >> 2] = 0.0;
 $32 = $4 + 28 | 0;
 HEAPF32[$32 >> 2] = 0.0;
 $33 = $5 + 32 | 0;
 $34 = $5 + 36 | 0;
 $35 = $4 + 32 | 0;
 HEAPF32[$35 >> 2] = .7071067690849304;
 $36 = $4 + 36 | 0;
 HEAPF32[$36 >> 2] = 0.0;
 $37 = $4 + 40 | 0;
 HEAPF32[$37 >> 2] = .7071067690849304;
 $38 = $4 + 44 | 0;
 $39 = $5 + 48 | 0;
 $40 = $5 + 52 | 0;
 $41 = $5 + 56 | 0;
 $42 = $4 + 48 | 0;
 $43 = $4 + 52 | 0;
 $44 = $4 + 56 | 0;
 $45 = $4 + 60 | 0;
 HEAP32[$38 >> 2] = 0;
 HEAP32[$38 + 4 >> 2] = 0;
 HEAP32[$38 + 8 >> 2] = 0;
 HEAP32[$38 + 12 >> 2] = 0;
 HEAPF32[$45 >> 2] = 1.0;
 $46 = $6 / $7;
 $47 = $7 / $9 * .5;
 $48 = 1.0 - ($6 - $9) / $6 * 2.0;
 $49 = 1.0 - $9 / $7 * 2.0;
 dest = $5;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $50 = +HEAPF32[$5 >> 2];
 $52 = +HEAPF32[$16 >> 2];
 $53 = $52 * 0.0;
 $55 = +HEAPF32[$22 >> 2];
 $56 = $55 * 0.0;
 $58 = +HEAPF32[$23 >> 2];
 $59 = $58 * 0.0;
 HEAPF32[$4 >> 2] = $50 + 0.0 + $53 + $56 + $59;
 $62 = $50 * 0.0 + 0.0;
 HEAPF32[$24 >> 2] = $62 + $52 * .9510565400123596 - $55 * .30901700258255005 + $59;
 HEAPF32[$25 >> 2] = $62 + $52 * .30901700258255005 + $55 * .9510565400123596 + $59;
 HEAPF32[$26 >> 2] = $58 + ($62 + $53 + $56);
 $76 = +HEAPF32[$27 >> 2];
 $78 = +HEAPF32[$17 >> 2];
 $79 = $78 * 0.0;
 $81 = +HEAPF32[$18 >> 2];
 $82 = $81 * 0.0;
 $84 = +HEAPF32[$28 >> 2];
 $85 = $84 * 0.0;
 HEAPF32[$29 >> 2] = $76 + 0.0 + $79 + $82 + $85;
 $88 = $76 * 0.0 + 0.0;
 HEAPF32[$30 >> 2] = $88 + $78 * .9510565400123596 - $81 * .30901700258255005 + $85;
 HEAPF32[$31 >> 2] = $88 + $78 * .30901700258255005 + $81 * .9510565400123596 + $85;
 HEAPF32[$32 >> 2] = $84 + ($88 + $79 + $82);
 $102 = +HEAPF32[$33 >> 2];
 $104 = +HEAPF32[$34 >> 2];
 $105 = $104 * 0.0;
 $107 = +HEAPF32[$19 >> 2];
 $108 = $107 * 0.0;
 $110 = +HEAPF32[$20 >> 2];
 $111 = $110 * 0.0;
 HEAPF32[$35 >> 2] = $102 + 0.0 + $105 + $108 + $111;
 $114 = $102 * 0.0 + 0.0;
 HEAPF32[$36 >> 2] = $114 + $104 * .9510565400123596 - $107 * .30901700258255005 + $111;
 HEAPF32[$37 >> 2] = $114 + $104 * .30901700258255005 + $107 * .9510565400123596 + $111;
 HEAPF32[$38 >> 2] = $110 + ($114 + $105 + $108);
 $128 = +HEAPF32[$39 >> 2];
 $130 = +HEAPF32[$40 >> 2];
 $131 = $130 * 0.0;
 $133 = +HEAPF32[$41 >> 2];
 $134 = $133 * 0.0;
 $136 = +HEAPF32[$21 >> 2];
 $137 = $136 * 0.0;
 HEAPF32[$42 >> 2] = $128 + 0.0 + $131 + $134 + $137;
 $140 = $128 * 0.0 + 0.0;
 HEAPF32[$43 >> 2] = $140 + $130 * .9510565400123596 - $133 * .30901700258255005 + $137;
 HEAPF32[$44 >> 2] = $140 + $130 * .30901700258255005 + $133 * .9510565400123596 + $137;
 HEAPF32[$45 >> 2] = $136 + ($140 + $131 + $134);
 dest = $5;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $154 = $46 * $47;
 $155 = $154 + $154;
 $156 = 2.0 / $155;
 $157 = $47 + $47;
 $158 = 2.0 / $157;
 $161 = -($154 - $154) / $155;
 $164 = -($47 - $47) / $157;
 $165 = +HEAPF32[$5 >> 2];
 $168 = +HEAPF32[$16 >> 2];
 $169 = $168 * 0.0;
 $171 = +HEAPF32[$22 >> 2];
 $172 = $171 * 0.0;
 $174 = +HEAPF32[$23 >> 2];
 HEAPF32[$4 >> 2] = $156 * $165 + 0.0 + $169 + $172 + $161 * $174;
 $178 = $165 * 0.0 + 0.0;
 HEAPF32[$24 >> 2] = $178 + $158 * $168 + $172 + $164 * $174;
 $184 = $178 + $169;
 HEAPF32[$25 >> 2] = $184 - $171 - $174 * 0.0;
 HEAPF32[$26 >> 2] = $174 + ($184 + $172);
 $190 = +HEAPF32[$27 >> 2];
 $193 = +HEAPF32[$17 >> 2];
 $194 = $193 * 0.0;
 $196 = +HEAPF32[$18 >> 2];
 $197 = $196 * 0.0;
 $199 = +HEAPF32[$28 >> 2];
 HEAPF32[$29 >> 2] = $156 * $190 + 0.0 + $194 + $197 + $161 * $199;
 $203 = $190 * 0.0 + 0.0;
 HEAPF32[$30 >> 2] = $203 + $158 * $193 + $197 + $164 * $199;
 $209 = $203 + $194;
 HEAPF32[$31 >> 2] = $209 - $196 - $199 * 0.0;
 HEAPF32[$32 >> 2] = $199 + ($209 + $197);
 $215 = +HEAPF32[$33 >> 2];
 $218 = +HEAPF32[$34 >> 2];
 $219 = $218 * 0.0;
 $221 = +HEAPF32[$19 >> 2];
 $222 = $221 * 0.0;
 $224 = +HEAPF32[$20 >> 2];
 HEAPF32[$35 >> 2] = $156 * $215 + 0.0 + $219 + $222 + $161 * $224;
 $228 = $215 * 0.0 + 0.0;
 HEAPF32[$36 >> 2] = $228 + $158 * $218 + $222 + $164 * $224;
 $234 = $228 + $219;
 HEAPF32[$37 >> 2] = $234 - $221 - $224 * 0.0;
 HEAPF32[$38 >> 2] = $224 + ($234 + $222);
 $240 = +HEAPF32[$39 >> 2];
 $243 = +HEAPF32[$40 >> 2];
 $244 = $243 * 0.0;
 $246 = +HEAPF32[$41 >> 2];
 $247 = $246 * 0.0;
 $249 = +HEAPF32[$21 >> 2];
 HEAPF32[$42 >> 2] = $156 * $240 + 0.0 + $244 + $247 + $161 * $249;
 $253 = $240 * 0.0 + 0.0;
 HEAPF32[$43 >> 2] = $253 + $158 * $243 + $247 + $164 * $249;
 $259 = $253 + $244;
 HEAPF32[$44 >> 2] = $259 - $246 - $249 * 0.0;
 HEAPF32[$45 >> 2] = $249 + ($259 + $247);
 dest = $5;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $265 = +HEAPF32[$5 >> 2];
 $267 = +HEAPF32[$16 >> 2];
 $268 = $267 * 0.0;
 $270 = +HEAPF32[$22 >> 2];
 $271 = $270 * 0.0;
 $273 = +HEAPF32[$23 >> 2];
 HEAPF32[$4 >> 2] = $265 + 0.0 + $268 + $271 - $48 * $273;
 $277 = $265 * 0.0 + 0.0;
 HEAPF32[$24 >> 2] = $267 + $277 + $271 - $49 * $273;
 $282 = $277 + $268;
 HEAPF32[$25 >> 2] = $270 + $282 + $273 * 0.0;
 HEAPF32[$26 >> 2] = $273 + ($282 + $271);
 $288 = +HEAPF32[$27 >> 2];
 $290 = +HEAPF32[$17 >> 2];
 $291 = $290 * 0.0;
 $293 = +HEAPF32[$18 >> 2];
 $294 = $293 * 0.0;
 $296 = +HEAPF32[$28 >> 2];
 HEAPF32[$29 >> 2] = $288 + 0.0 + $291 + $294 - $48 * $296;
 $300 = $288 * 0.0 + 0.0;
 HEAPF32[$30 >> 2] = $290 + $300 + $294 - $49 * $296;
 $305 = $300 + $291;
 HEAPF32[$31 >> 2] = $293 + $305 + $296 * 0.0;
 HEAPF32[$32 >> 2] = $296 + ($305 + $294);
 $311 = +HEAPF32[$33 >> 2];
 $313 = +HEAPF32[$34 >> 2];
 $314 = $313 * 0.0;
 $316 = +HEAPF32[$19 >> 2];
 $317 = $316 * 0.0;
 $319 = +HEAPF32[$20 >> 2];
 HEAPF32[$35 >> 2] = $311 + 0.0 + $314 + $317 - $48 * $319;
 $323 = $311 * 0.0 + 0.0;
 HEAPF32[$36 >> 2] = $313 + $323 + $317 - $49 * $319;
 $328 = $323 + $314;
 HEAPF32[$37 >> 2] = $316 + $328 + $319 * 0.0;
 HEAPF32[$38 >> 2] = $319 + ($328 + $317);
 $334 = +HEAPF32[$39 >> 2];
 $336 = +HEAPF32[$40 >> 2];
 $337 = $336 * 0.0;
 $339 = +HEAPF32[$41 >> 2];
 $340 = $339 * 0.0;
 $342 = +HEAPF32[$21 >> 2];
 HEAPF32[$42 >> 2] = $334 + 0.0 + $337 + $340 - $48 * $342;
 $346 = $334 * 0.0 + 0.0;
 HEAPF32[$43 >> 2] = $336 + $346 + $340 - $49 * $342;
 $351 = $346 + $337;
 HEAPF32[$44 >> 2] = $339 + $351 + $342 * 0.0;
 HEAPF32[$45 >> 2] = $342 + ($351 + $340);
 dest = $5;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$0 >> 2] = 1.0;
 $357 = $0 + 4 | 0;
 HEAP32[$357 >> 2] = 0;
 HEAP32[$357 + 4 >> 2] = 0;
 HEAP32[$357 + 8 >> 2] = 0;
 HEAP32[$357 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 1.0;
 $359 = $0 + 24 | 0;
 HEAP32[$359 >> 2] = 0;
 HEAP32[$359 + 4 >> 2] = 0;
 HEAP32[$359 + 8 >> 2] = 0;
 HEAP32[$359 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 1.0;
 $361 = $0 + 44 | 0;
 $362 = $0 + 60 | 0;
 HEAP32[$361 >> 2] = 0;
 HEAP32[$361 + 4 >> 2] = 0;
 HEAP32[$361 + 8 >> 2] = 0;
 HEAP32[$361 + 12 >> 2] = 0;
 HEAPF32[$362 >> 2] = 1.0;
 $$pre$i = +HEAPF32[$39 >> 2];
 $$pre48$i = +HEAPF32[$16 >> 2];
 $$pre50$i = +HEAPF32[$17 >> 2];
 $$pre52$i = +HEAPF32[$34 >> 2];
 $$pre54$i = +HEAPF32[$40 >> 2];
 $$pre56$i = +HEAPF32[$22 >> 2];
 $$pre58$i = +HEAPF32[$18 >> 2];
 $$pre60$i = +HEAPF32[$19 >> 2];
 $$pre62$i = +HEAPF32[$41 >> 2];
 $$pre63$i = +HEAPF32[$23 >> 2];
 $$pre65$i = +HEAPF32[$28 >> 2];
 $$pre67$i = +HEAPF32[$20 >> 2];
 $$pre69$i = +HEAPF32[$21 >> 2];
 $363 = +HEAPF32[$5 >> 2];
 $364 = +HEAPF32[$27 >> 2];
 $365 = +HEAPF32[$33 >> 2];
 $367 = $364 * 0.0;
 $369 = $365 * 0.0;
 $371 = $$pre$i * 0.0;
 HEAPF32[$4 >> 2] = $363 + 0.0 + $367 + $369 + $371;
 $374 = $$pre50$i * 0.0;
 $376 = $$pre52$i * 0.0;
 $378 = $$pre54$i * 0.0;
 HEAPF32[$24 >> 2] = $$pre48$i + 0.0 + $374 + $376 + $378;
 $381 = $$pre58$i * 0.0;
 $383 = $$pre60$i * 0.0;
 $385 = $$pre62$i * 0.0;
 HEAPF32[$25 >> 2] = $$pre56$i + 0.0 + $381 + $383 + $385;
 $388 = $$pre65$i * 0.0;
 $390 = $$pre67$i * 0.0;
 $392 = $$pre69$i * 0.0;
 HEAPF32[$26 >> 2] = $$pre63$i + 0.0 + $388 + $390 + $392;
 $395 = $363 * 0.0 + 0.0;
 HEAPF32[$29 >> 2] = $395 + $364 + $369 + $371;
 $400 = $$pre48$i * 0.0 + 0.0;
 HEAPF32[$30 >> 2] = $400 + $$pre50$i + $376 + $378;
 $405 = $$pre56$i * 0.0 + 0.0;
 HEAPF32[$31 >> 2] = $405 + $$pre58$i + $383 + $385;
 $410 = $$pre63$i * 0.0 + 0.0;
 HEAPF32[$32 >> 2] = $410 + $$pre65$i + $390 + $392;
 $414 = $395 + $367;
 HEAPF32[$35 >> 2] = $414 + $365 + $371;
 $417 = $400 + $374;
 HEAPF32[$36 >> 2] = $417 + $$pre52$i + $378;
 $420 = $405 + $381;
 HEAPF32[$37 >> 2] = $420 + $$pre60$i + $385;
 $423 = $410 + $388;
 HEAPF32[$38 >> 2] = $423 + $$pre67$i + $392;
 $427 = +HEAPF32[$0 + 56 >> 2];
 $430 = +HEAPF32[$362 >> 2];
 HEAPF32[$42 >> 2] = $414 + $365 * $427 + $$pre$i * $430;
 HEAPF32[$43 >> 2] = $417 + $$pre52$i * $427 + $$pre54$i * $430;
 HEAPF32[$44 >> 2] = $420 + $$pre60$i * $427 + $$pre62$i * $430;
 HEAPF32[$45 >> 2] = $423 + $$pre67$i * $427 + $$pre69$i * $430;
 dest = $0;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _ensure_chunks_worker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$01822$i = 0, $$01822$i$1 = 0, $$01822$i$2 = 0, $$01822$i$us = 0, $$01822$i$us$1 = 0, $$01822$i$us$2 = 0, $$01822$i206 = 0, $$0189225 = 0, $$0192209$1 = 0, $$0194218 = 0, $$0195220 = 0, $$0196224 = 0, $$0198223 = 0, $$0200222 = 0, $$0202221 = 0, $$0226 = 0, $$1197 = 0, $$1199 = 0, $$1201 = 0, $$2 = 0, $$2191 = 0, $10 = 0, $103 = 0, $106 = 0, $109 = 0, $114 = 0, $117 = 0, $119 = 0, $121 = 0, $134 = 0, $139 = 0, $141 = 0, $157 = 0, $159 = 0, $161 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $189 = 0, $191 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $213 = 0, $217 = 0, $219 = 0, $224 = 0, $226 = 0, $227 = 0, $240 = 0, $242 = 0, $246 = 0, $251 = 0, $253 = 0, $255 = 0, $26 = 0, $268 = 0, $270 = 0, $274 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $55 = 0, $6 = 0, $67 = 0, $75 = 0, $79 = 0, $8 = 0, $84 = 0, $89 = 0, $97 = 0, $98 = 0, label = 0, sp = 0, $$0194218$looptemp = 0, $$0195220$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $2 = sp + 96 | 0;
 $3 = sp;
 $6 = $0 + 40 | 0;
 $8 = $0 + 44 | 0;
 $10 = $0 + 48 | 0;
 _set_matrix_3d($2, HEAP32[32718] | 0, HEAP32[32719] | 0, +HEAPF32[$6 >> 2], +HEAPF32[$8 >> 2], +HEAPF32[$10 >> 2], +HEAPF32[$0 + 52 >> 2], +HEAPF32[$0 + 56 >> 2], +HEAPF32[32724], HEAP32[32723] | 0, HEAP32[32715] | 0);
 _frustum_planes($3, HEAP32[32715] | 0, $2);
 $20 = HEAP32[$1 >> 2] | 0;
 if (($20 | 0) >= 1e3) {
  STACKTOP = sp;
  return;
 }
 $26 = ~~+Math_floor(+(+_llvm_round_f32(+(+HEAPF32[$8 >> 2])) * .03125));
 $31 = ~~+Math_floor(+(+_llvm_round_f32(+(+HEAPF32[$10 >> 2])) * .03125));
 $37 = ~~+Math_floor(+(+_llvm_round_f32(+(+HEAPF32[$6 >> 2])) * .03125)) + -5 | 0;
 $38 = $31 + -5 | 0;
 $39 = $26 + -5 | 0;
 $$0189225 = 0;
 $$0196224 = $20;
 $$0198223 = 0;
 $$0200222 = 0;
 $$0202221 = $20;
 $$0226 = 268435455;
 while (1) {
  $41 = $37 + $$0196224 | 0;
  $42 = $38 + $$0198223 | 0;
  $43 = $39 + $$0200222 | 0;
  $44 = $$0196224 + 4 | 0;
  if (($$0196224 | 0) > 5) {
   $46 = ($44 | 0) / 10 | 0;
   $47 = $46 + $$0198223 | 0;
   $49 = $44 - ($46 * 10 | 0) | 0;
   if (($47 | 0) > 9) {
    $51 = ($47 >>> 0) / 10 | 0;
    $$1197 = $49;
    $$1199 = $47 - ($51 * 10 | 0) | 0;
    $$1201 = $51 + $$0200222 | 0;
   } else {
    $$1197 = $49;
    $$1199 = $47;
    $$1201 = $$0200222;
   }
  } else {
   $$1197 = $44;
   $$1199 = $$0198223;
   $$1201 = $$0200222;
  }
  $$01822$i206 = 0;
  while (1) {
   $55 = 23848 + ($$01822$i206 * 96 | 0) | 0;
   if (HEAP32[23848 + ($$01822$i206 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[$55 >> 2] | 0) == ($41 | 0)) if ((HEAP32[23848 + ($$01822$i206 * 96 | 0) + 4 >> 2] | 0) == ($42 | 0)) if ((HEAP32[23848 + ($$01822$i206 * 96 | 0) + 8 >> 2] | 0) == ($43 | 0)) {
    label = 13;
    break;
   }
   $67 = $$01822$i206 + 1 | 0;
   if ($67 >>> 0 < 1024) $$01822$i206 = $67; else {
    $$2 = $$0226;
    $$2191 = $$0189225;
    break;
   }
  }
  if ((label | 0) == 13) {
   label = 0;
   if (!(HEAP32[23848 + ($$01822$i206 * 96 | 0) + 16 >> 2] | 0)) {
    $$2 = $$0226;
    $$2191 = $$0189225;
   } else {
    $75 = ($$1197 | 0) < 5 ? 5 - $$1197 | 0 : $$1197 + -5 | 0;
    $79 = ($$1199 | 0) < 5 ? 5 - $$1199 | 0 : $$1199 + -5 | 0;
    $$ = ($75 | 0) > ($79 | 0) ? $75 : $79;
    $84 = ($$1201 | 0) < 5 ? 5 - $$1201 | 0 : $$1201 + -5 | 0;
    $89 = (_chunk_visible($3, $41, $42, $43) | 0) == 0 & 1;
    $97 = $89 << 24 | (($$ | 0) > ($84 | 0) ? $$ : $84) | ((HEAP32[23848 + ($$01822$i206 * 96 | 0) + 88 >> 2] | 0) != 0 & 1) << 16;
    $98 = ($97 | 0) < ($$0226 | 0);
    $$2 = $98 ? $97 : $$0226;
    $$2191 = $98 ? $55 : $$0189225;
   }
  }
  if (($$0202221 | 0) < 996) {
   $$0189225 = $$2191;
   $$0196224 = $$1197;
   $$0198223 = $$1199;
   $$0200222 = $$1201;
   $$0202221 = $$0202221 + 4 | 0;
   $$0226 = $$2;
  } else break;
 }
 if (($$2 | 0) == 268435455) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$1 + 88 >> 2] = HEAP32[$$2191 >> 2];
 $103 = $$2191 + 4 | 0;
 HEAP32[$1 + 92 >> 2] = HEAP32[$103 >> 2];
 $106 = $$2191 + 8 | 0;
 HEAP32[$1 + 96 >> 2] = HEAP32[$106 >> 2];
 $109 = ($$2191 | 0) == 0;
 $$0195220 = -1;
 do {
  $$0195220$looptemp = $$0195220;
  $$0195220 = $$0195220 + 1 | 0;
  $$0194218 = -1;
  do {
   $114 = $$0194218 | $$0195220$looptemp;
   $$0194218$looptemp = $$0194218;
   $$0194218 = $$0194218 + 1 | 0;
   $117 = (HEAP32[$$2191 >> 2] | 0) + $$0195220$looptemp | 0;
   $119 = (HEAP32[$103 >> 2] | 0) + $$0194218$looptemp | 0;
   $121 = (HEAP32[$106 >> 2] | 0) + -1 | 0;
   do if ($109) {
    $$01822$i$us = 0;
    while (1) {
     if (HEAP32[23848 + ($$01822$i$us * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[23848 + ($$01822$i$us * 96 | 0) >> 2] | 0) == ($117 | 0)) if ((HEAP32[23848 + ($$01822$i$us * 96 | 0) + 4 >> 2] | 0) == ($119 | 0)) if ((HEAP32[23848 + ($$01822$i$us * 96 | 0) + 8 >> 2] | 0) == ($121 | 0)) {
      label = 30;
      break;
     }
     $134 = $$01822$i$us + 1 | 0;
     if ($134 >>> 0 < 1024) $$01822$i$us = $134; else {
      label = 28;
      break;
     }
    }
    if ((label | 0) == 28) {
     label = 0;
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = 0;
    } else if ((label | 0) == 30) {
     label = 0;
     $139 = _malloc(24) | 0;
     _map_copy($139, 23848 + ($$01822$i$us * 96 | 0) + 20 | 0);
     $141 = _malloc(24) | 0;
     _map_copy($141, 23848 + ($$01822$i$us * 96 | 0) + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = $139;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = $141;
    }
    L42 : do if (!$114) label = 64; else {
     $224 = (HEAP32[$$2191 >> 2] | 0) + $$0195220$looptemp | 0;
     $226 = (HEAP32[$103 >> 2] | 0) + $$0194218$looptemp | 0;
     $227 = HEAP32[$106 >> 2] | 0;
     $$01822$i$us$1 = 0;
     while (1) {
      if (HEAP32[23848 + ($$01822$i$us$1 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[23848 + ($$01822$i$us$1 * 96 | 0) >> 2] | 0) == ($224 | 0)) if ((HEAP32[23848 + ($$01822$i$us$1 * 96 | 0) + 4 >> 2] | 0) == ($226 | 0)) if ((HEAP32[23848 + ($$01822$i$us$1 * 96 | 0) + 8 >> 2] | 0) == ($227 | 0)) break;
      $246 = $$01822$i$us$1 + 1 | 0;
      if ($246 >>> 0 < 1024) $$01822$i$us$1 = $246; else {
       label = 64;
       break L42;
      }
     }
     $240 = _malloc(24) | 0;
     _map_copy($240, 23848 + ($$01822$i$us$1 * 96 | 0) + 20 | 0);
     $242 = _malloc(24) | 0;
     _map_copy($242, 23848 + ($$01822$i$us$1 * 96 | 0) + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = $240;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = $242;
    } while (0);
    if ((label | 0) == 64) {
     label = 0;
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = 0;
    }
    $251 = (HEAP32[$$2191 >> 2] | 0) + $$0195220$looptemp | 0;
    $253 = (HEAP32[$103 >> 2] | 0) + $$0194218$looptemp | 0;
    $255 = (HEAP32[$106 >> 2] | 0) + 1 | 0;
    $$01822$i$us$2 = 0;
    while (1) {
     if (HEAP32[23848 + ($$01822$i$us$2 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[23848 + ($$01822$i$us$2 * 96 | 0) >> 2] | 0) == ($251 | 0)) if ((HEAP32[23848 + ($$01822$i$us$2 * 96 | 0) + 4 >> 2] | 0) == ($253 | 0)) if ((HEAP32[23848 + ($$01822$i$us$2 * 96 | 0) + 8 >> 2] | 0) == ($255 | 0)) {
      label = 70;
      break;
     }
     $274 = $$01822$i$us$2 + 1 | 0;
     if ($274 >>> 0 < 1024) $$01822$i$us$2 = $274; else {
      label = 72;
      break;
     }
    }
    if ((label | 0) == 70) {
     label = 0;
     $268 = _malloc(24) | 0;
     _map_copy($268, 23848 + ($$01822$i$us$2 * 96 | 0) + 20 | 0);
     $270 = _malloc(24) | 0;
     _map_copy($270, 23848 + ($$01822$i$us$2 * 96 | 0) + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = $268;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = $270;
     break;
    } else if ((label | 0) == 72) {
     label = 0;
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = 0;
     break;
    }
   } else {
    $$01822$i = 0;
    while (1) {
     if (HEAP32[23848 + ($$01822$i * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[23848 + ($$01822$i * 96 | 0) >> 2] | 0) == ($117 | 0)) if ((HEAP32[23848 + ($$01822$i * 96 | 0) + 4 >> 2] | 0) == ($119 | 0)) if ((HEAP32[23848 + ($$01822$i * 96 | 0) + 8 >> 2] | 0) == ($121 | 0)) {
      label = 37;
      break;
     }
     $157 = $$01822$i + 1 | 0;
     if ($157 >>> 0 < 1024) $$01822$i = $157; else {
      label = 38;
      break;
     }
    }
    if ((label | 0) == 37) {
     label = 0;
     $159 = _malloc(24) | 0;
     _map_copy($159, 23848 + ($$01822$i * 96 | 0) + 20 | 0);
     $161 = _malloc(24) | 0;
     _map_copy($161, 23848 + ($$01822$i * 96 | 0) + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = $159;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = $161;
    } else if ((label | 0) == 38) {
     label = 0;
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) >> 2] = 0;
    }
    L77 : do if (!$114) {
     $$0192209$1 = $$2191;
     label = 48;
    } else {
     $169 = (HEAP32[$$2191 >> 2] | 0) + $$0195220$looptemp | 0;
     $171 = (HEAP32[$103 >> 2] | 0) + $$0194218$looptemp | 0;
     $172 = HEAP32[$106 >> 2] | 0;
     $$01822$i$1 = 0;
     do {
      $173 = 23848 + ($$01822$i$1 * 96 | 0) | 0;
      if (HEAP32[23848 + ($$01822$i$1 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[$173 >> 2] | 0) == ($169 | 0)) if ((HEAP32[23848 + ($$01822$i$1 * 96 | 0) + 4 >> 2] | 0) == ($171 | 0)) if ((HEAP32[23848 + ($$01822$i$1 * 96 | 0) + 8 >> 2] | 0) == ($172 | 0)) {
       $$0192209$1 = $173;
       label = 48;
       break L77;
      }
      $$01822$i$1 = $$01822$i$1 + 1 | 0;
     } while ($$01822$i$1 >>> 0 < 1024);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = 0;
    } while (0);
    if ((label | 0) == 48) {
     label = 0;
     $189 = _malloc(24) | 0;
     _map_copy($189, $$0192209$1 + 20 | 0);
     $191 = _malloc(24) | 0;
     _map_copy($191, $$0192209$1 + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = $189;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 4 >> 2] = $191;
    }
    $196 = (HEAP32[$$2191 >> 2] | 0) + $$0195220$looptemp | 0;
    $198 = (HEAP32[$103 >> 2] | 0) + $$0194218$looptemp | 0;
    $200 = (HEAP32[$106 >> 2] | 0) + 1 | 0;
    $$01822$i$2 = 0;
    while (1) {
     if (HEAP32[23848 + ($$01822$i$2 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[23848 + ($$01822$i$2 * 96 | 0) >> 2] | 0) == ($196 | 0)) if ((HEAP32[23848 + ($$01822$i$2 * 96 | 0) + 4 >> 2] | 0) == ($198 | 0)) if ((HEAP32[23848 + ($$01822$i$2 * 96 | 0) + 8 >> 2] | 0) == ($200 | 0)) {
      label = 56;
      break;
     }
     $213 = $$01822$i$2 + 1 | 0;
     if ($213 >>> 0 < 1024) $$01822$i$2 = $213; else {
      label = 55;
      break;
     }
    }
    if ((label | 0) == 55) {
     label = 0;
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = 0;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = 0;
     break;
    } else if ((label | 0) == 56) {
     label = 0;
     $217 = _malloc(24) | 0;
     _map_copy($217, 23848 + ($$01822$i$2 * 96 | 0) + 20 | 0);
     $219 = _malloc(24) | 0;
     _map_copy($219, 23848 + ($$01822$i$2 * 96 | 0) + 44 | 0);
     HEAP32[$1 + 104 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = $217;
     HEAP32[$1 + 212 + ($$0195220 * 36 | 0) + ($$0194218 * 12 | 0) + 8 >> 2] = $219;
     break;
    }
   } while (0);
  } while (($$0194218 | 0) != 2);
 } while (($$0195220 | 0) != 2);
 HEAP32[$$2191 + 16 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1;
 _cnd_signal($1 + 40 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[33131] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[33132] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[33129] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 132548 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[33127] = HEAP32[33127] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 132812 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[33128] = HEAP32[33128] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[33131] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[33131] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[33131] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[33131] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[33133] | 0) == ($2 | 0)) {
   $117 = (HEAP32[33130] | 0) + $$1416 | 0;
   HEAP32[33130] = $117;
   HEAP32[33133] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[33132] | 0)) return;
   HEAP32[33132] = 0;
   HEAP32[33129] = 0;
   return;
  }
  if ((HEAP32[33132] | 0) == ($2 | 0)) {
   $125 = (HEAP32[33129] | 0) + $$1416 | 0;
   HEAP32[33129] = $125;
   HEAP32[33132] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 132548 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[33127] = HEAP32[33127] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 132812 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[33128] = HEAP32[33128] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[33131] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[33131] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[33131] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[33132] | 0)) {
   HEAP32[33129] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 132548 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[33127] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[33127] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[33131] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 132812 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[33128] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[33128] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[33131] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[33131] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function _lodepng_convert($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$024$i = 0, $$084 = 0, $$08697 = 0, $$1 = 0, $$187108 = 0, $$28898 = 0, $$3 = 0, $$389101 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $109 = 0, $11 = 0, $116 = 0, $12 = 0, $13 = 0, $137 = 0, $151 = 0, $17 = 0, $184 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $191 = 0, $193 = 0, $202 = 0, $203 = 0, $209 = 0, $217 = 0, $22 = 0, $224 = 0, $230 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $256 = 0, $264 = 0, $270 = 0, $274 = 0, $284 = 0, $292 = 0, $43 = 0, $47 = 0, $50 = 0, $52 = 0, $63 = 0, $7 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $94 = 0, $95 = 0, $98 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $7 = sp;
 $8 = sp + 74 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 70 | 0;
 $11 = sp + 68 | 0;
 $12 = Math_imul($5, $4) | 0;
 $13 = HEAP32[$2 >> 2] | 0;
 L1 : do if (($13 | 0) == (HEAP32[$3 >> 2] | 0)) {
  $17 = HEAP32[$2 + 4 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$3 + 4 >> 2] | 0)) {
   $22 = HEAP32[$2 + 16 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) {
    if ($22 | 0) {
     if ((HEAP32[$2 + 20 >> 2] | 0) != (HEAP32[$3 + 20 >> 2] | 0)) break;
     if ((HEAP32[$2 + 24 >> 2] | 0) != (HEAP32[$3 + 24 >> 2] | 0)) break;
     if ((HEAP32[$2 + 28 >> 2] | 0) != (HEAP32[$3 + 28 >> 2] | 0)) break;
    }
    $43 = HEAP32[$2 + 12 >> 2] | 0;
    if (($43 | 0) == (HEAP32[$3 + 12 >> 2] | 0)) {
     $47 = $43 << 2;
     if ($47 | 0) {
      $50 = HEAP32[$2 + 8 >> 2] | 0;
      $52 = HEAP32[$3 + 8 >> 2] | 0;
      $$024$i = 0;
      do {
       if ((HEAP8[$50 + $$024$i >> 0] | 0) != (HEAP8[$52 + $$024$i >> 0] | 0)) break L1;
       $$024$i = $$024$i + 1 | 0;
      } while ($$024$i >>> 0 < $47 >>> 0);
     }
     switch ($13 | 0) {
     case 3:
     case 0:
      {
       $$0$i$i$i$i = 1;
       break;
      }
     case 2:
      {
       $$0$i$i$i$i = 3;
       break;
      }
     case 4:
      {
       $$0$i$i$i$i = 2;
       break;
      }
     case 6:
      {
       $$0$i$i$i$i = 4;
       break;
      }
     default:
      $$0$i$i$i$i = 0;
     }
     $63 = ((Math_imul(Math_imul($17, $12) | 0, $$0$i$i$i$i) | 0) + 7 | 0) >>> 3;
     if (!$63) {
      $$0 = 0;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $$08697 = 0;
     do {
      HEAP8[$0 + $$08697 >> 0] = HEAP8[$1 + $$08697 >> 0] | 0;
      $$08697 = $$08697 + 1 | 0;
     } while (($$08697 | 0) != ($63 | 0));
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  }
 } while (0);
 if (($13 | 0) == 3) {
  $72 = 1 << HEAP32[$2 + 4 >> 2];
  $74 = HEAP32[$2 + 12 >> 2] | 0;
  $spec$select = $74 >>> 0 < $72 >>> 0 ? $74 : $72;
  dest = $7;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$7 + 64 >> 2] = -1;
  if ($spec$select | 0) {
   $78 = $2 + 8 | 0;
   $$187108 = 0;
   do {
    $81 = (HEAP32[$78 >> 2] | 0) + ($$187108 << 2) | 0;
    _color_tree_add($7, HEAP8[$81 >> 0] | 0, HEAP8[$81 + 1 >> 0] | 0, HEAP8[$81 + 2 >> 0] | 0, HEAP8[$81 + 3 >> 0] | 0, $$187108);
    $$187108 = $$187108 + 1 | 0;
   } while ($$187108 >>> 0 < $spec$select >>> 0);
  }
 }
 $94 = $2 + 4 | 0;
 $95 = HEAP32[$94 >> 2] | 0;
 L36 : do if (($95 | 0) == 16 ? (HEAP32[$3 + 4 >> 2] | 0) == 16 : 0) if (!$12) $$4 = 0; else {
  $$28898 = 0;
  while (1) {
   HEAP16[$8 >> 1] = 0;
   HEAP16[$9 >> 1] = 0;
   HEAP16[$10 >> 1] = 0;
   HEAP16[$11 >> 1] = 0;
   $98 = _getPixelColorRGBA16($8, $9, $10, $11, $1, $$28898, $3) | 0;
   L41 : do if (!$98) {
    $100 = HEAP16[$8 >> 1] | 0;
    $101 = HEAP16[$9 >> 1] | 0;
    $102 = HEAP16[$10 >> 1] | 0;
    $103 = HEAP16[$11 >> 1] | 0;
    if ((HEAP32[$94 >> 2] | 0) == 16) switch (HEAP32[$2 >> 2] | 0) {
    case 0:
     {
      $109 = $$28898 << 1;
      HEAP8[$0 + $109 >> 0] = ($100 & 65535) >>> 8;
      HEAP8[$0 + ($109 | 1) >> 0] = $100;
      $$084 = 1;
      $$1 = 0;
      break L41;
      break;
     }
    case 2:
     {
      $116 = $$28898 * 6 | 0;
      HEAP8[$0 + $116 >> 0] = ($100 & 65535) >>> 8;
      HEAP8[$0 + ($116 | 1) >> 0] = $100;
      HEAP8[$0 + ($116 + 2) >> 0] = ($101 & 65535) >>> 8;
      HEAP8[$0 + ($116 + 3) >> 0] = $101;
      HEAP8[$0 + ($116 + 4) >> 0] = ($102 & 65535) >>> 8;
      HEAP8[$0 + ($116 + 5) >> 0] = $102;
      $$084 = 1;
      $$1 = 0;
      break L41;
      break;
     }
    case 4:
     {
      $137 = $$28898 << 2;
      HEAP8[$0 + $137 >> 0] = ($100 & 65535) >>> 8;
      HEAP8[$0 + ($137 | 1) >> 0] = $100;
      HEAP8[$0 + ($137 | 2) >> 0] = ($103 & 65535) >>> 8;
      HEAP8[$0 + ($137 | 3) >> 0] = $103;
      $$084 = 1;
      $$1 = 0;
      break L41;
      break;
     }
    case 6:
     {
      $151 = $$28898 << 3;
      HEAP8[$0 + $151 >> 0] = ($100 & 65535) >>> 8;
      HEAP8[$0 + ($151 | 1) >> 0] = $100;
      HEAP8[$0 + ($151 | 2) >> 0] = ($101 & 65535) >>> 8;
      HEAP8[$0 + ($151 | 3) >> 0] = $101;
      HEAP8[$0 + ($151 | 4) >> 0] = ($102 & 65535) >>> 8;
      HEAP8[$0 + ($151 | 5) >> 0] = $102;
      HEAP8[$0 + ($151 | 6) >> 0] = ($103 & 65535) >>> 8;
      HEAP8[$0 + ($151 | 7) >> 0] = $103;
      $$084 = 1;
      $$1 = 0;
      break L41;
      break;
     }
    default:
     {
      $$084 = 1;
      $$1 = 0;
      break L41;
     }
    } else {
     $$084 = 0;
     $$1 = 85;
    }
   } else {
    $$084 = 0;
    $$1 = $98;
   } while (0);
   $$28898 = $$28898 + 1 | 0;
   if (!($$084 & $$28898 >>> 0 < $12 >>> 0)) {
    $$4 = $$1;
    break;
   }
  }
 } else {
  L51 : do if (($95 | 0) == 8) switch (HEAP32[$2 >> 2] | 0) {
  case 6:
   {
    $$4 = _getPixelColorsRGBA8($0, $12, 1, $1, $3, $6) | 0;
    break L36;
    break;
   }
  case 2:
   {
    $$4 = _getPixelColorsRGBA8($0, $12, 0, $1, $3, $6) | 0;
    break L36;
    break;
   }
  default:
   break L51;
  } while (0);
  HEAP8[$8 >> 0] = 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$10 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  L57 : do if (!$12) $$3 = 0; else {
   $$389101 = 0;
   while (1) {
    $184 = _getPixelColorRGBA8($8, $9, $10, $11, $1, $$389101, $3, $6) | 0;
    if ($184 | 0) {
     $$3 = $184;
     break L57;
    }
    $186 = HEAP8[$8 >> 0] | 0;
    $187 = HEAP8[$9 >> 0] | 0;
    $188 = HEAP8[$10 >> 0] | 0;
    $189 = HEAP8[$11 >> 0] | 0;
    L62 : do switch (HEAP32[$2 >> 2] | 0) {
    case 0:
     {
      $191 = HEAP32[$94 >> 2] | 0;
      switch ($191 | 0) {
      case 8:
       {
        HEAP8[$0 + $$389101 >> 0] = $186;
        break L62;
        break;
       }
      case 16:
       {
        $193 = $$389101 << 1;
        HEAP8[$0 + ($193 | 1) >> 0] = $186;
        HEAP8[$0 + $193 >> 0] = $186;
        break L62;
        break;
       }
      default:
       {
        $202 = 8 / ($191 >>> 0) | 0;
        $203 = ($$389101 >>> 0) % ($202 >>> 0) | 0;
        $209 = ((1 << $191) + 255 & 255 & ($186 & 255) >>> (8 - $191 | 0)) << (Math_imul($202 + -1 - $203 | 0, $191) | 0);
        if (!$203) {
         HEAP8[$0 + ((Math_imul($191, $$389101) | 0) >>> 3) >> 0] = $209;
         break L62;
        } else {
         $217 = $0 + ((Math_imul($191, $$389101) | 0) >>> 3) | 0;
         HEAP8[$217 >> 0] = $209 | HEAPU8[$217 >> 0];
         break L62;
        }
       }
      }
      break;
     }
    case 2:
     {
      if ((HEAP32[$94 >> 2] | 0) == 8) {
       $224 = $$389101 * 3 | 0;
       HEAP8[$0 + $224 >> 0] = $186;
       HEAP8[$0 + ($224 + 1) >> 0] = $187;
       HEAP8[$0 + ($224 + 2) >> 0] = $188;
       break L62;
      } else {
       $230 = $$389101 * 6 | 0;
       HEAP8[$0 + ($230 | 1) >> 0] = $186;
       HEAP8[$0 + $230 >> 0] = $186;
       HEAP8[$0 + ($230 + 3) >> 0] = $187;
       HEAP8[$0 + ($230 + 2) >> 0] = $187;
       HEAP8[$0 + ($230 + 5) >> 0] = $188;
       HEAP8[$0 + ($230 + 4) >> 0] = $188;
       break L62;
      }
      break;
     }
    case 3:
     {
      $242 = _color_tree_get($7, $186, $187, $188, $189) | 0;
      if (($242 | 0) < 0) {
       $$3 = 82;
       break L57;
      }
      $244 = HEAP32[$94 >> 2] | 0;
      if (($244 | 0) == 8) {
       HEAP8[$0 + $$389101 >> 0] = $242;
       break L62;
      }
      $248 = 8 / ($244 >>> 0) | 0;
      $249 = ($$389101 >>> 0) % ($248 >>> 0) | 0;
      $256 = ((1 << $244) + -1 & $242) << (Math_imul($248 + -1 - $249 | 0, $244) | 0);
      if (!$249) {
       HEAP8[$0 + ((Math_imul($244, $$389101) | 0) >>> 3) >> 0] = $256;
       break L62;
      } else {
       $264 = $0 + ((Math_imul($244, $$389101) | 0) >>> 3) | 0;
       HEAP8[$264 >> 0] = $256 | HEAPU8[$264 >> 0];
       break L62;
      }
      break;
     }
    case 4:
     {
      switch (HEAP32[$94 >> 2] | 0) {
      case 8:
       {
        $270 = $$389101 << 1;
        HEAP8[$0 + $270 >> 0] = $186;
        HEAP8[$0 + ($270 | 1) >> 0] = $189;
        break L62;
        break;
       }
      case 16:
       {
        $274 = $$389101 << 2;
        HEAP8[$0 + ($274 | 1) >> 0] = $186;
        HEAP8[$0 + $274 >> 0] = $186;
        HEAP8[$0 + ($274 | 3) >> 0] = $189;
        HEAP8[$0 + ($274 | 2) >> 0] = $189;
        break L62;
        break;
       }
      default:
       break L62;
      }
      break;
     }
    case 6:
     {
      if ((HEAP32[$94 >> 2] | 0) == 8) {
       $284 = $$389101 << 2;
       HEAP8[$0 + $284 >> 0] = $186;
       HEAP8[$0 + ($284 | 1) >> 0] = $187;
       HEAP8[$0 + ($284 | 2) >> 0] = $188;
       HEAP8[$0 + ($284 | 3) >> 0] = $189;
       break L62;
      } else {
       $292 = $$389101 << 3;
       HEAP8[$0 + ($292 | 1) >> 0] = $186;
       HEAP8[$0 + $292 >> 0] = $186;
       HEAP8[$0 + ($292 | 3) >> 0] = $187;
       HEAP8[$0 + ($292 | 2) >> 0] = $187;
       HEAP8[$0 + ($292 | 5) >> 0] = $188;
       HEAP8[$0 + ($292 | 4) >> 0] = $188;
       HEAP8[$0 + ($292 | 7) >> 0] = $189;
       HEAP8[$0 + ($292 | 6) >> 0] = $189;
       break L62;
      }
      break;
     }
    default:
     {}
    } while (0);
    $$389101 = $$389101 + 1 | 0;
    if ($$389101 >>> 0 >= $12 >>> 0) {
     $$3 = 0;
     break L57;
    }
   }
  } while (0);
  $$4 = $$3;
 } while (0);
 if ((HEAP32[$2 >> 2] | 0) != 3) {
  $$0 = $$4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _color_tree_cleanup($7);
 $$0 = $$4;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _Adam7_getpassvalues($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$pre = 0, $$pre$phi101Z2D = 0, $$pre$phi103Z2D = 0, $$pre$phi107Z2D = 0, $$pre$phi109Z2D = 0, $$pre$phi113Z2D = 0, $$pre$phi77Z2D = 0, $$pre$phi79Z2D = 0, $$pre$phi83Z2D = 0, $$pre$phi85Z2D = 0, $$pre$phi89Z2D = 0, $$pre$phi91Z2D = 0, $$pre$phi95Z2D = 0, $$pre$phi97Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$pre66 = 0, $$pre68 = 0, $$pre70 = 0, $$pre72 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $118 = 0, $119 = 0, $123 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $137 = 0, $141 = 0, $142 = 0, $146 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $179 = 0, $18 = 0, $186 = 0, $193 = 0, $199 = 0, $203 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $33 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $54 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $72 = 0, $73 = 0, $77 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $95 = 0, $96 = 0, $spec$store$select = 0, $spec$store$select$1 = 0, $spec$store$select$2 = 0, $spec$store$select$3 = 0, $spec$store$select$4 = 0, $spec$store$select$5 = 0, $spec$store$select$6 = 0;
 HEAP32[$0 >> 2] = ($5 + 7 | 0) >>> 3;
 $11 = ($6 + 7 | 0) >>> 3;
 HEAP32[$1 >> 2] = $11;
 $spec$store$select = (HEAP32[$0 >> 2] | 0) == 0 ? 0 : $11;
 HEAP32[$1 >> 2] = $spec$store$select;
 if (!$spec$store$select) HEAP32[$0 >> 2] = 0;
 $17 = $0 + 4 | 0;
 HEAP32[$17 >> 2] = ($5 + 3 | 0) >>> 3;
 $18 = $1 + 4 | 0;
 HEAP32[$18 >> 2] = $11;
 $spec$store$select$1 = (HEAP32[$17 >> 2] | 0) == 0 ? 0 : $11;
 HEAP32[$18 >> 2] = $spec$store$select$1;
 if (!$spec$store$select$1) HEAP32[$17 >> 2] = 0;
 $63 = $0 + 8 | 0;
 HEAP32[$63 >> 2] = ($5 + 3 | 0) >>> 2;
 $179 = ($6 + 3 | 0) >>> 3;
 $65 = $1 + 8 | 0;
 HEAP32[$65 >> 2] = $179;
 $spec$store$select$2 = (HEAP32[$63 >> 2] | 0) == 0 ? 0 : $179;
 HEAP32[$65 >> 2] = $spec$store$select$2;
 if (!$spec$store$select$2) HEAP32[$63 >> 2] = 0;
 $86 = $0 + 12 | 0;
 HEAP32[$86 >> 2] = ($5 + 1 | 0) >>> 2;
 $186 = ($6 + 3 | 0) >>> 2;
 $88 = $1 + 12 | 0;
 HEAP32[$88 >> 2] = $186;
 $spec$store$select$3 = (HEAP32[$86 >> 2] | 0) == 0 ? 0 : $186;
 HEAP32[$88 >> 2] = $spec$store$select$3;
 if (!$spec$store$select$3) HEAP32[$86 >> 2] = 0;
 $109 = $0 + 16 | 0;
 HEAP32[$109 >> 2] = ($5 + 1 | 0) >>> 1;
 $193 = ($6 + 1 | 0) >>> 2;
 $111 = $1 + 16 | 0;
 HEAP32[$111 >> 2] = $193;
 $spec$store$select$4 = (HEAP32[$109 >> 2] | 0) == 0 ? 0 : $193;
 HEAP32[$111 >> 2] = $spec$store$select$4;
 if (!$spec$store$select$4) HEAP32[$109 >> 2] = 0;
 $132 = $0 + 20 | 0;
 HEAP32[$132 >> 2] = $5 >>> 1;
 $199 = ($6 + 1 | 0) >>> 1;
 $134 = $1 + 20 | 0;
 HEAP32[$134 >> 2] = $199;
 $spec$store$select$5 = (HEAP32[$132 >> 2] | 0) == 0 ? 0 : $199;
 HEAP32[$134 >> 2] = $spec$store$select$5;
 if (!$spec$store$select$5) HEAP32[$132 >> 2] = 0;
 $155 = $0 + 24 | 0;
 HEAP32[$155 >> 2] = $5;
 $203 = $6 >>> 1;
 $157 = $1 + 24 | 0;
 HEAP32[$157 >> 2] = $203;
 $spec$store$select$6 = (HEAP32[$155 >> 2] | 0) == 0 ? 0 : $203;
 HEAP32[$157 >> 2] = $spec$store$select$6;
 if (!$spec$store$select$6) HEAP32[$155 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 $23 = HEAP32[$0 >> 2] | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 if (!$23) {
  $$pre$phi77Z2D = 0;
  $$pre$phiZ2D = 0;
  $29 = 0;
 } else {
  $22 = Math_imul($23, $7) | 0;
  $25 = ($22 + 7 | 0) >>> 3;
  $$pre$phi77Z2D = $25;
  $$pre$phiZ2D = $22;
  $29 = Math_imul($$pre, $25 + 1 | 0) | 0;
 }
 $28 = $2 + 4 | 0;
 HEAP32[$28 >> 2] = $29;
 $33 = $3 + 4 | 0;
 HEAP32[$33 >> 2] = (Math_imul($$pre, $$pre$phi77Z2D) | 0) + (HEAP32[$3 >> 2] | 0);
 $39 = $4 + 4 | 0;
 HEAP32[$39 >> 2] = (((Math_imul($$pre$phiZ2D, $$pre) | 0) + 7 | 0) >>> 3) + (HEAP32[$4 >> 2] | 0);
 $41 = HEAP32[$17 >> 2] | 0;
 $$pre62 = HEAP32[$18 >> 2] | 0;
 if (!$41) {
  $$pre$phi79Z2D = 0;
  $$pre$phi83Z2D = 0;
  $49 = 0;
 } else {
  $43 = Math_imul($41, $7) | 0;
  $45 = ($43 + 7 | 0) >>> 3;
  $$pre$phi79Z2D = $43;
  $$pre$phi83Z2D = $45;
  $49 = Math_imul($$pre62, $45 + 1 | 0) | 0;
 }
 $50 = $2 + 8 | 0;
 HEAP32[$50 >> 2] = $49 + (HEAP32[$28 >> 2] | 0);
 $54 = $3 + 8 | 0;
 HEAP32[$54 >> 2] = (Math_imul($$pre62, $$pre$phi83Z2D) | 0) + (HEAP32[$33 >> 2] | 0);
 $60 = $4 + 8 | 0;
 HEAP32[$60 >> 2] = (((Math_imul($$pre$phi79Z2D, $$pre62) | 0) + 7 | 0) >>> 3) + (HEAP32[$39 >> 2] | 0);
 $62 = HEAP32[$63 >> 2] | 0;
 $$pre64 = HEAP32[$65 >> 2] | 0;
 if (!$62) {
  $$pre$phi85Z2D = 0;
  $$pre$phi89Z2D = 0;
  $72 = 0;
 } else {
  $66 = Math_imul($62, $7) | 0;
  $68 = ($66 + 7 | 0) >>> 3;
  $$pre$phi85Z2D = $66;
  $$pre$phi89Z2D = $68;
  $72 = Math_imul($$pre64, $68 + 1 | 0) | 0;
 }
 $73 = $2 + 12 | 0;
 HEAP32[$73 >> 2] = $72 + (HEAP32[$50 >> 2] | 0);
 $77 = $3 + 12 | 0;
 HEAP32[$77 >> 2] = (Math_imul($$pre64, $$pre$phi89Z2D) | 0) + (HEAP32[$54 >> 2] | 0);
 $83 = $4 + 12 | 0;
 HEAP32[$83 >> 2] = (((Math_imul($$pre$phi85Z2D, $$pre64) | 0) + 7 | 0) >>> 3) + (HEAP32[$60 >> 2] | 0);
 $85 = HEAP32[$86 >> 2] | 0;
 $$pre66 = HEAP32[$88 >> 2] | 0;
 if (!$85) {
  $$pre$phi91Z2D = 0;
  $$pre$phi95Z2D = 0;
  $95 = 0;
 } else {
  $89 = Math_imul($85, $7) | 0;
  $91 = ($89 + 7 | 0) >>> 3;
  $$pre$phi91Z2D = $89;
  $$pre$phi95Z2D = $91;
  $95 = Math_imul($$pre66, $91 + 1 | 0) | 0;
 }
 $96 = $2 + 16 | 0;
 HEAP32[$96 >> 2] = $95 + (HEAP32[$73 >> 2] | 0);
 $100 = $3 + 16 | 0;
 HEAP32[$100 >> 2] = (Math_imul($$pre66, $$pre$phi95Z2D) | 0) + (HEAP32[$77 >> 2] | 0);
 $106 = $4 + 16 | 0;
 HEAP32[$106 >> 2] = (((Math_imul($$pre$phi91Z2D, $$pre66) | 0) + 7 | 0) >>> 3) + (HEAP32[$83 >> 2] | 0);
 $108 = HEAP32[$109 >> 2] | 0;
 $$pre68 = HEAP32[$111 >> 2] | 0;
 if (!$108) {
  $$pre$phi101Z2D = 0;
  $$pre$phi97Z2D = 0;
  $118 = 0;
 } else {
  $112 = Math_imul($108, $7) | 0;
  $114 = ($112 + 7 | 0) >>> 3;
  $$pre$phi101Z2D = $114;
  $$pre$phi97Z2D = $112;
  $118 = Math_imul($$pre68, $114 + 1 | 0) | 0;
 }
 $119 = $2 + 20 | 0;
 HEAP32[$119 >> 2] = $118 + (HEAP32[$96 >> 2] | 0);
 $123 = $3 + 20 | 0;
 HEAP32[$123 >> 2] = (Math_imul($$pre68, $$pre$phi101Z2D) | 0) + (HEAP32[$100 >> 2] | 0);
 $129 = $4 + 20 | 0;
 HEAP32[$129 >> 2] = (((Math_imul($$pre$phi97Z2D, $$pre68) | 0) + 7 | 0) >>> 3) + (HEAP32[$106 >> 2] | 0);
 $131 = HEAP32[$132 >> 2] | 0;
 $$pre70 = HEAP32[$134 >> 2] | 0;
 if (!$131) {
  $$pre$phi103Z2D = 0;
  $$pre$phi107Z2D = 0;
  $141 = 0;
 } else {
  $135 = Math_imul($131, $7) | 0;
  $137 = ($135 + 7 | 0) >>> 3;
  $$pre$phi103Z2D = $135;
  $$pre$phi107Z2D = $137;
  $141 = Math_imul($$pre70, $137 + 1 | 0) | 0;
 }
 $142 = $2 + 24 | 0;
 HEAP32[$142 >> 2] = $141 + (HEAP32[$119 >> 2] | 0);
 $146 = $3 + 24 | 0;
 HEAP32[$146 >> 2] = (Math_imul($$pre70, $$pre$phi107Z2D) | 0) + (HEAP32[$123 >> 2] | 0);
 $152 = $4 + 24 | 0;
 HEAP32[$152 >> 2] = (((Math_imul($$pre$phi103Z2D, $$pre70) | 0) + 7 | 0) >>> 3) + (HEAP32[$129 >> 2] | 0);
 $153 = HEAP32[$142 >> 2] | 0;
 $154 = HEAP32[$155 >> 2] | 0;
 $$pre72 = HEAP32[$157 >> 2] | 0;
 if (!$154) {
  $$pre$phi109Z2D = 0;
  $$pre$phi113Z2D = 0;
  $164 = 0;
  $163 = $164 + $153 | 0;
  $165 = $2 + 28 | 0;
  HEAP32[$165 >> 2] = $163;
  $166 = HEAP32[$146 >> 2] | 0;
  $167 = Math_imul($$pre72, $$pre$phi113Z2D) | 0;
  $168 = $167 + $166 | 0;
  $169 = $3 + 28 | 0;
  HEAP32[$169 >> 2] = $168;
  $170 = HEAP32[$152 >> 2] | 0;
  $171 = Math_imul($$pre$phi109Z2D, $$pre72) | 0;
  $172 = $171 + 7 | 0;
  $173 = $172 >>> 3;
  $174 = $173 + $170 | 0;
  $175 = $4 + 28 | 0;
  HEAP32[$175 >> 2] = $174;
  return;
 }
 $158 = Math_imul($154, $7) | 0;
 $160 = ($158 + 7 | 0) >>> 3;
 $$pre$phi109Z2D = $158;
 $$pre$phi113Z2D = $160;
 $164 = Math_imul($$pre72, $160 + 1 | 0) | 0;
 $163 = $164 + $153 | 0;
 $165 = $2 + 28 | 0;
 HEAP32[$165 >> 2] = $163;
 $166 = HEAP32[$146 >> 2] | 0;
 $167 = Math_imul($$pre72, $$pre$phi113Z2D) | 0;
 $168 = $167 + $166 | 0;
 $169 = $3 + 28 | 0;
 HEAP32[$169 >> 2] = $168;
 $170 = HEAP32[$152 >> 2] | 0;
 $171 = Math_imul($$pre$phi109Z2D, $$pre72) | 0;
 $172 = $171 + 7 | 0;
 $173 = $172 >>> 3;
 $174 = $173 + $170 | 0;
 $175 = $4 + 28 | 0;
 HEAP32[$175 >> 2] = $174;
 return;
}

function _gen_trees($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0120137 = 0, $$0120137$us = 0, $$0120137$us139 = 0, $$0121136 = 0, $$0121136$us = 0, $$0122145 = 0, $$0123146 = 0, $$0126149 = 0, $$0151 = 0, $$2 = 0, $$2$us = 0, $$not152 = 0, $103 = 0.0, $109 = 0, $120 = 0.0, $126 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $152 = 0, $157 = 0, $16 = 0, $162 = 0, $167 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $67 = 0, $68 = 0.0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $80 = 0, $90 = 0.0, $93 = 0, label = 0;
 if (!(+_simplex2(+($4 | 0), +($5 | 0), 1, 1.0, 3.0) > .94)) return;
 $13 = $5 - $3 | 0;
 $14 = $4 - $2 | 0;
 $16 = ($13 << 6) + -320 | 0;
 $18 = ($13 << 6) + -256 | 0;
 $20 = ($13 << 6) + -192 | 0;
 $22 = ($13 << 6) + -128 | 0;
 $24 = ($13 << 6) + -64 | 0;
 $25 = $13 << 6;
 $27 = ($13 << 6) + 64 | 0;
 $29 = ($13 << 6) + 128 | 0;
 $31 = ($13 << 6) + 192 | 0;
 $33 = ($13 << 6) + 256 | 0;
 $$0151 = -5;
 while (1) {
  $34 = $14 + $$0151 | 0;
  $35 = $34 + $16 | 0;
  if ($35 >>> 0 <= 4095) if (HEAP32[$1 + ($35 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $40 = $34 + $18 | 0;
  if ($40 >>> 0 <= 4095) if (HEAP32[$1 + ($40 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $132 = $34 + $20 | 0;
  if ($132 >>> 0 <= 4095) if (HEAP32[$1 + ($132 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $137 = $34 + $22 | 0;
  if ($137 >>> 0 <= 4095) if (HEAP32[$1 + ($137 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $142 = $34 + $24 | 0;
  if ($142 >>> 0 <= 4095) if (HEAP32[$1 + ($142 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $147 = $34 + $25 | 0;
  if ($147 >>> 0 <= 4095) if (HEAP32[$1 + ($147 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $152 = $34 + $27 | 0;
  if ($152 >>> 0 <= 4095) if (HEAP32[$1 + ($152 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $157 = $34 + $29 | 0;
  if ($157 >>> 0 <= 4095) if (HEAP32[$1 + ($157 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $162 = $34 + $31 | 0;
  if ($162 >>> 0 <= 4095) if (HEAP32[$1 + ($162 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  $167 = $34 + $33 | 0;
  if ($167 >>> 0 <= 4095) if (HEAP32[$1 + ($167 << 2) >> 2] | 0) {
   label = 29;
   break;
  }
  if (($$0151 | 0) < 4) $$0151 = $$0151 + 1 | 0; else {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  $42 = $6 + 1 | 0;
  $43 = $6 + 2 | 0;
  $44 = $6 + 3 | 0;
  $45 = $6 + 4 | 0;
  $46 = $6 + 5 | 0;
  $47 = $6 + 6 | 0;
  $48 = $6 + 7 | 0;
  $49 = $6 + 8 | 0;
  $50 = $6 + 9 | 0;
  $51 = $6 + 10 | 0;
  $52 = $6 + 11 | 0;
  $53 = $6 + 12 | 0;
  $54 = $6 + 13 | 0;
  $55 = $6 + 14 | 0;
  $56 = $6 + 15 | 0;
  $57 = $5 + 1 | 0;
  $$0126149 = 0;
  do {
   $58 = $$0126149 + $4 | 0;
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $42, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $43, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $44, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $45, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $46, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $47, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $48, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $49, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $50, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $51, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $52, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $53, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $54, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $55, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $56, $5, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $42, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $43, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $44, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $45, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $46, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $47, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $48, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $49, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $50, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $51, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $52, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $53, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $54, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $55, $57, 5, $7);
   FUNCTION_TABLE_viiiii[$0 & 1]($58, $56, $57, 5, $7);
   $$0126149 = $$0126149 + 1 | 0;
  } while (($$0126149 | 0) != 2);
  $$0123146 = -8;
  do {
   $60 = ($$0123146 | 0) > -1;
   $61 = ($$0123146 | 0) > 1;
   $62 = $$0123146 + $4 | 0;
   $63 = +($62 | 0);
   $64 = Math_imul($$0123146, $$0123146) | 0;
   $65 = $62 - $2 | 0;
   $$0122145 = -8;
   do {
    $67 = $$0122145 + $5 | 0;
    $68 = +($67 | 0);
    $70 = (Math_imul($$0122145, $$0122145) | 0) + $64 | 0;
    $73 = ($67 - $3 << 6) + $65 | 0;
    $74 = $73 >>> 0 > 4095;
    $75 = $1 + ($73 << 2) | 0;
    L45 : do if ($60) {
     $$not152 = $$0122145 >>> 0 > 1 | $61;
     $$0120137$us = -8;
     $$0121136$us = 0;
     while (1) {
      $80 = ~~+_llvm_round_f64(+(+($$0120137$us | 0) * .5));
      if (($56 | 0) >= ($80 | 0) | $$not152) {
       $90 = +Math_sqrt(+(+($70 + (Math_imul($$0120137$us, $$0120137$us) | 0) | 0))) * .125;
       if ($90 * $90 > +_simplex3($63, $68, +($$0120137$us + $56 | 0), 1, 1.0, 3.0)) $$2$us = $$0121136$us; else {
        FUNCTION_TABLE_viiiii[$0 & 1]($62, $56 + $80 | 0, $67, 15, $7);
        $93 = ($$0121136$us | 0) != 0;
        if ($93 | $74) $$2$us = $93 ? $$0121136$us : 1; else {
         HEAP32[$75 >> 2] = 1;
         $$2$us = 1;
        }
       }
      } else $$2$us = $$0121136$us;
      $$0120137$us = $$0120137$us + 1 | 0;
      if (($$0120137$us | 0) == 9) break; else $$0121136$us = $$2$us;
     }
    } else {
     if ($74) {
      $$0120137$us139 = -8;
      while (1) {
       $103 = +Math_sqrt(+(+($70 + (Math_imul($$0120137$us139, $$0120137$us139) | 0) | 0))) * .125;
       if (!($103 * $103 > +_simplex3($63, $68, +($$0120137$us139 + $56 | 0), 1, 1.0, 3.0))) {
        $109 = $56 + ~~+_llvm_round_f64(+(+($$0120137$us139 | 0) * .5)) | 0;
        FUNCTION_TABLE_viiiii[$0 & 1]($62, $109, $67, 15, $7);
       }
       $$0120137$us139 = $$0120137$us139 + 1 | 0;
       if (($$0120137$us139 | 0) == 9) break L45;
      }
     }
     $$0120137 = -8;
     $$0121136 = 0;
     while (1) {
      $120 = +Math_sqrt(+(+($70 + (Math_imul($$0120137, $$0120137) | 0) | 0))) * .125;
      if ($120 * $120 > +_simplex3($63, $68, +($$0120137 + $56 | 0), 1, 1.0, 3.0)) $$2 = $$0121136; else {
       $126 = $56 + ~~+_llvm_round_f64(+(+($$0120137 | 0) * .5)) | 0;
       FUNCTION_TABLE_viiiii[$0 & 1]($62, $126, $67, 15, $7);
       if (!$$0121136) {
        HEAP32[$75 >> 2] = 1;
        $$2 = 1;
       } else $$2 = $$0121136;
      }
      $$0120137 = $$0120137 + 1 | 0;
      if (($$0120137 | 0) == 9) break; else $$0121136 = $$2;
     }
    } while (0);
    $$0122145 = $$0122145 + 1 | 0;
   } while (($$0122145 | 0) != 8);
   $$0123146 = $$0123146 + 1 | 0;
  } while (($$0123146 | 0) != 8);
  return;
 } else if ((label | 0) == 29) return;
}

function _make_plant($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7 | 0;
 $8 = +$8;
 var $$08184 = 0, $$085 = 0, $10 = 0, $105 = 0, $107 = 0.0, $111 = 0.0, $115 = 0.0, $12 = 0, $13 = 0, $142 = 0, $144 = 0.0, $148 = 0.0, $152 = 0.0, $17 = 0.0, $179 = 0, $181 = 0.0, $185 = 0.0, $189 = 0.0, $19 = 0.0, $20 = 0.0, $216 = 0, $218 = 0.0, $222 = 0.0, $226 = 0.0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $33 = 0.0, $37 = 0.0, $41 = 0.0, $68 = 0, $70 = 0.0, $74 = 0.0, $78 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $9 = sp + 64 | 0;
 $10 = sp;
 $12 = HEAP32[8592 + ($7 << 2) >> 2] | 0;
 $13 = ($12 | 0) / 16 | 0;
 $17 = +($12 - ($13 << 4) | 0) * .0625;
 $19 = +($13 | 0) * .0625;
 $20 = +($7 | 0);
 $$08184 = 0;
 $$085 = $0;
 while (1) {
  $24 = HEAP32[1056 + ($$08184 * 12 | 0) >> 2] | 0;
  $26 = HEAP32[1056 + ($$08184 * 12 | 0) + 4 >> 2] | 0;
  $28 = HEAP32[1056 + ($$08184 * 12 | 0) + 8 >> 2] | 0;
  $31 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) >> 2];
  $33 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($31 * 12 | 0) >> 2];
  HEAPF32[$$085 >> 2] = $33 * $6;
  $37 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($31 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 4 >> 2] = $37 * $6;
  $41 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($31 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 8 >> 2] = $41 * $6;
  HEAP32[$$085 + 12 >> 2] = $24;
  HEAP32[$$085 + 16 >> 2] = $26;
  HEAP32[$$085 + 20 >> 2] = $28;
  HEAPF32[$$085 + 24 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($31 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 28 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($31 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 32 >> 2] = $1;
  HEAPF32[$$085 + 36 >> 2] = $2;
  HEAPF32[$$085 + 40 >> 2] = $20;
  HEAPF32[$$085 + 44 >> 2] = 0.0;
  HEAPF32[$$085 + 48 >> 2] = $33;
  HEAPF32[$$085 + 52 >> 2] = $37;
  HEAPF32[$$085 + 56 >> 2] = $41;
  $68 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) + 4 >> 2];
  $70 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($68 * 12 | 0) >> 2];
  HEAPF32[$$085 + 60 >> 2] = $70 * $6;
  $74 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($68 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 64 >> 2] = $74 * $6;
  $78 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($68 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 68 >> 2] = $78 * $6;
  HEAP32[$$085 + 72 >> 2] = $24;
  HEAP32[$$085 + 76 >> 2] = $26;
  HEAP32[$$085 + 80 >> 2] = $28;
  HEAPF32[$$085 + 84 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($68 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 88 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($68 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 92 >> 2] = $1;
  HEAPF32[$$085 + 96 >> 2] = $2;
  HEAPF32[$$085 + 100 >> 2] = $20;
  HEAPF32[$$085 + 104 >> 2] = 0.0;
  HEAPF32[$$085 + 108 >> 2] = $70;
  HEAPF32[$$085 + 112 >> 2] = $74;
  HEAPF32[$$085 + 116 >> 2] = $78;
  $105 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) + 8 >> 2];
  $107 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($105 * 12 | 0) >> 2];
  HEAPF32[$$085 + 120 >> 2] = $107 * $6;
  $111 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($105 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 124 >> 2] = $111 * $6;
  $115 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($105 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 128 >> 2] = $115 * $6;
  HEAP32[$$085 + 132 >> 2] = $24;
  HEAP32[$$085 + 136 >> 2] = $26;
  HEAP32[$$085 + 140 >> 2] = $28;
  HEAPF32[$$085 + 144 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($105 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 148 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($105 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 152 >> 2] = $1;
  HEAPF32[$$085 + 156 >> 2] = $2;
  HEAPF32[$$085 + 160 >> 2] = $20;
  HEAPF32[$$085 + 164 >> 2] = 0.0;
  HEAPF32[$$085 + 168 >> 2] = $107;
  HEAPF32[$$085 + 172 >> 2] = $111;
  HEAPF32[$$085 + 176 >> 2] = $115;
  $142 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) + 12 >> 2];
  $144 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($142 * 12 | 0) >> 2];
  HEAPF32[$$085 + 180 >> 2] = $144 * $6;
  $148 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($142 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 184 >> 2] = $148 * $6;
  $152 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($142 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 188 >> 2] = $152 * $6;
  HEAP32[$$085 + 192 >> 2] = $24;
  HEAP32[$$085 + 196 >> 2] = $26;
  HEAP32[$$085 + 200 >> 2] = $28;
  HEAPF32[$$085 + 204 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($142 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 208 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($142 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 212 >> 2] = $1;
  HEAPF32[$$085 + 216 >> 2] = $2;
  HEAPF32[$$085 + 220 >> 2] = $20;
  HEAPF32[$$085 + 224 >> 2] = 0.0;
  HEAPF32[$$085 + 228 >> 2] = $144;
  HEAPF32[$$085 + 232 >> 2] = $148;
  HEAPF32[$$085 + 236 >> 2] = $152;
  $179 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) + 16 >> 2];
  $181 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($179 * 12 | 0) >> 2];
  HEAPF32[$$085 + 240 >> 2] = $181 * $6;
  $185 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($179 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 244 >> 2] = $185 * $6;
  $189 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($179 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 248 >> 2] = $189 * $6;
  HEAP32[$$085 + 252 >> 2] = $24;
  HEAP32[$$085 + 256 >> 2] = $26;
  HEAP32[$$085 + 260 >> 2] = $28;
  HEAPF32[$$085 + 264 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($179 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 268 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($179 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 272 >> 2] = $1;
  HEAPF32[$$085 + 276 >> 2] = $2;
  HEAPF32[$$085 + 280 >> 2] = $20;
  HEAPF32[$$085 + 284 >> 2] = 0.0;
  HEAPF32[$$085 + 288 >> 2] = $181;
  HEAPF32[$$085 + 292 >> 2] = $185;
  HEAPF32[$$085 + 296 >> 2] = $189;
  $216 = ~~+HEAPF32[1232 + ($$08184 * 24 | 0) + 20 >> 2];
  $218 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($216 * 12 | 0) >> 2];
  HEAPF32[$$085 + 300 >> 2] = $218 * $6;
  $222 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($216 * 12 | 0) + 4 >> 2];
  HEAPF32[$$085 + 304 >> 2] = $222 * $6;
  $226 = +HEAPF32[864 + ($$08184 * 48 | 0) + ($216 * 12 | 0) + 8 >> 2];
  HEAPF32[$$085 + 308 >> 2] = $226 * $6;
  HEAP32[$$085 + 312 >> 2] = $24;
  HEAP32[$$085 + 316 >> 2] = $26;
  HEAP32[$$085 + 320 >> 2] = $28;
  HEAPF32[$$085 + 324 >> 2] = $17 + (+HEAPF32[1104 + ($$08184 << 5) + ($216 << 3) >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 328 >> 2] = $19 + (+HEAPF32[1104 + ($$08184 << 5) + ($216 << 3) + 4 >> 2] != 0.0 ? .0625 : 0.0);
  HEAPF32[$$085 + 332 >> 2] = $1;
  HEAPF32[$$085 + 336 >> 2] = $2;
  HEAPF32[$$085 + 340 >> 2] = $20;
  HEAPF32[$$085 + 344 >> 2] = 0.0;
  HEAPF32[$$085 + 348 >> 2] = $218;
  HEAPF32[$$085 + 352 >> 2] = $222;
  HEAPF32[$$085 + 356 >> 2] = $226;
  $$08184 = $$08184 + 1 | 0;
  if (($$08184 | 0) == 4) break; else $$085 = $$085 + 360 | 0;
 }
 _mat_identity($9);
 _mat_rotate($10, 0.0, 1.0, 0.0, $8 * 3.1415927410125732 / 180.0);
 _mat_multiply($9, $10, $9);
 _mat_apply($0, $9, 24, 3, 10);
 _mat_translate($10, $3, $4, $5);
 _mat_multiply($9, $10, $9);
 _mat_apply($0, $9, 24, 0, 10);
 STACKTOP = sp;
 return;
}

function _gen_buildings($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$08799 = 0, $$08799$us = 0, $$088104 = 0, $$091106 = 0, $102 = 0, $107 = 0, $112 = 0, $117 = 0, $122 = 0, $127 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $152 = 0, $157 = 0, $16 = 0, $162 = 0, $167 = 0, $172 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $92 = 0, $95 = 0, label = 0;
 if (!(+_simplex2(+($4 | 0), +($5 | 0), 1, 1.0, 3.0) > .98)) return;
 $13 = $5 - $3 | 0;
 $14 = $4 - $2 | 0;
 $16 = ($13 << 6) + -512 | 0;
 $18 = ($13 << 6) + -448 | 0;
 $20 = ($13 << 6) + -384 | 0;
 $22 = ($13 << 6) + -320 | 0;
 $24 = ($13 << 6) + -256 | 0;
 $26 = ($13 << 6) + -192 | 0;
 $28 = ($13 << 6) + -128 | 0;
 $30 = ($13 << 6) + -64 | 0;
 $31 = $13 << 6;
 $33 = ($13 << 6) + 64 | 0;
 $35 = ($13 << 6) + 128 | 0;
 $37 = ($13 << 6) + 192 | 0;
 $39 = ($13 << 6) + 256 | 0;
 $41 = ($13 << 6) + 320 | 0;
 $43 = ($13 << 6) + 384 | 0;
 $45 = ($13 << 6) + 448 | 0;
 $47 = ($13 << 6) + 512 | 0;
 $$091106 = -8;
 while (1) {
  $48 = $14 + $$091106 | 0;
  $49 = $48 + $16 | 0;
  if ($49 >>> 0 <= 4095) if (HEAP32[$1 + ($49 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $54 = $48 + $18 | 0;
  if ($54 >>> 0 <= 4095) if (HEAP32[$1 + ($54 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $102 = $48 + $20 | 0;
  if ($102 >>> 0 <= 4095) if (HEAP32[$1 + ($102 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $107 = $48 + $22 | 0;
  if ($107 >>> 0 <= 4095) if (HEAP32[$1 + ($107 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $112 = $48 + $24 | 0;
  if ($112 >>> 0 <= 4095) if (HEAP32[$1 + ($112 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $117 = $48 + $26 | 0;
  if ($117 >>> 0 <= 4095) if (HEAP32[$1 + ($117 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $122 = $48 + $28 | 0;
  if ($122 >>> 0 <= 4095) if (HEAP32[$1 + ($122 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $127 = $48 + $30 | 0;
  if ($127 >>> 0 <= 4095) if (HEAP32[$1 + ($127 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $132 = $48 + $31 | 0;
  if ($132 >>> 0 <= 4095) if (HEAP32[$1 + ($132 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $137 = $48 + $33 | 0;
  if ($137 >>> 0 <= 4095) if (HEAP32[$1 + ($137 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $142 = $48 + $35 | 0;
  if ($142 >>> 0 <= 4095) if (HEAP32[$1 + ($142 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $147 = $48 + $37 | 0;
  if ($147 >>> 0 <= 4095) if (HEAP32[$1 + ($147 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $152 = $48 + $39 | 0;
  if ($152 >>> 0 <= 4095) if (HEAP32[$1 + ($152 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $157 = $48 + $41 | 0;
  if ($157 >>> 0 <= 4095) if (HEAP32[$1 + ($157 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $162 = $48 + $43 | 0;
  if ($162 >>> 0 <= 4095) if (HEAP32[$1 + ($162 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $167 = $48 + $45 | 0;
  if ($167 >>> 0 <= 4095) if (HEAP32[$1 + ($167 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  $172 = $48 + $47 | 0;
  if ($172 >>> 0 <= 4095) if (HEAP32[$1 + ($172 << 2) >> 2] | 0) {
   label = 20;
   break;
  }
  if (($$091106 | 0) < 8) $$091106 = $$091106 + 1 | 0; else {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  $56 = $6 + 1 | 0;
  $57 = $6 + 2 | 0;
  $58 = $6 + 3 | 0;
  $59 = $6 + 4 | 0;
  $60 = $6 + 5 | 0;
  $61 = $6 + 6 | 0;
  $62 = $6 + 7 | 0;
  $63 = $6 + 8 | 0;
  $64 = $6 + 1 | 0;
  $65 = $6 + 2 | 0;
  $66 = $6 + 3 | 0;
  $67 = $6 + 4 | 0;
  $68 = $6 + 5 | 0;
  $69 = $6 + 6 | 0;
  $70 = $6 + 7 | 0;
  $71 = $6 + 8 | 0;
  $72 = $6 + 1 | 0;
  $73 = $6 + 2 | 0;
  $74 = $6 + 3 | 0;
  $75 = $6 + 4 | 0;
  $76 = $6 + 5 | 0;
  $77 = $6 + 6 | 0;
  $78 = $6 + 7 | 0;
  $79 = $6 + 8 | 0;
  $$088104 = -8;
  do {
   $80 = $$088104 + $4 | 0;
   $81 = $80 - $2 | 0;
   $82 = ($$088104 | 0) == -8;
   if (($$088104 | 0) == 8) {
    $$08799$us = -8;
    do {
     $84 = $$08799$us + $5 | 0;
     $87 = ($84 - $3 << 6) + $81 | 0;
     if ($87 >>> 0 <= 4095) HEAP32[$1 + ($87 << 2) >> 2] = 1;
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $56, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $57, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $58, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $59, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $60, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $61, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $62, $84, 3, $7);
     FUNCTION_TABLE_viiiii[$0 & 1]($80, $63, $84, 3, $7);
     $$08799$us = $$08799$us + 1 | 0;
    } while (($$08799$us | 0) != 9);
   } else {
    $$08799 = -8;
    do {
     $92 = $$08799 + $5 | 0;
     $95 = ($92 - $3 << 6) + $81 | 0;
     if ($95 >>> 0 <= 4095) HEAP32[$1 + ($95 << 2) >> 2] = 1;
     L74 : do if ($82) label = 18; else {
      switch ($$08799 | 0) {
      case 8:
      case -8:
       {
        label = 18;
        break L74;
        break;
       }
      default:
       {}
      }
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $72, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $73, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $74, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $75, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $76, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $77, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $78, $92, 0, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $79, $92, 3, $7);
     } while (0);
     if ((label | 0) == 18) {
      label = 0;
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $64, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $65, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $66, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $67, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $68, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $69, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $70, $92, 3, $7);
      FUNCTION_TABLE_viiiii[$0 & 1]($80, $71, $92, 3, $7);
     }
     $$08799 = $$08799 + 1 | 0;
    } while (($$08799 | 0) != 9);
   }
   $$088104 = $$088104 + 1 | 0;
  } while (($$088104 | 0) != 9);
  return;
 } else if ((label | 0) == 20) return;
}

function _hit_test($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0$lcssa = 0, $$0102 = 0, $$0102$us = 0, $$048101 = 0.0, $$048101$us = 0.0, $$052100 = 0, $$052100$us = 0, $$066116$i = 0.0, $$066116$i$us = 0.0, $$068115$i = 0.0, $$068115$i$us = 0.0, $$070114$i = 0.0, $$070114$i$us = 0.0, $$075113$i = 0, $$075113$i$us = 0, $$076112$i = 0, $$076112$i$us = 0, $$080111$i = 0, $$080111$i$us = 0, $$084110$i = 0, $$084110$i$us = 0, $$278$i = 0, $$278$i$us = 0, $$282$i = 0, $$282$i$us = 0, $$286$i = 0, $$286$i$us = 0, $$3 = 0, $$3$us = 0, $$351 = 0.0, $$351$us = 0.0, $100 = 0, $103 = 0, $106 = 0, $108 = 0, $111 = 0, $113 = 0, $115 = 0, $117 = 0, $12 = 0, $121 = 0, $129 = 0.0, $131 = 0.0, $134 = 0.0, $136 = 0.0, $16 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $37 = 0, $40 = 0, $43 = 0, $46 = 0, $49 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0, $67 = 0, $70 = 0.0, $72 = 0.0, $75 = 0.0, $77 = 0.0, $91 = 0, $94 = 0, $97 = 0;
 $12 = ~~+Math_floor(+(+_llvm_round_f32(+$1) * .03125));
 $16 = ~~+Math_floor(+(+_llvm_round_f32(+$3) * .03125));
 $20 = ~~+Math_floor(+(+_llvm_round_f32(+$2) * .03125));
 $21 = +Math_cos(+$5);
 $22 = $4 + -1.5707963705062866;
 $28 = +Math_cos(+$22) * $21 * .03125;
 $29 = +Math_sin(+$5) * .03125;
 $30 = +Math_sin(+$22) * $21 * .03125;
 if (!$0) {
  $$0102$us = 0;
  $$048101$us = 0.0;
  $$052100$us = 0;
  while (1) {
   L5 : do if (!(HEAP32[23848 + ($$052100$us * 96 | 0) + 12 >> 2] | 0)) {
    $$3$us = $$0102$us;
    $$351$us = $$048101$us;
   } else {
    $37 = (HEAP32[23848 + ($$052100$us * 96 | 0) >> 2] | 0) - $12 | 0;
    $40 = ($37 | 0) < 0 ? 0 - $37 | 0 : $37;
    $43 = (HEAP32[23848 + ($$052100$us * 96 | 0) + 4 >> 2] | 0) - $16 | 0;
    $46 = ($43 | 0) < 0 ? 0 - $43 | 0 : $43;
    $49 = (HEAP32[23848 + ($$052100$us * 96 | 0) + 8 >> 2] | 0) - $20 | 0;
    $52 = ($49 | 0) < 0 ? 0 - $49 | 0 : $49;
    $54 = ($40 | 0) > ($46 | 0) ? $40 : $46;
    if (((($54 | 0) > ($52 | 0) ? $54 : $52) | 0) > 1) {
     $$3$us = $$0102$us;
     $$351$us = $$048101$us;
    } else {
     $57 = 23848 + ($$052100$us * 96 | 0) + 20 | 0;
     $$066116$i$us = $1;
     $$068115$i$us = $2;
     $$070114$i$us = $3;
     $$075113$i$us = 0;
     $$076112$i$us = 0;
     $$080111$i$us = 0;
     $$084110$i$us = 0;
     while (1) {
      $59 = ~~+_llvm_round_f32(+$$066116$i$us);
      $61 = ~~+_llvm_round_f32(+$$068115$i$us);
      $63 = ~~+_llvm_round_f32(+$$070114$i$us);
      if (($$076112$i$us | 0) == ($63 | 0) & (($$080111$i$us | 0) == ($61 | 0) & ($$084110$i$us | 0) == ($59 | 0))) {
       $$278$i$us = $$076112$i$us;
       $$282$i$us = $$080111$i$us;
       $$286$i$us = $$084110$i$us;
      } else {
       $67 = _map_get($57, $59, $61, $63) | 0;
       if (($67 | 0) > 0) break; else {
        $$278$i$us = $63;
        $$282$i$us = $61;
        $$286$i$us = $59;
       }
      }
      $$075113$i$us = $$075113$i$us + 1 | 0;
      if ($$075113$i$us >>> 0 >= 256) {
       $$3$us = $$0102$us;
       $$351$us = $$048101$us;
       break L5;
      } else {
       $$066116$i$us = $28 + $$066116$i$us;
       $$068115$i$us = $29 + $$068115$i$us;
       $$070114$i$us = $30 + $$070114$i$us;
       $$076112$i$us = $$278$i$us;
       $$080111$i$us = $$282$i$us;
       $$084110$i$us = $$286$i$us;
      }
     }
     $70 = +($59 | 0) - $1;
     $72 = +($61 | 0) - $2;
     $75 = +($63 | 0) - $3;
     $77 = +Math_sqrt(+($75 * $75 + ($72 * $72 + $70 * $70)));
     if ($$048101$us == 0.0 | $77 < $$048101$us) {
      HEAP32[$6 >> 2] = $59;
      HEAP32[$7 >> 2] = $61;
      HEAP32[$8 >> 2] = $63;
      $$3$us = $67;
      $$351$us = $77;
     } else {
      $$3$us = $$0102$us;
      $$351$us = $$048101$us;
     }
    }
   } while (0);
   $$052100$us = $$052100$us + 1 | 0;
   if (($$052100$us | 0) == 1024) {
    $$0$lcssa = $$3$us;
    break;
   } else {
    $$0102$us = $$3$us;
    $$048101$us = $$351$us;
   }
  }
  return $$0$lcssa | 0;
 } else {
  $$0102 = 0;
  $$048101 = 0.0;
  $$052100 = 0;
  while (1) {
   L20 : do if (!(HEAP32[23848 + ($$052100 * 96 | 0) + 12 >> 2] | 0)) {
    $$3 = $$0102;
    $$351 = $$048101;
   } else {
    $91 = (HEAP32[23848 + ($$052100 * 96 | 0) >> 2] | 0) - $12 | 0;
    $94 = ($91 | 0) < 0 ? 0 - $91 | 0 : $91;
    $97 = (HEAP32[23848 + ($$052100 * 96 | 0) + 4 >> 2] | 0) - $16 | 0;
    $100 = ($97 | 0) < 0 ? 0 - $97 | 0 : $97;
    $103 = (HEAP32[23848 + ($$052100 * 96 | 0) + 8 >> 2] | 0) - $20 | 0;
    $106 = ($103 | 0) < 0 ? 0 - $103 | 0 : $103;
    $108 = ($94 | 0) > ($100 | 0) ? $94 : $100;
    if (((($108 | 0) > ($106 | 0) ? $108 : $106) | 0) > 1) {
     $$3 = $$0102;
     $$351 = $$048101;
    } else {
     $111 = 23848 + ($$052100 * 96 | 0) + 20 | 0;
     $$066116$i = $1;
     $$068115$i = $2;
     $$070114$i = $3;
     $$075113$i = 0;
     $$076112$i = 0;
     $$080111$i = 0;
     $$084110$i = 0;
     while (1) {
      $113 = ~~+_llvm_round_f32(+$$066116$i);
      $115 = ~~+_llvm_round_f32(+$$068115$i);
      $117 = ~~+_llvm_round_f32(+$$070114$i);
      if (($$076112$i | 0) == ($117 | 0) & (($$080111$i | 0) == ($115 | 0) & ($$084110$i | 0) == ($113 | 0))) {
       $$278$i = $$076112$i;
       $$282$i = $$080111$i;
       $$286$i = $$084110$i;
      } else {
       $121 = _map_get($111, $113, $115, $117) | 0;
       if (($121 | 0) > 0) break; else {
        $$278$i = $117;
        $$282$i = $115;
        $$286$i = $113;
       }
      }
      $$075113$i = $$075113$i + 1 | 0;
      if ($$075113$i >>> 0 >= 256) {
       $$3 = $$0102;
       $$351 = $$048101;
       break L20;
      } else {
       $$066116$i = $28 + $$066116$i;
       $$068115$i = $29 + $$068115$i;
       $$070114$i = $30 + $$070114$i;
       $$076112$i = $$278$i;
       $$080111$i = $$282$i;
       $$084110$i = $$286$i;
      }
     }
     $129 = +($$084110$i | 0) - $1;
     $131 = +($$080111$i | 0) - $2;
     $134 = +($$076112$i | 0) - $3;
     $136 = +Math_sqrt(+($134 * $134 + ($131 * $131 + $129 * $129)));
     if ($$048101 == 0.0 | $136 < $$048101) {
      HEAP32[$6 >> 2] = $$084110$i;
      HEAP32[$7 >> 2] = $$080111$i;
      HEAP32[$8 >> 2] = $$076112$i;
      $$3 = $121;
      $$351 = $136;
     } else {
      $$3 = $$0102;
      $$351 = $$048101;
     }
    }
   } while (0);
   $$052100 = $$052100 + 1 | 0;
   if (($$052100 | 0) == 1024) {
    $$0$lcssa = $$3;
    break;
   } else {
    $$0102 = $$3;
    $$048101 = $$351;
   }
  }
  return $$0$lcssa | 0;
 }
 return 0;
}

function _getPixelColorRGBA8($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$011$lcssa$i = 0, $$01113$i = 0, $$01113$i164 = 0, $$014$i = 0, $$014$i163 = 0, $$0157 = 0, $$1 = 0, $10 = 0, $12 = 0, $138 = 0, $139 = 0, $146 = 0, $156 = 0, $162 = 0, $164 = 0, $183 = 0, $185 = 0, $189 = 0, $191 = 0, $198 = 0, $20 = 0, $21 = 0, $210 = 0, $22 = 0, $38 = 0, $42 = 0, $52 = 0, $56 = 0, $66 = 0, $74 = 0, $92 = 0, $93 = 0, $96 = 0, $99 = 0, $storemerge = 0, $storemerge159 = 0, label = 0;
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   $10 = HEAP32[$6 + 4 >> 2] | 0;
   switch ($10 | 0) {
   case 8:
    {
     $12 = HEAP8[$4 + $5 >> 0] | 0;
     HEAP8[$2 >> 0] = $12;
     HEAP8[$1 >> 0] = $12;
     HEAP8[$0 >> 0] = $12;
     if (HEAP32[$6 + 16 >> 2] | 0) if ((HEAP32[$6 + 20 >> 2] | 0) == ($12 & 255 | 0)) {
      HEAP8[$3 >> 0] = 0;
      $$1 = 0;
      return $$1 | 0;
     }
     HEAP8[$3 >> 0] = -1;
     $$1 = 0;
     return $$1 | 0;
    }
   case 16:
    {
     $20 = $5 << 1;
     $21 = $4 + $20 | 0;
     $22 = HEAP8[$21 >> 0] | 0;
     HEAP8[$2 >> 0] = $22;
     HEAP8[$1 >> 0] = $22;
     HEAP8[$0 >> 0] = $22;
     if (HEAP32[$6 + 16 >> 2] | 0) if (((HEAPU8[$21 >> 0] | 0) << 8 | (HEAPU8[$4 + ($20 | 1) >> 0] | 0) | 0) == (HEAP32[$6 + 20 >> 2] | 0)) {
      HEAP8[$3 >> 0] = 0;
      $$1 = 0;
      return $$1 | 0;
     }
     HEAP8[$3 >> 0] = -1;
     $$1 = 0;
     return $$1 | 0;
    }
   default:
    {
     $38 = (1 << $10) + -1 | 0;
     if (!$10) $$011$lcssa$i = 0; else {
      $$01113$i = 0;
      $$014$i = $10 + -1 | 0;
      $42 = Math_imul($10, $5) | 0;
      while (1) {
       $52 = (((HEAPU8[$4 + ($42 >>> 3) >> 0] | 0) >>> ($42 & 7 ^ 7) & 1) << $$014$i) + $$01113$i | 0;
       $$014$i = $$014$i + -1 | 0;
       if ($$014$i >>> 0 >= $10 >>> 0) {
        $$011$lcssa$i = $52;
        break;
       } else {
        $$01113$i = $52;
        $42 = $42 + 1 | 0;
       }
      }
     }
     $56 = ((($$011$lcssa$i * 255 | 0) >>> 0) / ($38 >>> 0) | 0) & 255;
     HEAP8[$2 >> 0] = $56;
     HEAP8[$1 >> 0] = $56;
     HEAP8[$0 >> 0] = $56;
     if (!(HEAP32[$6 + 16 >> 2] | 0)) label = 16; else if (($$011$lcssa$i | 0) == (HEAP32[$6 + 20 >> 2] | 0)) $storemerge159 = 0; else label = 16;
     if ((label | 0) == 16) $storemerge159 = -1;
     HEAP8[$3 >> 0] = $storemerge159;
     $$1 = 0;
     return $$1 | 0;
    }
   }
   break;
  }
 case 2:
  {
   if ((HEAP32[$6 + 4 >> 2] | 0) == 8) {
    $66 = $5 * 3 | 0;
    HEAP8[$0 >> 0] = HEAP8[$4 + $66 >> 0] | 0;
    HEAP8[$1 >> 0] = HEAP8[$4 + ($66 + 1) >> 0] | 0;
    $74 = HEAP8[$4 + ($66 + 2) >> 0] | 0;
    HEAP8[$2 >> 0] = $74;
    if (HEAP32[$6 + 16 >> 2] | 0) if ((HEAP32[$6 + 20 >> 2] | 0) == (HEAPU8[$0 >> 0] | 0 | 0)) if ((HEAP32[$6 + 24 >> 2] | 0) == (HEAPU8[$1 >> 0] | 0 | 0)) if ((HEAP32[$6 + 28 >> 2] | 0) == ($74 & 255 | 0)) {
     HEAP8[$3 >> 0] = 0;
     $$1 = 0;
     return $$1 | 0;
    }
    HEAP8[$3 >> 0] = -1;
    $$1 = 0;
    return $$1 | 0;
   } else {
    $92 = $5 * 6 | 0;
    $93 = $4 + $92 | 0;
    HEAP8[$0 >> 0] = HEAP8[$93 >> 0] | 0;
    $96 = $4 + ($92 + 2) | 0;
    HEAP8[$1 >> 0] = HEAP8[$96 >> 0] | 0;
    $99 = $4 + ($92 + 4) | 0;
    HEAP8[$2 >> 0] = HEAP8[$99 >> 0] | 0;
    if (HEAP32[$6 + 16 >> 2] | 0) if (((HEAPU8[$93 >> 0] | 0) << 8 | (HEAPU8[$4 + ($92 | 1) >> 0] | 0) | 0) == (HEAP32[$6 + 20 >> 2] | 0)) if (((HEAPU8[$96 >> 0] | 0) << 8 | (HEAPU8[$4 + ($92 + 3) >> 0] | 0) | 0) == (HEAP32[$6 + 24 >> 2] | 0)) if (((HEAPU8[$99 >> 0] | 0) << 8 | (HEAPU8[$4 + ($92 + 5) >> 0] | 0) | 0) == (HEAP32[$6 + 28 >> 2] | 0)) {
     HEAP8[$3 >> 0] = 0;
     $$1 = 0;
     return $$1 | 0;
    }
    HEAP8[$3 >> 0] = -1;
    $$1 = 0;
    return $$1 | 0;
   }
   break;
  }
 case 3:
  {
   $138 = HEAP32[$6 + 4 >> 2] | 0;
   $139 = ($138 | 0) == 8;
   if ($139) $$0157 = HEAPU8[$4 + $5 >> 0] | 0; else if (!$138) $$0157 = 0; else {
    $$01113$i164 = 0;
    $$014$i163 = $138 + -1 | 0;
    $146 = Math_imul($138, $5) | 0;
    while (1) {
     $156 = (((HEAPU8[$4 + ($146 >>> 3) >> 0] | 0) >>> ($146 & 7 ^ 7) & 1) << $$014$i163) + $$01113$i164 | 0;
     $$014$i163 = $$014$i163 + -1 | 0;
     if ($$014$i163 >>> 0 >= $138 >>> 0) {
      $$0157 = $156;
      break;
     } else {
      $$01113$i164 = $156;
      $146 = $146 + 1 | 0;
     }
    }
   }
   do if ($$0157 >>> 0 < (HEAP32[$6 + 12 >> 2] | 0) >>> 0) {
    $162 = $6 + 8 | 0;
    $164 = $$0157 << 2;
    HEAP8[$0 >> 0] = HEAP8[(HEAP32[$162 >> 2] | 0) + $164 >> 0] | 0;
    HEAP8[$1 >> 0] = HEAP8[(HEAP32[$162 >> 2] | 0) + ($164 | 1) >> 0] | 0;
    HEAP8[$2 >> 0] = HEAP8[(HEAP32[$162 >> 2] | 0) + ($164 | 2) >> 0] | 0;
    $storemerge = HEAP8[(HEAP32[$162 >> 2] | 0) + ($164 | 3) >> 0] | 0;
   } else {
    if ($7 | 0) {
     HEAP8[$2 >> 0] = 0;
     HEAP8[$1 >> 0] = 0;
     HEAP8[$0 >> 0] = 0;
     $storemerge = -1;
     break;
    }
    $$1 = $139 ? 46 : 47;
    return $$1 | 0;
   } while (0);
   HEAP8[$3 >> 0] = $storemerge;
   $$1 = 0;
   return $$1 | 0;
  }
 case 4:
  {
   if ((HEAP32[$6 + 4 >> 2] | 0) == 8) {
    $183 = $5 << 1;
    $185 = HEAP8[$4 + $183 >> 0] | 0;
    HEAP8[$2 >> 0] = $185;
    HEAP8[$1 >> 0] = $185;
    HEAP8[$0 >> 0] = $185;
    HEAP8[$3 >> 0] = HEAP8[$4 + ($183 | 1) >> 0] | 0;
    $$1 = 0;
    return $$1 | 0;
   } else {
    $189 = $5 << 2;
    $191 = HEAP8[$4 + $189 >> 0] | 0;
    HEAP8[$2 >> 0] = $191;
    HEAP8[$1 >> 0] = $191;
    HEAP8[$0 >> 0] = $191;
    HEAP8[$3 >> 0] = HEAP8[$4 + ($189 | 2) >> 0] | 0;
    $$1 = 0;
    return $$1 | 0;
   }
   break;
  }
 case 6:
  {
   if ((HEAP32[$6 + 4 >> 2] | 0) == 8) {
    $198 = $5 << 2;
    HEAP8[$0 >> 0] = HEAP8[$4 + $198 >> 0] | 0;
    HEAP8[$1 >> 0] = HEAP8[$4 + ($198 | 1) >> 0] | 0;
    HEAP8[$2 >> 0] = HEAP8[$4 + ($198 | 2) >> 0] | 0;
    HEAP8[$3 >> 0] = HEAP8[$4 + ($198 | 3) >> 0] | 0;
    $$1 = 0;
    return $$1 | 0;
   } else {
    $210 = $5 << 3;
    HEAP8[$0 >> 0] = HEAP8[$4 + $210 >> 0] | 0;
    HEAP8[$1 >> 0] = HEAP8[$4 + ($210 | 2) >> 0] | 0;
    HEAP8[$2 >> 0] = HEAP8[$4 + ($210 | 4) >> 0] | 0;
    HEAP8[$3 >> 0] = HEAP8[$4 + ($210 | 6) >> 0] | 0;
    $$1 = 0;
    return $$1 | 0;
   }
   break;
  }
 default:
  {
   $$1 = 0;
   return $$1 | 0;
  }
 }
 return 0;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[33131] | 0;
 $8 = $3 & 3;
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
 $11 = $5 + 4 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!($12 & 1)) _abort();
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[33116] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0;
  if ($24 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $26 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$26 + 4 >> 2] = $24 | 3;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
  _dispose_chunk($26, $24);
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[33133] | 0) == ($5 | 0)) {
  $37 = (HEAP32[33130] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[33133] = $40;
  HEAP32[33130] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[33132] | 0) == ($5 | 0)) {
  $49 = (HEAP32[33129] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0;
   $54 = $0 + $49 | 0;
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
   HEAP32[$53 + 4 >> 2] = $51 | 1;
   HEAP32[$54 >> 2] = $51;
   $60 = $54 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $53;
   $storemerge3 = $51;
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
   $67 = $0 + $49 + 4 | 0;
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[33129] = $storemerge3;
  HEAP32[33132] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($12 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $73 = ($12 & -8) + $4 | 0;
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $75 = $73 - $1 | 0;
 $76 = $12 >>> 3;
 L49 : do if ($12 >>> 0 < 256) {
  $79 = HEAP32[$5 + 8 >> 2] | 0;
  $81 = HEAP32[$5 + 12 >> 2] | 0;
  $83 = 132548 + ($76 << 1 << 2) | 0;
  if (($79 | 0) != ($83 | 0)) {
   if ($6 >>> 0 > $79 >>> 0) _abort();
   if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($81 | 0) == ($79 | 0)) {
   HEAP32[33127] = HEAP32[33127] & ~(1 << $76);
   break;
  }
  if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
   if ($6 >>> 0 > $81 >>> 0) _abort();
   $96 = $81 + 8 | 0;
   if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
  }
  HEAP32[$79 + 12 >> 2] = $81;
  HEAP32[$$pre$phiZ2D >> 2] = $79;
 } else {
  $101 = HEAP32[$5 + 24 >> 2] | 0;
  $103 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($103 | 0) == ($5 | 0)) {
   $114 = $5 + 16 | 0;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if (!$116) {
    $118 = HEAP32[$114 >> 2] | 0;
    if (!$118) {
     $$3 = 0;
     break;
    } else {
     $$1271$ph = $118;
     $$1274$ph = $114;
    }
   } else {
    $$1271$ph = $116;
    $$1274$ph = $115;
   }
   $$1271 = $$1271$ph;
   $$1274 = $$1274$ph;
   while (1) {
    $120 = $$1271 + 20 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (!$121) {
     $123 = $$1271 + 16 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     if (!$124) break; else {
      $$1271$be = $124;
      $$1274$be = $123;
     }
    } else {
     $$1271$be = $121;
     $$1274$be = $120;
    }
    $$1271 = $$1271$be;
    $$1274 = $$1274$be;
   }
   if ($6 >>> 0 > $$1274 >>> 0) _abort(); else {
    HEAP32[$$1274 >> 2] = 0;
    $$3 = $$1271;
    break;
   }
  } else {
   $106 = HEAP32[$5 + 8 >> 2] | 0;
   if ($6 >>> 0 > $106 >>> 0) _abort();
   $108 = $106 + 12 | 0;
   if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
   $111 = $103 + 8 | 0;
   if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$108 >> 2] = $103;
    HEAP32[$111 >> 2] = $106;
    $$3 = $103;
    break;
   } else _abort();
  } while (0);
  if ($101 | 0) {
   $129 = HEAP32[$5 + 28 >> 2] | 0;
   $130 = 132812 + ($129 << 2) | 0;
   do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$130 >> 2] = $$3;
    if (!$$3) {
     HEAP32[33128] = HEAP32[33128] & ~(1 << $129);
     break L49;
    }
   } else if ((HEAP32[33131] | 0) >>> 0 > $101 >>> 0) _abort(); else {
    $139 = $101 + 16 | 0;
    HEAP32[((HEAP32[$139 >> 2] | 0) == ($5 | 0) ? $139 : $101 + 20 | 0) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $144 = HEAP32[33131] | 0;
   if ($144 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $101;
   $147 = $5 + 16 | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $148;
    HEAP32[$148 + 24 >> 2] = $$3;
    break;
   } while (0);
   $154 = HEAP32[$147 + 4 >> 2] | 0;
   if ($154 | 0) if ((HEAP32[33131] | 0) >>> 0 > $154 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $154;
    HEAP32[$154 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $3 & 1 | $73 | 2;
  $165 = $0 + $73 + 4 | 0;
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $168 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$168 + 4 >> 2] = $75 | 3;
  $175 = $0 + $73 + 4 | 0;
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
  _dispose_chunk($168, $75);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function _lodepng_inspect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sink = 0, $10 = 0, $102 = 0, $11 = 0, $126 = 0, $134 = 0, $14 = 0, $142 = 0, $15 = 0, $150 = 0, $158 = 0, $166 = 0, $174 = 0, $182 = 0, $190 = 0, $198 = 0, $206 = 0, $214 = 0, $222 = 0, $230 = 0, $238 = 0, $246 = 0, $41 = 0, $5 = 0, $9 = 0, $90 = 0, $93 = 0, $96 = 0, $99 = 0, $scevgep11$i$i = 0, dest = 0, stop = 0;
 $5 = $2 + 132 | 0;
 L1 : do if (($3 | 0) == 0 | ($4 | 0) == 0) $$sink = 48; else if ($4 >>> 0 < 29) $$sink = 27; else {
  _lodepng_info_cleanup($5);
  $9 = $2 + 160 | 0;
  $10 = $2 + 144 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  HEAP32[$9 + 12 >> 2] = 0;
  HEAP32[$10 >> 2] = 6;
  $11 = $2 + 148 | 0;
  HEAP32[$11 >> 2] = 8;
  HEAP32[$2 + 152 >> 2] = 0;
  HEAP32[$2 + 156 >> 2] = 0;
  $14 = $2 + 140 | 0;
  HEAP32[$14 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  $15 = $2 + 136 | 0;
  HEAP32[$15 >> 2] = 0;
  HEAP32[$2 + 252 >> 2] = 0;
  $scevgep11$i$i = $2 + 268 | 0;
  HEAP32[$scevgep11$i$i >> 2] = 0;
  HEAP32[$scevgep11$i$i + 4 >> 2] = 0;
  HEAP32[$scevgep11$i$i + 8 >> 2] = 0;
  HEAP32[$scevgep11$i$i + 12 >> 2] = 0;
  HEAP32[$scevgep11$i$i + 16 >> 2] = 0;
  HEAP32[$scevgep11$i$i + 20 >> 2] = 0;
  dest = $2 + 176 | 0;
  stop = dest + 52 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  if ((HEAP8[$3 >> 0] | 0) == -119) if ((HEAP8[$3 + 1 >> 0] | 0) == 80) if ((HEAP8[$3 + 2 >> 0] | 0) == 78) if ((HEAP8[$3 + 3 >> 0] | 0) == 71) if ((HEAP8[$3 + 4 >> 0] | 0) == 13) if ((HEAP8[$3 + 5 >> 0] | 0) == 10) if ((HEAP8[$3 + 6 >> 0] | 0) == 26) if ((HEAP8[$3 + 7 >> 0] | 0) == 10) {
   $41 = $3 + 12 | 0;
   if ((HEAP8[$41 >> 0] | 0) == 73) if ((HEAP8[$3 + 13 >> 0] | 0) == 72) if ((HEAP8[$3 + 14 >> 0] | 0) == 68) if ((HEAP8[$3 + 15 >> 0] | 0) == 82) {
    HEAP32[$0 >> 2] = HEAPU8[$3 + 17 >> 0] << 16 | HEAPU8[$3 + 16 >> 0] << 24 | HEAPU8[$3 + 18 >> 0] << 8 | HEAPU8[$3 + 19 >> 0];
    HEAP32[$1 >> 2] = HEAPU8[$3 + 21 >> 0] << 16 | HEAPU8[$3 + 20 >> 0] << 24 | HEAPU8[$3 + 22 >> 0] << 8 | HEAPU8[$3 + 23 >> 0];
    $90 = HEAP8[$3 + 24 >> 0] | 0;
    HEAP32[$11 >> 2] = $90 & 255;
    $93 = HEAP8[$3 + 25 >> 0] | 0;
    HEAP32[$10 >> 2] = $93 & 255;
    $96 = HEAP8[$3 + 26 >> 0] | 0;
    HEAP32[$5 >> 2] = $96 & 255;
    $99 = HEAP8[$3 + 27 >> 0] | 0;
    HEAP32[$15 >> 2] = $99 & 255;
    $102 = HEAP8[$3 + 28 >> 0] | 0;
    HEAP32[$14 >> 2] = $102 & 255;
    if (!(HEAP32[$2 + 16 >> 2] | 0)) {
     $126 = HEAP32[11664 + ((~HEAP8[$41 >> 0] & 255) << 2) >> 2] ^ 16777215;
     $134 = HEAP32[11664 + (($126 & 255 ^ HEAPU8[$3 + 13 >> 0]) << 2) >> 2] ^ $126 >>> 8;
     $142 = HEAP32[11664 + (($134 & 255 ^ HEAPU8[$3 + 14 >> 0]) << 2) >> 2] ^ $134 >>> 8;
     $150 = HEAP32[11664 + (($142 & 255 ^ HEAPU8[$3 + 15 >> 0]) << 2) >> 2] ^ $142 >>> 8;
     $158 = HEAP32[11664 + (($150 & 255 ^ HEAPU8[$3 + 16 >> 0]) << 2) >> 2] ^ $150 >>> 8;
     $166 = HEAP32[11664 + (($158 & 255 ^ HEAPU8[$3 + 17 >> 0]) << 2) >> 2] ^ $158 >>> 8;
     $174 = HEAP32[11664 + (($166 & 255 ^ HEAPU8[$3 + 18 >> 0]) << 2) >> 2] ^ $166 >>> 8;
     $182 = HEAP32[11664 + (($174 & 255 ^ HEAPU8[$3 + 19 >> 0]) << 2) >> 2] ^ $174 >>> 8;
     $190 = HEAP32[11664 + (($182 & 255 ^ HEAPU8[$3 + 20 >> 0]) << 2) >> 2] ^ $182 >>> 8;
     $198 = HEAP32[11664 + (($190 & 255 ^ HEAPU8[$3 + 21 >> 0]) << 2) >> 2] ^ $190 >>> 8;
     $206 = HEAP32[11664 + (($198 & 255 ^ HEAPU8[$3 + 22 >> 0]) << 2) >> 2] ^ $198 >>> 8;
     $214 = HEAP32[11664 + (($206 & 255 ^ HEAPU8[$3 + 23 >> 0]) << 2) >> 2] ^ $206 >>> 8;
     $222 = HEAP32[11664 + (($214 & 255 ^ HEAPU8[$3 + 24 >> 0]) << 2) >> 2] ^ $214 >>> 8;
     $230 = HEAP32[11664 + (($222 & 255 ^ HEAPU8[$3 + 25 >> 0]) << 2) >> 2] ^ $222 >>> 8;
     $238 = HEAP32[11664 + (($230 & 255 ^ HEAPU8[$3 + 26 >> 0]) << 2) >> 2] ^ $230 >>> 8;
     $246 = HEAP32[11664 + (($238 & 255 ^ HEAPU8[$3 + 27 >> 0]) << 2) >> 2] ^ $238 >>> 8;
     if ((HEAPU8[$3 + 30 >> 0] << 16 | HEAPU8[$3 + 29 >> 0] << 24 | HEAPU8[$3 + 31 >> 0] << 8 | HEAPU8[$3 + 32 >> 0] | 0) != (~(HEAP32[11664 + (($246 & 255 ^ HEAPU8[$3 + 28 >> 0]) << 2) >> 2] ^ $246 >>> 8) | 0)) {
      $$sink = 57;
      break;
     }
    }
    if (!($96 << 24 >> 24)) if (!($99 << 24 >> 24)) if (($102 & 255) > 1) $$sink = 34; else {
     switch ($93 << 24 >> 24) {
     case 0:
      {
       switch ($90 << 24 >> 24) {
       case 1:
       case 2:
       case 4:
       case 8:
       case 16:
        break;
       default:
        {
         $$sink = 37;
         break L1;
        }
       }
       break;
      }
     case 2:
      {
       switch ($90 << 24 >> 24) {
       case 8:
       case 16:
        break;
       default:
        {
         $$sink = 37;
         break L1;
        }
       }
       break;
      }
     case 3:
      {
       switch ($90 << 24 >> 24) {
       case 1:
       case 2:
       case 4:
       case 8:
        break;
       default:
        {
         $$sink = 37;
         break L1;
        }
       }
       break;
      }
     case 4:
      {
       switch ($90 << 24 >> 24) {
       case 8:
       case 16:
        break;
       default:
        {
         $$sink = 37;
         break L1;
        }
       }
       break;
      }
     case 6:
      {
       switch ($90 << 24 >> 24) {
       case 8:
       case 16:
        break;
       default:
        {
         $$sink = 37;
         break L1;
        }
       }
       break;
      }
     default:
      {
       $$sink = 31;
       break L1;
      }
     }
     $$sink = 0;
    } else $$sink = 33; else $$sink = 32;
   } else $$sink = 29; else $$sink = 29; else $$sink = 29; else $$sink = 29;
  } else $$sink = 28; else $$sink = 28; else $$sink = 28; else $$sink = 28; else $$sink = 28; else $$sink = 28; else $$sink = 28; else $$sink = 28;
 } while (0);
 HEAP32[$2 + 292 >> 2] = $$sink;
 return $$sink | 0;
}

function _HuffmanTree_makeFromLengths2($0) {
 $0 = $0 | 0;
 var $$03474 = 0, $$03580 = 0, $$037 = 0, $$05979$i71 = 0, $$06088$i = 0, $$06383$i = 0, $$06782$i = 0, $$13676 = 0, $$16184$i = 0, $$164$lcssa$i = 0, $$16478$i72 = 0, $$168$lcssa$i = 0, $$16877$i73 = 0, $$26276$i = 0, $$366$ph$i = 0, $$370$ph$i = 0, $$pre$phi$iZ2D = 0, $$sroa$0$0 = 0, $$sroa$053$0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $107 = 0, $108 = 0, $109 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $37 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $84 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, label = 0;
 $1 = $0 + 16 | 0;
 $4 = _malloc(HEAP32[$1 >> 2] << 2) | 0;
 $5 = $0 + 4 | 0;
 HEAP32[$5 >> 2] = $4;
 $6 = ($4 | 0) == 0;
 $7 = $0 + 12 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) + 1 | 0;
 $10 = $9 << 2;
 if (!$10) {
  $$sroa$053$0 = 0;
  $16 = 0;
  label = 4;
 } else {
  $13 = _realloc(0, $9 << 3) | 0;
  if (!$13) {
   $107 = 0;
   $108 = 0;
  } else {
   $$sroa$053$0 = $13;
   $16 = $13;
   label = 4;
  }
 }
 do if ((label | 0) == 4) {
  if ($9 | 0) _memset($16 | 0, 0, $10 | 0) | 0;
  $18 = (HEAP32[$7 >> 2] | 0) + 1 | 0;
  $19 = $18 << 2;
  if (!$19) {
   $$sroa$0$0 = 0;
   $25 = 0;
  } else {
   $22 = _realloc(0, $18 << 3) | 0;
   if (!$22) {
    $107 = $16;
    $108 = 0;
    break;
   }
   $$sroa$0$0 = $22;
   $25 = $22;
  }
  if ($18 | 0) _memset($25 | 0, 0, $19 | 0) | 0;
  if ($6) {
   $107 = $16;
   $108 = $25;
  } else {
   $26 = HEAP32[$1 >> 2] | 0;
   $27 = ($26 | 0) == 0;
   if (!$27) {
    $29 = HEAP32[$0 + 8 >> 2] | 0;
    $$03580 = 0;
    do {
     $32 = $$sroa$053$0 + (HEAP32[$29 + ($$03580 << 2) >> 2] << 2) | 0;
     HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
     $$03580 = $$03580 + 1 | 0;
    } while ($$03580 >>> 0 < $26 >>> 0);
   }
   $37 = HEAP32[$7 >> 2] | 0;
   if ($37 | 0) {
    $$13676 = 1;
    $43 = HEAP32[$$sroa$0$0 >> 2] | 0;
    do {
     $43 = (HEAP32[$$sroa$053$0 + ($$13676 + -1 << 2) >> 2] | 0) + $43 << 1;
     HEAP32[$$sroa$0$0 + ($$13676 << 2) >> 2] = $43;
     $$13676 = $$13676 + 1 | 0;
    } while ($$13676 >>> 0 <= $37 >>> 0);
   }
   if (!$27) {
    $49 = HEAP32[$0 + 8 >> 2] | 0;
    $$03474 = 0;
    $109 = $26;
    while (1) {
     $51 = HEAP32[$49 + ($$03474 << 2) >> 2] | 0;
     if (!$51) $60 = $109; else {
      $53 = $$sroa$0$0 + ($51 << 2) | 0;
      $54 = HEAP32[$53 >> 2] | 0;
      HEAP32[$53 >> 2] = $54 + 1;
      HEAP32[(HEAP32[$5 >> 2] | 0) + ($$03474 << 2) >> 2] = $54;
      $60 = HEAP32[$1 >> 2] | 0;
     }
     $$03474 = $$03474 + 1 | 0;
     if ($$03474 >>> 0 >= $60 >>> 0) break; else $109 = $60;
    }
   }
   _free($16);
   _free($25);
   $61 = HEAP32[$1 >> 2] | 0;
   $63 = _malloc($61 << 3) | 0;
   HEAP32[$0 >> 2] = $63;
   if (!$63) {
    $$037 = 83;
    return $$037 | 0;
   }
   $65 = ($61 & 2147483647 | 0) == 0;
   if (!$65) {
    $66 = $61 << 1;
    $$06088$i = 0;
    do {
     HEAP32[$63 + ($$06088$i << 2) >> 2] = 32767;
     $$06088$i = $$06088$i + 1 | 0;
    } while ($$06088$i >>> 0 < $66 >>> 0);
   }
   if (!$61) {
    $$037 = 0;
    return $$037 | 0;
   }
   $72 = HEAP32[$0 + 8 >> 2] | 0;
   $73 = $61 + -2 | 0;
   $$06383$i = 0;
   $$06782$i = 0;
   $$16184$i = 0;
   L46 : while (1) {
    $74 = $72 + ($$16184$i << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    L48 : do if (!$75) {
     $$164$lcssa$i = $$06383$i;
     $$168$lcssa$i = $$06782$i;
    } else {
     if ($$06383$i >>> 0 > $73 >>> 0) {
      $$037 = 55;
      label = 46;
      break L46;
     }
     $79 = (HEAP32[$5 >> 2] | 0) + ($$16184$i << 2) | 0;
     $$05979$i71 = 0;
     $$16478$i72 = $$06383$i;
     $$16877$i73 = $$06782$i;
     $84 = $75;
     while (1) {
      $89 = $63 + (((HEAP32[$79 >> 2] | 0) >>> ($84 + ~$$05979$i71 | 0) & 1 | $$16478$i72 << 1) << 2) | 0;
      $90 = HEAP32[$89 >> 2] | 0;
      do if (($90 | 0) == 32767) {
       $92 = $$05979$i71 + 1 | 0;
       if (($92 | 0) == ($84 | 0)) {
        HEAP32[$89 >> 2] = $$16184$i;
        $$366$ph$i = 0;
        $$370$ph$i = $$16877$i73;
        $$pre$phi$iZ2D = $84;
        break;
       } else {
        $94 = $$16877$i73 + 1 | 0;
        HEAP32[$89 >> 2] = $94 + $61;
        $$366$ph$i = $94;
        $$370$ph$i = $94;
        $$pre$phi$iZ2D = $92;
        break;
       }
      } else {
       $$366$ph$i = $90 - $61 | 0;
       $$370$ph$i = $$16877$i73;
       $$pre$phi$iZ2D = $$05979$i71 + 1 | 0;
      } while (0);
      $84 = HEAP32[$74 >> 2] | 0;
      if ($84 >>> 0 <= $$pre$phi$iZ2D >>> 0) {
       $$164$lcssa$i = $$366$ph$i;
       $$168$lcssa$i = $$370$ph$i;
       break L48;
      }
      if ($$366$ph$i >>> 0 > $73 >>> 0) {
       $$037 = 55;
       label = 46;
       break L46;
      } else {
       $$05979$i71 = $$pre$phi$iZ2D;
       $$16478$i72 = $$366$ph$i;
       $$16877$i73 = $$370$ph$i;
      }
     }
    } while (0);
    $$16184$i = $$16184$i + 1 | 0;
    if ($$16184$i >>> 0 >= $61 >>> 0) {
     label = 40;
     break;
    } else {
     $$06383$i = $$164$lcssa$i;
     $$06782$i = $$168$lcssa$i;
    }
   }
   if ((label | 0) == 40) {
    if ($65) {
     $$037 = 0;
     return $$037 | 0;
    }
    $101 = $61 << 1;
    $$26276$i = 0;
    do {
     $102 = $63 + ($$26276$i << 2) | 0;
     if ((HEAP32[$102 >> 2] | 0) == 32767) HEAP32[$102 >> 2] = 0;
     $$26276$i = $$26276$i + 1 | 0;
    } while ($$26276$i >>> 0 < $101 >>> 0);
    $$037 = 0;
    return $$037 | 0;
   } else if ((label | 0) == 46) return $$037 | 0;
  }
 } while (0);
 _free($107);
 _free($108);
 $$037 = 83;
 return $$037 | 0;
}

function ___pthread_cond_timedwait($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$062 = 0, $$063 = 0, $$064 = 0, $$066 = 0, $$1 = 0, $$2 = 0, $$475 = 0, $101 = 0, $107 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $48 = 0, $50 = 0, $51 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $73 = 0, $78 = 0, $83 = 0, $88 = 0, $91 = 0, $95 = 0, $96 = 0, $spec$select = 0, $spec$select69 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 $6 = HEAP32[$0 + 16 >> 2] | 0;
 if (HEAP32[$1 >> 2] & 15 | 0) {
  $12 = (Atomics_load(HEAP32, $1 + 4 >> 2) | 0) & 2147483647;
  if (($12 | 0) != (HEAP32[(_pthread_self() | 0) + 52 >> 2] | 0)) {
   $$062 = 1;
   STACKTOP = sp;
   return $$062 | 0;
  }
 }
 if ($2 | 0) if ((HEAP32[$2 + 4 >> 2] | 0) >>> 0 > 999999999) {
  $$062 = 22;
  STACKTOP = sp;
  return $$062 | 0;
 }
 ___pthread_testcancel();
 if (!(HEAP32[$0 >> 2] | 0)) {
  $27 = $0 + 32 | 0;
  if (Atomics_compareExchange(HEAP32, $27 >> 2, 0, 1) | 0) {
   Atomics_compareExchange(HEAP32, $27 >> 2, 1, 2) | 0;
   do ___wait($27, 0, 2, 1); while ((Atomics_compareExchange(HEAP32, $27 >> 2, 0, 2) | 0) != 0);
  }
  $33 = $3 + 12 | 0;
  Atomics_store(HEAP32, $33 >> 2, 2) | 0;
  Atomics_store(HEAP32, $3 + 8 >> 2, 0) | 0;
  $35 = $0 + 4 | 0;
  $36 = HEAP32[$35 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = $36;
  HEAP32[$35 >> 2] = $3;
  $38 = $0 + 20 | 0;
  HEAP32[((HEAP32[$38 >> 2] | 0) == 0 ? $38 : $36) >> 2] = $3;
  do $42 = Atomics_load(HEAP32, $27 >> 2) | 0; while ((Atomics_compareExchange(HEAP32, $27 >> 2, $42, 0) | 0) != ($42 | 0));
  if (($42 | 0) == 2) {
   _emscripten_futex_wake($27 | 0, 1) | 0;
   $$0 = $33;
   $$064 = 0;
   $$066 = 2;
  } else {
   $$0 = $33;
   $$064 = 0;
   $$066 = 2;
  }
 } else {
  $23 = $0 + 8 | 0;
  $24 = Atomics_load(HEAP32, $23 >> 2) | 0;
  Atomics_add(HEAP32, $0 + 12 >> 2, 1) | 0;
  $$0 = $23;
  $$064 = 1;
  $$066 = $24;
 }
 ___pthread_mutex_unlock($1) | 0;
 ___pthread_setcancelstate(2, $4) | 0;
 if ((HEAP32[$4 >> 2] | 0) == 1) ___pthread_setcancelstate(1, 0) | 0;
 $48 = ($$064 | 0) != 0;
 $50 = ($48 ^ 1) & 1;
 do $51 = ___timedwait_cp($$0, $$066, $6, $2, $50) | 0; while ((Atomics_load(HEAP32, $$0 >> 2) | 0) == ($$066 | 0) & ($51 | 4 | 0) == 4);
 $spec$select = ($51 | 0) == 4 ? 0 : $51;
 L28 : do if ($48) {
  if (($spec$select | 0) == 125) {
   $60 = (Atomics_load(HEAP32, $0 + 8 >> 2) | 0) == ($$066 | 0);
   $$1 = $60 ? 125 : 0;
  } else $$1 = $spec$select;
  $61 = $0 + 12 | 0;
  if ((Atomics_add(HEAP32, $61 >> 2, -1) | 0) == -2147483647) {
   _emscripten_futex_wake($61 | 0, 1) | 0;
   $$063 = 0;
   $$2 = $$1;
  } else {
   $$063 = 0;
   $$2 = $$1;
  }
 } else {
  $65 = Atomics_compareExchange(HEAP32, $3 + 8 >> 2, 0, 2) | 0;
  if ($65 | 0) {
   $101 = $3 + 12 | 0;
   if (!(Atomics_compareExchange(HEAP32, $101 >> 2, 0, 1) | 0)) {
    $$063 = $65;
    $$2 = $spec$select;
    break;
   }
   Atomics_compareExchange(HEAP32, $101 >> 2, 1, 2) | 0;
   while (1) {
    ___wait($101, 0, 2, 1);
    if (!(Atomics_compareExchange(HEAP32, $101 >> 2, 0, 2) | 0)) {
     $$063 = $65;
     $$2 = $spec$select;
     break L28;
    }
   }
  }
  $67 = $0 + 32 | 0;
  if (Atomics_compareExchange(HEAP32, $67 >> 2, 0, 1) | 0) {
   Atomics_compareExchange(HEAP32, $67 >> 2, 1, 2) | 0;
   do ___wait($67, 0, 2, 1); while ((Atomics_compareExchange(HEAP32, $67 >> 2, 0, 2) | 0) != 0);
  }
  $73 = $0 + 4 | 0;
  if ((HEAP32[$73 >> 2] | 0) == ($3 | 0)) HEAP32[$73 >> 2] = HEAP32[$3 + 4 >> 2]; else {
   $78 = HEAP32[$3 >> 2] | 0;
   if ($78 | 0) HEAP32[$78 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  $83 = $0 + 20 | 0;
  if ((HEAP32[$83 >> 2] | 0) == ($3 | 0)) HEAP32[$83 >> 2] = HEAP32[$3 >> 2]; else {
   $88 = HEAP32[$3 + 4 >> 2] | 0;
   if ($88 | 0) HEAP32[$88 >> 2] = HEAP32[$3 >> 2];
  }
  do $91 = Atomics_load(HEAP32, $67 >> 2) | 0; while ((Atomics_compareExchange(HEAP32, $67 >> 2, $91, 0) | 0) != ($91 | 0));
  if (($91 | 0) == 2) _emscripten_futex_wake($67 | 0, 1) | 0;
  $95 = $3 + 16 | 0;
  $96 = HEAP32[$95 >> 2] | 0;
  if (!$96) {
   $$063 = 0;
   $$2 = $spec$select;
  } else if ((Atomics_add(HEAP32, $96 >> 2, -1) | 0) == 1) {
   _emscripten_futex_wake(HEAP32[$95 >> 2] | 0, 1) | 0;
   $$063 = 0;
   $$2 = $spec$select;
  } else {
   $$063 = 0;
   $$2 = $spec$select;
  }
 } while (0);
 $107 = ___pthread_mutex_lock($1) | 0;
 $spec$select69 = ($107 | 0) == 0 ? $$2 : $107;
 if (!$$063) {
  ___pthread_setcancelstate(HEAP32[$4 >> 2] | 0, 0) | 0;
  if (($spec$select69 | 0) == 125) {
   ___pthread_testcancel();
   ___pthread_setcancelstate(1, 0) | 0;
   $$475 = 125;
  } else $$475 = $spec$select69;
 } else {
  if (!(HEAP32[$3 + 4 >> 2] | 0)) Atomics_add(HEAP32, $1 + 8 >> 2, 1) | 0;
  $115 = HEAP32[$3 >> 2] | 0;
  if (!$115) Atomics_sub(HEAP32, $1 + 8 >> 2, 1) | 0; else {
   $117 = $115 + 12 | 0;
   $118 = $1 + 4 | 0;
   Atomics_store(HEAP32, $117 >> 2, 0) | 0;
   do {} while ((_emscripten_futex_wake_or_requeue($117 | 0, 0, $118 | 0, Atomics_load(HEAP32, $117 >> 2) | 0) | 0) == -11);
  }
  ___pthread_setcancelstate(HEAP32[$4 >> 2] | 0, 0) | 0;
  $$475 = ($spec$select69 | 0) == 125 ? 0 : $spec$select69;
 }
 ___pthread_testcancel();
 $$062 = $$475;
 STACKTOP = sp;
 return $$062 | 0;
}

function _unfilter($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0137$i = 0, $$04261 = 0, $$04358 = 0, $$10169$i = 0, $$11165$i = 0, $$1140$i = 0, $$12162$i = 0, $$2 = 0, $$2138$i = 0, $$3145$i = 0, $$4142$i = 0, $$5158$i = 0, $$6155$i = 0, $$7151$i = 0, $$8148$i = 0, $$9170$i = 0, $11 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $23 = 0, $6 = 0, $9 = 0, label = 0, $$04358$looptemp = 0;
 $6 = ($4 + 7 | 0) >>> 3;
 $9 = ((Math_imul($4, $2) | 0) + 7 | 0) >>> 3;
 if (!$3) {
  $$2 = 0;
  return $$2 | 0;
 }
 $11 = $9 + 1 | 0;
 $12 = ($9 | 0) == 0;
 $13 = ($6 | 0) == 0;
 $14 = ($9 | 0) != 0;
 $15 = ($6 | 0) != 0;
 $16 = $6 >>> 0 < $9 >>> 0;
 $$04261 = 0;
 $$04358 = 0;
 L4 : while (1) {
  $17 = Math_imul($$04261, $9) | 0;
  $18 = Math_imul($$04261, $11) | 0;
  $$04358$looptemp = $$04358;
  $$04358 = $0 + $17 | 0;
  $23 = $1 + ($18 + 1) | 0;
  L6 : do switch (HEAP8[$1 + $18 >> 0] | 0) {
  case 0:
   {
    if (!$12) {
     $$0137$i = 0;
     do {
      HEAP8[$$04358 + $$0137$i >> 0] = HEAP8[$23 + $$0137$i >> 0] | 0;
      $$0137$i = $$0137$i + 1 | 0;
     } while (($$0137$i | 0) != ($9 | 0));
    }
    break;
   }
  case 1:
   {
    if (!$13) {
     $$1140$i = 0;
     do {
      HEAP8[$$04358 + $$1140$i >> 0] = HEAP8[$23 + $$1140$i >> 0] | 0;
      $$1140$i = $$1140$i + 1 | 0;
     } while (($$1140$i | 0) != ($6 | 0));
    }
    if ($16) {
     $$2138$i = $6;
     do {
      HEAP8[$$04358 + $$2138$i >> 0] = (HEAPU8[$$04358 + ($$2138$i - $6) >> 0] | 0) + (HEAPU8[$23 + $$2138$i >> 0] | 0);
      $$2138$i = $$2138$i + 1 | 0;
     } while (($$2138$i | 0) != ($9 | 0));
    }
    break;
   }
  case 2:
   {
    if (!$$04358$looptemp) {
     if (!$14) break L6;
     $$4142$i = 0;
     do {
      HEAP8[$$04358 + $$4142$i >> 0] = HEAP8[$23 + $$4142$i >> 0] | 0;
      $$4142$i = $$4142$i + 1 | 0;
     } while (($$4142$i | 0) != ($9 | 0));
    } else {
     if (!$14) break L6;
     $$3145$i = 0;
     do {
      HEAP8[$$04358 + $$3145$i >> 0] = (HEAPU8[$$04358$looptemp + $$3145$i >> 0] | 0) + (HEAPU8[$23 + $$3145$i >> 0] | 0);
      $$3145$i = $$3145$i + 1 | 0;
     } while (($$3145$i | 0) != ($9 | 0));
    }
    break;
   }
  case 3:
   {
    if (!$$04358$looptemp) {
     if ($15) {
      $$7151$i = 0;
      do {
       HEAP8[$$04358 + $$7151$i >> 0] = HEAP8[$23 + $$7151$i >> 0] | 0;
       $$7151$i = $$7151$i + 1 | 0;
      } while (($$7151$i | 0) != ($6 | 0));
     }
     if (!$16) break L6;
     $$8148$i = $6;
     do {
      HEAP8[$$04358 + $$8148$i >> 0] = ((HEAPU8[$$04358 + ($$8148$i - $6) >> 0] | 0) >>> 1 & 255) + (HEAPU8[$23 + $$8148$i >> 0] | 0);
      $$8148$i = $$8148$i + 1 | 0;
     } while (($$8148$i | 0) != ($9 | 0));
    } else {
     if ($15) {
      $$5158$i = 0;
      do {
       HEAP8[$$04358 + $$5158$i >> 0] = ((HEAPU8[$$04358$looptemp + $$5158$i >> 0] | 0) >>> 1 & 255) + (HEAPU8[$23 + $$5158$i >> 0] | 0);
       $$5158$i = $$5158$i + 1 | 0;
      } while (($$5158$i | 0) != ($6 | 0));
     }
     if (!$16) break L6;
     $$6155$i = $6;
     do {
      HEAP8[$$04358 + $$6155$i >> 0] = (((HEAPU8[$$04358$looptemp + $$6155$i >> 0] | 0) + (HEAPU8[$$04358 + ($$6155$i - $6) >> 0] | 0) | 0) >>> 1) + (HEAPU8[$23 + $$6155$i >> 0] | 0);
      $$6155$i = $$6155$i + 1 | 0;
     } while (($$6155$i | 0) != ($9 | 0));
    }
    break;
   }
  case 4:
   {
    if (!$$04358$looptemp) {
     if ($15) {
      $$11165$i = 0;
      do {
       HEAP8[$$04358 + $$11165$i >> 0] = HEAP8[$23 + $$11165$i >> 0] | 0;
       $$11165$i = $$11165$i + 1 | 0;
      } while (($$11165$i | 0) != ($6 | 0));
     }
     if (!$16) break L6;
     $$12162$i = $6;
     do {
      HEAP8[$$04358 + $$12162$i >> 0] = (HEAPU8[$$04358 + ($$12162$i - $6) >> 0] | 0) + (HEAPU8[$23 + $$12162$i >> 0] | 0);
      $$12162$i = $$12162$i + 1 | 0;
     } while (($$12162$i | 0) != ($9 | 0));
    } else {
     if ($15) {
      $$9170$i = 0;
      do {
       HEAP8[$$04358 + $$9170$i >> 0] = (HEAPU8[$$04358$looptemp + $$9170$i >> 0] | 0) + (HEAPU8[$23 + $$9170$i >> 0] | 0);
       $$9170$i = $$9170$i + 1 | 0;
      } while (($$9170$i | 0) != ($6 | 0));
     }
     if (!$16) break L6;
     $$10169$i = $6;
     do {
      $116 = $$10169$i - $6 | 0;
      $118 = HEAP8[$$04358 + $116 >> 0] | 0;
      $120 = HEAP8[$$04358$looptemp + $$10169$i >> 0] | 0;
      $122 = HEAP8[$$04358$looptemp + $116 >> 0] | 0;
      $123 = $120 & 255;
      $124 = $122 & 255;
      $125 = $123 - $124 | 0;
      $126 = ($125 | 0) > -1 ? $125 : 0 - $125 | 0;
      $127 = $118 & 255;
      $128 = $127 - $124 | 0;
      $129 = ($128 | 0) > -1 ? $128 : 0 - $128 | 0;
      $131 = $123 + $127 + (Math_imul($124, -2) | 0) | 0;
      $132 = ($131 | 0) > -1 ? $131 : 0 - $131 | 0;
      HEAP8[$$04358 + $$10169$i >> 0] = ((($132 | 0) < ($126 | 0) & ($132 | 0) < ($129 | 0) ? $122 : ($129 | 0) < ($126 | 0) ? $120 : $118) & 255) + (HEAPU8[$23 + $$10169$i >> 0] | 0);
      $$10169$i = $$10169$i + 1 | 0;
     } while (($$10169$i | 0) != ($9 | 0));
    }
    break;
   }
  default:
   {
    $$2 = 36;
    label = 47;
    break L4;
   }
  } while (0);
  $$04261 = $$04261 + 1 | 0;
  if ($$04261 >>> 0 >= $3 >>> 0) {
   $$2 = 0;
   label = 47;
   break;
  }
 }
 if ((label | 0) == 47) return $$2 | 0;
 return 0;
}

function _noise3($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $101 = 0, $11 = 0.0, $116 = 0, $13 = 0.0, $131 = 0, $132 = 0.0, $135 = 0.0, $138 = 0.0, $140 = 0.0, $141 = 0.0, $144 = 0.0, $148 = 0.0, $149 = 0.0, $152 = 0.0, $155 = 0.0, $157 = 0.0, $158 = 0.0, $16 = 0.0, $161 = 0.0, $164 = 0.0, $166 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0, $23 = 0.0, $233 = 0.0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $60 = 0, $63 = 0, $65 = 0, $67 = 0.0, $68 = 0, $7 = 0.0, $70 = 0, $72 = 0, $74 = 0, $86 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 48 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 $7 = ($0 + $1 + $2) * .3333333432674408;
 $9 = +Math_floor(+($7 + $0));
 $11 = +Math_floor(+($7 + $1));
 $13 = +Math_floor(+($7 + $2));
 $16 = ($13 + ($9 + $11)) * .1666666716337204;
 $18 = $0 - ($9 - $16);
 HEAPF32[$4 >> 2] = $18;
 $20 = $1 - ($11 - $16);
 $21 = $4 + 4 | 0;
 HEAPF32[$21 >> 2] = $20;
 $23 = $2 - ($13 - $16);
 $24 = $4 + 8 | 0;
 HEAPF32[$24 >> 2] = $23;
 if (!($18 >= $20)) if ($20 < $23) {
  $34 = 0;
  $39 = 0;
  $47 = 1;
  $52 = 0;
  $60 = 1;
  $65 = 1;
 } else if ($18 < $23) {
  $34 = 0;
  $39 = 0;
  $47 = 1;
  $52 = 1;
  $60 = 1;
  $65 = 0;
 } else {
  $34 = 1;
  $39 = 0;
  $47 = 1;
  $52 = 1;
  $60 = 0;
  $65 = 0;
 } else if (!($20 >= $23)) if (!($18 >= $23)) {
  $34 = 1;
  $39 = 0;
  $47 = 0;
  $52 = 0;
  $60 = 1;
  $65 = 1;
 } else {
  $34 = 1;
  $39 = 1;
  $47 = 0;
  $52 = 0;
  $60 = 1;
  $65 = 0;
 } else {
  $34 = 1;
  $39 = 1;
  $47 = 1;
  $52 = 0;
  $60 = 0;
  $65 = 0;
 }
 $32 = $4 + 36 | 0;
 HEAPF32[$32 >> 2] = $18 + -1.0 + .5;
 $37 = $4 + 24 | 0;
 HEAPF32[$37 >> 2] = $18 - +($34 | 0) + .3333333432674408;
 $42 = $4 + 12 | 0;
 HEAPF32[$42 >> 2] = $18 - +($39 | 0) + .1666666716337204;
 $45 = $4 + 40 | 0;
 HEAPF32[$45 >> 2] = $20 + -1.0 + .5;
 $50 = $4 + 28 | 0;
 HEAPF32[$50 >> 2] = $20 - +($47 | 0) + .3333333432674408;
 $55 = $4 + 16 | 0;
 HEAPF32[$55 >> 2] = $20 - +($52 | 0) + .1666666716337204;
 $58 = $4 + 44 | 0;
 HEAPF32[$58 >> 2] = $23 + -1.0 + .5;
 $63 = $4 + 32 | 0;
 HEAPF32[$63 >> 2] = $23 - +($60 | 0) + .3333333432674408;
 $67 = $23 - +($65 | 0) + .1666666716337204;
 $68 = $4 + 20 | 0;
 HEAPF32[$68 >> 2] = $67;
 $70 = ~~$9 & 255;
 $72 = ~~$11 & 255;
 $74 = ~~$13 & 255;
 $86 = ((HEAPU8[12816 + ($70 + (HEAPU8[12816 + ($72 + (HEAPU8[12816 + $74 >> 0] | 0)) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $101 = ((HEAPU8[12816 + ($39 + $70 + (HEAPU8[12816 + ($52 + $72 + (HEAPU8[12816 + ($65 + $74) >> 0] | 0)) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $116 = ((HEAPU8[12816 + ($34 + $70 + (HEAPU8[12816 + ($47 + $72 + (HEAPU8[12816 + ($60 + $74) >> 0] | 0)) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $131 = ((HEAPU8[12816 + ($70 + 1 + (HEAPU8[12816 + ($72 + 1 + (HEAPU8[12816 + ($74 + 1) >> 0] | 0)) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $132 = +HEAPF32[$4 >> 2];
 $135 = +HEAPF32[$21 >> 2];
 $138 = +HEAPF32[$24 >> 2];
 $140 = .6000000238418579 - $132 * $132 - $135 * $135 - $138 * $138;
 $141 = +HEAPF32[$42 >> 2];
 $144 = +HEAPF32[$55 >> 2];
 $148 = .6000000238418579 - $141 * $141 - $144 * $144 - $67 * $67;
 $149 = +HEAPF32[$37 >> 2];
 $152 = +HEAPF32[$50 >> 2];
 $155 = +HEAPF32[$63 >> 2];
 $157 = .6000000238418579 - $149 * $149 - $152 * $152 - $155 * $155;
 $158 = +HEAPF32[$32 >> 2];
 $161 = +HEAPF32[$45 >> 2];
 $164 = +HEAPF32[$58 >> 2];
 $166 = .6000000238418579 - $158 * $158 - $161 * $161 - $164 * $164;
 if ($140 > 0.0) HEAPF32[$3 >> 2] = $140 * ($140 * ($140 * $140)) * ($132 * +HEAPF32[13328 + ($86 * 12 | 0) >> 2] + $135 * +HEAPF32[13328 + ($86 * 12 | 0) + 4 >> 2] + $138 * +HEAPF32[13328 + ($86 * 12 | 0) + 8 >> 2]);
 if ($148 > 0.0) HEAPF32[$3 + 4 >> 2] = $148 * ($148 * ($148 * $148)) * ($141 * +HEAPF32[13328 + ($101 * 12 | 0) >> 2] + $144 * +HEAPF32[13328 + ($101 * 12 | 0) + 4 >> 2] + +HEAPF32[$68 >> 2] * +HEAPF32[13328 + ($101 * 12 | 0) + 8 >> 2]);
 if ($157 > 0.0) HEAPF32[$3 + 8 >> 2] = $157 * ($157 * ($157 * $157)) * ($149 * +HEAPF32[13328 + ($116 * 12 | 0) >> 2] + $152 * +HEAPF32[13328 + ($116 * 12 | 0) + 4 >> 2] + $155 * +HEAPF32[13328 + ($116 * 12 | 0) + 8 >> 2]);
 if ($166 > 0.0) {
  $233 = $166 * ($166 * ($166 * $166)) * ($158 * +HEAPF32[13328 + ($131 * 12 | 0) >> 2] + $161 * +HEAPF32[13328 + ($131 * 12 | 0) + 4 >> 2] + $164 * +HEAPF32[13328 + ($131 * 12 | 0) + 8 >> 2]);
  HEAPF32[$3 + 12 >> 2] = $233;
  $243 = $233;
  $235 = +HEAPF32[$3 >> 2];
  $236 = $3 + 4 | 0;
  $237 = +HEAPF32[$236 >> 2];
  $238 = $235 + $237;
  $239 = $3 + 8 | 0;
  $240 = +HEAPF32[$239 >> 2];
  $241 = $238 + $240;
  $242 = $241 + $243;
  $244 = $242 * 32.0;
  STACKTOP = sp;
  return +$244;
 } else {
  $243 = +HEAPF32[$3 + 12 >> 2];
  $235 = +HEAPF32[$3 >> 2];
  $236 = $3 + 4 | 0;
  $237 = +HEAPF32[$236 >> 2];
  $238 = $235 + $237;
  $239 = $3 + 8 | 0;
  $240 = +HEAPF32[$239 >> 2];
  $241 = $238 + $240;
  $242 = $241 + $243;
  $244 = $242 * 32.0;
  STACKTOP = sp;
  return +$244;
 }
 return +(0.0);
}

function _occlusion($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$072 = 0, $101 = 0, $110 = 0, $119 = 0, $126 = 0.0, $127 = 0, $129 = 0, $13 = 0, $132 = 0.0, $141 = 0, $145 = 0, $159 = 0, $167 = 0, $176 = 0, $185 = 0, $192 = 0.0, $193 = 0, $195 = 0, $198 = 0.0, $207 = 0, $211 = 0, $225 = 0, $233 = 0, $242 = 0, $251 = 0, $258 = 0.0, $259 = 0, $261 = 0, $264 = 0.0, $27 = 0, $35 = 0, $44 = 0, $5 = 0, $53 = 0, $60 = 0.0, $61 = 0, $63 = 0, $66 = 0.0, $75 = 0, $79 = 0, $9 = 0, $93 = 0;
 $5 = $1 + 13 | 0;
 $$072 = 0;
 do {
  $9 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 4 >> 2] | 0) >> 0] | 0;
  $13 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 8 >> 2] | 0) >> 0] | 0;
  if ($9 << 24 >> 24 != 0 & $13 << 24 >> 24 != 0) $63 = 3; else $63 = ($13 << 24 >> 24) + ($9 << 24 >> 24) + (HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) >> 2] | 0) >> 0] | 0) | 0;
  $27 = HEAP32[10160 + ($$072 << 6) >> 2] | 0;
  $35 = HEAP32[10160 + ($$072 << 6) + 4 >> 2] | 0;
  $44 = HEAP32[10160 + ($$072 << 6) + 8 >> 2] | 0;
  $53 = HEAP32[10160 + ($$072 << 6) + 12 >> 2] | 0;
  $60 = +(HEAP8[$1 + $27 >> 0] | 0) + +(HEAP8[$1 + $35 >> 0] | 0) + +(HEAP8[$1 + $44 >> 0] | 0) + +(HEAP8[$1 + $53 >> 0] | 0);
  $61 = (HEAP8[$5 >> 0] | 0) == 15;
  $66 = (+HEAPF32[$2 + ($27 << 2) >> 2] + 0.0 + +HEAPF32[$2 + ($35 << 2) >> 2] + +HEAPF32[$2 + ($44 << 2) >> 2] + +HEAPF32[$2 + ($53 << 2) >> 2]) * .25 + +HEAPF32[10544 + ($63 << 2) >> 2];
  HEAPF32[$3 + ($$072 << 4) >> 2] = $66 < 1.0 ? $66 : 1.0;
  HEAPF32[$4 + ($$072 << 4) >> 2] = $61 ? 10.0 : $60 / 15.0 * .25;
  $75 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 16 >> 2] | 0) >> 0] | 0;
  $79 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 20 >> 2] | 0) >> 0] | 0;
  if ($75 << 24 >> 24 != 0 & $79 << 24 >> 24 != 0) $129 = 3; else $129 = ($79 << 24 >> 24) + ($75 << 24 >> 24) + (HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 12 >> 2] | 0) >> 0] | 0) | 0;
  $93 = HEAP32[10160 + ($$072 << 6) + 16 >> 2] | 0;
  $101 = HEAP32[10160 + ($$072 << 6) + 20 >> 2] | 0;
  $110 = HEAP32[10160 + ($$072 << 6) + 24 >> 2] | 0;
  $119 = HEAP32[10160 + ($$072 << 6) + 28 >> 2] | 0;
  $126 = +(HEAP8[$1 + $93 >> 0] | 0) + +(HEAP8[$1 + $101 >> 0] | 0) + +(HEAP8[$1 + $110 >> 0] | 0) + +(HEAP8[$1 + $119 >> 0] | 0);
  $127 = (HEAP8[$5 >> 0] | 0) == 15;
  $132 = (+HEAPF32[$2 + ($93 << 2) >> 2] + 0.0 + +HEAPF32[$2 + ($101 << 2) >> 2] + +HEAPF32[$2 + ($110 << 2) >> 2] + +HEAPF32[$2 + ($119 << 2) >> 2]) * .25 + +HEAPF32[10544 + ($129 << 2) >> 2];
  HEAPF32[$3 + ($$072 << 4) + 4 >> 2] = $132 < 1.0 ? $132 : 1.0;
  HEAPF32[$4 + ($$072 << 4) + 4 >> 2] = $127 ? 10.0 : $126 / 15.0 * .25;
  $141 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 28 >> 2] | 0) >> 0] | 0;
  $145 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 32 >> 2] | 0) >> 0] | 0;
  if ($141 << 24 >> 24 != 0 & $145 << 24 >> 24 != 0) $195 = 3; else $195 = ($145 << 24 >> 24) + ($141 << 24 >> 24) + (HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 24 >> 2] | 0) >> 0] | 0) | 0;
  $159 = HEAP32[10160 + ($$072 << 6) + 32 >> 2] | 0;
  $167 = HEAP32[10160 + ($$072 << 6) + 36 >> 2] | 0;
  $176 = HEAP32[10160 + ($$072 << 6) + 40 >> 2] | 0;
  $185 = HEAP32[10160 + ($$072 << 6) + 44 >> 2] | 0;
  $192 = +(HEAP8[$1 + $159 >> 0] | 0) + +(HEAP8[$1 + $167 >> 0] | 0) + +(HEAP8[$1 + $176 >> 0] | 0) + +(HEAP8[$1 + $185 >> 0] | 0);
  $193 = (HEAP8[$5 >> 0] | 0) == 15;
  $198 = (+HEAPF32[$2 + ($159 << 2) >> 2] + 0.0 + +HEAPF32[$2 + ($167 << 2) >> 2] + +HEAPF32[$2 + ($176 << 2) >> 2] + +HEAPF32[$2 + ($185 << 2) >> 2]) * .25 + +HEAPF32[10544 + ($195 << 2) >> 2];
  HEAPF32[$3 + ($$072 << 4) + 8 >> 2] = $198 < 1.0 ? $198 : 1.0;
  HEAPF32[$4 + ($$072 << 4) + 8 >> 2] = $193 ? 10.0 : $192 / 15.0 * .25;
  $207 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 40 >> 2] | 0) >> 0] | 0;
  $211 = HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 44 >> 2] | 0) >> 0] | 0;
  if ($207 << 24 >> 24 != 0 & $211 << 24 >> 24 != 0) $261 = 3; else $261 = ($211 << 24 >> 24) + ($207 << 24 >> 24) + (HEAP8[$0 + (HEAP32[9872 + ($$072 * 48 | 0) + 36 >> 2] | 0) >> 0] | 0) | 0;
  $225 = HEAP32[10160 + ($$072 << 6) + 48 >> 2] | 0;
  $233 = HEAP32[10160 + ($$072 << 6) + 52 >> 2] | 0;
  $242 = HEAP32[10160 + ($$072 << 6) + 56 >> 2] | 0;
  $251 = HEAP32[10160 + ($$072 << 6) + 60 >> 2] | 0;
  $258 = +(HEAP8[$1 + $225 >> 0] | 0) + +(HEAP8[$1 + $233 >> 0] | 0) + +(HEAP8[$1 + $242 >> 0] | 0) + +(HEAP8[$1 + $251 >> 0] | 0);
  $259 = (HEAP8[$5 >> 0] | 0) == 15;
  $264 = (+HEAPF32[$2 + ($225 << 2) >> 2] + 0.0 + +HEAPF32[$2 + ($233 << 2) >> 2] + +HEAPF32[$2 + ($242 << 2) >> 2] + +HEAPF32[$2 + ($251 << 2) >> 2]) * .25 + +HEAPF32[10544 + ($261 << 2) >> 2];
  HEAPF32[$3 + ($$072 << 4) + 12 >> 2] = $264 < 1.0 ? $264 : 1.0;
  HEAPF32[$4 + ($$072 << 4) + 12 >> 2] = $259 ? 10.0 : $258 / 15.0 * .25;
  $$072 = $$072 + 1 | 0;
 } while (($$072 | 0) != 6);
 return;
}

function _init() {
 var $$0 = 0, $0 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $40 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 49168 | 0;
 $0 = sp;
 $1 = sp + 49164 | 0;
 $2 = sp + 49160 | 0;
 $3 = sp + 49156 | 0;
 $4 = sp + 49152 | 0;
 _srand(_time(0) | 0);
 _rand() | 0;
 if (!(_glfwInit() | 0)) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = _glfwCreateWindow(1280, 720, 16288, 0, 0) | 0;
 HEAP32[32731] = $8;
 if (!$8) {
  _glfwTerminate();
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _glfwMakeContextCurrent($8 | 0);
 _glfwSetInputMode(HEAP32[32731] | 0, 208897, 212995);
 if (_glewInit() | 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _glEnable(2884);
 _glEnable(2929);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glGenTextures(1, $1 | 0);
 _glActiveTexture(33984);
 _glBindTexture(3553, HEAP32[$1 >> 2] | 0);
 _glTexParameteri(3553, 10241, 9728);
 _glTexParameteri(3553, 10240, 9728);
 _load_png_texture(16294);
 _glGenTextures(1, $2 | 0);
 _glActiveTexture(33985);
 _glBindTexture(3553, HEAP32[$2 >> 2] | 0);
 _glTexParameteri(3553, 10241, 9729);
 _glTexParameteri(3553, 10240, 9729);
 _load_png_texture(16315);
 _glGenTextures(1, $3 | 0);
 _glActiveTexture(33986);
 _glBindTexture(3553, HEAP32[$3 >> 2] | 0);
 _glTexParameteri(3553, 10241, 9729);
 _glTexParameteri(3553, 10240, 9729);
 _glTexParameteri(3553, 10242, 33071);
 _glTexParameteri(3553, 10243, 33071);
 _load_png_texture(16333);
 _glGenTextures(1, $4 | 0);
 _glActiveTexture(33987);
 _glBindTexture(3553, HEAP32[$4 >> 2] | 0);
 _glTexParameteri(3553, 10241, 9728);
 _glTexParameteri(3553, 10240, 9728);
 _load_png_texture(16350);
 $17 = _load_program(16368, 16394) | 0;
 HEAP32[33056] = $17;
 HEAP32[33057] = _glGetAttribLocation($17 | 0, 16422) | 0;
 HEAP32[33058] = _glGetAttribLocation($17 | 0, 16431) | 0;
 HEAP32[33059] = _glGetAttribLocation($17 | 0, 16438) | 0;
 HEAP32[33068] = _glGetAttribLocation($17 | 0, 16441) | 0;
 HEAP32[33069] = _glGetAttribLocation($17 | 0, 16444) | 0;
 HEAP32[33060] = _glGetUniformLocation($17 | 0, 16454) | 0;
 HEAP32[33061] = _glGetUniformLocation($17 | 0, 16461) | 0;
 HEAP32[33064] = _glGetUniformLocation($17 | 0, 16469) | 0;
 HEAP32[33065] = _glGetUniformLocation($17 | 0, 16481) | 0;
 HEAP32[33066] = _glGetUniformLocation($17 | 0, 16490) | 0;
 HEAP32[33067] = _glGetUniformLocation($17 | 0, 16503) | 0;
 HEAP32[33062] = _glGetUniformLocation($17 | 0, 16509) | 0;
 HEAP32[33063] = _glGetUniformLocation($17 | 0, 16516) | 0;
 $31 = _load_program(16522, 16547) | 0;
 HEAP32[33070] = $31;
 HEAP32[33071] = _glGetAttribLocation($31 | 0, 16422) | 0;
 HEAP32[33074] = _glGetUniformLocation($31 | 0, 16454) | 0;
 $34 = _load_program(16574, 16599) | 0;
 HEAP32[33084] = $34;
 HEAP32[33085] = _glGetAttribLocation($34 | 0, 16422) | 0;
 HEAP32[33087] = _glGetAttribLocation($34 | 0, 16438) | 0;
 HEAP32[33088] = _glGetUniformLocation($34 | 0, 16454) | 0;
 HEAP32[33089] = _glGetUniformLocation($34 | 0, 16461) | 0;
 HEAP32[33092] = _glGetUniformLocation($34 | 0, 16626) | 0;
 $40 = _load_program(16634, 16658) | 0;
 HEAP32[33098] = $40;
 HEAP32[33099] = _glGetAttribLocation($40 | 0, 16422) | 0;
 HEAP32[33100] = _glGetAttribLocation($40 | 0, 16431) | 0;
 HEAP32[33101] = _glGetAttribLocation($40 | 0, 16438) | 0;
 HEAP32[33102] = _glGetUniformLocation($40 | 0, 16454) | 0;
 HEAP32[33103] = _glGetUniformLocation($40 | 0, 16461) | 0;
 HEAP32[33105] = _glGetUniformLocation($40 | 0, 16516) | 0;
 HEAP32[32714] = 5;
 HEAP32[32715] = 4;
 HEAP32[32717] = 1;
 HEAP32[32732] = 0;
 HEAP32[32733] = 0;
 _mtx_init(130940, 1) | 0;
 _cnd_init(130968) | 0;
 _thrd_create(130936, 2, 130928) | 0;
 HEAP32[32813] = 1;
 HEAP32[32814] = 0;
 _mtx_init(131264, 1) | 0;
 _cnd_init(131292) | 0;
 _thrd_create(131260, 2, 131252) | 0;
 HEAP32[32894] = 2;
 HEAP32[32895] = 0;
 _mtx_init(131588, 1) | 0;
 _cnd_init(131616) | 0;
 _thrd_create(131584, 2, 131576) | 0;
 HEAP32[32975] = 3;
 HEAP32[32976] = 0;
 _mtx_init(131912, 1) | 0;
 _cnd_init(131940) | 0;
 _thrd_create(131908, 2, 131900) | 0;
 _memset(23848, 0, 81920) | 0;
 _memset(122152, 0, 8704) | 0;
 HEAP32[32726] = 6e5;
 _glfwSetTime(2.0e5);
 HEAP32[32727] = 1;
 HEAP32[32720] = 0;
 +_glfwGetTime();
 +_glfwGetTime();
 _make_sphere($0, 1.0, 3);
 HEAP32[33112] = _gen_buffer(49152, $0) | 0;
 HEAP32[33113] = 122152;
 HEAP32[30538] = 12;
 HEAP8[122160] = 0;
 HEAP32[30554] = 0;
 HEAPF32[32724] = 65.0;
 +_glfwGetTime();
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _check_workers() {
 var $$01822$i = 0, $$05257 = 0, $$058 = 0, $0 = 0, $1 = 0, $10 = 0, $22 = 0, $24 = 0, $27 = 0, $34 = 0, $36 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $55 = 0, $59 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $71 = 0, $73 = 0, $77 = 0, $79 = 0, $83 = 0, $85 = 0, $9 = 0, label = 0;
 $$058 = 0;
 do {
  $0 = 130928 + ($$058 * 324 | 0) + 12 | 0;
  _mtx_lock($0) | 0;
  $1 = 130928 + ($$058 * 324 | 0) + 4 | 0;
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   $5 = HEAP32[130928 + ($$058 * 324 | 0) + 88 >> 2] | 0;
   $7 = HEAP32[130928 + ($$058 * 324 | 0) + 92 >> 2] | 0;
   $9 = HEAP32[130928 + ($$058 * 324 | 0) + 96 >> 2] | 0;
   $$01822$i = 0;
   while (1) {
    $10 = 23848 + ($$01822$i * 96 | 0) | 0;
    if (HEAP32[23848 + ($$01822$i * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[$10 >> 2] | 0) == ($5 | 0)) if ((HEAP32[23848 + ($$01822$i * 96 | 0) + 4 >> 2] | 0) == ($7 | 0)) if ((HEAP32[23848 + ($$01822$i * 96 | 0) + 8 >> 2] | 0) == ($9 | 0)) {
     label = 10;
     break;
    }
    $22 = $$01822$i + 1 | 0;
    if ($22 >>> 0 < 1024) $$01822$i = $22; else break;
   }
   if ((label | 0) == 10) {
    label = 0;
    $24 = 130928 + ($$058 * 324 | 0) + 100 | 0;
    HEAP32[23848 + ($$01822$i * 96 | 0) + 80 >> 2] = HEAP32[$24 >> 2];
    $27 = 23848 + ($$01822$i * 96 | 0) + 88 | 0;
    _del_buffer(HEAP32[$27 >> 2] | 0);
    HEAP32[$27 >> 2] = _gen_faces(15, HEAP32[$24 >> 2] | 0, HEAP32[130928 + ($$058 * 324 | 0) + 320 >> 2] | 0) | 0;
    _gen_sign_buffer($10);
   }
   $$05257 = 0;
   do {
    $34 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) >> 2] | 0;
    $36 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) >> 2] | 0;
    if ($34 | 0) {
     _map_free($34);
     _free($34);
    }
    if ($36 | 0) {
     _map_free($36);
     _free($36);
    }
    $40 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 4 >> 2] | 0;
    $42 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 4 >> 2] | 0;
    if ($40 | 0) {
     _map_free($40);
     _free($40);
    }
    if ($42 | 0) {
     _map_free($42);
     _free($42);
    }
    $47 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 8 >> 2] | 0;
    $49 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 8 >> 2] | 0;
    if ($47 | 0) {
     _map_free($47);
     _free($47);
    }
    if ($49 | 0) {
     _map_free($49);
     _free($49);
    }
    $53 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 12 >> 2] | 0;
    $55 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 12 >> 2] | 0;
    if ($53 | 0) {
     _map_free($53);
     _free($53);
    }
    if ($55 | 0) {
     _map_free($55);
     _free($55);
    }
    $59 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 16 >> 2] | 0;
    $61 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 16 >> 2] | 0;
    if ($59 | 0) {
     _map_free($59);
     _free($59);
    }
    if ($61 | 0) {
     _map_free($61);
     _free($61);
    }
    $65 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 20 >> 2] | 0;
    $67 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 20 >> 2] | 0;
    if ($65 | 0) {
     _map_free($65);
     _free($65);
    }
    if ($67 | 0) {
     _map_free($67);
     _free($67);
    }
    $71 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 24 >> 2] | 0;
    $73 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 24 >> 2] | 0;
    if ($71 | 0) {
     _map_free($71);
     _free($71);
    }
    if ($73 | 0) {
     _map_free($73);
     _free($73);
    }
    $77 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 28 >> 2] | 0;
    $79 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 28 >> 2] | 0;
    if ($77 | 0) {
     _map_free($77);
     _free($77);
    }
    if ($79 | 0) {
     _map_free($79);
     _free($79);
    }
    $83 = HEAP32[130928 + ($$058 * 324 | 0) + 104 + ($$05257 * 36 | 0) + 32 >> 2] | 0;
    $85 = HEAP32[130928 + ($$058 * 324 | 0) + 212 + ($$05257 * 36 | 0) + 32 >> 2] | 0;
    if ($83 | 0) {
     _map_free($83);
     _free($83);
    }
    if ($85 | 0) {
     _map_free($85);
     _free($85);
    }
    $$05257 = $$05257 + 1 | 0;
   } while (($$05257 | 0) != 3);
   HEAP32[$1 >> 2] = 0;
  }
  _mtx_unlock($0) | 0;
  $$058 = $$058 + 1 | 0;
 } while (($$058 | 0) != 4);
 return;
}

function _lodepng_add_itext($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $105 = 0, $106 = 0, $11 = 0, $111 = 0, $112 = 0, $115 = 0, $12 = 0, $121 = 0, $17 = 0, $18 = 0, $23 = 0, $24 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $42 = 0, $43 = 0, $46 = 0, $5 = 0, $52 = 0, $59 = 0, $60 = 0, $65 = 0, $66 = 0, $69 = 0, $7 = 0, $75 = 0, $82 = 0, $83 = 0, $88 = 0, $89 = 0, $92 = 0, $98 = 0;
 $5 = $0 + 76 | 0;
 $7 = $0 + 72 | 0;
 $11 = _realloc(HEAP32[$5 >> 2] | 0, (HEAP32[$7 >> 2] << 2) + 4 | 0) | 0;
 $12 = $0 + 80 | 0;
 $17 = _realloc(HEAP32[$12 >> 2] | 0, (HEAP32[$7 >> 2] << 2) + 4 | 0) | 0;
 $18 = $0 + 84 | 0;
 $23 = _realloc(HEAP32[$18 >> 2] | 0, (HEAP32[$7 >> 2] << 2) + 4 | 0) | 0;
 $24 = $0 + 88 | 0;
 $29 = _realloc(HEAP32[$24 >> 2] | 0, (HEAP32[$7 >> 2] << 2) + 4 | 0) | 0;
 if (!(($11 | 0) != 0 & ($17 | 0) != 0 & ($23 | 0) != 0 & ($29 | 0) != 0)) {
  _free($11);
  _free($17);
  _free($23);
  _free($29);
  $$0 = 83;
  return $$0 | 0;
 }
 $34 = HEAP32[$7 >> 2] | 0;
 HEAP32[$7 >> 2] = $34 + 1;
 HEAP32[$5 >> 2] = $11;
 HEAP32[$12 >> 2] = $17;
 HEAP32[$18 >> 2] = $23;
 HEAP32[$24 >> 2] = $29;
 $36 = $11 + ($34 << 2) | 0;
 HEAP32[$36 >> 2] = 0;
 $37 = _realloc(0, 1) | 0;
 if ($37 | 0) {
  HEAP8[$37 >> 0] = 0;
  HEAP32[$36 >> 2] = $37;
 }
 $42 = (HEAP32[$5 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 $43 = _strlen($1) | 0;
 $46 = _realloc(HEAP32[$42 >> 2] | 0, $43 + 1 | 0) | 0;
 if ($46 | 0) {
  HEAP8[$46 + $43 >> 0] = 0;
  HEAP32[$42 >> 2] = $46;
  if ($43 | 0) {
   HEAP8[$46 >> 0] = HEAP8[$1 >> 0] | 0;
   if (($43 | 0) != 1) {
    $52 = 1;
    do {
     HEAP8[(HEAP32[$42 >> 2] | 0) + $52 >> 0] = HEAP8[$1 + $52 >> 0] | 0;
     $52 = $52 + 1 | 0;
    } while (($52 | 0) != ($43 | 0));
   }
  }
 }
 $59 = (HEAP32[$12 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 HEAP32[$59 >> 2] = 0;
 $60 = _realloc(0, 1) | 0;
 if ($60 | 0) {
  HEAP8[$60 >> 0] = 0;
  HEAP32[$59 >> 2] = $60;
 }
 $65 = (HEAP32[$12 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 $66 = _strlen($2) | 0;
 $69 = _realloc(HEAP32[$65 >> 2] | 0, $66 + 1 | 0) | 0;
 if ($69 | 0) {
  HEAP8[$69 + $66 >> 0] = 0;
  HEAP32[$65 >> 2] = $69;
  if ($66 | 0) {
   HEAP8[$69 >> 0] = HEAP8[$2 >> 0] | 0;
   if (($66 | 0) != 1) {
    $75 = 1;
    do {
     HEAP8[(HEAP32[$65 >> 2] | 0) + $75 >> 0] = HEAP8[$2 + $75 >> 0] | 0;
     $75 = $75 + 1 | 0;
    } while (($75 | 0) != ($66 | 0));
   }
  }
 }
 $82 = (HEAP32[$18 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 HEAP32[$82 >> 2] = 0;
 $83 = _realloc(0, 1) | 0;
 if ($83 | 0) {
  HEAP8[$83 >> 0] = 0;
  HEAP32[$82 >> 2] = $83;
 }
 $88 = (HEAP32[$18 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 $89 = _strlen($3) | 0;
 $92 = _realloc(HEAP32[$88 >> 2] | 0, $89 + 1 | 0) | 0;
 if ($92 | 0) {
  HEAP8[$92 + $89 >> 0] = 0;
  HEAP32[$88 >> 2] = $92;
  if ($89 | 0) {
   HEAP8[$92 >> 0] = HEAP8[$3 >> 0] | 0;
   if (($89 | 0) != 1) {
    $98 = 1;
    do {
     HEAP8[(HEAP32[$88 >> 2] | 0) + $98 >> 0] = HEAP8[$3 + $98 >> 0] | 0;
     $98 = $98 + 1 | 0;
    } while (($98 | 0) != ($89 | 0));
   }
  }
 }
 $105 = (HEAP32[$24 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 HEAP32[$105 >> 2] = 0;
 $106 = _realloc(0, 1) | 0;
 if ($106 | 0) {
  HEAP8[$106 >> 0] = 0;
  HEAP32[$105 >> 2] = $106;
 }
 $111 = (HEAP32[$24 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) + -1 << 2) | 0;
 $112 = _strlen($4) | 0;
 $115 = _realloc(HEAP32[$111 >> 2] | 0, $112 + 1 | 0) | 0;
 if (!$115) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[$115 + $112 >> 0] = 0;
 HEAP32[$111 >> 2] = $115;
 if (!$112) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[$115 >> 0] = HEAP8[$4 >> 0] | 0;
 if (($112 | 0) == 1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $121 = 1;
 do {
  HEAP8[(HEAP32[$111 >> 2] | 0) + $121 >> 0] = HEAP8[$4 + $121 >> 0] | 0;
  $121 = $121 + 1 | 0;
 } while (($121 | 0) != ($112 | 0));
 $$0 = 0;
 return $$0 | 0;
}

function _color_tree_add($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $101 = 0, $102 = 0, $103 = 0, $105 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $140 = 0, $141 = 0, $20 = 0, $21 = 0, $23 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $9 = 0, dest = 0, stop = 0;
 $6 = $1 & 255;
 $7 = $2 & 255;
 $8 = $3 & 255;
 $9 = $4 & 255;
 $20 = $0 + (($7 << 2 & 4 | $9 & 1 | $6 << 3 & 8 | $8 << 1 & 2) << 2) | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 if (!$21) {
  $23 = _malloc(68) | 0;
  HEAP32[$20 >> 2] = $23;
  dest = $23;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$23 + 64 >> 2] = -1;
  $36 = $23;
 } else $36 = $21;
 $35 = $36 + (($7 << 1 & 4 | $9 >>> 1 & 1 | $6 << 2 & 8 | $8 & 2) << 2) | 0;
 $37 = HEAP32[$35 >> 2] | 0;
 if (!$37) {
  $39 = _malloc(68) | 0;
  HEAP32[$35 >> 2] = $39;
  dest = $39;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$39 + 64 >> 2] = -1;
  $52 = HEAP32[$35 >> 2] | 0;
 } else $52 = $37;
 $51 = $52 + (($7 & 4 | $9 >>> 2 & 1 | $6 << 1 & 8 | $8 >>> 1 & 2) << 2) | 0;
 $53 = HEAP32[$51 >> 2] | 0;
 if (!$53) {
  $55 = _malloc(68) | 0;
  HEAP32[$51 >> 2] = $55;
  dest = $55;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$55 + 64 >> 2] = -1;
  $68 = HEAP32[$51 >> 2] | 0;
 } else $68 = $53;
 $67 = $68 + (($7 >>> 1 & 4 | $9 >>> 3 & 1 | $6 & 8 | $8 >>> 2 & 2) << 2) | 0;
 $69 = HEAP32[$67 >> 2] | 0;
 if (!$69) {
  $71 = _malloc(68) | 0;
  HEAP32[$67 >> 2] = $71;
  dest = $71;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$71 + 64 >> 2] = -1;
  $85 = HEAP32[$67 >> 2] | 0;
 } else $85 = $69;
 $84 = $85 + (($7 >>> 2 & 4 | $9 >>> 4 & 1 | $6 >>> 1 & 8 | $8 >>> 3 & 2) << 2) | 0;
 $86 = HEAP32[$84 >> 2] | 0;
 if (!$86) {
  $88 = _malloc(68) | 0;
  HEAP32[$84 >> 2] = $88;
  dest = $88;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$88 + 64 >> 2] = -1;
  $102 = HEAP32[$84 >> 2] | 0;
 } else $102 = $86;
 $101 = $102 + (($7 >>> 3 & 4 | $9 >>> 5 & 1 | $6 >>> 2 & 8 | $8 >>> 4 & 2) << 2) | 0;
 $103 = HEAP32[$101 >> 2] | 0;
 if (!$103) {
  $105 = _malloc(68) | 0;
  HEAP32[$101 >> 2] = $105;
  dest = $105;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$105 + 64 >> 2] = -1;
  $119 = HEAP32[$101 >> 2] | 0;
 } else $119 = $103;
 $118 = $119 + (($7 >>> 4 & 4 | $9 >>> 6 & 1 | $6 >>> 3 & 8 | $8 >>> 5 & 2) << 2) | 0;
 $120 = HEAP32[$118 >> 2] | 0;
 if (!$120) {
  $122 = _malloc(68) | 0;
  HEAP32[$118 >> 2] = $122;
  dest = $122;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$122 + 64 >> 2] = -1;
  $135 = HEAP32[$118 >> 2] | 0;
 } else $135 = $120;
 $134 = $135 + (($7 >>> 5 & 4 | $9 >>> 7 | $6 >>> 4 & 8 | $8 >>> 6 & 2) << 2) | 0;
 $136 = HEAP32[$134 >> 2] | 0;
 if ($136 | 0) {
  $141 = $136;
  $140 = $141 + 64 | 0;
  HEAP32[$140 >> 2] = $5;
  return;
 }
 $138 = _malloc(68) | 0;
 HEAP32[$134 >> 2] = $138;
 dest = $138;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$138 + 64 >> 2] = -1;
 $141 = HEAP32[$134 >> 2] | 0;
 $140 = $141 + 64 | 0;
 HEAP32[$140 >> 2] = $5;
 return;
}

function __make_sphere($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0.0, $108 = 0.0, $11 = 0, $111 = 0, $113 = 0.0, $116 = 0, $119 = 0, $12 = 0, $13 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $142 = 0, $143 = 0, $19 = 0, $23 = 0, $41 = 0, $45 = 0, $63 = 0, $67 = 0, $81 = 0.0, $82 = 0.0, $85 = 0.0, $9 = 0, $91 = 0.0, $93 = 0.0, $96 = 0, $98 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 8 | 0;
 $14 = sp;
 if (!$2) {
  HEAPF32[$0 >> 2] = +HEAPF32[$3 >> 2] * $1;
  $19 = $3 + 4 | 0;
  HEAPF32[$0 + 4 >> 2] = +HEAPF32[$19 >> 2] * $1;
  $23 = $3 + 8 | 0;
  HEAPF32[$0 + 8 >> 2] = +HEAPF32[$23 >> 2] * $1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 28 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAPF32[$0 + 32 >> 2] = +HEAPF32[$4 >> 2] * $1;
  $41 = $4 + 4 | 0;
  HEAPF32[$0 + 36 >> 2] = +HEAPF32[$41 >> 2] * $1;
  $45 = $4 + 8 | 0;
  HEAPF32[$0 + 40 >> 2] = +HEAPF32[$45 >> 2] * $1;
  HEAP32[$0 + 44 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$0 + 52 >> 2] = HEAP32[$45 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$0 + 60 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAPF32[$0 + 64 >> 2] = +HEAPF32[$5 >> 2] * $1;
  $63 = $5 + 4 | 0;
  HEAPF32[$0 + 68 >> 2] = +HEAPF32[$63 >> 2] * $1;
  $67 = $5 + 8 | 0;
  HEAPF32[$0 + 72 >> 2] = +HEAPF32[$67 >> 2] * $1;
  HEAP32[$0 + 76 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$63 >> 2];
  HEAP32[$0 + 84 >> 2] = HEAP32[$67 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 92 >> 2] = HEAP32[$8 + 4 >> 2];
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $81 = +HEAPF32[$3 >> 2];
  $82 = +HEAPF32[$4 >> 2];
  HEAPF32[$9 >> 2] = ($81 + $82) * .5;
  $85 = +HEAPF32[$5 >> 2];
  HEAPF32[$10 >> 2] = ($81 + $85) * .5;
  HEAPF32[$11 >> 2] = ($82 + $85) * .5;
  $91 = +HEAPF32[$3 + 4 >> 2];
  $93 = +HEAPF32[$4 + 4 >> 2];
  $96 = $9 + 4 | 0;
  HEAPF32[$96 >> 2] = ($91 + $93) * .5;
  $98 = +HEAPF32[$5 + 4 >> 2];
  $101 = $10 + 4 | 0;
  HEAPF32[$101 >> 2] = ($91 + $98) * .5;
  $104 = $11 + 4 | 0;
  HEAPF32[$104 >> 2] = ($93 + $98) * .5;
  $106 = +HEAPF32[$3 + 8 >> 2];
  $108 = +HEAPF32[$4 + 8 >> 2];
  $111 = $9 + 8 | 0;
  HEAPF32[$111 >> 2] = ($106 + $108) * .5;
  $113 = +HEAPF32[$5 + 8 >> 2];
  $116 = $10 + 8 | 0;
  HEAPF32[$116 >> 2] = ($106 + $113) * .5;
  $119 = $11 + 8 | 0;
  HEAPF32[$119 >> 2] = ($108 + $113) * .5;
  _normalize($9, $96, $111);
  _normalize($10, $101, $116);
  _normalize($11, $104, $119);
  HEAPF32[$12 >> 2] = 0.0;
  HEAPF32[$12 + 4 >> 2] = 1.0 - +Math_acos(+(+HEAPF32[$96 >> 2])) / 3.1415927410125732;
  HEAPF32[$13 >> 2] = 0.0;
  HEAPF32[$13 + 4 >> 2] = 1.0 - +Math_acos(+(+HEAPF32[$101 >> 2])) / 3.1415927410125732;
  HEAPF32[$14 >> 2] = 0.0;
  HEAPF32[$14 + 4 >> 2] = 1.0 - +Math_acos(+(+HEAPF32[$104 >> 2])) / 3.1415927410125732;
  $135 = $2 + -1 | 0;
  $136 = __make_sphere($0, $1, $135, $3, $9, $10, $6, $12, $13) | 0;
  $138 = $0 + ($136 * 24 << 2) | 0;
  $139 = __make_sphere($138, $1, $135, $4, $11, $9, $7, $14, $12) | 0;
  $142 = $138 + ($139 * 24 << 2) | 0;
  $143 = __make_sphere($142, $1, $135, $5, $10, $11, $8, $13, $14) | 0;
  $$0 = $139 + $136 + $143 + (__make_sphere($142 + ($143 * 24 << 2) | 0, $1, $135, $9, $11, $10, $12, $14, $13) | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _lodepng_error_text($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 do switch ($0 | 0) {
 case 0:
  {
   $$0 = 20626;
   break;
  }
 case 1:
  {
   $$0 = 20609;
   break;
  }
 case 10:
  {
   $$0 = 20556;
   break;
  }
 case 11:
  {
   $$0 = 20500;
   break;
  }
 case 13:
  {
   $$0 = 20453;
   break;
  }
 case 14:
  {
   $$0 = 20453;
   break;
  }
 case 15:
  {
   $$0 = 20453;
   break;
  }
 case 16:
  {
   $$0 = 20398;
   break;
  }
 case 17:
  {
   $$0 = 20202;
   break;
  }
 case 18:
  {
   $$0 = 20360;
   break;
  }
 case 19:
  {
   $$0 = 20202;
   break;
  }
 case 20:
  {
   $$0 = 20305;
   break;
  }
 case 21:
  {
   $$0 = 20251;
   break;
  }
 case 22:
  {
   $$0 = 20202;
   break;
  }
 case 23:
  {
   $$0 = 20154;
   break;
  }
 case 24:
  {
   $$0 = 20124;
   break;
  }
 case 25:
  {
   $$0 = 20082;
   break;
  }
 case 26:
  {
   $$0 = 20021;
   break;
  }
 case 27:
  {
   $$0 = 19983;
   break;
  }
 case 28:
  {
   $$0 = 19933;
   break;
  }
 case 29:
  {
   $$0 = 19897;
   break;
  }
 case 30:
  {
   $$0 = 19841;
   break;
  }
 case 31:
  {
   $$0 = 19811;
   break;
  }
 case 32:
  {
   $$0 = 19780;
   break;
  }
 case 33:
  {
   $$0 = 19754;
   break;
  }
 case 34:
  {
   $$0 = 19725;
   break;
  }
 case 35:
  {
   $$0 = 19665;
   break;
  }
 case 36:
  {
   $$0 = 19629;
   break;
  }
 case 37:
  {
   $$0 = 19585;
   break;
  }
 case 38:
  {
   $$0 = 19562;
   break;
  }
 case 39:
  {
   $$0 = 19479;
   break;
  }
 case 40:
  {
   $$0 = 19433;
   break;
  }
 case 41:
  {
   $$0 = 19393;
   break;
  }
 case 42:
  {
   $$0 = 19328;
   break;
  }
 case 43:
  {
   $$0 = 19284;
   break;
  }
 case 44:
  {
   $$0 = 19238;
   break;
  }
 case 45:
  {
   $$0 = 19198;
   break;
  }
 case 46:
  {
   $$0 = 19126;
   break;
  }
 case 47:
  {
   $$0 = 19054;
   break;
  }
 case 48:
  {
   $$0 = 19020;
   break;
  }
 case 49:
  {
   $$0 = 18963;
   break;
  }
 case 50:
  {
   $$0 = 18963;
   break;
  }
 case 51:
  {
   $$0 = 18914;
   break;
  }
 case 52:
  {
   $$0 = 18879;
   break;
  }
 case 53:
  {
   $$0 = 18851;
   break;
  }
 case 54:
  {
   $$0 = 18793;
   break;
  }
 case 55:
  {
   $$0 = 18746;
   break;
  }
 case 56:
  {
   $$0 = 18670;
   break;
  }
 case 57:
  {
   $$0 = 18615;
   break;
  }
 case 58:
  {
   $$0 = 18552;
   break;
  }
 case 59:
  {
   $$0 = 18511;
   break;
  }
 case 60:
  {
   $$0 = 18436;
   break;
  }
 case 61:
  {
   $$0 = 18355;
   break;
  }
 case 62:
  {
   $$0 = 18306;
   break;
  }
 case 63:
  {
   $$0 = 18228;
   break;
  }
 case 64:
  {
   $$0 = 18170;
   break;
  }
 case 66:
  {
   $$0 = 18075;
   break;
  }
 case 67:
  {
   $$0 = 17981;
   break;
  }
 case 68:
  {
   $$0 = 17892;
   break;
  }
 case 69:
  {
   $$0 = 17825;
   break;
  }
 case 71:
  {
   $$0 = 17765;
   break;
  }
 case 72:
  {
   $$0 = 17669;
   break;
  }
 case 73:
  {
   $$0 = 17645;
   break;
  }
 case 74:
  {
   $$0 = 17621;
   break;
  }
 case 75:
  {
   $$0 = 17564;
   break;
  }
 case 76:
  {
   $$0 = 17517;
   break;
  }
 case 77:
  {
   $$0 = 17485;
   break;
  }
 case 78:
  {
   $$0 = 17453;
   break;
  }
 case 79:
  {
   $$0 = 17421;
   break;
  }
 case 80:
  {
   $$0 = 17386;
   break;
  }
 case 81:
  {
   $$0 = 17349;
   break;
  }
 case 82:
  {
   $$0 = 17280;
   break;
  }
 case 83:
  {
   $$0 = 17255;
   break;
  }
 case 84:
  {
   $$0 = 17197;
   break;
  }
 case 85:
  {
   $$0 = 17167;
   break;
  }
 case 86:
  {
   $$0 = 17117;
   break;
  }
 case 87:
  {
   $$0 = 17036;
   break;
  }
 case 88:
  {
   $$0 = 16963;
   break;
  }
 case 89:
  {
   $$0 = 16905;
   break;
  }
 default:
  $$0 = 16886;
 } while (0);
 return $$0 | 0;
}

function _make_cube_faces($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = +$15;
 $16 = +$16;
 $17 = +$17;
 $18 = +$18;
 $19 = $19 | 0;
 $20 = $20 | 0;
 var $$0122126 = 0, $$0123124 = 0, $$0128 = 0, $$1125 = 0, $$2 = 0, $121 = 0, $124 = 0, $21 = 0, $22 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $48 = 0, $50 = 0, $51 = 0, $55 = 0.0, $57 = 0.0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $80 = 0, $82 = 0.0, $87 = 0.0, $92 = 0.0, $make_cube_faces$flipped$make_cube_faces$indices = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $21 = sp + 32 | 0;
 $22 = sp;
 HEAP32[$21 >> 2] = $3;
 HEAP32[$21 + 4 >> 2] = $4;
 HEAP32[$21 + 8 >> 2] = $5;
 HEAP32[$21 + 12 >> 2] = $6;
 HEAP32[$21 + 16 >> 2] = $7;
 HEAP32[$21 + 20 >> 2] = $8;
 HEAP32[$22 >> 2] = $9;
 HEAP32[$22 + 4 >> 2] = $10;
 HEAP32[$22 + 8 >> 2] = $11;
 HEAP32[$22 + 12 >> 2] = $12;
 HEAP32[$22 + 16 >> 2] = $13;
 HEAP32[$22 + 20 >> 2] = $14;
 $44 = ($20 | 0) == 0 ? 0 : -6;
 $45 = +($19 | 0);
 $46 = +($4 << 1 | $3 | $5 << 2 | $6 << 3 | $7 << 4 | $8 << 5 | 0);
 $$0122126 = 0;
 $$0128 = $0;
 $48 = $3;
 while (1) {
  if (!$48) $$2 = $$0128; else {
   $50 = HEAP32[$22 + ($$0122126 << 2) >> 2] | 0;
   $51 = ($50 | 0) / 16 | 0;
   $55 = +($50 - ($51 << 4) | 0) * .0625;
   $57 = +($51 | 0) * .0625;
   $make_cube_faces$flipped$make_cube_faces$indices = +HEAPF32[$1 + ($$0122126 << 4) >> 2] + +HEAPF32[$1 + ($$0122126 << 4) + 12 >> 2] > +HEAPF32[$1 + ($$0122126 << 4) + 4 >> 2] + +HEAPF32[$1 + ($$0122126 << 4) + 8 >> 2] ? 720 : 576;
   $70 = HEAP32[304 + ($$0122126 * 12 | 0) >> 2] | 0;
   $72 = HEAP32[304 + ($$0122126 * 12 | 0) + 4 >> 2] | 0;
   $74 = HEAP32[304 + ($$0122126 * 12 | 0) + 8 >> 2] | 0;
   $$0123124 = $44;
   $$1125 = $$0128;
   while (1) {
    $75 = ($$0123124 >>> 31) + $$0123124 | 0;
    $80 = ~~+HEAPF32[$make_cube_faces$flipped$make_cube_faces$indices + ($$0122126 * 24 | 0) + ((($75 | 0) < 0 ? 0 - $75 | 0 : $75) << 2) >> 2];
    $82 = +HEAPF32[16 + ($$0122126 * 48 | 0) + ($80 * 12 | 0) >> 2];
    HEAPF32[$$1125 >> 2] = $82 * $18 + $15;
    $87 = +HEAPF32[16 + ($$0122126 * 48 | 0) + ($80 * 12 | 0) + 4 >> 2];
    HEAPF32[$$1125 + 4 >> 2] = $87 * $18 + $16;
    $92 = +HEAPF32[16 + ($$0122126 * 48 | 0) + ($80 * 12 | 0) + 8 >> 2];
    HEAPF32[$$1125 + 8 >> 2] = $92 * $18 + $17;
    HEAP32[$$1125 + 12 >> 2] = $70;
    HEAP32[$$1125 + 16 >> 2] = $72;
    HEAP32[$$1125 + 20 >> 2] = $74;
    HEAPF32[$$1125 + 24 >> 2] = $55 + (+HEAPF32[384 + ($$0122126 << 5) + ($80 << 3) >> 2] != 0.0 ? .06201171875 : .00048828125);
    HEAPF32[$$1125 + 28 >> 2] = $57 + (+HEAPF32[384 + ($$0122126 << 5) + ($80 << 3) + 4 >> 2] != 0.0 ? .06201171875 : .00048828125);
    HEAP32[$$1125 + 32 >> 2] = HEAP32[$1 + ($$0122126 << 4) + ($80 << 2) >> 2];
    HEAP32[$$1125 + 36 >> 2] = HEAP32[$2 + ($$0122126 << 4) + ($80 << 2) >> 2];
    HEAPF32[$$1125 + 40 >> 2] = $45;
    HEAPF32[$$1125 + 44 >> 2] = $46;
    HEAPF32[$$1125 + 48 >> 2] = $82;
    HEAPF32[$$1125 + 52 >> 2] = $87;
    $121 = $$1125 + 60 | 0;
    HEAPF32[$$1125 + 56 >> 2] = $92;
    if (($$0123124 | 0) < 5) {
     $$0123124 = $$0123124 + 1 | 0;
     $$1125 = $121;
    } else {
     $$2 = $121;
     break;
    }
   }
  }
  $124 = $$0122126 + 1 | 0;
  if (($124 | 0) == 6) break;
  $$0122126 = $124;
  $$0128 = $$2;
  $48 = HEAP32[$21 + ($124 << 2) >> 2] | 0;
 }
 STACKTOP = sp;
 return;
}

function _mat_multiply($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre = 0.0, $$pre48 = 0.0, $$pre50 = 0.0, $$pre52 = 0.0, $$pre54 = 0.0, $$pre56 = 0.0, $$pre58 = 0.0, $$pre60 = 0.0, $$pre62 = 0.0, $$pre63 = 0.0, $$pre65 = 0.0, $$pre67 = 0.0, $$pre69 = 0.0, $10 = 0.0, $101 = 0.0, $105 = 0.0, $109 = 0.0, $14 = 0.0, $141 = 0.0, $145 = 0.0, $149 = 0.0, $153 = 0.0, $18 = 0.0, $22 = 0.0, $3 = 0, $5 = 0.0, $53 = 0.0, $57 = 0.0, $61 = 0.0, $65 = 0.0, $7 = 0.0, $9 = 0.0, $97 = 0.0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp;
 $$pre = +HEAPF32[$1 + 48 >> 2];
 $$pre48 = +HEAPF32[$1 + 4 >> 2];
 $$pre50 = +HEAPF32[$1 + 20 >> 2];
 $$pre52 = +HEAPF32[$1 + 36 >> 2];
 $$pre54 = +HEAPF32[$1 + 52 >> 2];
 $$pre56 = +HEAPF32[$1 + 8 >> 2];
 $$pre58 = +HEAPF32[$1 + 24 >> 2];
 $$pre60 = +HEAPF32[$1 + 40 >> 2];
 $$pre62 = +HEAPF32[$1 + 56 >> 2];
 $$pre63 = +HEAPF32[$1 + 12 >> 2];
 $$pre65 = +HEAPF32[$1 + 28 >> 2];
 $$pre67 = +HEAPF32[$1 + 44 >> 2];
 $$pre69 = +HEAPF32[$1 + 60 >> 2];
 $5 = +HEAPF32[$1 >> 2];
 $7 = +HEAPF32[$1 + 16 >> 2];
 $9 = +HEAPF32[$1 + 32 >> 2];
 $10 = +HEAPF32[$2 >> 2];
 $14 = +HEAPF32[$2 + 4 >> 2];
 $18 = +HEAPF32[$2 + 8 >> 2];
 $22 = +HEAPF32[$2 + 12 >> 2];
 HEAPF32[$3 >> 2] = $5 * $10 + 0.0 + $7 * $14 + $9 * $18 + $$pre * $22;
 HEAPF32[$3 + 4 >> 2] = $$pre48 * $10 + 0.0 + $$pre50 * $14 + $$pre52 * $18 + $$pre54 * $22;
 HEAPF32[$3 + 8 >> 2] = $$pre56 * $10 + 0.0 + $$pre58 * $14 + $$pre60 * $18 + $$pre62 * $22;
 HEAPF32[$3 + 12 >> 2] = $$pre63 * $10 + 0.0 + $$pre65 * $14 + $$pre67 * $18 + $$pre69 * $22;
 $53 = +HEAPF32[$2 + 16 >> 2];
 $57 = +HEAPF32[$2 + 20 >> 2];
 $61 = +HEAPF32[$2 + 24 >> 2];
 $65 = +HEAPF32[$2 + 28 >> 2];
 HEAPF32[$3 + 16 >> 2] = $5 * $53 + 0.0 + $7 * $57 + $9 * $61 + $$pre * $65;
 HEAPF32[$3 + 20 >> 2] = $$pre48 * $53 + 0.0 + $$pre50 * $57 + $$pre52 * $61 + $$pre54 * $65;
 HEAPF32[$3 + 24 >> 2] = $$pre56 * $53 + 0.0 + $$pre58 * $57 + $$pre60 * $61 + $$pre62 * $65;
 HEAPF32[$3 + 28 >> 2] = $$pre63 * $53 + 0.0 + $$pre65 * $57 + $$pre67 * $61 + $$pre69 * $65;
 $97 = +HEAPF32[$2 + 32 >> 2];
 $101 = +HEAPF32[$2 + 36 >> 2];
 $105 = +HEAPF32[$2 + 40 >> 2];
 $109 = +HEAPF32[$2 + 44 >> 2];
 HEAPF32[$3 + 32 >> 2] = $5 * $97 + 0.0 + $7 * $101 + $9 * $105 + $$pre * $109;
 HEAPF32[$3 + 36 >> 2] = $$pre48 * $97 + 0.0 + $$pre50 * $101 + $$pre52 * $105 + $$pre54 * $109;
 HEAPF32[$3 + 40 >> 2] = $$pre56 * $97 + 0.0 + $$pre58 * $101 + $$pre60 * $105 + $$pre62 * $109;
 HEAPF32[$3 + 44 >> 2] = $$pre63 * $97 + 0.0 + $$pre65 * $101 + $$pre67 * $105 + $$pre69 * $109;
 $141 = +HEAPF32[$2 + 48 >> 2];
 $145 = +HEAPF32[$2 + 52 >> 2];
 $149 = +HEAPF32[$2 + 56 >> 2];
 $153 = +HEAPF32[$2 + 60 >> 2];
 HEAPF32[$3 + 48 >> 2] = $5 * $141 + 0.0 + $7 * $145 + $9 * $149 + $$pre * $153;
 HEAPF32[$3 + 52 >> 2] = $$pre48 * $141 + 0.0 + $$pre50 * $145 + $$pre52 * $149 + $$pre54 * $153;
 HEAPF32[$3 + 56 >> 2] = $$pre56 * $141 + 0.0 + $$pre58 * $145 + $$pre60 * $149 + $$pre62 * $153;
 HEAPF32[$3 + 60 >> 2] = $$pre63 * $141 + 0.0 + $$pre65 * $145 + $$pre67 * $149 + $$pre69 * $153;
 dest = $0;
 src = $3;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function ___timedwait_cp($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$us = 0.0, $$138 = 0, $$138$ph = 0, $$138$ph70 = 0, $$138$ph72 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $29 = 0.0, $34 = 0, $38 = 0.0, $42 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select45 = 0.0, $spec$select46$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 $6 = ($3 | 0) != 0;
 if ($6) {
  $7 = $3 + 4 | 0;
  if ((HEAP32[$7 >> 2] | 0) >>> 0 > 999999999) {
   $$138 = 22;
   STACKTOP = sp;
   return $$138 | 0;
  }
  if (___clock_gettime($2 | 0, $5 | 0) | 0) {
   $$138 = 22;
   STACKTOP = sp;
   return $$138 | 0;
  }
  $14 = (HEAP32[$3 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$5 >> 2] = $14;
  $16 = $5 + 4 | 0;
  $18 = (HEAP32[$7 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
  HEAP32[$16 >> 2] = $18;
  $20 = $14 + -1 | 0;
  if (($18 | 0) < 0) {
   HEAP32[$5 >> 2] = $20;
   HEAP32[$16 >> 2] = $18 + 1e9;
   $23 = $20;
  } else $23 = $14;
  if (($23 | 0) < 0) {
   $$138 = 110;
   STACKTOP = sp;
   return $$138 | 0;
  }
 }
 $25 = (_emscripten_is_main_runtime_thread() | 0) != 0;
 $spec$select45 = $25 ? 1.0 : 100.0;
 if ($25) {
  L16 : while (1) {
   if (__pthread_isduecanceled(_pthread_self() | 0) | 0) {
    $$138$ph = 125;
    break;
   }
   _emscripten_main_thread_process_queued_calls();
   if ($6) {
    $29 = +__pthread_msecs_until($3);
    $$0$us = $29 > 100.0 ? 100.0 : $29;
    if (!($29 <= 0.0)) $spec$select46$us = $$0$us > 1.0 ? 1.0 : $$0$us; else {
     $$138$ph = 110;
     break;
    }
   } else $spec$select46$us = $spec$select45;
   $34 = 0 - (_emscripten_futex_wait($0 | 0, $1 | 0, +$spec$select46$us) | 0) | 0;
   switch ($34 | 0) {
   case 110:
    break;
   case 4:
   case 125:
    {
     $$138$ph = $34;
     break L16;
     break;
    }
   default:
    {
     $$138 = 0;
     label = 24;
     break L16;
    }
   }
  }
  if ((label | 0) == 24) {
   STACKTOP = sp;
   return $$138 | 0;
  }
  $$138 = $$138$ph;
  STACKTOP = sp;
  return $$138 | 0;
 }
 if (!$6) {
  L29 : while (1) {
   if (__pthread_isduecanceled(_pthread_self() | 0) | 0) {
    $$138$ph72 = 125;
    break;
   }
   $47 = 0 - (_emscripten_futex_wait($0 | 0, $1 | 0, +$spec$select45) | 0) | 0;
   switch ($47 | 0) {
   case 110:
    break;
   case 4:
   case 125:
    {
     $$138$ph72 = $47;
     break L29;
     break;
    }
   default:
    {
     $$138 = 0;
     label = 24;
     break L29;
    }
   }
  }
  if ((label | 0) == 24) {
   STACKTOP = sp;
   return $$138 | 0;
  }
  $$138 = $$138$ph72;
  STACKTOP = sp;
  return $$138 | 0;
 }
 L37 : while (1) {
  if (__pthread_isduecanceled(_pthread_self() | 0) | 0) {
   $$138$ph70 = 125;
   break;
  }
  $38 = +__pthread_msecs_until($3);
  if ($38 <= 0.0) {
   $$138$ph70 = 110;
   break;
  }
  $42 = 0 - (_emscripten_futex_wait($0 | 0, $1 | 0, +($38 > 100.0 ? 100.0 : $38)) | 0) | 0;
  switch ($42 | 0) {
  case 110:
   break;
  case 4:
  case 125:
   {
    $$138$ph70 = $42;
    break L37;
    break;
   }
  default:
   {
    $$138 = 0;
    label = 24;
    break L37;
   }
  }
 }
 if ((label | 0) == 24) {
  STACKTOP = sp;
  return $$138 | 0;
 }
 $$138 = $$138$ph70;
 STACKTOP = sp;
 return $$138 | 0;
}

function _wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$0$i58 = 0, $$0$lcssa = 0, $$012$lcssa$i = 0, $$01213$i = 0, $$014$i = 0, $$04577 = 0, $$04676 = 0, $$04883 = 0, $$069$ph = 0, $$084 = 0, $$1$lcssa = 0, $$147 = 0, $$17081 = 0, $$179 = 0, $$2 = 0, $$26875 = 0, $$26875$ph = 0, $$271 = 0, $$3 = 0, $12 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $33 = 0, $48 = 0, $52 = 0, $57 = 0, $6 = 0, $61 = 0, $65 = 0, $8 = 0;
 HEAP8[$2 >> 0] = 0;
 $6 = _malloc((_strlen($0) | 0) + 1 | 0) | 0;
 _strcpy($6, $0) | 0;
 $8 = $6 + (_strspn($6, 16876) | 0) | 0;
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$0$lcssa = 0;
  _free($6);
  return $$0$lcssa | 0;
 }
 $12 = $8 + (_strcspn($8, 16876) | 0) | 0;
 if (!(HEAP8[$12 >> 0] | 0)) $$069$ph = $12; else {
  HEAP8[$12 >> 0] = 0;
  $$069$ph = $12 + 1 | 0;
 }
 $16 = $3 + -1 | 0;
 $$04883 = $8;
 $$084 = 0;
 $$17081 = $$069$ph;
 while (1) {
  $18 = $$04883 + (_strspn($$04883, 16879) | 0) | 0;
  if (!(HEAP8[$18 >> 0] | 0)) $$1$lcssa = $$084; else {
   $22 = $18 + (_strcspn($18, 16879) | 0) | 0;
   if (!(HEAP8[$22 >> 0] | 0)) $$26875$ph = $22; else {
    HEAP8[$22 >> 0] = 0;
    $$26875$ph = $22 + 1 | 0;
   }
   $$04577 = $18;
   $$04676 = 0;
   $$179 = $$084;
   $$26875 = $$26875$ph;
   while (1) {
    $26 = _strlen($$04577) | 0;
    if (($26 | 0) > 0) {
     $$01213$i = 0;
     $$014$i = 0;
     while (1) {
      $33 = (HEAP32[10560 + (HEAP8[$$04577 + $$014$i >> 0] << 2) >> 2] | 0) + $$01213$i | 0;
      $$014$i = $$014$i + 1 | 0;
      if (($$014$i | 0) == ($26 | 0)) {
       $$012$lcssa$i = $33;
       break;
      } else $$01213$i = $33;
     }
    } else $$012$lcssa$i = 0;
    do if (!$$04676) {
     $$147 = 0;
     $$2 = $$179;
    } else if (($$012$lcssa$i + $$04676 | 0) > ($1 | 0)) {
     _strncat($2, 16881, $16 - (_strlen($2) | 0) | 0) | 0;
     $$147 = 0;
     $$2 = $$179 + 1 | 0;
     break;
    } else {
     _strncat($2, 16879, $16 - (_strlen($2) | 0) | 0) | 0;
     $$147 = $$04676;
     $$2 = $$179;
     break;
    } while (0);
    _strncat($2, $$04577, $16 - (_strlen($2) | 0) | 0) | 0;
    $$04676 = $$012$lcssa$i + 4 + $$147 | 0;
    $48 = $$26875 + (_strspn($$26875, 16879) | 0) | 0;
    if (!(HEAP8[$48 >> 0] | 0)) {
     $$0$i58 = 0;
     $$3 = $$26875;
    } else {
     $52 = $48 + (_strcspn($48, 16879) | 0) | 0;
     if (!(HEAP8[$52 >> 0] | 0)) {
      $$0$i58 = $48;
      $$3 = $52;
     } else {
      HEAP8[$52 >> 0] = 0;
      $$0$i58 = $48;
      $$3 = $52 + 1 | 0;
     }
    }
    if (!$$0$i58) {
     $$1$lcssa = $$2;
     break;
    } else {
     $$04577 = $$0$i58;
     $$179 = $$2;
     $$26875 = $$3;
    }
   }
  }
  $57 = $$1$lcssa + 1 | 0;
  _strncat($2, 16881, $16 - (_strlen($2) | 0) | 0) | 0;
  $61 = $$17081 + (_strspn($$17081, 16876) | 0) | 0;
  if (!(HEAP8[$61 >> 0] | 0)) {
   $$0$i = 0;
   $$271 = $$17081;
  } else {
   $65 = $61 + (_strcspn($61, 16876) | 0) | 0;
   if (!(HEAP8[$65 >> 0] | 0)) {
    $$0$i = $61;
    $$271 = $65;
   } else {
    HEAP8[$65 >> 0] = 0;
    $$0$i = $61;
    $$271 = $65 + 1 | 0;
   }
  }
  if (!$$0$i) {
   $$0$lcssa = $57;
   break;
  } else {
   $$04883 = $$0$i;
   $$084 = $57;
   $$17081 = $$271;
  }
 }
 _free($6);
 return $$0$lcssa | 0;
}

function _mat_apply($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$040 = 0, $$040$lver$orig = 0, $$sroa$13$039 = 0.0, $$sroa$13$039$lver$orig = 0.0, $10 = 0, $108 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $52 = 0.0, $6 = 0, $64 = 0.0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $9 = 0, $store_forwarded = 0.0, $$sroa$13$039$looptemp = 0.0, $store_forwarded$looptemp = 0.0, $$sroa$13$039$lver$orig$looptemp = 0.0;
 if (($2 | 0) <= 0) return;
 $6 = $0 + ($3 << 2) | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 32 | 0;
 $9 = $1 + 48 | 0;
 $10 = $1 + 4 | 0;
 $11 = $1 + 20 | 0;
 $12 = $1 + 36 | 0;
 $13 = $1 + 52 | 0;
 $14 = $1 + 8 | 0;
 $15 = $1 + 24 | 0;
 $16 = $1 + 40 | 0;
 $17 = $1 + 56 | 0;
 $18 = $1 + 12 | 0;
 $19 = $1 + 28 | 0;
 $20 = $1 + 44 | 0;
 $21 = $1 + 60 | 0;
 if (($4 | 0) == 1) {
  $$040 = 0;
  $$sroa$13$039 = 1.0;
  $store_forwarded = +HEAPF32[$0 + ($3 + 1 << 2) >> 2];
  do {
   $80 = $6 + ((Math_imul($$040, $4) | 0) << 2) | 0;
   $81 = $80 + 4 | 0;
   $82 = +HEAPF32[$80 >> 2];
   $83 = $81 + 4 | 0;
   $84 = +HEAPF32[$83 >> 2];
   $108 = $82 * +HEAPF32[$10 >> 2] + 0.0 + $store_forwarded * +HEAPF32[$11 >> 2] + $84 * +HEAPF32[$12 >> 2] + $$sroa$13$039 * +HEAPF32[$13 >> 2];
   $store_forwarded$looptemp = $store_forwarded;
   $store_forwarded = $82 * +HEAPF32[$14 >> 2] + 0.0 + $store_forwarded * +HEAPF32[$15 >> 2] + $84 * +HEAPF32[$16 >> 2] + $$sroa$13$039 * +HEAPF32[$17 >> 2];
   $$sroa$13$039$looptemp = $$sroa$13$039;
   $$sroa$13$039 = $82 * +HEAPF32[$18 >> 2] + 0.0 + $store_forwarded$looptemp * +HEAPF32[$19 >> 2] + $84 * +HEAPF32[$20 >> 2] + $$sroa$13$039 * +HEAPF32[$21 >> 2];
   HEAPF32[$80 >> 2] = $82 * +HEAPF32[$1 >> 2] + 0.0 + $store_forwarded$looptemp * +HEAPF32[$7 >> 2] + $84 * +HEAPF32[$8 >> 2] + $$sroa$13$039$looptemp * +HEAPF32[$9 >> 2];
   HEAPF32[$81 >> 2] = $108;
   HEAPF32[$83 >> 2] = $store_forwarded;
   $$040 = $$040 + 1 | 0;
  } while (($$040 | 0) != ($2 | 0));
  return;
 } else {
  $$040$lver$orig = 0;
  $$sroa$13$039$lver$orig = 1.0;
  do {
   $23 = $6 + ((Math_imul($$040$lver$orig, $4) | 0) << 2) | 0;
   $24 = $23 + 4 | 0;
   $25 = +HEAPF32[$23 >> 2];
   $26 = $24 + 4 | 0;
   $27 = +HEAPF32[$24 >> 2];
   $28 = +HEAPF32[$26 >> 2];
   $52 = $25 * +HEAPF32[$10 >> 2] + 0.0 + $27 * +HEAPF32[$11 >> 2] + $28 * +HEAPF32[$12 >> 2] + $$sroa$13$039$lver$orig * +HEAPF32[$13 >> 2];
   $64 = $25 * +HEAPF32[$14 >> 2] + 0.0 + $27 * +HEAPF32[$15 >> 2] + $28 * +HEAPF32[$16 >> 2] + $$sroa$13$039$lver$orig * +HEAPF32[$17 >> 2];
   $$sroa$13$039$lver$orig$looptemp = $$sroa$13$039$lver$orig;
   $$sroa$13$039$lver$orig = $25 * +HEAPF32[$18 >> 2] + 0.0 + $27 * +HEAPF32[$19 >> 2] + $28 * +HEAPF32[$20 >> 2] + $$sroa$13$039$lver$orig * +HEAPF32[$21 >> 2];
   HEAPF32[$23 >> 2] = $25 * +HEAPF32[$1 >> 2] + 0.0 + $27 * +HEAPF32[$7 >> 2] + $28 * +HEAPF32[$8 >> 2] + $$sroa$13$039$lver$orig$looptemp * +HEAPF32[$9 >> 2];
   HEAPF32[$24 >> 2] = $52;
   HEAPF32[$26 >> 2] = $64;
   $$040$lver$orig = $$040$lver$orig + 1 | 0;
  } while (($$040$lver$orig | 0) != ($2 | 0));
  return;
 }
}

function _run_frame() {
 var $0 = 0, $10 = 0, $18 = 0, $2 = 0, $30 = 0, $36 = 0, $43 = 0.0, $47 = 0.0, $49 = 0, $55 = 0, $57 = 0, $60 = 0.0, $64 = 0, $65 = 0.0, $69 = 0, $70 = 0.0, $74 = 0, $8 = 0, $80 = 0, $82 = 0, $93 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $0 = sp;
 $2 = sp + 1084 | 0;
 _glfwGetWindowSize(HEAP32[32731] | 0, $0 | 0, sp + 1088 | 0);
 _glfwGetFramebufferSize(HEAP32[32731] | 0, $2 | 0, sp + 1080 | 0);
 $8 = (HEAP32[$2 >> 2] | 0) / (HEAP32[$0 >> 2] | 0) | 0;
 $10 = ($8 | 0) > 1 ? $8 : 1;
 HEAP32[32722] = ($10 | 0) < 2 ? $10 : 2;
 _glfwGetFramebufferSize(HEAP32[32731] | 0, 130872, 130876);
 _glViewport(0, 0, HEAP32[32718] | 0, HEAP32[32719] | 0);
 if (HEAP32[32727] | 0) {
  HEAP32[32727] = 0;
  +_glfwGetTime();
  +_glfwGetTime();
  HEAP32[5956] = 0;
  HEAP32[5957] = 0;
  HEAP32[5958] = 0;
  HEAP32[5959] = 0;
 }
 _update_fps(23824);
 +_glfwGetTime();
 _gen_player_buffers();
 _glClear(16384);
 _glClear(256);
 $18 = HEAP32[33112] | 0;
 _set_matrix_3d($0, HEAP32[32718] | 0, HEAP32[32719] | 0, 0.0, 0.0, 0.0, +HEAPF32[30551], +HEAPF32[30552], +HEAPF32[32724], 0, HEAP32[32715] | 0);
 _glUseProgram(HEAP32[33098] | 0);
 _glUniformMatrix4fv(HEAP32[33102] | 0, 1, 0, $0 | 0);
 _glUniform1i(HEAP32[33103] | 0, 2);
 $30 = HEAP32[32726] | 0;
 _glUniform1f(HEAP32[33105] | 0, +(+((HEAP32[32725] | 0) % ($30 | 0) | 0 | 0) / +($30 | 0)));
 _draw_triangles_3d(132392, $18, 1536);
 _glClear(256);
 $36 = _render_chunks(132224, HEAP32[33113] | 0) | 0;
 _render_signs(132336, HEAP32[33113] | 0);
 _render_players(132224, HEAP32[33113] | 0);
 _render_wireframe(132280, HEAP32[33113] | 0);
 _glClear(256);
 _render_crosshairs(132280);
 _render_item(132224, HEAP32[30539] | 0);
 $43 = +((HEAP32[32722] | 0) * 12 | 0);
 $47 = +(HEAP32[32719] | 0) - $43;
 $49 = HEAP32[32726] | 0;
 $55 = ~~(+((HEAP32[32725] | 0) % ($49 | 0) | 0 | 0) / +($49 | 0) * 24.0);
 $57 = ($55 | 0) % 12 | 0;
 $60 = +HEAPF32[30548];
 $64 = ~~+Math_floor(+(+_llvm_round_f32(+$60) * .03125));
 $65 = +HEAPF32[30550];
 $69 = ~~+Math_floor(+(+_llvm_round_f32(+$65) * .03125));
 $70 = +HEAPF32[30549];
 $74 = ~~+Math_floor(+(+_llvm_round_f32(+$70) * .03125));
 $80 = HEAP32[5956] | 0;
 HEAP32[$vararg_buffer >> 2] = $64;
 HEAP32[$vararg_buffer + 4 >> 2] = $69;
 HEAP32[$vararg_buffer + 8 >> 2] = $74;
 HEAPF64[$vararg_buffer + 16 >> 3] = $60;
 HEAPF64[$vararg_buffer + 24 >> 3] = $70;
 HEAPF64[$vararg_buffer + 32 >> 3] = $65;
 HEAP32[$vararg_buffer + 40 >> 2] = $36 << 1;
 HEAP32[$vararg_buffer + 44 >> 2] = ($57 | 0) == 0 ? 12 : $57;
 HEAP32[$vararg_buffer + 48 >> 2] = ($55 | 0) < 12 ? 97 : 112;
 HEAP32[$vararg_buffer + 52 >> 2] = $80;
 _snprintf($0, 1024, 16684, $vararg_buffer) | 0;
 _render_text(132336, 0, $43 * .5, $47, $43, $0);
 $82 = _player_crosshair(HEAP32[33113] | 0) | 0;
 if (!$82) {
  $93 = HEAP32[32731] | 0;
  _glfwSwapBuffers($93 | 0);
  _glfwPollEvents();
  STACKTOP = sp;
  return;
 }
 _render_text(132336, 1, +(HEAP32[32718] | 0) * .5, +(HEAP32[32719] | 0) * .5 - $43 + -24.0, $43, $82 + 8 | 0);
 $93 = HEAP32[32731] | 0;
 _glfwSwapBuffers($93 | 0);
 _glfwPollEvents();
 STACKTOP = sp;
 return;
}

function _make_character_3d($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $13 = 0.0, $18 = 0.0, $22 = 0.0, $26 = 0.0, $30 = 0.0, $8 = 0, $9 = 0;
 $8 = ($6 << 24 >> 24) + -32 | 0;
 $9 = ($8 | 0) / 16 | 0;
 $13 = +($8 - ($9 << 4) | 0) * .0625;
 $18 = 1.0 - +($9 + 1 | 0) * .0625 * 2.0;
 $22 = +HEAPF32[2192 + ($5 * 12 | 0) >> 2] * .5 + $1;
 $26 = +HEAPF32[2192 + ($5 * 12 | 0) + 4 >> 2] * .5 + $2;
 $30 = +HEAPF32[2192 + ($5 * 12 | 0) + 8 >> 2] * .5 + $3;
 HEAPF32[$0 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) >> 2] * $4;
 HEAPF32[$0 + 4 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 4 >> 2] * $4;
 HEAPF32[$0 + 8 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 8 >> 2] * $4;
 HEAPF32[$0 + 12 >> 2] = $13 + (($5 + -1 | 0) >>> 0 < 2 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 16 >> 2] = $18 + (($5 + -5 | 0) >>> 0 < 3 ? .10000000149011612 : .02500000037252903);
 HEAPF32[$0 + 20 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) + 12 >> 2] * $4;
 HEAPF32[$0 + 24 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 16 >> 2] * $4;
 HEAPF32[$0 + 28 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 20 >> 2] * $4;
 HEAPF32[$0 + 32 >> 2] = $13 + (($5 + -1 | 0) >>> 0 > 1 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 36 >> 2] = $18 + ($5 >>> 0 < 3 ? .10000000149011612 : .02500000037252903);
 HEAPF32[$0 + 40 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) + 24 >> 2] * $4;
 HEAPF32[$0 + 44 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 28 >> 2] * $4;
 HEAPF32[$0 + 48 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 32 >> 2] * $4;
 HEAPF32[$0 + 52 >> 2] = $13 + (($5 + -3 | 0) >>> 0 < 5 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 56 >> 2] = $18 + (($5 + -1 | 0) >>> 0 > 1 ? .10000000149011612 : .02500000037252903);
 HEAPF32[$0 + 60 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) + 36 >> 2] * $4;
 HEAPF32[$0 + 64 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 40 >> 2] * $4;
 HEAPF32[$0 + 68 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 44 >> 2] * $4;
 HEAPF32[$0 + 72 >> 2] = $13 + (($5 + -1 | 0) >>> 0 < 2 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 76 >> 2] = $18 + (($5 + -5 | 0) >>> 0 < 3 ? .10000000149011612 : .02500000037252903);
 HEAPF32[$0 + 80 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) + 48 >> 2] * $4;
 HEAPF32[$0 + 84 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 52 >> 2] * $4;
 HEAPF32[$0 + 88 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 56 >> 2] * $4;
 HEAPF32[$0 + 92 >> 2] = $13 + ($5 >>> 0 < 5 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 96 >> 2] = $18 + (($5 + -1 | 0) >>> 0 < 4 ? .10000000149011612 : .02500000037252903);
 HEAPF32[$0 + 100 >> 2] = $22 + +HEAPF32[1616 + ($5 * 72 | 0) + 60 >> 2] * $4;
 HEAPF32[$0 + 104 >> 2] = $26 + +HEAPF32[1616 + ($5 * 72 | 0) + 64 >> 2] * $4;
 HEAPF32[$0 + 108 >> 2] = $30 + +HEAPF32[1616 + ($5 * 72 | 0) + 68 >> 2] * $4;
 HEAPF32[$0 + 112 >> 2] = $13 + (($5 + -1 | 0) >>> 0 > 3 ? .05000000074505806 : .012500000186264515);
 HEAPF32[$0 + 116 >> 2] = $18 + ($5 >>> 0 < 5 ? .10000000149011612 : .02500000037252903);
 return;
}

function __gen_sign_buffer($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0139159 = 0, $$0140158 = 0.0, $$0142167 = 0, $$0144156 = 0.0, $$0146155 = 0, $$0147166 = 0, $$0148165 = 0, $$0149164 = 0.0, $$0150163 = 0.0, $$0151162 = 0.0, $$1143$lcssa = 0, $$1143157 = 0, $$2 = 0, $$5 = 0, $11 = 0, $13 = 0, $15 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $42 = 0.0, $45 = 0, $57 = 0, $59 = 0, $6 = 0, $65 = 0.0, $66 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $6 = sp;
 $7 = sp + 1024 | 0;
 if ($4 >>> 0 > 7) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = _wrap($5, 64, $6, 1024) | 0;
 $11 = ($9 | 0) < 5 ? $9 : 5;
 $13 = HEAP32[9712 + ($4 << 2) >> 2] | 0;
 $15 = HEAP32[9744 + ($4 << 2) >> 2] | 0;
 $25 = +($11 + -1 | 0) * .15625 * .625;
 $26 = +(HEAP32[9776 + ($4 << 2) >> 2] | 0);
 $27 = +(HEAP32[9808 + ($4 << 2) >> 2] | 0);
 $28 = +(HEAP32[9840 + ($4 << 2) >> 2] | 0);
 $29 = _tokenize($6, 16881, $7) | 0;
 L4 : do if (!$29) $$5 = 0; else {
  $37 = $28 * .1953125;
  $38 = $27 * .1953125;
  $39 = $26 * .1953125;
  $$0142167 = 0;
  $$0147166 = $11;
  $$0148165 = $29;
  $$0149164 = $3 - $25 * $28;
  $$0150163 = $2 - $25 * $27;
  $$0151162 = $1 - $25 * $26;
  while (1) {
   $40 = _strlen($$0148165) | 0;
   $42 = +(_string_width($$0148165) | 0);
   $45 = ~~($42 < 64.0 ? $42 : 64.0);
   L8 : do if (($40 | 0) > 0) {
    $$0139159 = 0;
    $$0140158 = $$0149164 - +(Math_imul($15, $45) | 0) * .015625 * .5;
    $$0144156 = $$0151162 - +(Math_imul($13, $45) | 0) * .015625 * .5;
    $$0146155 = $45;
    $$1143157 = $$0142167;
    while (1) {
     $57 = $$0148165 + $$0139159 | 0;
     $59 = _char_width(HEAP8[$57 >> 0] | 0) | 0;
     $$0146155 = $$0146155 - $59 | 0;
     if (($$0146155 | 0) < 0) {
      $$1143$lcssa = $$1143157;
      break L8;
     }
     $65 = +(Math_imul($59, $13) | 0) * .015625 * .5;
     $66 = $$0144156 + $65;
     $70 = +(Math_imul($59, $15) | 0) * .015625 * .5;
     $71 = $$0140158 + $70;
     $72 = HEAP8[$57 >> 0] | 0;
     if ($72 << 24 >> 24 == 32) $$2 = $$1143157; else {
      _make_character_3d($0 + ($$1143157 * 30 << 2) | 0, $66, $$0150163, $71, .078125, $4, $72);
      $$2 = $$1143157 + 1 | 0;
     }
     $$0139159 = $$0139159 + 1 | 0;
     if (($$0139159 | 0) >= ($40 | 0)) {
      $$1143$lcssa = $$2;
      break;
     } else {
      $$0140158 = $70 + $71;
      $$0144156 = $65 + $66;
      $$1143157 = $$2;
     }
    }
   } else $$1143$lcssa = $$0142167; while (0);
   $$0148165 = _tokenize(0, 16881, $7) | 0;
   if (($$0147166 | 0) <= 1) {
    $$5 = $$1143$lcssa;
    break L4;
   }
   if (!$$0148165) {
    $$5 = $$1143$lcssa;
    break;
   } else {
    $$0142167 = $$1143$lcssa;
    $$0147166 = $$0147166 + -1 | 0;
    $$0149164 = $37 + $$0149164;
    $$0150163 = $38 + $$0150163;
    $$0151162 = $39 + $$0151162;
   }
  }
 } while (0);
 $$0 = $$5;
 STACKTOP = sp;
 return $$0 | 0;
}

function _render_wireframe($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $58 = 0, $65 = 0, $72 = 0, $73 = 0, $8 = 0, $80 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp;
 $3 = sp + 72 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 64 | 0;
 $8 = $1 + 40 | 0;
 $10 = $1 + 44 | 0;
 $12 = $1 + 48 | 0;
 $14 = $1 + 52 | 0;
 $16 = $1 + 56 | 0;
 _set_matrix_3d($2, HEAP32[32718] | 0, HEAP32[32719] | 0, +HEAPF32[$8 >> 2], +HEAPF32[$10 >> 2], +HEAPF32[$12 >> 2], +HEAPF32[$14 >> 2], +HEAPF32[$16 >> 2], +HEAPF32[32724], HEAP32[32723] | 0, HEAP32[32715] | 0);
 if (!(_is_obstacle(_hit_test(0, +HEAPF32[$8 >> 2], +HEAPF32[$10 >> 2], +HEAPF32[$12 >> 2], +HEAPF32[$14 >> 2], +HEAPF32[$16 >> 2], $3, $4, $5) | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 switch (HEAP32[32720] | 0) {
 case 0:
  {
   __render_wireframe($0, $2, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   $33 = HEAP32[$3 >> 2] | 0;
   $34 = HEAP32[$4 >> 2] | 0;
   $35 = HEAP32[$5 >> 2] | 0;
   $36 = $35 + -1 | 0;
   $37 = $33 + -1 | 0;
   __render_wireframe($0, $2, $37, $34, $36);
   __render_wireframe($0, $2, $37, $34, $35);
   $38 = $35 + 1 | 0;
   __render_wireframe($0, $2, $37, $34, $38);
   __render_wireframe($0, $2, $33, $34, $36);
   __render_wireframe($0, $2, $33, $34, $35);
   __render_wireframe($0, $2, $33, $34, $38);
   $39 = $33 + 1 | 0;
   __render_wireframe($0, $2, $39, $34, $36);
   __render_wireframe($0, $2, $39, $34, $35);
   __render_wireframe($0, $2, $39, $34, $38);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   $40 = HEAP32[$3 >> 2] | 0;
   $41 = HEAP32[$4 >> 2] | 0;
   $42 = HEAP32[$5 >> 2] | 0;
   $43 = $41 + -1 | 0;
   $44 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + ((($44 | 0) == 1) << 31 >> 31) | 0, $43, $42 + ((($44 | 0) == 0) << 31 >> 31) | 0);
   __render_wireframe($0, $2, $40, $43, $42);
   $51 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + (($51 | 0) == 1 & 1) | 0, $43, $42 + (($51 | 0) == 0 & 1) | 0);
   $58 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + ((($58 | 0) == 1) << 31 >> 31) | 0, $41, $42 + ((($58 | 0) == 0) << 31 >> 31) | 0);
   __render_wireframe($0, $2, $40, $41, $42);
   $65 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + (($65 | 0) == 1 & 1) | 0, $41, $42 + (($65 | 0) == 0 & 1) | 0);
   $72 = $41 + 1 | 0;
   $73 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + ((($73 | 0) == 1) << 31 >> 31) | 0, $72, $42 + ((($73 | 0) == 0) << 31 >> 31) | 0);
   __render_wireframe($0, $2, $40, $72, $42);
   $80 = HEAP32[32721] | 0;
   __render_wireframe($0, $2, $40 + (($80 | 0) == 1 & 1) | 0, $72, $42 + (($80 | 0) == 0 & 1) | 0);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _render_chunks($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0.0, $$05556 = 0, $$057 = 0, $$1 = 0, $10 = 0, $100 = 0, $102 = 0, $11 = 0.0, $110 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $21 = 0, $23 = 0, $27 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $75 = 0, $84 = 0, $85 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $2 = sp + 96 | 0;
 $3 = sp;
 _ensure_chunks($1);
 $4 = $1 + 40 | 0;
 $5 = +HEAPF32[$4 >> 2];
 $9 = ~~+Math_floor(+(+_llvm_round_f32(+$5) * .03125));
 $10 = $1 + 48 | 0;
 $11 = +HEAPF32[$10 >> 2];
 $15 = ~~+Math_floor(+(+_llvm_round_f32(+$11) * .03125));
 $16 = $1 + 44 | 0;
 $17 = +HEAPF32[$16 >> 2];
 $21 = ~~+Math_floor(+(+_llvm_round_f32(+$17) * .03125));
 $23 = HEAP32[32726] | 0;
 $27 = +((HEAP32[32725] | 0) % ($23 | 0) | 0 | 0) / +($23 | 0);
 if ($27 < .5) $$0$i = 1.0 / (+_llvm_exp2_f32(+-(($27 + -.25) * 100.0)) + 1.0); else $$0$i = 1.0 - 1.0 / (+_llvm_exp2_f32(+-(($27 + -.8500000238418579) * 100.0)) + 1.0);
 _set_matrix_3d($2, HEAP32[32718] | 0, HEAP32[32719] | 0, $5, $17, $11, +HEAPF32[$1 + 52 >> 2], +HEAPF32[$1 + 56 >> 2], +HEAPF32[32724], HEAP32[32723] | 0, HEAP32[32715] | 0);
 _frustum_planes($3, HEAP32[32715] | 0, $2);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $2 | 0);
 _glUniform3f(HEAP32[$0 + 24 >> 2] | 0, +(+HEAPF32[$4 >> 2]), +(+HEAPF32[$16 >> 2]), +(+HEAPF32[$10 >> 2]));
 _glUniform1i(HEAP32[$0 + 20 >> 2] | 0, 0);
 _glUniform1i(HEAP32[$0 + 32 >> 2] | 0, 2);
 _glUniform1f(HEAP32[$0 + 36 >> 2] | 0, +$$0$i);
 _glUniform1f(HEAP32[$0 + 40 >> 2] | 0, +(+(HEAP32[32715] << 5 | 0)));
 _glUniform1i(HEAP32[$0 + 44 >> 2] | 0, HEAP32[32723] | 0);
 $75 = HEAP32[32726] | 0;
 _glUniform1f(HEAP32[$0 + 28 >> 2] | 0, +(+((HEAP32[32725] | 0) % ($75 | 0) | 0 | 0) / +($75 | 0)));
 $$05556 = 0;
 $$057 = 0;
 while (1) {
  if (!(HEAP32[23848 + ($$05556 * 96 | 0) + 12 >> 2] | 0)) $$1 = $$057; else {
   $84 = HEAP32[23848 + ($$05556 * 96 | 0) >> 2] | 0;
   $85 = $84 - $9 | 0;
   $88 = ($85 | 0) < 0 ? 0 - $85 | 0 : $85;
   $90 = HEAP32[23848 + ($$05556 * 96 | 0) + 4 >> 2] | 0;
   $91 = $90 - $15 | 0;
   $94 = ($91 | 0) < 0 ? 0 - $91 | 0 : $91;
   $96 = HEAP32[23848 + ($$05556 * 96 | 0) + 8 >> 2] | 0;
   $97 = $96 - $21 | 0;
   $100 = ($97 | 0) < 0 ? 0 - $97 | 0 : $97;
   $102 = ($88 | 0) > ($94 | 0) ? $88 : $94;
   if (((($102 | 0) > ($100 | 0) ? $102 : $100) | 0) > (HEAP32[32715] | 0)) $$1 = $$057; else if (!(_chunk_visible($3, $84, $90, $96) | 0)) $$1 = $$057; else {
    $110 = 23848 + ($$05556 * 96 | 0) + 80 | 0;
    _draw_triangles_3d_ao($0, HEAP32[23848 + ($$05556 * 96 | 0) + 88 >> 2] | 0, (HEAP32[$110 >> 2] | 0) * 6 | 0);
    $$1 = (HEAP32[$110 >> 2] | 0) + $$057 | 0;
   }
  }
  $$05556 = $$05556 + 1 | 0;
  if (($$05556 | 0) == 1024) break; else $$057 = $$1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _getPixelColorRGBA16($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $107 = 0, $11 = 0, $119 = 0, $12 = 0, $17 = 0, $21 = 0, $34 = 0, $35 = 0, $40 = 0, $46 = 0, $51 = 0, $57 = 0, $62 = 0, $97 = 0;
 if ((HEAP32[$6 + 4 >> 2] | 0) != 16) {
  $$0 = 85;
  return $$0 | 0;
 }
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   $11 = $5 << 1;
   $12 = $4 + $11 | 0;
   $17 = $4 + ($11 | 1) | 0;
   $21 = ((HEAPU8[$12 >> 0] | 0) << 8 | (HEAPU8[$17 >> 0] | 0)) & 65535;
   HEAP16[$2 >> 1] = $21;
   HEAP16[$1 >> 1] = $21;
   HEAP16[$0 >> 1] = $21;
   if (HEAP32[$6 + 16 >> 2] | 0) if (((HEAPU8[$12 >> 0] | 0) << 8 | (HEAPU8[$17 >> 0] | 0) | 0) == (HEAP32[$6 + 20 >> 2] | 0)) {
    HEAP16[$3 >> 1] = 0;
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP16[$3 >> 1] = -1;
   $$0 = 0;
   return $$0 | 0;
  }
 case 2:
  {
   $34 = $5 * 6 | 0;
   $35 = $4 + $34 | 0;
   $40 = $4 + ($34 | 1) | 0;
   HEAP16[$0 >> 1] = (HEAPU8[$35 >> 0] | 0) << 8 | (HEAPU8[$40 >> 0] | 0);
   $46 = $4 + ($34 + 2) | 0;
   $51 = $4 + ($34 + 3) | 0;
   HEAP16[$1 >> 1] = (HEAPU8[$46 >> 0] | 0) << 8 | (HEAPU8[$51 >> 0] | 0);
   $57 = $4 + ($34 + 4) | 0;
   $62 = $4 + ($34 + 5) | 0;
   HEAP16[$2 >> 1] = (HEAPU8[$57 >> 0] | 0) << 8 | (HEAPU8[$62 >> 0] | 0);
   if (HEAP32[$6 + 16 >> 2] | 0) if (((HEAPU8[$35 >> 0] | 0) << 8 | (HEAPU8[$40 >> 0] | 0) | 0) == (HEAP32[$6 + 20 >> 2] | 0)) if (((HEAPU8[$46 >> 0] | 0) << 8 | (HEAPU8[$51 >> 0] | 0) | 0) == (HEAP32[$6 + 24 >> 2] | 0)) if (((HEAPU8[$57 >> 0] | 0) << 8 | (HEAPU8[$62 >> 0] | 0) | 0) == (HEAP32[$6 + 28 >> 2] | 0)) {
    HEAP16[$3 >> 1] = 0;
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP16[$3 >> 1] = -1;
   $$0 = 0;
   return $$0 | 0;
  }
 case 4:
  {
   $97 = $5 << 2;
   $107 = ((HEAPU8[$4 + $97 >> 0] | 0) << 8 | (HEAPU8[$4 + ($97 | 1) >> 0] | 0)) & 65535;
   HEAP16[$2 >> 1] = $107;
   HEAP16[$1 >> 1] = $107;
   HEAP16[$0 >> 1] = $107;
   HEAP16[$3 >> 1] = (HEAPU8[$4 + ($97 | 2) >> 0] | 0) << 8 | (HEAPU8[$4 + ($97 | 3) >> 0] | 0);
   $$0 = 0;
   return $$0 | 0;
  }
 case 6:
  {
   $119 = $5 << 3;
   HEAP16[$0 >> 1] = (HEAPU8[$4 + $119 >> 0] | 0) << 8 | (HEAPU8[$4 + ($119 | 1) >> 0] | 0);
   HEAP16[$1 >> 1] = (HEAPU8[$4 + ($119 | 2) >> 0] | 0) << 8 | (HEAPU8[$4 + ($119 | 3) >> 0] | 0);
   HEAP16[$2 >> 1] = (HEAPU8[$4 + ($119 | 4) >> 0] | 0) << 8 | (HEAPU8[$4 + ($119 | 5) >> 0] | 0);
   HEAP16[$3 >> 1] = (HEAPU8[$4 + ($119 | 6) >> 0] | 0) << 8 | (HEAPU8[$4 + ($119 | 7) >> 0] | 0);
   $$0 = 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = 85;
   return $$0 | 0;
  }
 }
 return 0;
}

function _lodepng_zlib_decompress($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i = 0, $$021$lcssa$i$i = 0, $$02110$i$i = 0, $$022$lcssa$i$i = 0, $$0229$i$i = 0, $$0248$i$i = 0, $$0257$i$i = 0, $$04$i$i = 0, $$1 = 0, $$1$lcssa$i$i = 0, $$123$lcssa$i$i = 0, $$1232$i$i = 0, $$126$lcssa$i$i = 0, $$1261$i$i = 0, $$13$i$i = 0, $11 = 0, $20 = 0, $21 = 0, $23 = 0, $31 = 0, $48 = 0, $49 = 0, $53 = 0, $6 = 0, $7 = 0;
 if ($3 >>> 0 < 2) {
  $$1 = 53;
  return $$1 | 0;
 }
 $6 = HEAP8[$2 >> 0] | 0;
 $7 = $6 & 255;
 $11 = HEAPU8[$2 + 1 >> 0] | 0;
 if ((($7 << 8 | $11) >>> 0) % 31 | 0 | 0) {
  $$1 = 24;
  return $$1 | 0;
 }
 if ($6 << 24 >> 24 < 0 | ($7 & 15 | 0) != 8) {
  $$1 = 25;
  return $$1 | 0;
 }
 if ($11 & 32 | 0) {
  $$1 = 26;
  return $$1 | 0;
 }
 $20 = $2 + 2 | 0;
 $21 = $3 + -2 | 0;
 $23 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$23) $$0$i = _lodepng_inflate($0, $1, $20, $21, 0) | 0; else $$0$i = FUNCTION_TABLE_iiiiii[$23 & 0]($0, $1, $20, $21, $4) | 0;
 if ($$0$i | 0) {
  $$1 = $$0$i;
  return $$1 | 0;
 }
 if (!(HEAP32[$4 >> 2] | 0)) {
  $31 = $2 + ($3 + -4) | 0;
  $48 = (HEAPU8[$31 + 1 >> 0] | 0) << 16 | (HEAPU8[$31 >> 0] | 0) << 24 | (HEAPU8[$31 + 2 >> 0] | 0) << 8 | (HEAPU8[$31 + 3 >> 0] | 0);
  $49 = HEAP32[$1 >> 2] | 0;
  if (!$49) {
   $$021$lcssa$i$i = 0;
   $$022$lcssa$i$i = 1;
  } else {
   $$02110$i$i = 0;
   $$0229$i$i = 1;
   $$0248$i$i = $49;
   $$0257$i$i = HEAP32[$0 >> 2] | 0;
   while (1) {
    $53 = $$0248$i$i >>> 0 < 5550 ? $$0248$i$i : 5550;
    $$0248$i$i = $$0248$i$i - $53 | 0;
    if (!$53) {
     $$1$lcssa$i$i = $$02110$i$i;
     $$123$lcssa$i$i = $$0229$i$i;
     $$126$lcssa$i$i = $$0257$i$i;
    } else {
     $$04$i$i = $53;
     $$1232$i$i = $$0229$i$i;
     $$1261$i$i = $$0257$i$i;
     $$13$i$i = $$02110$i$i;
     while (1) {
      $$1232$i$i = $$1232$i$i + (HEAPU8[$$1261$i$i >> 0] | 0) | 0;
      $$13$i$i = $$1232$i$i + $$13$i$i | 0;
      $$04$i$i = $$04$i$i + -1 | 0;
      if (!$$04$i$i) break; else $$1261$i$i = $$1261$i$i + 1 | 0;
     }
     $$1$lcssa$i$i = $$13$i$i;
     $$123$lcssa$i$i = $$1232$i$i;
     $$126$lcssa$i$i = $$0257$i$i + $53 | 0;
    }
    $$0229$i$i = ($$123$lcssa$i$i >>> 0) % 65521 | 0;
    $$02110$i$i = ($$1$lcssa$i$i >>> 0) % 65521 | 0;
    if (!$$0248$i$i) break; else $$0257$i$i = $$126$lcssa$i$i;
   }
   $$021$lcssa$i$i = $$02110$i$i << 16;
   $$022$lcssa$i$i = $$0229$i$i;
  }
  if (($$021$lcssa$i$i | $$022$lcssa$i$i | 0) != ($48 | 0)) {
   $$1 = 58;
   return $$1 | 0;
  }
 }
 $$1 = 0;
 return $$1 | 0;
}

function _lodepng_decode_memory($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $43 = 0, $44 = 0, $46 = 0, $7 = 0, $scevgep11$i$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $7 = sp;
 HEAP32[$7 + 24 >> 2] = 1;
 HEAP32[$7 + 28 >> 2] = 1;
 HEAP32[$7 + 32 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 HEAP32[$7 + 16 >> 2] = 0;
 HEAP32[$7 + 20 >> 2] = 0;
 HEAP32[$7 + 36 >> 2] = 2;
 HEAP32[$7 + 40 >> 2] = 1;
 HEAP32[$7 + 44 >> 2] = 2048;
 HEAP32[$7 + 48 >> 2] = 3;
 HEAP32[$7 + 52 >> 2] = 128;
 HEAP32[$7 + 56 >> 2] = 1;
 HEAP32[$7 + 60 >> 2] = 0;
 HEAP32[$7 + 64 >> 2] = 0;
 HEAP32[$7 + 68 >> 2] = 0;
 HEAP32[$7 + 76 >> 2] = 1;
 HEAP32[$7 + 80 >> 2] = 1;
 HEAP32[$7 + 72 >> 2] = 2;
 HEAP32[$7 + 88 >> 2] = 0;
 HEAP32[$7 + 84 >> 2] = 0;
 HEAP32[$7 + 92 >> 2] = 0;
 HEAP32[$7 + 96 >> 2] = 1;
 $27 = $7 + 116 | 0;
 $28 = $7 + 100 | 0;
 HEAP32[$27 >> 2] = 0;
 HEAP32[$27 + 4 >> 2] = 0;
 HEAP32[$27 + 8 >> 2] = 0;
 HEAP32[$27 + 12 >> 2] = 0;
 $29 = $7 + 104 | 0;
 $30 = $7 + 108 | 0;
 HEAP32[$30 >> 2] = 0;
 $31 = $7 + 112 | 0;
 HEAP32[$31 >> 2] = 0;
 $32 = $7 + 160 | 0;
 HEAP32[$32 >> 2] = 0;
 HEAP32[$32 + 4 >> 2] = 0;
 HEAP32[$32 + 8 >> 2] = 0;
 HEAP32[$32 + 12 >> 2] = 0;
 HEAP32[$7 + 144 >> 2] = 6;
 HEAP32[$7 + 148 >> 2] = 8;
 HEAP32[$7 + 152 >> 2] = 0;
 HEAP32[$7 + 156 >> 2] = 0;
 HEAP32[$7 + 140 >> 2] = 0;
 HEAP32[$7 + 132 >> 2] = 0;
 HEAP32[$7 + 136 >> 2] = 0;
 HEAP32[$7 + 252 >> 2] = 0;
 $scevgep11$i$i$i = $7 + 268 | 0;
 HEAP32[$scevgep11$i$i$i >> 2] = 0;
 HEAP32[$scevgep11$i$i$i + 4 >> 2] = 0;
 HEAP32[$scevgep11$i$i$i + 8 >> 2] = 0;
 HEAP32[$scevgep11$i$i$i + 12 >> 2] = 0;
 HEAP32[$scevgep11$i$i$i + 16 >> 2] = 0;
 HEAP32[$scevgep11$i$i$i + 20 >> 2] = 0;
 dest = $7 + 176 | 0;
 stop = dest + 52 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$7 + 292 >> 2] = 1;
 HEAP32[$28 >> 2] = $5;
 HEAP32[$29 >> 2] = $6;
 $43 = _lodepng_decode($0, $1, $2, $7, $3, $4) | 0;
 $44 = HEAP32[$30 >> 2] | 0;
 if (!$44) {
  HEAP32[$30 >> 2] = 0;
  HEAP32[$31 >> 2] = 0;
  $46 = $7 + 132 | 0;
  _lodepng_info_cleanup($46);
  STACKTOP = sp;
  return $43 | 0;
 }
 _free($44);
 HEAP32[$30 >> 2] = 0;
 HEAP32[$31 >> 2] = 0;
 $46 = $7 + 132 | 0;
 _lodepng_info_cleanup($46);
 STACKTOP = sp;
 return $43 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $39 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) if (!$$036$lcssa64) {
   label = 16;
   break;
  } else {
   $39 = $$035$lcssa65;
   break;
  }
  $20 = Math_imul($3, 16843009) | 0;
  L13 : do if ($$036$lcssa64 >>> 0 > 3) {
   $$046 = $$035$lcssa65;
   $$13745 = $$036$lcssa64;
   while (1) {
    $23 = HEAP32[$$046 >> 2] ^ $20;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $$137$lcssa66 = $$13745;
     $$in = $$046;
     break L13;
    }
    $29 = $$046 + 4 | 0;
    $30 = $$13745 + -4 | 0;
    if ($30 >>> 0 > 3) {
     $$046 = $29;
     $$13745 = $30;
    } else {
     $$0$lcssa = $29;
     $$137$lcssa = $30;
     label = 11;
     break;
    }
   }
  } else {
   $$0$lcssa = $$035$lcssa65;
   $$137$lcssa = $$036$lcssa64;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$$137$lcssa) {
   label = 16;
   break;
  } else {
   $$137$lcssa66 = $$137$lcssa;
   $$in = $$0$lcssa;
  }
  $$140 = $$in;
  $$23839 = $$137$lcssa66;
  while (1) {
   if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
    $39 = $$140;
    break L8;
   }
   $$23839 = $$23839 + -1 | 0;
   if (!$$23839) {
    label = 16;
    break;
   } else $$140 = $$140 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $39 = 0;
 return $39 | 0;
}

function ___private_cond_signal($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$024$lcssa = 0, $$02432 = 0, $$026 = 0, $$026$lcssa = 0, $$02631 = 0, $$02634 = 0, $$033 = 0, $$1 = 0, $$125 = 0, $$lcssa30 = 0, $11 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $38 = 0, $39 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 Atomics_store(HEAP32, $2 >> 2, 0) | 0;
 $3 = $0 + 32 | 0;
 if (Atomics_compareExchange(HEAP32, $3 >> 2, 0, 1) | 0) {
  Atomics_compareExchange(HEAP32, $3 >> 2, 1, 2) | 0;
  do ___wait($3, 0, 2, 1); while ((Atomics_compareExchange(HEAP32, $3 >> 2, 0, 2) | 0) != 0);
 }
 $9 = $0 + 20 | 0;
 $$02631 = HEAP32[$9 >> 2] | 0;
 $11 = ($$02631 | 0) != 0;
 if (($1 | 0) != 0 & $11) {
  $$02432 = 0;
  $$02634 = $$02631;
  $$033 = $1;
  while (1) {
   if (!(Atomics_compareExchange(HEAP32, $$02634 + 8 >> 2, 0, 1) | 0)) {
    $$1 = $$033 + -1 | 0;
    $$125 = ($$02432 | 0) == 0 ? $$02634 : $$02432;
   } else {
    Atomics_store(HEAP32, $2 >> 2, (Atomics_load(HEAP32, $2 >> 2) | 0) + 1 | 0) | 0;
    HEAP32[$$02634 + 16 >> 2] = $2;
    $$1 = $$033;
    $$125 = $$02432;
   }
   $$026 = HEAP32[$$02634 >> 2] | 0;
   $22 = ($$026 | 0) != 0;
   if (($$1 | 0) != 0 & $22) {
    $$02432 = $$125;
    $$02634 = $$026;
    $$033 = $$1;
   } else {
    $$024$lcssa = $$125;
    $$026$lcssa = $$026;
    $$lcssa30 = $22;
    break;
   }
  }
 } else {
  $$024$lcssa = 0;
  $$026$lcssa = $$02631;
  $$lcssa30 = $11;
 }
 if ($$lcssa30) {
  $24 = $$026$lcssa + 4 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  if ($25 | 0) HEAP32[$25 >> 2] = 0;
  HEAP32[$24 >> 2] = 0;
 } else HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$9 >> 2] = $$026$lcssa;
 do $28 = Atomics_load(HEAP32, $3 >> 2) | 0; while ((Atomics_compareExchange(HEAP32, $3 >> 2, $28, 0) | 0) != ($28 | 0));
 if (($28 | 0) == 2) _emscripten_futex_wake($3 | 0, 1) | 0;
 $32 = Atomics_load(HEAP32, $2 >> 2) | 0;
 if ($32 | 0) {
  $34 = $32;
  do {
   ___wait($2, 0, $34, 1);
   $34 = Atomics_load(HEAP32, $2 >> 2) | 0;
  } while (($34 | 0) != 0);
 }
 if (!$$024$lcssa) {
  STACKTOP = sp;
  return 0;
 }
 $38 = $$024$lcssa + 12 | 0;
 do $39 = Atomics_load(HEAP32, $38 >> 2) | 0; while ((Atomics_compareExchange(HEAP32, $38 >> 2, $39, 0) | 0) != ($39 | 0));
 if (($39 | 0) != 2) {
  STACKTOP = sp;
  return 0;
 }
 _emscripten_futex_wake($38 | 0, 1) | 0;
 STACKTOP = sp;
 return 0;
}

function _color_tree_cleanup($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  _color_tree_cleanup($1);
  _free(HEAP32[$0 >> 2] | 0);
 }
 $4 = $0 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ($5 | 0) {
  _color_tree_cleanup($5);
  _free(HEAP32[$4 >> 2] | 0);
 }
 $8 = $0 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($9 | 0) {
  _color_tree_cleanup($9);
  _free(HEAP32[$8 >> 2] | 0);
 }
 $12 = $0 + 12 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if ($13 | 0) {
  _color_tree_cleanup($13);
  _free(HEAP32[$12 >> 2] | 0);
 }
 $16 = $0 + 16 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if ($17 | 0) {
  _color_tree_cleanup($17);
  _free(HEAP32[$16 >> 2] | 0);
 }
 $20 = $0 + 20 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 if ($21 | 0) {
  _color_tree_cleanup($21);
  _free(HEAP32[$20 >> 2] | 0);
 }
 $24 = $0 + 24 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 if ($25 | 0) {
  _color_tree_cleanup($25);
  _free(HEAP32[$24 >> 2] | 0);
 }
 $28 = $0 + 28 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 if ($29 | 0) {
  _color_tree_cleanup($29);
  _free(HEAP32[$28 >> 2] | 0);
 }
 $32 = $0 + 32 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 if ($33 | 0) {
  _color_tree_cleanup($33);
  _free(HEAP32[$32 >> 2] | 0);
 }
 $36 = $0 + 36 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 if ($37 | 0) {
  _color_tree_cleanup($37);
  _free(HEAP32[$36 >> 2] | 0);
 }
 $40 = $0 + 40 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 if ($41 | 0) {
  _color_tree_cleanup($41);
  _free(HEAP32[$40 >> 2] | 0);
 }
 $44 = $0 + 44 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 if ($45 | 0) {
  _color_tree_cleanup($45);
  _free(HEAP32[$44 >> 2] | 0);
 }
 $48 = $0 + 48 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 if ($49 | 0) {
  _color_tree_cleanup($49);
  _free(HEAP32[$48 >> 2] | 0);
 }
 $52 = $0 + 52 | 0;
 $53 = HEAP32[$52 >> 2] | 0;
 if ($53 | 0) {
  _color_tree_cleanup($53);
  _free(HEAP32[$52 >> 2] | 0);
 }
 $56 = $0 + 56 | 0;
 $57 = HEAP32[$56 >> 2] | 0;
 if ($57 | 0) {
  _color_tree_cleanup($57);
  _free(HEAP32[$56 >> 2] | 0);
 }
 $60 = $0 + 60 | 0;
 $61 = HEAP32[$60 >> 2] | 0;
 if (!$61) return;
 _color_tree_cleanup($61);
 _free(HEAP32[$60 >> 2] | 0);
 return;
}

function _chunk_visible($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$086100 = 0, $$08799 = 0, $$08998 = 0, $$095101 = 0, $11 = 0.0, $13 = 0.0, $15 = 0.0, $18 = 0.0, $25 = 0.0, $32 = 0.0, $4 = 0, $45 = 0, $49 = 0.0, $5 = 0, $51 = 0.0, $53 = 0.0, $55 = 0.0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp;
 $5 = $1 << 5;
 $7 = $3 << 5;
 $9 = $2 << 5;
 $11 = +($5 + -1 | 0);
 HEAPF32[$4 >> 2] = $11;
 $13 = +($7 + -1 | 0);
 HEAPF32[$4 + 4 >> 2] = $13;
 $15 = +($9 + -1 | 0);
 HEAPF32[$4 + 8 >> 2] = $15;
 $18 = +($5 + 32 | 0);
 HEAPF32[$4 + 12 >> 2] = $18;
 HEAPF32[$4 + 16 >> 2] = $13;
 HEAPF32[$4 + 20 >> 2] = $15;
 HEAPF32[$4 + 24 >> 2] = $11;
 HEAPF32[$4 + 28 >> 2] = $13;
 $25 = +($9 + 32 | 0);
 HEAPF32[$4 + 32 >> 2] = $25;
 HEAPF32[$4 + 36 >> 2] = $18;
 HEAPF32[$4 + 40 >> 2] = $13;
 HEAPF32[$4 + 44 >> 2] = $25;
 HEAPF32[$4 + 48 >> 2] = $11;
 $32 = +($7 + 32 | 0);
 HEAPF32[$4 + 52 >> 2] = $32;
 HEAPF32[$4 + 56 >> 2] = $15;
 HEAPF32[$4 + 60 >> 2] = $18;
 HEAPF32[$4 + 64 >> 2] = $32;
 HEAPF32[$4 + 68 >> 2] = $15;
 HEAPF32[$4 + 72 >> 2] = $11;
 HEAPF32[$4 + 76 >> 2] = $32;
 HEAPF32[$4 + 80 >> 2] = $25;
 HEAPF32[$4 + 84 >> 2] = $18;
 HEAPF32[$4 + 88 >> 2] = $32;
 HEAPF32[$4 + 92 >> 2] = $25;
 $45 = (HEAP32[32723] | 0) == 0 ? 6 : 4;
 $$095101 = 0;
 while (1) {
  $49 = +HEAPF32[$0 + ($$095101 << 4) >> 2];
  $51 = +HEAPF32[$0 + ($$095101 << 4) + 4 >> 2];
  $53 = +HEAPF32[$0 + ($$095101 << 4) + 8 >> 2];
  $55 = +HEAPF32[$0 + ($$095101 << 4) + 12 >> 2];
  $$086100 = 0;
  $$08799 = 0;
  $$08998 = 0;
  do {
   $68 = $55 + ($49 * +HEAPF32[$4 + ($$086100 * 12 | 0) >> 2] + $51 * +HEAPF32[$4 + ($$086100 * 12 | 0) + 4 >> 2] + $53 * +HEAPF32[$4 + ($$086100 * 12 | 0) + 8 >> 2]) < 0.0;
   $$08998 = $$08998 + (($68 ^ 1) & 1) | 0;
   $$08799 = $$08799 + ($68 & 1) | 0;
   $71 = ($$08998 | 0) == 0;
   $$086100 = $$086100 + 1 | 0;
  } while ((($$08799 | 0) == 0 | $71) & $$086100 >>> 0 < 8);
  $$095101 = $$095101 + 1 | 0;
  if ($71) {
   $75 = 0;
   label = 6;
   break;
  }
  if ($$095101 >>> 0 >= $45 >>> 0) {
   $75 = 1;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $75 | 0;
 }
 return 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $27 = $17;
  while (1) {
   if (($27 | 0) < 0) break;
   $$04855 = $$04855 - $27 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $27 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $27 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($27 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _frustum_planes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $12 = 0, $16 = 0, $18 = 0, $22 = 0, $24 = 0, $45 = 0, $5 = 0.0, $50 = 0, $55 = 0, $6 = 0, $60 = 0, $82 = 0, $88 = 0, $94 = 0;
 $5 = +(($1 << 5) + 64 | 0);
 $6 = $2 + 12 | 0;
 HEAPF32[$0 >> 2] = +HEAPF32[$6 >> 2] + +HEAPF32[$2 >> 2];
 $10 = $2 + 28 | 0;
 $12 = $2 + 16 | 0;
 HEAPF32[$0 + 4 >> 2] = +HEAPF32[$10 >> 2] + +HEAPF32[$12 >> 2];
 $16 = $2 + 44 | 0;
 $18 = $2 + 32 | 0;
 HEAPF32[$0 + 8 >> 2] = +HEAPF32[$16 >> 2] + +HEAPF32[$18 >> 2];
 $22 = $2 + 60 | 0;
 $24 = $2 + 48 | 0;
 HEAPF32[$0 + 12 >> 2] = +HEAPF32[$22 >> 2] + +HEAPF32[$24 >> 2];
 HEAPF32[$0 + 16 >> 2] = +HEAPF32[$6 >> 2] - +HEAPF32[$2 >> 2];
 HEAPF32[$0 + 20 >> 2] = +HEAPF32[$10 >> 2] - +HEAPF32[$12 >> 2];
 HEAPF32[$0 + 24 >> 2] = +HEAPF32[$16 >> 2] - +HEAPF32[$18 >> 2];
 HEAPF32[$0 + 28 >> 2] = +HEAPF32[$22 >> 2] - +HEAPF32[$24 >> 2];
 $45 = $2 + 4 | 0;
 HEAPF32[$0 + 32 >> 2] = +HEAPF32[$6 >> 2] + +HEAPF32[$45 >> 2];
 $50 = $2 + 20 | 0;
 HEAPF32[$0 + 36 >> 2] = +HEAPF32[$10 >> 2] + +HEAPF32[$50 >> 2];
 $55 = $2 + 36 | 0;
 HEAPF32[$0 + 40 >> 2] = +HEAPF32[$16 >> 2] + +HEAPF32[$55 >> 2];
 $60 = $2 + 52 | 0;
 HEAPF32[$0 + 44 >> 2] = +HEAPF32[$22 >> 2] + +HEAPF32[$60 >> 2];
 HEAPF32[$0 + 48 >> 2] = +HEAPF32[$6 >> 2] - +HEAPF32[$45 >> 2];
 HEAPF32[$0 + 52 >> 2] = +HEAPF32[$10 >> 2] - +HEAPF32[$50 >> 2];
 HEAPF32[$0 + 56 >> 2] = +HEAPF32[$16 >> 2] - +HEAPF32[$55 >> 2];
 HEAPF32[$0 + 60 >> 2] = +HEAPF32[$22 >> 2] - +HEAPF32[$60 >> 2];
 $82 = $2 + 8 | 0;
 HEAPF32[$0 + 64 >> 2] = +HEAPF32[$6 >> 2] * .125 + +HEAPF32[$82 >> 2];
 $88 = $2 + 24 | 0;
 HEAPF32[$0 + 68 >> 2] = +HEAPF32[$10 >> 2] * .125 + +HEAPF32[$88 >> 2];
 $94 = $2 + 40 | 0;
 HEAPF32[$0 + 72 >> 2] = +HEAPF32[$16 >> 2] * .125 + +HEAPF32[$94 >> 2];
 $100 = $2 + 56 | 0;
 HEAPF32[$0 + 76 >> 2] = +HEAPF32[$22 >> 2] * .125 + +HEAPF32[$100 >> 2];
 HEAPF32[$0 + 80 >> 2] = +HEAPF32[$6 >> 2] * $5 - +HEAPF32[$82 >> 2];
 HEAPF32[$0 + 84 >> 2] = +HEAPF32[$10 >> 2] * $5 - +HEAPF32[$88 >> 2];
 HEAPF32[$0 + 88 >> 2] = +HEAPF32[$16 >> 2] * $5 - +HEAPF32[$94 >> 2];
 HEAPF32[$0 + 92 >> 2] = +HEAPF32[$22 >> 2] * $5 - +HEAPF32[$100 >> 2];
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function ___fdopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $31 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 56 | 0;
 if (!(_strchr(20709, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $8 = _malloc(1156) | 0;
  if (!$8) $$0 = 0; else {
   _memset($8 | 0, 0, 124) | 0;
   if (!(_strchr($1, 43) | 0)) HEAP32[$8 >> 2] = (HEAP8[$1 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr($1, 101) | 0) {
    HEAP32[$vararg_buffer >> 2] = $0;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
   }
   if ((HEAP8[$1 >> 0] | 0) == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $0;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $19 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($19 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $0;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $19 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $24 = HEAP32[$8 >> 2] | 128;
    HEAP32[$8 >> 2] = $24;
    $31 = $24;
   } else $31 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 + 60 >> 2] = $0;
   HEAP32[$8 + 44 >> 2] = $8 + 132;
   HEAP32[$8 + 48 >> 2] = 1024;
   $29 = $8 + 75 | 0;
   HEAP8[$29 >> 0] = -1;
   if (!($31 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $0;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $2;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$29 >> 0] = 10;
   }
   HEAP32[$8 + 32 >> 2] = 5;
   HEAP32[$8 + 36 >> 2] = 1;
   HEAP32[$8 + 40 >> 2] = 2;
   HEAP32[$8 + 12 >> 2] = 1;
   if (!(HEAP32[33253] | 0)) Atomics_store(HEAP32, $8 + 76 >> 2, -1) | 0;
   ___ofl_add($8) | 0;
   $$0 = $8;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _lodepng_add_text($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $59 = 0, $9 = 0;
 $3 = $0 + 64 | 0;
 $5 = $0 + 60 | 0;
 $9 = _realloc(HEAP32[$3 >> 2] | 0, (HEAP32[$5 >> 2] << 2) + 4 | 0) | 0;
 $10 = $0 + 68 | 0;
 $15 = _realloc(HEAP32[$10 >> 2] | 0, (HEAP32[$5 >> 2] << 2) + 4 | 0) | 0;
 if (!(($9 | 0) != 0 & ($15 | 0) != 0)) {
  _free($9);
  _free($15);
  $$0 = 83;
  return $$0 | 0;
 }
 $18 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $18 + 1;
 HEAP32[$3 >> 2] = $9;
 HEAP32[$10 >> 2] = $15;
 $20 = $9 + ($18 << 2) | 0;
 HEAP32[$20 >> 2] = 0;
 $21 = _realloc(0, 1) | 0;
 if ($21 | 0) {
  HEAP8[$21 >> 0] = 0;
  HEAP32[$20 >> 2] = $21;
 }
 $26 = (HEAP32[$3 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) + -1 << 2) | 0;
 $27 = _strlen($1) | 0;
 $30 = _realloc(HEAP32[$26 >> 2] | 0, $27 + 1 | 0) | 0;
 if ($30 | 0) {
  HEAP8[$30 + $27 >> 0] = 0;
  HEAP32[$26 >> 2] = $30;
  if ($27 | 0) {
   HEAP8[$30 >> 0] = HEAP8[$1 >> 0] | 0;
   if (($27 | 0) != 1) {
    $36 = 1;
    do {
     HEAP8[(HEAP32[$26 >> 2] | 0) + $36 >> 0] = HEAP8[$1 + $36 >> 0] | 0;
     $36 = $36 + 1 | 0;
    } while (($36 | 0) != ($27 | 0));
   }
  }
 }
 $43 = (HEAP32[$10 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) + -1 << 2) | 0;
 HEAP32[$43 >> 2] = 0;
 $44 = _realloc(0, 1) | 0;
 if ($44 | 0) {
  HEAP8[$44 >> 0] = 0;
  HEAP32[$43 >> 2] = $44;
 }
 $49 = (HEAP32[$10 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) + -1 << 2) | 0;
 $50 = _strlen($2) | 0;
 $53 = _realloc(HEAP32[$49 >> 2] | 0, $50 + 1 | 0) | 0;
 if (!$53) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[$53 + $50 >> 0] = 0;
 HEAP32[$49 >> 2] = $53;
 if (!$50) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[$53 >> 0] = HEAP8[$2 >> 0] | 0;
 if (($50 | 0) == 1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $59 = 1;
 do {
  HEAP8[(HEAP32[$49 >> 2] | 0) + $59 >> 0] = HEAP8[$2 + $59 >> 0] | 0;
  $59 = $59 + 1 | 0;
 } while (($59 | 0) != ($50 | 0));
 $$0 = 0;
 return $$0 | 0;
}

function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1;
 L1 : do if (!(($2 ^ $0) & 3)) {
  if (!($2 & 3)) {
   $$026$lcssa = $1;
   $$027$lcssa = $0;
  } else {
   $$02642 = $1;
   $$02741 = $0;
   while (1) {
    $9 = HEAP8[$$02642 >> 0] | 0;
    HEAP8[$$02741 >> 0] = $9;
    if (!($9 << 24 >> 24)) {
     $$030 = $$02741;
     break L1;
    }
    $11 = $$02642 + 1 | 0;
    $12 = $$02741 + 1 | 0;
    if (!($11 & 3)) {
     $$026$lcssa = $11;
     $$027$lcssa = $12;
     break;
    } else {
     $$02642 = $11;
     $$02741 = $12;
    }
   }
  }
  $16 = HEAP32[$$026$lcssa >> 2] | 0;
  if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
   $$02536 = $$027$lcssa;
   $$037 = $$026$lcssa;
   $24 = $16;
   while (1) {
    $22 = $$037 + 4 | 0;
    $23 = $$02536 + 4 | 0;
    HEAP32[$$02536 >> 2] = $24;
    $24 = HEAP32[$22 >> 2] | 0;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$0$lcssa = $22;
     $$025$lcssa = $23;
     break;
    } else {
     $$02536 = $23;
     $$037 = $22;
    }
   }
  } else {
   $$0$lcssa = $$026$lcssa;
   $$025$lcssa = $$027$lcssa;
  }
  $$1 = $$0$lcssa;
  $$128 = $$025$lcssa;
  label = 10;
 } else {
  $$1 = $1;
  $$128 = $0;
  label = 10;
 } while (0);
 if ((label | 0) == 10) {
  $31 = HEAP8[$$1 >> 0] | 0;
  HEAP8[$$128 >> 0] = $31;
  if (!($31 << 24 >> 24)) $$030 = $$128; else {
   $$22934 = $$128;
   $$235 = $$1;
   while (1) {
    $$235 = $$235 + 1 | 0;
    $34 = $$22934 + 1 | 0;
    $35 = HEAP8[$$235 >> 0] | 0;
    HEAP8[$34 >> 0] = $35;
    if (!($35 << 24 >> 24)) {
     $$030 = $34;
     break;
    } else $$22934 = $34;
   }
  }
 }
 return $$030 | 0;
}

function ___wait($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $18 = 0, $21 = 0, $22 = 0.0, $4 = 0, $47 = 0, $8 = 0, label = 0;
 $4 = ($1 | 0) == 0;
 L1 : do if ($4) {
  $8 = 99;
  while (1) {
   if ((Atomics_load(HEAP32, $0 >> 2) | 0) != ($2 | 0)) break;
   if (!$8) {
    label = 9;
    break L1;
   } else $8 = $8 + -1 | 0;
  }
  return;
 } else {
  $11 = 99;
  while (1) {
   if (Atomics_load(HEAP32, $1 >> 2) | 0) {
    label = 10;
    break L1;
   }
   if ((Atomics_load(HEAP32, $0 >> 2) | 0) != ($2 | 0)) break;
   if (!$11) {
    label = 9;
    break L1;
   } else $11 = $11 + -1 | 0;
  }
  return;
 } while (0);
 if ((label | 0) == 9) if ($4) $47 = 0; else label = 10;
 if ((label | 0) == 10) {
  Atomics_add(HEAP32, $1 >> 2, 1) | 0;
  $47 = 1;
 }
 $18 = _emscripten_is_main_runtime_thread() | 0;
 L18 : do if ((Atomics_load(HEAP32, $0 >> 2) | 0) == ($2 | 0)) {
  $21 = ($18 | 0) != 0;
  $22 = $21 ? 1.0 : 100.0;
  L20 : do if ($21) while (1) {
   if ((Atomics_load(HEAP32, (_pthread_self() | 0) + 76 >> 2) | 0) == 1) do {
    if (__pthread_isduecanceled(_pthread_self() | 0) | 0) break L20;
    _emscripten_main_thread_process_queued_calls();
   } while ((_emscripten_futex_wait($0 | 0, $2 | 0, +$22) | 0) == -110); else _emscripten_futex_wait($0 | 0, $2 | 0, inf) | 0;
   if ((Atomics_load(HEAP32, $0 >> 2) | 0) != ($2 | 0)) break L18;
  } else while (1) {
   if ((Atomics_load(HEAP32, (_pthread_self() | 0) + 76 >> 2) | 0) == 1) do if (__pthread_isduecanceled(_pthread_self() | 0) | 0) break L20; while ((_emscripten_futex_wait($0 | 0, $2 | 0, +$22) | 0) == -110); else _emscripten_futex_wait($0 | 0, $2 | 0, inf) | 0;
   if ((Atomics_load(HEAP32, $0 >> 2) | 0) != ($2 | 0)) break L18;
  } while (0);
  if (!$47) return;
  Atomics_sub(HEAP32, $1 >> 2, 1) | 0;
  return;
 } while (0);
 if (!$47) return;
 Atomics_sub(HEAP32, $1 >> 2, 1) | 0;
 return;
}

function _noise2($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $13 = 0.0, $14 = 0, $16 = 0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $29 = 0, $3 = 0.0, $31 = 0, $39 = 0, $49 = 0, $5 = 0.0, $59 = 0, $63 = 0.0, $67 = 0.0, $7 = 0.0, $71 = 0.0, $9 = 0.0;
 $3 = ($0 + $1) * .3660254180431366;
 $5 = +Math_floor(+($3 + $0));
 $7 = +Math_floor(+($3 + $1));
 $9 = ($5 + $7) * .21132487058639526;
 $11 = $0 - ($5 - $9);
 $13 = $1 - ($7 - $9);
 $14 = $11 > $13;
 $16 = $11 <= $13;
 $19 = $11 + .4226497411727905 + -1.0;
 $21 = $13 + .4226497411727905 + -1.0;
 $24 = $11 - +($14 & 1) + .21132487058639526;
 $27 = $13 - +($16 & 1) + .21132487058639526;
 $29 = ~~$5 & 255;
 $31 = ~~$7 & 255;
 $39 = ((HEAPU8[12816 + ($29 + (HEAPU8[12816 + $31 >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $49 = ((HEAPU8[12816 + ($29 + ($14 & 1) + (HEAPU8[12816 + ($31 + ($16 & 1)) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $59 = ((HEAPU8[12816 + ($29 + 1 + (HEAPU8[12816 + ($31 + 1) >> 0] | 0)) >> 0] | 0) % 12 | 0) & 255;
 $63 = .5 - $11 * $11 - $13 * $13;
 $67 = .5 - $24 * $24 - $27 * $27;
 $71 = .5 - $19 * $19 - $21 * $21;
 if ($63 > 0.0) $109 = $63 * ($63 * ($63 * $63)) * (+HEAPF32[13328 + ($39 * 12 | 0) >> 2] * $11 + +HEAPF32[13328 + ($39 * 12 | 0) + 4 >> 2] * $13); else $109 = 0.0;
 if ($67 > 0.0) $110 = $67 * ($67 * ($67 * $67)) * (+HEAPF32[13328 + ($49 * 12 | 0) >> 2] * $24 + +HEAPF32[13328 + ($49 * 12 | 0) + 4 >> 2] * $27); else $110 = 0.0;
 if (!($71 > 0.0)) {
  $112 = 0.0;
  $108 = $109 + $110;
  $111 = $108 + $112;
  $113 = $111 * 70.0;
  return +$113;
 }
 $112 = $71 * ($71 * ($71 * $71)) * (+HEAPF32[13328 + ($59 * 12 | 0) >> 2] * $19 + +HEAPF32[13328 + ($59 * 12 | 0) + 4 >> 2] * $21);
 $108 = $109 + $110;
 $111 = $108 + $112;
 $113 = $111 * 70.0;
 return +$113;
}

function _render_signs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$038 = 0, $11 = 0.0, $15 = 0, $17 = 0.0, $2 = 0, $21 = 0, $3 = 0, $39 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0.0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $2 = sp + 96 | 0;
 $3 = sp;
 $5 = +HEAPF32[$1 + 40 >> 2];
 $9 = ~~+Math_floor(+(+_llvm_round_f32(+$5) * .03125));
 $11 = +HEAPF32[$1 + 48 >> 2];
 $15 = ~~+Math_floor(+(+_llvm_round_f32(+$11) * .03125));
 $17 = +HEAPF32[$1 + 44 >> 2];
 $21 = ~~+Math_floor(+(+_llvm_round_f32(+$17) * .03125));
 _set_matrix_3d($2, HEAP32[32718] | 0, HEAP32[32719] | 0, $5, $17, $11, +HEAPF32[$1 + 52 >> 2], +HEAPF32[$1 + 56 >> 2], +HEAPF32[32724], HEAP32[32723] | 0, HEAP32[32715] | 0);
 _frustum_planes($3, HEAP32[32715] | 0, $2);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $2 | 0);
 _glUniform1i(HEAP32[$0 + 20 >> 2] | 0, 3);
 _glUniform1i(HEAP32[$0 + 32 >> 2] | 0, 1);
 $$038 = 0;
 do {
  $39 = 23848 + ($$038 * 96 | 0) | 0;
  if (HEAP32[23848 + ($$038 * 96 | 0) + 12 >> 2] | 0) {
   $43 = HEAP32[$39 >> 2] | 0;
   $44 = $43 - $9 | 0;
   $47 = ($44 | 0) < 0 ? 0 - $44 | 0 : $44;
   $49 = HEAP32[23848 + ($$038 * 96 | 0) + 4 >> 2] | 0;
   $50 = $49 - $15 | 0;
   $53 = ($50 | 0) < 0 ? 0 - $50 | 0 : $50;
   $55 = HEAP32[23848 + ($$038 * 96 | 0) + 8 >> 2] | 0;
   $56 = $55 - $21 | 0;
   $59 = ($56 | 0) < 0 ? 0 - $56 | 0 : $56;
   $61 = ($47 | 0) > ($53 | 0) ? $47 : $53;
   if (((($61 | 0) > ($59 | 0) ? $61 : $59) | 0) <= (HEAP32[32717] | 0)) if (_chunk_visible($3, $43, $49, $55) | 0) _draw_signs($0, $39);
  }
  $$038 = $$038 + 1 | 0;
 } while (($$038 | 0) != 1024);
 STACKTOP = sp;
 return;
}

function _create_world($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0101103 = 0, $$0102104 = 0, $$0105 = 0, $10 = 0, $11 = 0, $13 = 0.0, $16 = 0.0, $19 = 0.0, $21 = 0, $24 = 0.0, $34 = 0, $35 = 0, $38 = 0.0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16384 | 0;
 $5 = sp;
 _memset($5 | 0, 0, 16384) | 0;
 $6 = $0 << 5;
 $7 = $1 << 5;
 $8 = $2 << 5;
 $9 = $6 + -16 | 0;
 $10 = $7 + -16 | 0;
 $$0105 = -16;
 do {
  $11 = $$0105 + $6 | 0;
  $13 = +($11 | 0) * 1.0000000474974513e-03;
  $16 = +(0 - $11 | 0) * 1.0000000474974513e-03;
  $19 = +($11 | 0) * .01;
  $$0102104 = -16;
  do {
   $21 = $$0102104 + $7 | 0;
   $24 = +_simplex2($13, +($21 | 0) * 1.0000000474974513e-03, 5, .5, 3.0);
   $34 = ~~($24 * +(~~(+_simplex2($16, +(0 - $21 | 0) * 1.0000000474974513e-03, 2, .8999999761581421, 4.0) * 32.0 + 16.0) | 0));
   $35 = $34 + -5 | 0;
   $38 = +($21 | 0) * .01;
   $$0101103 = -16;
   do {
    $40 = $$0101103 + $8 | 0;
    do if (($40 | 0) > ($35 | 0)) {
     if (($40 | 0) <= ($34 | 0)) {
      FUNCTION_TABLE_viiiii[$3 & 1]($11, $40, $21, 1, $4);
      break;
     }
     if (($40 & -8 | 0) == 64) if (+_simplex3($19, +($40 | 0) * .1, $38, 8, .5, 2.0) > .75) FUNCTION_TABLE_viiiii[$3 & 1]($11, $40, $21, 16, $4);
    } else FUNCTION_TABLE_viiiii[$3 & 1]($11, $40, $21, 6, $4); while (0);
    $$0101103 = $$0101103 + 1 | 0;
   } while (($$0101103 | 0) != 48);
   _gen_buildings($3, $5, $9, $10, $11, $21, $34, $4);
   _gen_trees($3, $5, $9, $10, $11, $21, $34, $4);
   $$0102104 = $$0102104 + 1 | 0;
  } while (($$0102104 | 0) != 48);
  $$0105 = $$0105 + 1 | 0;
 } while (($$0105 | 0) != 48);
 STACKTOP = sp;
 return;
}

function ___pthread_mutex_trylock_owner($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$154 = 0, $1 = 0, $11 = 0, $12 = 0, $19 = 0, $2 = 0, $24 = 0, $28 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = _pthread_self() | 0;
 $4 = HEAP32[$2 + 52 >> 2] | 0;
 $5 = $0 + 4 | 0;
 $6 = Atomics_load(HEAP32, $5 >> 2) | 0;
 $7 = $6 & 2147483647;
 if (($1 & 3 | 0) == 1 & ($7 | 0) == ($4 | 0)) {
  $11 = $0 + 20 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($12 >>> 0 > 2147483646) {
   $$1 = 11;
   return $$1 | 0;
  }
  HEAP32[$11 >> 2] = $12 + 1;
  $$1 = 0;
  return $$1 | 0;
 }
 if (($7 | 0) == 2147483647) {
  $$1 = 131;
  return $$1 | 0;
 }
 if (!(HEAP32[$0 >> 2] & 128)) $$154 = $4; else {
  $19 = $2 + 172 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) HEAP32[$19 >> 2] = -12;
  $24 = (Atomics_load(HEAP32, $0 + 8 >> 2) | 0) == 0;
  Atomics_store(HEAP32, $2 + 176 >> 2, $0 + 16 | 0) | 0;
  $$154 = $24 ? $4 : $4 | -2147483648;
 }
 $28 = ($7 | 0) != 0;
 if ($28) {
  if (!(($1 & 4 | 0) == 0 | ($6 & 1073741824 | 0) == 0)) label = 11;
 } else label = 11;
 if ((label | 0) == 11) if ((Atomics_compareExchange(HEAP32, $5 >> 2, $6, $$154) | 0) == ($6 | 0)) {
  $36 = $2 + 168 | 0;
  $37 = Atomics_load(HEAP32, $36 >> 2) | 0;
  $38 = $0 + 16 | 0;
  HEAP32[$38 >> 2] = $37;
  HEAP32[$0 + 12 >> 2] = $36;
  if (($37 | 0) != ($36 | 0)) Atomics_store(HEAP32, $37 + -4 >> 2, $38) | 0;
  Atomics_store(HEAP32, $36 >> 2, $38) | 0;
  Atomics_store(HEAP32, $2 + 176 >> 2, 0) | 0;
  if (!$28) {
   $$1 = 0;
   return $$1 | 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 8;
  $$1 = 130;
  return $$1 | 0;
 }
 Atomics_store(HEAP32, $2 + 176 >> 2, 0) | 0;
 $$1 = 16;
 return $$1 | 0;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $3 = sp + 208 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 80 | 0;
 $6 = sp;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
  if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) > -1) $40 = ___lockfile($0) | 0; else $40 = 0;
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
  $19 = $0 + 48 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $6 + 80;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   if (!$24) $$1 = $29; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 7]($0, 0, 0) | 0;
    $spec$select = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $spec$select;
   }
  } else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $35 | $14;
  if ($40 | 0) ___unlockfile($0);
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    }
    $$090 = $63 ? $$090 : $26;
    $$094 = $63 ? $25 : $$094 - $25 | 0;
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function __do_call($0) {
 $0 = $0 | 0;
 var $69 = 0;
 do switch (HEAP32[$0 >> 2] | 0) {
 case 137:
  {
   HEAP32[$0 + 80 >> 2] = _pthread_create(HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0, HEAP32[$0 + 32 >> 2] | 0, HEAP32[$0 + 40 >> 2] | 0) | 0;
   break;
  }
 case 138:
  {
   HEAP32[$0 + 80 >> 2] = _emscripten_syscall(HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
   break;
  }
 case 1024:
  {
   FUNCTION_TABLE_v[HEAP32[$0 + 4 >> 2] & 0]();
   break;
  }
 case 1025:
  {
   FUNCTION_TABLE_vi[HEAP32[$0 + 4 >> 2] & 0](HEAP32[$0 + 16 >> 2] | 0);
   break;
  }
 case 1026:
  {
   FUNCTION_TABLE_vii[HEAP32[$0 + 4 >> 2] & 0](HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0);
   break;
  }
 case 1027:
  {
   FUNCTION_TABLE_viii[HEAP32[$0 + 4 >> 2] & 0](HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0, HEAP32[$0 + 32 >> 2] | 0);
   break;
  }
 case 2048:
  {
   HEAP32[$0 + 80 >> 2] = FUNCTION_TABLE_i[HEAP32[$0 + 4 >> 2] & 0]() | 0;
   break;
  }
 case 2049:
  {
   HEAP32[$0 + 80 >> 2] = FUNCTION_TABLE_ii[HEAP32[$0 + 4 >> 2] & 7](HEAP32[$0 + 16 >> 2] | 0) | 0;
   break;
  }
 case 2050:
  {
   HEAP32[$0 + 80 >> 2] = FUNCTION_TABLE_iii[HEAP32[$0 + 4 >> 2] & 0](HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
   break;
  }
 case 2051:
  {
   HEAP32[$0 + 80 >> 2] = FUNCTION_TABLE_iiii[HEAP32[$0 + 4 >> 2] & 7](HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0, HEAP32[$0 + 32 >> 2] | 0) | 0;
   break;
  }
 default:
  ___assert_fail(21062, 20926, 202, 21113);
 } while (0);
 if (!(HEAP32[$0 + 88 >> 2] | 0)) {
  $69 = $0 + 8 | 0;
  HEAP32[$69 >> 2] = 1;
  _emscripten_futex_wake($69 | 0, 2147483647) | 0;
  return;
 } else {
  _free($0);
  return;
 }
}

function ___pthread_mutex_timedlock($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$2 = 0, $$pre44 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $24 = 0, $30 = 0, $40 = 0, $42 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 do if (!($2 & 15)) if (!(Atomics_compareExchange(HEAP32, $0 + 4 >> 2, 0, 16) | 0)) {
  $$2 = 0;
  return $$2 | 0;
 } else {
  $9 = HEAP32[$0 >> 2] | 0;
  break;
 } else $9 = $2; while (0);
 $10 = $9 & 128 ^ 128;
 $11 = ___pthread_mutex_trylock($0) | 0;
 if (($11 | 0) != 16) {
  $$2 = $11;
  return $$2 | 0;
 }
 $13 = $0 + 4 | 0;
 $14 = $0 + 8 | 0;
 $16 = 99;
 while (1) {
  if (!(Atomics_load(HEAP32, $13 >> 2) | 0)) break;
  if (Atomics_load(HEAP32, $14 >> 2) | 0) break;
  if (!$16) break; else $16 = $16 + -1 | 0;
 }
 $22 = ___pthread_mutex_trylock($0) | 0;
 if (($22 | 0) != 16) {
  $$2 = $22;
  return $$2 | 0;
 }
 while (1) {
  $24 = Atomics_load(HEAP32, $13 >> 2) | 0;
  if ($24 | 0) {
   $$pre44 = HEAP32[$0 >> 2] | 0;
   if (($24 & 1073741824 | 0) == 0 | ($$pre44 & 4 | 0) == 0) {
    if (($$pre44 & 3 | 0) == 2) if (($24 & 2147483647 | 0) == (HEAP32[(_pthread_self() | 0) + 52 >> 2] | 0)) {
     $$2 = 35;
     label = 17;
     break;
    }
    Atomics_add(HEAP32, $14 >> 2, 1) | 0;
    $40 = $24 | -2147483648;
    Atomics_compareExchange(HEAP32, $13 >> 2, $24, $40) | 0;
    $42 = ___timedwait($13, $40, 0, $1, $10) | 0;
    Atomics_sub(HEAP32, $14 >> 2, 1) | 0;
    if (($42 | 4 | 0) != 4) {
     $$2 = $42;
     label = 17;
     break;
    }
   }
  }
  $30 = ___pthread_mutex_trylock($0) | 0;
  if (($30 | 0) != 16) {
   $$2 = $30;
   label = 17;
   break;
  }
 }
 if ((label | 0) == 17) return $$2 | 0;
 return 0;
}

function _player_crosshair($0) {
 $0 = $0 | 0;
 var $$03344 = 0.0, $$03643 = 0, $$045 = 0, $$2 = 0, $$235 = 0.0, $1 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $5 = 0, $57 = 0, $6 = 0;
 $1 = $0 + 40 | 0;
 $2 = $0 + 44 | 0;
 $3 = $0 + 48 | 0;
 $4 = $0 + 52 | 0;
 $5 = $0 + 56 | 0;
 $$03344 = 0.0;
 $$03643 = 0;
 $$045 = 0;
 while (1) {
  $6 = 122152 + ($$03643 * 68 | 0) | 0;
  if (($6 | 0) == ($0 | 0)) {
   $$2 = $$045;
   $$235 = $$03344;
  } else if (!(HEAP32[$6 >> 2] | 0)) {
   $$2 = $$045;
   $$235 = $$03344;
  } else {
   $11 = +HEAPF32[122152 + ($$03643 * 68 | 0) + 40 >> 2];
   $12 = +HEAPF32[$1 >> 2];
   $13 = $11 - $12;
   $15 = +HEAPF32[122152 + ($$03643 * 68 | 0) + 44 >> 2];
   $16 = +HEAPF32[$2 >> 2];
   $17 = $15 - $16;
   $19 = +HEAPF32[122152 + ($$03643 * 68 | 0) + 48 >> 2];
   $20 = +HEAPF32[$3 >> 2];
   $21 = $19 - $20;
   $27 = +Math_sqrt(+($13 * $13 + $17 * $17 + $21 * $21));
   $29 = +HEAPF32[$5 >> 2];
   $30 = +Math_cos(+$29);
   $31 = +HEAPF32[$4 >> 2] + -1.5707963705062866;
   $43 = $11 - ($12 + +Math_cos(+$31) * $30 * $27);
   $44 = $15 - ($16 + +Math_sin(+$29) * $27);
   $45 = $19 - ($20 + +Math_sin(+$31) * $30 * $27);
   $57 = ($$03344 == 0.0 | $27 < $$03344) & ($27 < 96.0 ? +Math_sqrt(+($45 * $45 + ($43 * $43 + $44 * $44))) / $27 < .0872664675116539 : 0);
   $$2 = $57 ? $6 : $$045;
   $$235 = $57 ? $27 : $$03344;
  }
  $$03643 = $$03643 + 1 | 0;
  if (($$03643 | 0) == 128) break; else {
   $$03344 = $$235;
   $$045 = $$2;
  }
 }
 return $$2 | 0;
}

function _gen_sign_buffer($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04246 = 0, $$043$lcssa = 0, $$04345 = 0, $$04447 = 0, $$048 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $35 = 0, $5 = 0, $6 = 0, $9 = 0;
 $1 = $0 + 72 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) $$0$lcssa = 0; else {
  $5 = HEAP32[$0 + 76 >> 2] | 0;
  $$04447 = 0;
  $$048 = 0;
  while (1) {
   $12 = (_strlen($5 + ($$04447 * 80 | 0) + 16 | 0) | 0) + $$048 | 0;
   $$04447 = $$04447 + 1 | 0;
   if ($$04447 >>> 0 >= $2 >>> 0) {
    $$0$lcssa = $12;
    break;
   } else $$048 = $12;
  }
 }
 $6 = _malloc_faces(5, $$0$lcssa) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  $$043$lcssa = 0;
  $15 = $0 + 92 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  _del_buffer($16);
  $17 = _gen_faces(5, $$043$lcssa, $6) | 0;
  HEAP32[$15 >> 2] = $17;
  $18 = $0 + 84 | 0;
  HEAP32[$18 >> 2] = $$043$lcssa;
  return;
 }
 $9 = $0 + 76 | 0;
 $$04246 = 0;
 $$04345 = 0;
 while (1) {
  $19 = HEAP32[$9 >> 2] | 0;
  $35 = (__gen_sign_buffer($6 + ($$04345 * 30 << 2) | 0, +(HEAP32[$19 + ($$04246 * 80 | 0) >> 2] | 0), +(HEAP32[$19 + ($$04246 * 80 | 0) + 4 >> 2] | 0), +(HEAP32[$19 + ($$04246 * 80 | 0) + 8 >> 2] | 0), HEAP32[$19 + ($$04246 * 80 | 0) + 12 >> 2] | 0, $19 + ($$04246 * 80 | 0) + 16 | 0) | 0) + $$04345 | 0;
  $$04246 = $$04246 + 1 | 0;
  if ($$04246 >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) {
   $$043$lcssa = $35;
   break;
  } else $$04345 = $35;
 }
 $15 = $0 + 92 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 _del_buffer($16);
 $17 = _gen_faces(5, $$043$lcssa, $6) | 0;
 HEAP32[$15 >> 2] = $17;
 $18 = $0 + 84 | 0;
 HEAP32[$18 >> 2] = $$043$lcssa;
 return;
}

function ___pthread_mutex_unlock($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$045 = 0, $$pre$phiZ2D = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = Atomics_load(HEAP32, $0 + 8 >> 2) | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $6 = $3 & 128 ^ 128;
 $7 = ($3 & 15 | 0) == 0;
 if ($7) {
  $$045 = 0;
  $$pre$phiZ2D = $0 + 4 | 0;
 } else {
  $8 = _pthread_self() | 0;
  $9 = $0 + 4 | 0;
  $11 = (Atomics_load(HEAP32, $9 >> 2) | 0) & 2147483647;
  if (($11 | 0) != (HEAP32[$8 + 52 >> 2] | 0)) {
   $$0 = 1;
   return $$0 | 0;
  }
  if (($3 & 3 | 0) == 1) {
   $17 = $0 + 20 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   if ($18 | 0) {
    HEAP32[$17 >> 2] = $18 + -1;
    $$0 = 0;
    return $$0 | 0;
   }
  }
  $22 = $0 + 16 | 0;
  if (!$6) {
   Atomics_store(HEAP32, $8 + 176 >> 2, $22) | 0;
   ___vm_lock();
  }
  $25 = HEAP32[$0 + 12 >> 2] | 0;
  $26 = HEAP32[$22 >> 2] | 0;
  Atomics_store(HEAP32, $25 >> 2, $26) | 0;
  if (($26 | 0) == ($8 + 168 | 0)) {
   $$045 = $8;
   $$pre$phiZ2D = $9;
  } else {
   Atomics_store(HEAP32, $26 + -4 >> 2, $25) | 0;
   $$045 = $8;
   $$pre$phiZ2D = $9;
  }
 }
 $32 = ($3 & 8 | 0) == 0 ? 0 : 2147483647;
 do $33 = Atomics_load(HEAP32, $$pre$phiZ2D >> 2) | 0; while ((Atomics_compareExchange(HEAP32, $$pre$phiZ2D >> 2, $33, $32) | 0) != ($33 | 0));
 if (!($7 | ($6 | 0) != 0)) {
  Atomics_store(HEAP32, $$045 + 176 >> 2, 0) | 0;
  ___vm_unlock();
 }
 if (!(($2 | 0) != 0 | ($33 | 0) < 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _emscripten_futex_wake($$pre$phiZ2D | 0, 1) | 0;
 $$0 = 0;
 return $$0 | 0;
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $9 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $9 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $9 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function _fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $33 = 0, $37 = 0, $4 = 0, $40 = 0, $spec$select = 0, label = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((Atomics_load(HEAP32, $3 + 76 >> 2) | 0) > -1) $37 = ___lockfile($3) | 0; else $37 = 0;
 $10 = $3 + 74 | 0;
 $12 = HEAP8[$10 >> 0] | 0;
 HEAP8[$10 >> 0] = $12 + 255 | $12;
 $18 = $3 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0;
 if (($20 | 0) > 0) {
  $$ = $20 >>> 0 < $4 >>> 0 ? $20 : $4;
  _memcpy($0 | 0, $19 | 0, $$ | 0) | 0;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $$;
  $$054 = $4 - $$ | 0;
  $$056 = $0 + $$ | 0;
 } else {
  $$054 = $4;
  $$056 = $0;
 }
 L7 : do if (!$$054) label = 13; else {
  $29 = $3 + 32 | 0;
  $$15759 = $$056;
  $$160 = $$054;
  while (1) {
   if (___toread($3) | 0) break;
   $33 = FUNCTION_TABLE_iiii[HEAP32[$29 >> 2] & 7]($3, $$15759, $$160) | 0;
   if (($33 + 1 | 0) >>> 0 < 2) break;
   $40 = $$160 - $33 | 0;
   if (!$40) {
    label = 13;
    break L7;
   } else {
    $$15759 = $$15759 + $33 | 0;
    $$160 = $40;
   }
  }
  if ($37 | 0) ___unlockfile($3);
  $$0 = (($4 - $$160 | 0) >>> 0) / ($1 >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$37) $$0 = $spec$select; else {
  ___unlockfile($3);
  $$0 = $spec$select;
 }
 return $$0 | 0;
}

function _strspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01924 = 0, $$020 = 0, $$1$lcssa = 0, $$121 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 $3 = HEAP8[$1 >> 0] | 0;
 do if (!($3 << 24 >> 24)) $$0 = 0; else {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$020 = $0;
   while (1) if ((HEAP8[$$020 >> 0] | 0) == $3 << 24 >> 24) $$020 = $$020 + 1 | 0; else break;
   $$0 = $$020 - $0 | 0;
   break;
  }
  $$01924 = $1;
  $15 = $3;
  do {
   $14 = $15 & 255;
   $19 = $2 + ($14 >>> 5 << 2) | 0;
   HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($14 & 31);
   $$01924 = $$01924 + 1 | 0;
   $15 = HEAP8[$$01924 >> 0] | 0;
  } while ($15 << 24 >> 24 != 0);
  $25 = HEAP8[$0 >> 0] | 0;
  L12 : do if (!($25 << 24 >> 24)) $$1$lcssa = $0; else {
   $$121 = $0;
   $28 = $25;
   while (1) {
    $27 = $28 & 255;
    if (!(HEAP32[$2 + ($27 >>> 5 << 2) >> 2] & 1 << ($27 & 31))) {
     $$1$lcssa = $$121;
     break L12;
    }
    $36 = $$121 + 1 | 0;
    $28 = HEAP8[$36 >> 0] | 0;
    if (!($28 << 24 >> 24)) {
     $$1$lcssa = $36;
     break;
    } else $$121 = $36;
   }
  } while (0);
  $$0 = $$1$lcssa - $0 | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _color_tree_get($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$2 = 0, $104 = 0, $20 = 0, $33 = 0, $36 = 0, $49 = 0, $5 = 0, $6 = 0, $62 = 0, $7 = 0, $76 = 0, $8 = 0, $90 = 0;
 $5 = $1 & 255;
 $6 = $2 & 255;
 $7 = $3 & 255;
 $8 = $4 & 255;
 $20 = HEAP32[$0 + (($6 << 2 & 4 | $8 & 1 | $5 << 3 & 8 | $7 << 1 & 2) << 2) >> 2] | 0;
 if (!$20) {
  $$2 = -1;
  return $$2 | 0;
 }
 $33 = HEAP32[$20 + (($6 << 1 & 4 | $8 >>> 1 & 1 | $5 << 2 & 8 | $7 & 2) << 2) >> 2] | 0;
 if (!$33) {
  $$2 = -1;
  return $$2 | 0;
 }
 $49 = HEAP32[$33 + (($6 & 4 | $8 >>> 2 & 1 | $5 << 1 & 8 | $7 >>> 1 & 2) << 2) >> 2] | 0;
 if (!$49) {
  $$2 = -1;
  return $$2 | 0;
 }
 $62 = HEAP32[$49 + (($6 >>> 1 & 4 | $8 >>> 3 & 1 | $5 & 8 | $7 >>> 2 & 2) << 2) >> 2] | 0;
 if (!$62) {
  $$2 = -1;
  return $$2 | 0;
 }
 $76 = HEAP32[$62 + (($6 >>> 2 & 4 | $8 >>> 4 & 1 | $5 >>> 1 & 8 | $7 >>> 3 & 2) << 2) >> 2] | 0;
 if (!$76) {
  $$2 = -1;
  return $$2 | 0;
 }
 $90 = HEAP32[$76 + (($6 >>> 3 & 4 | $8 >>> 5 & 1 | $5 >>> 2 & 8 | $7 >>> 4 & 2) << 2) >> 2] | 0;
 if (!$90) {
  $$2 = -1;
  return $$2 | 0;
 }
 $104 = HEAP32[$90 + (($6 >>> 4 & 4 | $8 >>> 6 & 1 | $5 >>> 3 & 8 | $7 >>> 5 & 2) << 2) >> 2] | 0;
 if (!$104) {
  $$2 = -1;
  return $$2 | 0;
 }
 $36 = HEAP32[$104 + (($6 >>> 5 & 4 | $8 >>> 7 | $5 >>> 4 & 8 | $7 >>> 6 & 2) << 2) >> 2] | 0;
 if (!$36) {
  $$2 = -1;
  return $$2 | 0;
 }
 $$2 = HEAP32[$36 + 64 >> 2] | 0;
 return $$2 | 0;
}

function _render_item($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 64 | 0;
 $4 = sp;
 _set_matrix_item($4, HEAP32[32718] | 0, HEAP32[32719] | 0, HEAP32[32722] | 0);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $4 | 0);
 _glUniform3f(HEAP32[$0 + 24 >> 2] | 0, 0.0, 0.0, 5.0);
 _glUniform1i(HEAP32[$0 + 20 >> 2] | 0, 0);
 $18 = HEAP32[32726] | 0;
 _glUniform1f(HEAP32[$0 + 28 >> 2] | 0, +(+((HEAP32[32725] | 0) % ($18 | 0) | 0 | 0) / +($18 | 0)));
 if (!(_is_plant($1) | 0)) {
  $27 = _malloc_faces(15, 6) | 0;
  dest = $2;
  stop = dest + 96 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $3;
  src = 9616;
  stop = dest + 96 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _make_cube($27, $2, $3, 1, 1, 1, 1, 1, 1, 0.0, 0.0, 0.0, .5, $1, 0);
  $28 = _gen_faces(15, 6, $27) | 0;
  _draw_triangles_3d_ao($0, $28, 36);
  _del_buffer($28);
  STACKTOP = sp;
  return;
 } else {
  $25 = _malloc_faces(15, 4) | 0;
  _make_plant($25, 0.0, 1.0, 0.0, 0.0, 0.0, .5, $1, 45.0);
  $26 = _gen_faces(15, 4, $25) | 0;
  _draw_triangles_3d_ao($0, $26, 24);
  _del_buffer($26);
  STACKTOP = sp;
  return;
 }
}

function _light_fill($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$tr7482 = 0, $$tr7583 = 0, $$tr7684 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $26 = 0, $27 = 0, $9 = 0, label = 0;
 $9 = ($3 * 9604 | 0) + ($2 * 98 | 0) | 0;
 $10 = $2 + -1 | 0;
 $11 = $2 + 1 | 0;
 $12 = $3 + -1 | 0;
 $13 = $3 + 1 | 0;
 $15 = ($5 + $4 | 0) < 32;
 if (($3 - $5 | 0) > 65 | (($4 - $5 | 0) > 65 | (($2 - $5 | 0) > 65 | (($5 + $3 | 0) < 32 | (($5 + $2 | 0) < 32 | $15))))) return;
 $$tr7482 = $4;
 $$tr7583 = $5;
 $$tr7684 = $6;
 while (1) {
  $26 = $9 + $$tr7482 | 0;
  $27 = $1 + $26 | 0;
  if (($$tr7583 | 0) <= (HEAP8[$27 >> 0] | 0)) {
   label = 7;
   break;
  }
  if (!$$tr7684) if (!(HEAP8[$0 + $26 >> 0] | 0)) {
   label = 7;
   break;
  }
  HEAP8[$27 >> 0] = $$tr7583;
  $$tr7583 = $$tr7583 + -1 | 0;
  _light_fill($0, $1, $10, $3, $$tr7482, $$tr7583, 0);
  _light_fill($0, $1, $11, $3, $$tr7482, $$tr7583, 0);
  _light_fill($0, $1, $2, $12, $$tr7482, $$tr7583, 0);
  _light_fill($0, $1, $2, $13, $$tr7482, $$tr7583, 0);
  _light_fill($0, $1, $2, $3, $$tr7482 + -1 | 0, $$tr7583, 0);
  $$tr7482 = $$tr7482 + 1 | 0;
  if (($3 - $$tr7583 | 0) > 65 | (($$tr7482 - $$tr7583 | 0) > 65 | (($2 - $$tr7583 | 0) > 65 | (($$tr7583 + $3 | 0) < 32 | (($$tr7583 + $2 | 0) < 32 | $15))))) {
   label = 7;
   break;
  } else $$tr7684 = 0;
 }
 if ((label | 0) == 7) return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $23 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 7]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $32 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $23 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $23 >> 0] | 0) == 10) break;
    if (!$23) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $32 = $14;
     break L10;
    } else $$03846 = $23;
   }
   $29 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 7]($2, $0, $$03846) | 0;
   if ($29 >>> 0 < $$03846 >>> 0) {
    $$1 = $29;
    break L5;
   }
   $$139 = $$03846;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $32 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($32 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function _generateFixedDistanceTree($0) {
 $0 = $0 | 0;
 var $1 = 0, $34 = 0, dest = 0, src = 0, stop = 0;
 $1 = _malloc(128) | 0;
 if (!$1) return;
 HEAP32[$1 >> 2] = 5;
 HEAP32[$1 + 4 >> 2] = 5;
 HEAP32[$1 + 8 >> 2] = 5;
 HEAP32[$1 + 12 >> 2] = 5;
 HEAP32[$1 + 16 >> 2] = 5;
 HEAP32[$1 + 20 >> 2] = 5;
 HEAP32[$1 + 24 >> 2] = 5;
 HEAP32[$1 + 28 >> 2] = 5;
 HEAP32[$1 + 32 >> 2] = 5;
 HEAP32[$1 + 36 >> 2] = 5;
 HEAP32[$1 + 40 >> 2] = 5;
 HEAP32[$1 + 44 >> 2] = 5;
 HEAP32[$1 + 48 >> 2] = 5;
 HEAP32[$1 + 52 >> 2] = 5;
 HEAP32[$1 + 56 >> 2] = 5;
 HEAP32[$1 + 60 >> 2] = 5;
 HEAP32[$1 + 64 >> 2] = 5;
 HEAP32[$1 + 68 >> 2] = 5;
 HEAP32[$1 + 72 >> 2] = 5;
 HEAP32[$1 + 76 >> 2] = 5;
 HEAP32[$1 + 80 >> 2] = 5;
 HEAP32[$1 + 84 >> 2] = 5;
 HEAP32[$1 + 88 >> 2] = 5;
 HEAP32[$1 + 92 >> 2] = 5;
 HEAP32[$1 + 96 >> 2] = 5;
 HEAP32[$1 + 100 >> 2] = 5;
 HEAP32[$1 + 104 >> 2] = 5;
 HEAP32[$1 + 108 >> 2] = 5;
 HEAP32[$1 + 112 >> 2] = 5;
 HEAP32[$1 + 116 >> 2] = 5;
 HEAP32[$1 + 120 >> 2] = 5;
 HEAP32[$1 + 124 >> 2] = 5;
 $34 = _malloc(128) | 0;
 HEAP32[$0 + 8 >> 2] = $34;
 if ($34 | 0) {
  dest = $34;
  src = $1;
  stop = dest + 128 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 16 >> 2] = 32;
  HEAP32[$0 + 12 >> 2] = 15;
  _HuffmanTree_makeFromLengths2($0) | 0;
 }
 _free($1);
 return;
}

function _generateFixedLitLenTree($0) {
 $0 = $0 | 0;
 var $$0264 = 0, $$13 = 0, $1 = 0;
 $1 = _malloc(1152) | 0;
 if (!$1) return;
 $$0264 = 0;
 do {
  HEAP32[$1 + ($$0264 << 2) >> 2] = 8;
  $$0264 = $$0264 + 1 | 0;
 } while (($$0264 | 0) != 144);
 $$13 = 144;
 do {
  HEAP32[$1 + ($$13 << 2) >> 2] = 9;
  $$13 = $$13 + 1 | 0;
 } while (($$13 | 0) != 256);
 HEAP32[$1 + 1024 >> 2] = 7;
 HEAP32[$1 + 1028 >> 2] = 7;
 HEAP32[$1 + 1032 >> 2] = 7;
 HEAP32[$1 + 1036 >> 2] = 7;
 HEAP32[$1 + 1040 >> 2] = 7;
 HEAP32[$1 + 1044 >> 2] = 7;
 HEAP32[$1 + 1048 >> 2] = 7;
 HEAP32[$1 + 1052 >> 2] = 7;
 HEAP32[$1 + 1056 >> 2] = 7;
 HEAP32[$1 + 1060 >> 2] = 7;
 HEAP32[$1 + 1064 >> 2] = 7;
 HEAP32[$1 + 1068 >> 2] = 7;
 HEAP32[$1 + 1072 >> 2] = 7;
 HEAP32[$1 + 1076 >> 2] = 7;
 HEAP32[$1 + 1080 >> 2] = 7;
 HEAP32[$1 + 1084 >> 2] = 7;
 HEAP32[$1 + 1088 >> 2] = 7;
 HEAP32[$1 + 1092 >> 2] = 7;
 HEAP32[$1 + 1096 >> 2] = 7;
 HEAP32[$1 + 1100 >> 2] = 7;
 HEAP32[$1 + 1104 >> 2] = 7;
 HEAP32[$1 + 1108 >> 2] = 7;
 HEAP32[$1 + 1112 >> 2] = 7;
 HEAP32[$1 + 1116 >> 2] = 7;
 HEAP32[$1 + 1120 >> 2] = 8;
 HEAP32[$1 + 1124 >> 2] = 8;
 HEAP32[$1 + 1128 >> 2] = 8;
 HEAP32[$1 + 1132 >> 2] = 8;
 HEAP32[$1 + 1136 >> 2] = 8;
 HEAP32[$1 + 1140 >> 2] = 8;
 HEAP32[$1 + 1144 >> 2] = 8;
 HEAP32[$1 + 1148 >> 2] = 8;
 _HuffmanTree_makeFromLengths($0, $1, 288, 15) | 0;
 _free($1);
 return;
}

function _LodePNGIText_cleanup($0) {
 $0 = $0 | 0;
 var $$014 = 0, $$lcssa = 0, $$pre = 0, $$pre16 = 0, $$pre18 = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 72 | 0;
 $4 = $0 + 76 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $$pre = $0 + 80 | 0;
 $$pre16 = $0 + 84 | 0;
 $$pre18 = $0 + 88 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  $$lcssa = $5;
  _free($$lcssa);
  $22 = HEAP32[$$pre >> 2] | 0;
  _free($22);
  $23 = HEAP32[$$pre16 >> 2] | 0;
  _free($23);
  $24 = HEAP32[$$pre18 >> 2] | 0;
  _free($24);
  return;
 }
 $$014 = 0;
 $7 = $5;
 while (1) {
  $6 = $7 + ($$014 << 2) | 0;
  _free(HEAP32[$6 >> 2] | 0);
  HEAP32[$6 >> 2] = 0;
  $10 = (HEAP32[$$pre >> 2] | 0) + ($$014 << 2) | 0;
  _free(HEAP32[$10 >> 2] | 0);
  HEAP32[$10 >> 2] = 0;
  $13 = (HEAP32[$$pre16 >> 2] | 0) + ($$014 << 2) | 0;
  _free(HEAP32[$13 >> 2] | 0);
  HEAP32[$13 >> 2] = 0;
  $16 = (HEAP32[$$pre18 >> 2] | 0) + ($$014 << 2) | 0;
  _free(HEAP32[$16 >> 2] | 0);
  HEAP32[$16 >> 2] = 0;
  $$014 = $$014 + 1 | 0;
  $21 = HEAP32[$4 >> 2] | 0;
  if ($$014 >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) {
   $$lcssa = $21;
   break;
  } else $7 = $21;
 }
 _free($$lcssa);
 $22 = HEAP32[$$pre >> 2] | 0;
 _free($22);
 $23 = HEAP32[$$pre16 >> 2] | 0;
 _free($23);
 $24 = HEAP32[$$pre18 >> 2] | 0;
 _free($24);
 return;
}

function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01823 = 0, $$019$lcssa$sink = 0, $$01920 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = HEAP8[$1 >> 0] | 0;
 L1 : do if (!($3 << 24 >> 24)) label = 3; else if (!(HEAP8[$1 + 1 >> 0] | 0)) label = 3; else {
  _memset($2 | 0, 0, 32) | 0;
  $10 = HEAP8[$1 >> 0] | 0;
  if ($10 << 24 >> 24) {
   $$01823 = $1;
   $13 = $10;
   do {
    $12 = $13 & 255;
    $17 = $2 + ($12 >>> 5 << 2) | 0;
    HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($12 & 31);
    $$01823 = $$01823 + 1 | 0;
    $13 = HEAP8[$$01823 >> 0] | 0;
   } while ($13 << 24 >> 24 != 0);
  }
  $23 = HEAP8[$0 >> 0] | 0;
  if (!($23 << 24 >> 24)) $$019$lcssa$sink = $0; else {
   $$01920 = $0;
   $26 = $23;
   while (1) {
    $25 = $26 & 255;
    if (HEAP32[$2 + ($25 >>> 5 << 2) >> 2] & 1 << ($25 & 31) | 0) {
     $$019$lcssa$sink = $$01920;
     break L1;
    }
    $34 = $$01920 + 1 | 0;
    $26 = HEAP8[$34 >> 0] | 0;
    if (!($26 << 24 >> 24)) {
     $$019$lcssa$sink = $34;
     break;
    } else $$01920 = $34;
   }
  }
 } while (0);
 if ((label | 0) == 3) $$019$lcssa$sink = ___strchrnul($0, $3 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $$019$lcssa$sink - $0 | 0;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 16164;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $spec$select = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $spec$select;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $spec$select | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$spec$select) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = tempRet0;
   $12 = ___muldi3($8 | 0, $9 | 0, 10, 0) | 0;
   $14 = _i64Subtract($8$looptemp | 0, $9$looptemp | 0, $12 | 0, tempRet0 | 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp - ($$012 * 10 | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _emscripten_async_run_in_main_thread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$016$lcssa = 0, $$017$lcssa = 0, $$01720 = 0, $$019 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 if (!$0) ___assert_fail(21122, 20926, 251, 21127);
 if (_emscripten_is_main_runtime_thread() | 0) {
  __do_call($0);
  return;
 }
 ___pthread_mutex_lock(133096) | 0;
 if (!(HEAP8[133660] & 1)) HEAP8[133660] = 1;
 $4 = Atomics_load(HEAP32, 33281) | 0;
 $5 = Atomics_load(HEAP32, 33282) | 0;
 $$019 = ($5 + 1 | 0) % 128 | 0;
 if (($$019 | 0) == ($4 | 0)) {
  $$01720 = $4;
  while (1) {
   ___pthread_mutex_unlock(133096) | 0;
   _emscripten_futex_wait(133124, $$01720 | 0, inf) | 0;
   ___pthread_mutex_lock(133096) | 0;
   $7 = Atomics_load(HEAP32, 33281) | 0;
   $8 = Atomics_load(HEAP32, 33282) | 0;
   $$0 = ($8 + 1 | 0) % 128 | 0;
   if (($$0 | 0) == ($7 | 0)) $$01720 = $7; else {
    $$0$lcssa = $$0;
    $$016$lcssa = $8;
    $$017$lcssa = $7;
    break;
   }
  }
 } else {
  $$0$lcssa = $$019;
  $$016$lcssa = $5;
  $$017$lcssa = $4;
 }
 HEAP32[133132 + ($$016$lcssa << 2) >> 2] = $0;
 if (($$017$lcssa | 0) == ($$016$lcssa | 0)) _emscripten_asm_const_i(0) | 0;
 Atomics_store(HEAP32, 33282, $$0$lcssa) | 0;
 ___pthread_mutex_unlock(133096) | 0;
 return;
}

function _render_crosshairs($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0.0, $2 = 0, $29 = 0.0, $34 = 0, $35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $1 = sp + 64 | 0;
 $2 = sp;
 _set_matrix_2d($2, HEAP32[32718] | 0, HEAP32[32719] | 0);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glLineWidth(+(+(HEAP32[32722] << 2 | 0)));
 _glEnable(3058);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $2 | 0);
 $12 = (HEAP32[32718] | 0) / 2 | 0;
 $14 = (HEAP32[32719] | 0) / 2 | 0;
 $16 = (HEAP32[32722] | 0) * 10 | 0;
 $17 = +($12 | 0);
 HEAPF32[$1 >> 2] = $17;
 HEAPF32[$1 + 4 >> 2] = +($14 - $16 | 0);
 HEAPF32[$1 + 8 >> 2] = $17;
 HEAPF32[$1 + 12 >> 2] = +($16 + $14 | 0);
 HEAPF32[$1 + 16 >> 2] = +($12 - $16 | 0);
 $29 = +($14 | 0);
 HEAPF32[$1 + 20 >> 2] = $29;
 HEAPF32[$1 + 24 >> 2] = +($16 + $12 | 0);
 HEAPF32[$1 + 28 >> 2] = $29;
 $34 = _gen_buffer(32, $1) | 0;
 _glBindBuffer(34962, $34 | 0);
 $35 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$35 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$35 >> 2] | 0, 2, 5126, 0, 0, 0);
 _glDrawArrays(1, 0, 4);
 _glDisableVertexAttribArray(HEAP32[$35 >> 2] | 0);
 _glBindBuffer(34962, 0);
 _del_buffer($34);
 _glDisable(3058);
 STACKTOP = sp;
 return;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
 $11 = $0 + 44 | 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$3 + 12 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   $$cast = $27;
   HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24);
   if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
    HEAP32[$28 >> 2] = $$cast + 1;
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $2;
   }
  } else $$0 = $18;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _load_png_texture($0) {
 $0 = $0 | 0;
 var $$028$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = _lodepng_decode32_file($1, $2, $3, $0) | 0;
 if ($4 | 0) {
  $6 = HEAP32[3976] | 0;
  $7 = _lodepng_error_text($4) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $4;
  HEAP32[$vararg_buffer + 8 >> 2] = $7;
  _fprintf($6, 16834, $vararg_buffer) | 0;
  _exit(1);
 }
 $8 = HEAP32[$1 >> 2] | 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] << 2;
 $12 = Math_imul($11, $10) | 0;
 $13 = _malloc($12) | 0;
 if ($10 | 0) {
  $15 = $10 + -1 | 0;
  $$028$i = 0;
  do {
   _memcpy($13 + (Math_imul($15 - $$028$i | 0, $11) | 0) | 0, $8 + (Math_imul($$028$i, $11) | 0) | 0, $11 | 0) | 0;
   $$028$i = $$028$i + 1 | 0;
  } while (($$028$i | 0) != ($10 | 0));
 }
 _memcpy($8 | 0, $13 | 0, $12 | 0) | 0;
 _free($13);
 _glTexImage2D(3553, 0, 6408, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, 0, 6408, 5121, HEAP32[$1 >> 2] | 0);
 _free(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _make_character($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5 | 0;
 var $12 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $31 = 0.0, $34 = 0.0, $7 = 0, $8 = 0;
 $7 = ($5 << 24 >> 24) + -32 | 0;
 $8 = ($7 | 0) / 16 | 0;
 $12 = +($7 - ($8 << 4) | 0) * .0625;
 $16 = 1.0 - +($8 | 0) * .125 + -.125;
 $17 = $1 - $3;
 HEAPF32[$0 >> 2] = $17;
 $19 = $2 - $4;
 HEAPF32[$0 + 4 >> 2] = $19;
 $21 = $12 + 0.0;
 HEAPF32[$0 + 8 >> 2] = $21;
 HEAPF32[$0 + 12 >> 2] = $16;
 $24 = $1 + $3;
 HEAPF32[$0 + 16 >> 2] = $24;
 HEAPF32[$0 + 20 >> 2] = $19;
 $27 = $12 + .0625;
 HEAPF32[$0 + 24 >> 2] = $27;
 HEAPF32[$0 + 28 >> 2] = $16;
 HEAPF32[$0 + 32 >> 2] = $24;
 $31 = $2 + $4;
 HEAPF32[$0 + 36 >> 2] = $31;
 HEAPF32[$0 + 40 >> 2] = $27;
 $34 = $16 + .125;
 HEAPF32[$0 + 44 >> 2] = $34;
 HEAPF32[$0 + 48 >> 2] = $17;
 HEAPF32[$0 + 52 >> 2] = $19;
 HEAPF32[$0 + 56 >> 2] = $21;
 HEAPF32[$0 + 60 >> 2] = $16;
 HEAPF32[$0 + 64 >> 2] = $24;
 HEAPF32[$0 + 68 >> 2] = $31;
 HEAPF32[$0 + 72 >> 2] = $27;
 HEAPF32[$0 + 76 >> 2] = $34;
 HEAPF32[$0 + 80 >> 2] = $17;
 HEAPF32[$0 + 84 >> 2] = $31;
 HEAPF32[$0 + 88 >> 2] = $21;
 HEAPF32[$0 + 92 >> 2] = $34;
 return;
}

function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $26 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do if (!$0) {
  if (!(Atomics_load(HEAP32, 4040) | 0)) $29 = 0; else $29 = _fflush(Atomics_load(HEAP32, 4040) | 0) | 0;
  $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$$02325) $$024$lcssa = $29; else {
   $$02327 = $$02325;
   $$02426 = $29;
   while (1) {
    if ((Atomics_load(HEAP32, $$02327 + 76 >> 2) | 0) > -1) $26 = ___lockfile($$02327) | 0; else $26 = 0;
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
    if ($26 | 0) ___unlockfile($$02327);
    $$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
    if (!$$02327) {
     $$024$lcssa = $$1;
     break;
    } else $$02426 = $$1;
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) <= -1) {
   $$0 = ___fflush_unlocked($0) | 0;
   break;
  }
  $phitmp = (___lockfile($0) | 0) == 0;
  $7 = ___fflush_unlocked($0) | 0;
  if ($phitmp) $$0 = $7; else {
   ___unlockfile($0);
   $$0 = $7;
  }
 } while (0);
 return $$0 | 0;
}

function _mat_rotate($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $20 = 0.0, $21 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $32 = 0.0, $36 = 0.0, $37 = 0.0, $48 = 0;
 $10 = +Math_sqrt(+($1 * $1 + $2 * $2 + $3 * $3));
 $11 = $1 / $10;
 $12 = $2 / $10;
 $13 = $3 / $10;
 $14 = +Math_sin(+$4);
 $15 = +Math_cos(+$4);
 $16 = 1.0 - $15;
 $17 = $16 * $11;
 HEAPF32[$0 >> 2] = $15 + $11 * $17;
 $20 = $12 * $17;
 $21 = $14 * $13;
 HEAPF32[$0 + 4 >> 2] = $20 - $21;
 $24 = $16 * $13;
 $25 = $11 * $24;
 $26 = $14 * $12;
 HEAPF32[$0 + 8 >> 2] = $26 + $25;
 HEAPF32[$0 + 12 >> 2] = 0.0;
 HEAPF32[$0 + 16 >> 2] = $21 + $20;
 $32 = $16 * $12;
 HEAPF32[$0 + 20 >> 2] = $15 + $12 * $32;
 $36 = $13 * $32;
 $37 = $14 * $11;
 HEAPF32[$0 + 24 >> 2] = $36 - $37;
 HEAPF32[$0 + 28 >> 2] = 0.0;
 HEAPF32[$0 + 32 >> 2] = $25 - $26;
 HEAPF32[$0 + 36 >> 2] = $37 + $36;
 HEAPF32[$0 + 40 >> 2] = $15 + $13 * $24;
 $48 = $0 + 44 | 0;
 HEAP32[$48 >> 2] = 0;
 HEAP32[$48 + 4 >> 2] = 0;
 HEAP32[$48 + 8 >> 2] = 0;
 HEAP32[$48 + 12 >> 2] = 0;
 HEAPF32[$0 + 60 >> 2] = 1.0;
 return;
}

function _render_text($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5 | 0;
 var $$02122$i = 0.0, $$023$i = 0, $16 = 0, $17 = 0, $18 = 0, $27 = 0.0, $34 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $6 = sp;
 _set_matrix_2d($6, HEAP32[32718] | 0, HEAP32[32719] | 0);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $6 | 0);
 _glUniform1i(HEAP32[$0 + 20 >> 2] | 0, 1);
 _glUniform1i(HEAP32[$0 + 32 >> 2] | 0, 0);
 $16 = _strlen($5) | 0;
 $17 = _strlen($5) | 0;
 $18 = _malloc_faces(4, $17) | 0;
 if (($17 | 0) <= 0) {
  $34 = _gen_faces(4, $17, $18) | 0;
  _draw_text($0, $34, $16);
  _del_buffer($34);
  STACKTOP = sp;
  return;
 }
 $27 = $4 * .5;
 $$02122$i = $2 - +($1 | 0) * $4 * +($16 + -1 | 0) * .5;
 $$023$i = 0;
 while (1) {
  _make_character($18 + ($$023$i * 24 << 2) | 0, $$02122$i, $3, $27, $4, HEAP8[$5 + $$023$i >> 0] | 0);
  $$023$i = $$023$i + 1 | 0;
  if (($$023$i | 0) == ($17 | 0)) break; else $$02122$i = $$02122$i + $4;
 }
 $34 = _gen_faces(4, $17, $18) | 0;
 _draw_text($0, $34, $16);
 _del_buffer($34);
 STACKTOP = sp;
 return;
}

function _draw_triangles_3d_ao($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0;
 _glBindBuffer(34962, $1 | 0);
 $3 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$3 >> 2] | 0);
 $5 = $0 + 8 | 0;
 _glEnableVertexAttribArray(HEAP32[$5 >> 2] | 0);
 $7 = $0 + 12 | 0;
 _glEnableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 $9 = $0 + 48 | 0;
 _glEnableVertexAttribArray(HEAP32[$9 >> 2] | 0);
 $11 = $0 + 52 | 0;
 _glEnableVertexAttribArray(HEAP32[$11 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$3 >> 2] | 0, 3, 5126, 0, 60, 0);
 _glVertexAttribPointer(HEAP32[$5 >> 2] | 0, 3, 5126, 0, 60, 12);
 _glVertexAttribPointer(HEAP32[$7 >> 2] | 0, 4, 5126, 0, 60, 24);
 _glVertexAttribPointer(HEAP32[$9 >> 2] | 0, 2, 5126, 0, 60, 40);
 _glVertexAttribPointer(HEAP32[$11 >> 2] | 0, 3, 5126, 0, 60, 48);
 _glDrawArrays(4, 0, $2 | 0);
 _glDisableVertexAttribArray(HEAP32[$3 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$5 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$9 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$11 >> 2] | 0);
 _glBindBuffer(34962, 0);
 return;
}

function _render_players($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $2 = 0, $31 = 0, $36 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp;
 $5 = $1 + 40 | 0;
 $7 = $1 + 44 | 0;
 $9 = $1 + 48 | 0;
 _set_matrix_3d($2, HEAP32[32718] | 0, HEAP32[32719] | 0, +HEAPF32[$5 >> 2], +HEAPF32[$7 >> 2], +HEAPF32[$9 >> 2], +HEAPF32[$1 + 52 >> 2], +HEAPF32[$1 + 56 >> 2], +HEAPF32[32724], HEAP32[32723] | 0, HEAP32[32715] | 0);
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $2 | 0);
 _glUniform3f(HEAP32[$0 + 24 >> 2] | 0, +(+HEAPF32[$5 >> 2]), +(+HEAPF32[$7 >> 2]), +(+HEAPF32[$9 >> 2]));
 _glUniform1i(HEAP32[$0 + 20 >> 2] | 0, 0);
 $31 = HEAP32[32726] | 0;
 _glUniform1f(HEAP32[$0 + 28 >> 2] | 0, +(+((HEAP32[32725] | 0) % ($31 | 0) | 0 | 0) / +($31 | 0)));
 $$026 = 0;
 do {
  $36 = 122152 + ($$026 * 68 | 0) | 0;
  if (($36 | 0) != ($1 | 0)) if (HEAP32[$36 >> 2] | 0) _draw_triangles_3d_ao($0, HEAP32[122152 + ($$026 * 68 | 0) + 64 >> 2] | 0, 36);
  $$026 = $$026 + 1 | 0;
 } while (($$026 | 0) != 128);
 STACKTOP = sp;
 return;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(Atomics_load(HEAP32, HEAP32[(___pthread_self_446() | 0) + 188 >> 2] >> 2) | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _emscripten_sync_run_in_main_thread_xprintf_varargs($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $3 = sp + 128 | 0;
 $4 = sp;
 $5 = sp + 144 | 0;
 HEAP32[$3 >> 2] = $varargs;
 $6 = _vsnprintf($4, 128, $2, $3) | 0;
 $8 = $6 + 1 | 0;
 if (($6 | 0) > 127) {
  $9 = _malloc($8) | 0;
  HEAP32[$3 >> 2] = $varargs;
  _vsnprintf($9, $8, $2, $3) | 0;
  $$0 = $9;
 } else $$0 = $4;
 dest = $5;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$5 >> 2] = $0;
 HEAP32[$5 + 16 >> 2] = $1;
 HEAP32[$5 + 24 >> 2] = $$0;
 $13 = $5 + 80 | 0;
 HEAP32[$13 >> 2] = 0;
 _emscripten_async_run_in_main_thread($5);
 _emscripten_wait_for_call_v($5, inf) | 0;
 if (($$0 | 0) == ($4 | 0)) {
  $15 = HEAP32[$13 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 _free($$0);
 $15 = HEAP32[$13 >> 2] | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function _fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $15 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_strchr(20709, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $7 = ___fmodeflags($1) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $7 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $11 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($11 | 0) < 0) $$0 = 0; else {
   if ($7 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $11;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $15 = ___fdopen($11, $1) | 0;
   if (!$15) {
    HEAP32[$vararg_buffer8 >> 2] = $11;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $$0 = 0;
   } else $$0 = $15;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _make_player($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $6 = sp + 224 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 64 | 0;
 $9 = sp;
 dest = $6;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $7;
 src = 1328;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _make_cube_faces($0, $6, $7, 1, 1, 1, 1, 1, 1, 226, 224, 241, 209, 225, 227, 0.0, 0.0, 0.0, .4000000059604645, 0, 0);
 _mat_identity($8);
 _mat_rotate($9, 0.0, 1.0, 0.0, $4);
 _mat_multiply($8, $9, $8);
 _mat_rotate($9, +Math_cos(+$4), 0.0, +Math_sin(+$4), -$5);
 _mat_multiply($8, $9, $8);
 _mat_apply($0, $8, 36, 3, 10);
 _mat_translate($9, $1, $2, $3);
 _mat_multiply($8, $9, $8);
 _mat_apply($0, $8, 36, 0, 10);
 STACKTOP = sp;
 return;
}

function _lodepng_info_cleanup($0) {
 $0 = $0 | 0;
 var $$08$i = 0, $$lcssa$i = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $19 = 0, $2 = 0, $5 = 0, $8 = 0, $9 = 0;
 $1 = $0 + 20 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) _free($2);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 $5 = $0 + 60 | 0;
 $8 = $0 + 64 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $$pre$i = $0 + 68 | 0;
 if (!(HEAP32[$5 >> 2] | 0)) $$lcssa$i = $9; else {
  $$08$i = 0;
  $11 = $9;
  while (1) {
   $10 = $11 + ($$08$i << 2) | 0;
   _free(HEAP32[$10 >> 2] | 0);
   HEAP32[$10 >> 2] = 0;
   $14 = (HEAP32[$$pre$i >> 2] | 0) + ($$08$i << 2) | 0;
   _free(HEAP32[$14 >> 2] | 0);
   HEAP32[$14 >> 2] = 0;
   $$08$i = $$08$i + 1 | 0;
   $19 = HEAP32[$8 >> 2] | 0;
   if ($$08$i >>> 0 >= (HEAP32[$5 >> 2] | 0) >>> 0) {
    $$lcssa$i = $19;
    break;
   } else $11 = $19;
  }
 }
 _free($$lcssa$i);
 _free(HEAP32[$$pre$i >> 2] | 0);
 _LodePNGIText_cleanup($0);
 _free(HEAP32[$0 + 136 >> 2] | 0);
 _free(HEAP32[$0 + 140 >> 2] | 0);
 _free(HEAP32[$0 + 144 >> 2] | 0);
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $1 = 0, $10 = 0, $19 = 0, $22 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 5;
 } else {
  $$01518 = $0;
  $22 = $1;
  while (1) {
   if (!(HEAP8[$$01518 >> 0] | 0)) {
    $$pn = $22;
    break L1;
   }
   $6 = $$01518 + 1 | 0;
   $22 = $6;
   if (!($22 & 3)) {
    $$015$lcssa = $6;
    label = 5;
    break;
   } else $$01518 = $6;
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn29 = $$0;
   while (1) {
    $19 = $$pn29 + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn29 = $19;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $1 | 0;
}

function _proxy_main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $15 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 4 | 0;
 if (!(_emscripten_has_threading_support() | 0)) {
  $15 = Atomics_load(HEAP32, 33271) | 0;
  $$1 = ___call_main($15 | 0, Atomics_load(HEAP32, 33272) | 0) | 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 _pthread_attr_init($2) | 0;
 _pthread_attr_setdetachstate($2, 0) | 0;
 _pthread_attr_setstacksize($2, 131072) | 0;
 if (_emscripten_asm_const_i(1) | 0) HEAP32[$2 + 36 >> 2] = 20741;
 Atomics_store(HEAP32, 33271, $0) | 0;
 Atomics_store(HEAP32, 33272, $1) | 0;
 if (!(_pthread_create(sp | 0, $2 | 0, 4, 133084) | 0)) {
  _emscripten_asm_const_i(2) | 0;
  $$0 = 0;
 } else {
  $11 = Atomics_load(HEAP32, 33271) | 0;
  $$0 = ___call_main($11 | 0, Atomics_load(HEAP32, 33272) | 0) | 0;
 }
 $$1 = $$0;
 STACKTOP = sp;
 return $$1 | 0;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $6 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[14e3 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 4;
   break;
  }
  $6 = $$016 + 1 | 0;
  if (($6 | 0) == 87) {
   $$115$ph = 87;
   label = 5;
   break;
  } else $$016 = $6;
 }
 if ((label | 0) == 4) if (!$$016) $$012$lcssa = 14096; else {
  $$115$ph = $$016;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$01214 = 14096;
  $$115 = $$115$ph;
  while (1) {
   $$113 = $$01214;
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0;
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0;
   if (!$$115) {
    $$012$lcssa = $$113;
    break;
   } else $$01214 = $$113;
  }
 }
 return ___lctrans($$012$lcssa, Atomics_load(HEAP32, $1 + 20 >> 2) | 0) | 0;
}

function _emscripten_main_thread_process_queued_calls() {
 var $$0910 = 0, $15 = 0, $3 = 0, $6 = 0, $8 = 0;
 if (!(_emscripten_is_main_runtime_thread() | 0)) ___assert_fail(20804, 20926, 415, 21018);
 $3 = (_emscripten_is_main_runtime_thread() | 0) == 0;
 if ($3 | (HEAP32[33273] | 0) != 0) return;
 HEAP32[33273] = 1;
 ___pthread_mutex_lock(133096) | 0;
 $6 = Atomics_load(HEAP32, 33281) | 0;
 $8 = ($6 | 0) == (Atomics_load(HEAP32, 33282) | 0);
 ___pthread_mutex_unlock(133096) | 0;
 if (!$8) {
  $$0910 = $6;
  do {
   __do_call(HEAP32[133132 + ($$0910 << 2) >> 2] | 0);
   ___pthread_mutex_lock(133096) | 0;
   $$0910 = ($$0910 + 1 | 0) % 128 | 0;
   Atomics_store(HEAP32, 33281, $$0910) | 0;
   $15 = ($$0910 | 0) == (Atomics_load(HEAP32, 33282) | 0);
   ___pthread_mutex_unlock(133096) | 0;
  } while (!$15);
 }
 _emscripten_futex_wake(133124, 2147483647) | 0;
 HEAP32[33273] = 0;
 return;
}

function _on_right_click() {
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (!(_is_obstacle(_hit_test(1, +HEAPF32[30548], +HEAPF32[30549], +HEAPF32[30550], +HEAPF32[30551], +HEAPF32[30552], $0, $1, $2) | 0) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = +HEAPF32[30550];
 $13 = HEAP32[$0 >> 2] | 0;
 $14 = HEAP32[$1 >> 2] | 0;
 $15 = HEAP32[$2 >> 2] | 0;
 $17 = ~~+_llvm_round_f32(+(+HEAPF32[30549]));
 if (($15 | 0) == (~~+_llvm_round_f32(+$12) | 0)) if (($13 | 0) == (~~+_llvm_round_f32(+(+HEAPF32[30548])) | 0)) if (($14 | 0) == ($17 | 0) | ($17 + -1 | 0) == ($14 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[32728] = $13;
 HEAP32[32729] = $14;
 HEAP32[32730] = $15;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _make_sphere($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $5 = 0, $8 = 0;
 $5 = $0 + ((__make_sphere($0, $1, $2, 2336, 2324, 2288, 2416, 2404, 2368) | 0) * 24 << 2) | 0;
 $8 = $5 + ((__make_sphere($5, $1, $2, 2300, 2336, 2288, 2380, 2416, 2368) | 0) * 24 << 2) | 0;
 $11 = $8 + ((__make_sphere($8, $1, $2, 2324, 2336, 2348, 2404, 2416, 2428) | 0) * 24 << 2) | 0;
 $14 = $11 + ((__make_sphere($11, $1, $2, 2336, 2300, 2348, 2416, 2380, 2428) | 0) * 24 << 2) | 0;
 $17 = $14 + ((__make_sphere($14, $1, $2, 2288, 2324, 2312, 2368, 2404, 2392) | 0) * 24 << 2) | 0;
 $20 = $17 + ((__make_sphere($17, $1, $2, 2288, 2312, 2300, 2368, 2392, 2380) | 0) * 24 << 2) | 0;
 __make_sphere($20 + ((__make_sphere($20, $1, $2, 2348, 2312, 2324, 2428, 2392, 2404) | 0) * 24 << 2) | 0, $1, $2, 2348, 2300, 2312, 2428, 2380, 2392) | 0;
 return;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$2 = 0, $10 = 0, $16 = 0, $22 = 0, $25 = 0, $30 = 0, $9 = 0;
 if (!$0) {
  $$2 = _malloc($1) | 0;
  return $$2 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $$2 = 0;
  return $$2 | 0;
 }
 $9 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
 $10 = $0 + -8 | 0;
 if (HEAP32[33238] & 2 | 0) if (___pthread_mutex_lock(132956) | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $16 = _try_realloc_chunk($10, $9) | 0;
 if (HEAP32[33238] & 2 | 0) ___pthread_mutex_unlock(132956) | 0;
 if ($16 | 0) {
  $$2 = $16 + 8 | 0;
  return $$2 | 0;
 }
 $22 = _malloc($1) | 0;
 if (!$22) {
  $$2 = 0;
  return $$2 | 0;
 }
 $25 = HEAP32[$0 + -4 >> 2] | 0;
 $30 = ($25 & -8) - (($25 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($22 | 0, $0 | 0, ($30 >>> 0 < $1 >>> 0 ? $30 : $1) | 0) | 0;
 _free($0);
 $$2 = $22;
 return $$2 | 0;
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 7]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _make_program($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = _glCreateProgram() | 0;
 _glAttachShader($4 | 0, $0 | 0);
 _glAttachShader($4 | 0, $1 | 0);
 _glLinkProgram($4 | 0);
 _glGetProgramiv($4 | 0, 35714, $2 | 0);
 if (!(HEAP32[$2 >> 2] | 0)) {
  _glGetProgramiv($4 | 0, 35716, $3 | 0);
  $7 = HEAP32[$3 >> 2] | 0;
  $8 = _calloc($7, 1) | 0;
  _glGetProgramInfoLog($4 | 0, $7 | 0, 0, $8 | 0);
  $9 = HEAP32[3976] | 0;
  HEAP32[$vararg_buffer >> 2] = $8;
  _fprintf($9, 16808, $vararg_buffer) | 0;
  _free($8);
 }
 _glDetachShader($4 | 0, $0 | 0);
 _glDetachShader($4 | 0, $1 | 0);
 _glDeleteShader($0 | 0);
 _glDeleteShader($1 | 0);
 STACKTOP = sp;
 return $4 | 0;
}

function _simplex3($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 var $$030$lcssa = 0.0, $$03037 = 0.0, $$031$lcssa = 0.0, $$03136 = 0.0, $$03235 = 0.0, $$03334 = 0.0, $$038 = 0, $10 = 0.0, $16 = 0.0, $6 = 0.0;
 $6 = +_noise3($0, $1, $2);
 if (($3 | 0) > 1) {
  $$03037 = $6;
  $$03136 = 1.0;
  $$03235 = 1.0;
  $$03334 = 1.0;
  $$038 = 1;
  while (1) {
   $$03334 = $$03334 * $5;
   $$03235 = $$03235 * $4;
   $10 = $$03136 + $$03235;
   $16 = $$03037 + $$03235 * +_noise3($$03334 * $0, $$03334 * $1, $$03334 * $2);
   $$038 = $$038 + 1 | 0;
   if (($$038 | 0) == ($3 | 0)) {
    $$030$lcssa = $16;
    $$031$lcssa = $10;
    break;
   } else {
    $$03037 = $16;
    $$03136 = $10;
   }
  }
 } else {
  $$030$lcssa = $6;
  $$031$lcssa = 1.0;
 }
 return +(($$030$lcssa / $$031$lcssa + 1.0) * .5);
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _pthread_mutex_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$sroa$0 = sp;
 HEAP32[$$sroa$0 >> 2] = 0;
 HEAP32[$$sroa$0 + 4 >> 2] = 0;
 HEAP32[$$sroa$0 + 8 >> 2] = 0;
 HEAP32[$$sroa$0 + 12 >> 2] = 0;
 HEAP32[$$sroa$0 + 16 >> 2] = 0;
 HEAP32[$$sroa$0 + 20 >> 2] = 0;
 HEAP32[$$sroa$0 + 24 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$$sroa$0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$$sroa$0 + 16 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$$sroa$0 + 20 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$$sroa$0 + 24 >> 2];
 if (!$1) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return 0;
}

function _fclose($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $25 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0;
 if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) > -1) $30 = ___lockfile($0) | 0; else $30 = 0;
 ___unlist_locked_file($0);
 $7 = (HEAP32[$0 >> 2] & 1 | 0) != 0;
 if (!$7) {
  $8 = ___ofl_lock() | 0;
  $10 = HEAP32[$0 + 52 >> 2] | 0;
  $$pre = $0 + 56 | 0;
  if ($10 | 0) HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2];
  $15 = HEAP32[$$pre >> 2] | 0;
  if ($15 | 0) HEAP32[$15 + 52 >> 2] = $10;
  if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) HEAP32[$8 >> 2] = $15;
  ___ofl_unlock();
 }
 $21 = _fflush($0) | 0;
 $25 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 7]($0) | 0 | $21;
 $27 = HEAP32[$0 + 92 >> 2] | 0;
 if ($27 | 0) _free($27);
 if ($7) {
  if ($30 | 0) ___unlockfile($0);
 } else _free($0);
 return $25 | 0;
}

function ___fseeko_unlocked($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$019 = 0, $10 = 0, $12 = 0, label = 0;
 if (($2 | 0) == 1) $$019 = $1 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0; else $$019 = $1;
 $10 = $0 + 20 | 0;
 $12 = $0 + 28 | 0;
 if ((HEAP32[$10 >> 2] | 0) >>> 0 > (HEAP32[$12 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 7]($0, 0, 0) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) $$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 7]($0, $$019, $2) | 0) < 0) $$0 = -1; else {
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _emscripten_sync_run_in_main_thread_7($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $16 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $8 = sp;
 dest = $8;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$8 >> 2] = $0;
 HEAP32[$8 + 16 >> 2] = $1;
 HEAP32[$8 + 24 >> 2] = $2;
 HEAP32[$8 + 32 >> 2] = $3;
 HEAP32[$8 + 40 >> 2] = $4;
 HEAP32[$8 + 48 >> 2] = $5;
 HEAP32[$8 + 56 >> 2] = $6;
 HEAP32[$8 + 64 >> 2] = $7;
 $16 = $8 + 80 | 0;
 HEAP32[$16 >> 2] = 0;
 _emscripten_async_run_in_main_thread($8);
 _emscripten_wait_for_call_v($8, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$16 >> 2] | 0;
}

function _simplex2($0, $1, $2, $3, $4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$027$lcssa = 0.0, $$02734 = 0.0, $$028$lcssa = 0.0, $$02833 = 0.0, $$02932 = 0.0, $$03031 = 0.0, $$035 = 0, $14 = 0.0, $5 = 0.0, $9 = 0.0;
 $5 = +_noise2($0, $1);
 if (($2 | 0) > 1) {
  $$02734 = $5;
  $$02833 = 1.0;
  $$02932 = 1.0;
  $$03031 = 1.0;
  $$035 = 1;
  while (1) {
   $$03031 = $$03031 * $4;
   $$02932 = $$02932 * $3;
   $9 = $$02833 + $$02932;
   $14 = $$02734 + $$02932 * +_noise2($$03031 * $0, $$03031 * $1);
   $$035 = $$035 + 1 | 0;
   if (($$035 | 0) == ($2 | 0)) {
    $$027$lcssa = $14;
    $$028$lcssa = $9;
    break;
   } else {
    $$02734 = $14;
    $$02833 = $9;
   }
  }
 } else {
  $$027$lcssa = $5;
  $$028$lcssa = 1.0;
 }
 return +(($$027$lcssa / $$028$lcssa + 1.0) * .5);
}

function _emscripten_wait_for_call_v($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$ = 0, $$01921 = 0.0, $$020$lcssa = 0, $$1 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0.0, $6 = 0.0, $9 = 0;
 $2 = $0 + 8 | 0;
 $3 = Atomics_load(HEAP32, $2 >> 2) | 0;
 if ($3 | 0) {
  $$1 = $3;
  $13 = ($$1 | 0) == 0;
  $$ = $13 ? -8 : 0;
  return $$ | 0;
 }
 $5 = +_emscripten_get_now();
 $6 = $5 + $1;
 _emscripten_set_current_thread_status(5);
 if ($5 < $6) {
  $$01921 = $5;
  do {
   _emscripten_futex_wait($2 | 0, 0, +($6 - $$01921)) | 0;
   $9 = Atomics_load(HEAP32, $2 >> 2) | 0;
   $$01921 = +_emscripten_get_now();
  } while (($9 | 0) == 0 & $$01921 < $6);
  $$020$lcssa = $9;
 } else $$020$lcssa = 0;
 _emscripten_set_current_thread_status(1);
 $$1 = $$020$lcssa;
 $13 = ($$1 | 0) == 0;
 $$ = $13 ? -8 : 0;
 return $$ | 0;
}

function _make_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $1;
 $5 = _glCreateShader($0 | 0) | 0;
 _glShaderSource($5 | 0, 1, $2 | 0, 0);
 _glCompileShader($5 | 0);
 _glGetShaderiv($5 | 0, 35713, $3 | 0);
 if (HEAP32[$3 >> 2] | 0) {
  STACKTOP = sp;
  return $5 | 0;
 }
 _glGetShaderiv($5 | 0, 35716, $4 | 0);
 $8 = HEAP32[$4 >> 2] | 0;
 $9 = _calloc($8, 1) | 0;
 _glGetShaderInfoLog($5 | 0, $8 | 0, 0, $9 | 0);
 $10 = HEAP32[3976] | 0;
 HEAP32[$vararg_buffer >> 2] = $9;
 _fprintf($10, 16780, $vararg_buffer) | 0;
 _free($9);
 STACKTOP = sp;
 return $5 | 0;
}

function ___pthread_tsd_run_dtors() {
 var $$02427 = 0, $$026 = 0, $$125 = 0, $$2 = 0, $0 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 $0 = _pthread_self() | 0;
 if (!(HEAP32[$0 + 60 >> 2] | 0)) return;
 $4 = $0 + 116 | 0;
 $$02427 = 0;
 do {
  $$026 = 0;
  $$125 = 0;
  while (1) {
   $6 = (HEAP32[$4 >> 2] | 0) + ($$026 << 2) | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   if (!$7) $$2 = $$125; else {
    $9 = 22288 + ($$026 << 2) | 0;
    if (!(Atomics_load(HEAP32, $9 >> 2) | 0)) $$2 = $$125; else {
     HEAP32[$6 >> 2] = 0;
     FUNCTION_TABLE_vi[(Atomics_load(HEAP32, $9 >> 2) | 0) & 0]($7);
     $$2 = 1;
    }
   }
   $$026 = $$026 + 1 | 0;
   if (($$026 | 0) == 128) break; else $$125 = $$2;
  }
  $$02427 = $$02427 + 1 | 0;
 } while ($$02427 >>> 0 < 4 & ($$2 | 0) != 0);
 return;
}

function _emscripten_sync_run_in_main_thread_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $14 = 0, $7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $7 = sp;
 dest = $7;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$7 >> 2] = $0;
 HEAP32[$7 + 16 >> 2] = $1;
 HEAP32[$7 + 24 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 40 >> 2] = $4;
 HEAP32[$7 + 48 >> 2] = $5;
 HEAP32[$7 + 56 >> 2] = $6;
 $14 = $7 + 80 | 0;
 HEAP32[$14 >> 2] = 0;
 _emscripten_async_run_in_main_thread($7);
 _emscripten_wait_for_call_v($7, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$14 >> 2] | 0;
}

function _draw_triangles_3d($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $5 = 0, $7 = 0;
 _glBindBuffer(34962, $1 | 0);
 $3 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$3 >> 2] | 0);
 $5 = $0 + 8 | 0;
 _glEnableVertexAttribArray(HEAP32[$5 >> 2] | 0);
 $7 = $0 + 12 | 0;
 _glEnableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$3 >> 2] | 0, 3, 5126, 0, 32, 0);
 _glVertexAttribPointer(HEAP32[$5 >> 2] | 0, 3, 5126, 0, 32, 12);
 _glVertexAttribPointer(HEAP32[$7 >> 2] | 0, 2, 5126, 0, 32, 24);
 _glDrawArrays(4, 0, $2 | 0);
 _glDisableVertexAttribArray(HEAP32[$3 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$5 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 _glBindBuffer(34962, 0);
 return;
}

function __render_wireframe($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $13 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $5 = sp;
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 _glLineWidth(1.0);
 _glUniformMatrix4fv(HEAP32[$0 + 16 >> 2] | 0, 1, 0, $1 | 0);
 _make_cube_wireframe($5, +($2 | 0), +($3 | 0), +($4 | 0), .5299999713897705);
 $12 = _gen_buffer(288, $5) | 0;
 _glBindBuffer(34962, $12 | 0);
 $13 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$13 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$13 >> 2] | 0, 3, 5126, 0, 0, 0);
 _glDrawArrays(1, 0, 24);
 _glDisableVertexAttribArray(HEAP32[$13 >> 2] | 0);
 _glBindBuffer(34962, 0);
 _del_buffer($12);
 STACKTOP = sp;
 return;
}

function _load_file($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = _fopen($0, 16883) | 0;
 if (!$1) {
  $3 = HEAP32[3976] | 0;
  $5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  $8 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = $8;
  _fprintf($3, 16756, $vararg_buffer) | 0;
  _exit(1);
 } else {
  _fseek($1, 0, 2) | 0;
  $9 = _ftell($1) | 0;
  _rewind($1);
  $11 = _calloc($9 + 1 | 0, 1) | 0;
  _fread($11, 1, $9, $1) | 0;
  _fclose($1) | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 return 0;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0;
 $3 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 7]($0, 0, 0) | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 7]($0, $11 - $13 | 0, 1) | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _gen_player_buffers() {
 var $$016 = 0, $0 = 0, $10 = 0.0, $12 = 0.0, $14 = 0.0, $15 = 0, $6 = 0.0, $8 = 0.0;
 $$016 = 0;
 do {
  $0 = 122152 + ($$016 * 68 | 0) + 64 | 0;
  _del_buffer(HEAP32[$0 >> 2] | 0);
  if (HEAP32[122152 + ($$016 * 68 | 0) >> 2] | 0) {
   $6 = +HEAPF32[122152 + ($$016 * 68 | 0) + 40 >> 2];
   $8 = +HEAPF32[122152 + ($$016 * 68 | 0) + 44 >> 2];
   $10 = +HEAPF32[122152 + ($$016 * 68 | 0) + 48 >> 2];
   $12 = +HEAPF32[122152 + ($$016 * 68 | 0) + 52 >> 2];
   $14 = +HEAPF32[122152 + ($$016 * 68 | 0) + 56 >> 2];
   $15 = _malloc_faces(15, 6) | 0;
   _make_player($15, $6, $8, $10, $12, $14);
   HEAP32[$0 >> 2] = _gen_faces(15, 6, $15) | 0;
  }
  $$016 = $$016 + 1 | 0;
 } while (($$016 | 0) != 128);
 return;
}

function _emscripten_sync_run_in_main_thread_5($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $6 = sp;
 dest = $6;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$6 >> 2] = $0;
 HEAP32[$6 + 16 >> 2] = $1;
 HEAP32[$6 + 24 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 40 >> 2] = $4;
 HEAP32[$6 + 48 >> 2] = $5;
 $12 = $6 + 80 | 0;
 HEAP32[$12 >> 2] = 0;
 _emscripten_async_run_in_main_thread($6);
 _emscripten_wait_for_call_v($6, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$12 >> 2] | 0;
}

function _pthread_cond_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$0 = 0, $3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$sroa$0 = sp;
 dest = $$sroa$0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $0;
 src = $$sroa$0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!$1) {
  STACKTOP = sp;
  return 0;
 }
 $3 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 + 16 >> 2] = $3 & 2147483647;
 if (($3 | 0) >= 0) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$0 >> 2] = -1;
 STACKTOP = sp;
 return 0;
}

function _draw_signs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0, $7 = 0, $9 = 0;
 _glEnable(32823);
 _glPolygonOffset(-8.0, -1024.0);
 $6 = (HEAP32[$1 + 84 >> 2] | 0) * 6 | 0;
 _glBindBuffer(34962, HEAP32[$1 + 92 >> 2] | 0);
 $7 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 $9 = $0 + 12 | 0;
 _glEnableVertexAttribArray(HEAP32[$9 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$7 >> 2] | 0, 3, 5126, 0, 20, 0);
 _glVertexAttribPointer(HEAP32[$9 >> 2] | 0, 2, 5126, 0, 20, 12);
 _glDrawArrays(4, 0, $6 | 0);
 _glDisableVertexAttribArray(HEAP32[$7 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$9 >> 2] | 0);
 _glBindBuffer(34962, 0);
 _glDisable(32823);
 return;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 7]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, oldDynamicTopOnChange = 0, newDynamicTop = 0, totalMemory = 0;
 totalMemory = getTotalMemory() | 0;
 do {
  oldDynamicTop = Atomics_load(HEAP32, DYNAMICTOP_PTR >> 2) | 0;
  newDynamicTop = oldDynamicTop + increment | 0;
  if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0 | (newDynamicTop | 0) > (totalMemory | 0)) abortOnCannotGrowMemory() | 0;
  oldDynamicTopOnChange = Atomics_compareExchange(HEAP32, DYNAMICTOP_PTR >> 2, oldDynamicTop | 0, newDynamicTop | 0) | 0;
 } while ((oldDynamicTopOnChange | 0) != (oldDynamicTop | 0));
 return oldDynamicTop | 0;
}

function _emscripten_sync_run_in_main_thread_4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $5 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $5 = sp;
 dest = $5;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$5 >> 2] = $0;
 HEAP32[$5 + 16 >> 2] = $1;
 HEAP32[$5 + 24 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 40 >> 2] = $4;
 $10 = $5 + 80 | 0;
 HEAP32[$10 >> 2] = 0;
 _emscripten_async_run_in_main_thread($5);
 _emscripten_wait_for_call_v($5, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function _set_matrix_2d($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0.0, $4 = 0.0, $6 = 0, $9 = 0;
 $3 = +($1 | 0);
 $4 = +($2 | 0);
 HEAPF32[$0 >> 2] = 2.0 / $3;
 $6 = $0 + 4 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 2.0 / $4;
 $9 = $0 + 24 | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 HEAP32[$9 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = -1.0;
 HEAPF32[$0 + 44 >> 2] = 0.0;
 HEAPF32[$0 + 48 >> 2] = -$3 / $3;
 HEAPF32[$0 + 52 >> 2] = -$4 / $4;
 HEAPF32[$0 + 56 >> 2] = -0.0;
 HEAPF32[$0 + 60 >> 2] = 1.0;
 return;
}

function _strncat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $4 = 0, $6 = 0;
 $4 = $0 + (_strlen($0) | 0) | 0;
 L1 : do if (!$2) $$0$lcssa = $4; else {
  $$01013 = $2;
  $$01112 = $1;
  $$014 = $4;
  while (1) {
   $6 = HEAP8[$$01112 >> 0] | 0;
   if (!($6 << 24 >> 24)) {
    $$0$lcssa = $$014;
    break L1;
   }
   $$01013 = $$01013 + -1 | 0;
   $10 = $$014 + 1 | 0;
   HEAP8[$$014 >> 0] = $6;
   if (!$$01013) {
    $$0$lcssa = $10;
    break;
   } else {
    $$01112 = $$01112 + 1 | 0;
    $$014 = $10;
   }
  }
 } while (0);
 HEAP8[$$0$lcssa >> 0] = 0;
 return $0 | 0;
}

function _emscripten_atomic_cas_u64($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $16 = 0, $20 = 0, $24 = 0, $8 = 0;
 $8 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $8 >> 2, 1) | 0) != 0);
 $11 = $0;
 $13 = HEAP32[$11 >> 2] | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 if (!(($13 | 0) == ($1 | 0) & ($16 | 0) == ($2 | 0))) {
  $24 = Atomics_store(HEAP32, $8 >> 2, 0) | 0;
  tempRet0 = $16;
  return $13 | 0;
 }
 $20 = $0;
 HEAP32[$20 >> 2] = $3;
 HEAP32[$20 + 4 >> 2] = $4;
 $24 = Atomics_store(HEAP32, $8 >> 2, 0) | 0;
 tempRet0 = $16;
 return $13 | 0;
}

function _make_cube($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = +$9;
 $10 = +$10;
 $11 = +$11;
 $12 = +$12;
 $13 = $13 | 0;
 $14 = $14 | 0;
 _make_cube_faces($0, $1, $2, $3, $4, $5, $6, $7, $8, HEAP32[2448 + ($13 * 24 | 0) >> 2] | 0, HEAP32[2448 + ($13 * 24 | 0) + 4 >> 2] | 0, HEAP32[2448 + ($13 * 24 | 0) + 8 >> 2] | 0, HEAP32[2448 + ($13 * 24 | 0) + 12 >> 2] | 0, HEAP32[2448 + ($13 * 24 | 0) + 16 >> 2] | 0, HEAP32[2448 + ($13 * 24 | 0) + 20 >> 2] | 0, $9, $10, $11, $12, $13, $14);
 return;
}

function _pad_669($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255;
  } else $$0$lcssa = $9;
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _emscripten_sync_run_in_main_thread_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp;
 dest = $4;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 $8 = $4 + 80 | 0;
 HEAP32[$8 >> 2] = 0;
 _emscripten_async_run_in_main_thread($4);
 _emscripten_wait_for_call_v($4, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$8 >> 2] | 0;
}

function _draw_text($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0;
 _glEnable(3042);
 _glBlendFunc(770, 771);
 _glBindBuffer(34962, $1 | 0);
 $4 = $0 + 4 | 0;
 _glEnableVertexAttribArray(HEAP32[$4 >> 2] | 0);
 $6 = $0 + 12 | 0;
 _glEnableVertexAttribArray(HEAP32[$6 >> 2] | 0);
 _glVertexAttribPointer(HEAP32[$4 >> 2] | 0, 2, 5126, 0, 16, 0);
 _glVertexAttribPointer(HEAP32[$6 >> 2] | 0, 2, 5126, 0, 16, 8);
 _glDrawArrays(4, 0, $2 * 6 | 0);
 _glDisableVertexAttribArray(HEAP32[$4 >> 2] | 0);
 _glDisableVertexAttribArray(HEAP32[$6 >> 2] | 0);
 _glBindBuffer(34962, 0);
 _glDisable(3042);
 return;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function _find_chunk($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01822 = 0, $17 = 0, $3 = 0, label = 0;
 $$01822 = 0;
 while (1) {
  $3 = 23848 + ($$01822 * 96 | 0) | 0;
  if (HEAP32[23848 + ($$01822 * 96 | 0) + 12 >> 2] | 0) if ((HEAP32[$3 >> 2] | 0) == ($0 | 0)) if ((HEAP32[23848 + ($$01822 * 96 | 0) + 4 >> 2] | 0) == ($1 | 0)) if ((HEAP32[23848 + ($$01822 * 96 | 0) + 8 >> 2] | 0) == ($2 | 0)) {
   $17 = $3;
   label = 7;
   break;
  }
  $$01822 = $$01822 + 1 | 0;
  if ($$01822 >>> 0 >= 1024) {
   $17 = 0;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) return $17 | 0;
 return 0;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0;
 $1 = HEAP32[4008] | 0;
 if ((Atomics_load(HEAP32, $1 + 76 >> 2) | 0) > -1) $19 = ___lockfile($1) | 0; else $19 = 0;
 do if ((_fputs($0, $1) | 0) < 0) $20 = -1; else {
  if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
   $11 = $1 + 20 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$11 >> 2] = $12 + 1;
    HEAP8[$12 >> 0] = 10;
    $20 = 0;
    break;
   }
  }
  $20 = (___overflow($1, 10) | 0) >> 31;
 } while (0);
 if ($19 | 0) ___unlockfile($1);
 return $20 | 0;
}

function _mat_translate($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $6 = 0;
 HEAPF32[$0 >> 2] = 1.0;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 1.0;
 $6 = $0 + 24 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 1.0;
 HEAPF32[$0 + 44 >> 2] = 0.0;
 HEAPF32[$0 + 48 >> 2] = $1;
 HEAPF32[$0 + 52 >> 2] = $2;
 HEAPF32[$0 + 56 >> 2] = $3;
 HEAPF32[$0 + 60 >> 2] = 1.0;
 return;
}

function ___fmodeflags($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$2 = 0, $$4 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $spec$select = 0, $spec$select13 = 0;
 $2 = (_strchr($0, 43) | 0) == 0;
 $3 = HEAP8[$0 >> 0] | 0;
 $$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2;
 $6 = (_strchr($0, 120) | 0) == 0;
 $spec$select = $6 ? $$0 : $$0 | 128;
 $9 = (_strchr($0, 101) | 0) == 0;
 $$2 = $9 ? $spec$select : $spec$select | 524288;
 $spec$select13 = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64;
 $$4 = $3 << 24 >> 24 == 119 ? $spec$select13 | 512 : $spec$select13;
 return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0;
}

function _emscripten_sync_run_in_main_thread_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $3 = sp;
 dest = $3;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $6 = $3 + 80 | 0;
 HEAP32[$6 >> 2] = 0;
 _emscripten_async_run_in_main_thread($3);
 _emscripten_wait_for_call_v($3, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0, $spec$select = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((Atomics_load(HEAP32, $3 + 76 >> 2) | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $13 = $11; else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else $13 = ___fwritex($0, $4, $3) | 0;
 if (($13 | 0) == ($4 | 0)) $15 = $spec$select; else $15 = ($13 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function _stop() {
 var $$014$i = 0, $1 = 0;
 _del_buffer(HEAP32[33112] | 0);
 $$014$i = 0;
 do {
  $1 = 23848 + ($$014$i * 96 | 0) + 12 | 0;
  if (HEAP32[$1 >> 2] | 0) {
   _map_free(23848 + ($$014$i * 96 | 0) + 20 | 0);
   _map_free(23848 + ($$014$i * 96 | 0) + 44 | 0);
   _sign_list_free(23848 + ($$014$i * 96 | 0) + 68 | 0);
   _del_buffer(HEAP32[23848 + ($$014$i * 96 | 0) + 88 >> 2] | 0);
   _del_buffer(HEAP32[23848 + ($$014$i * 96 | 0) + 92 >> 2] | 0);
   HEAP32[$1 >> 2] = 0;
  }
  $$014$i = $$014$i + 1 | 0;
 } while (($$014$i | 0) != 1024);
 _glfwTerminate();
 return;
}

function _init_chunk($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $7 = 0;
 HEAP32[$0 + 12 >> 2] = 1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 $7 = $0 + 80 | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 _sign_list_alloc($0 + 68 | 0, 16);
 $12 = $1 << 5;
 $13 = $3 << 5;
 $14 = $2 << 5;
 _map_alloc($0 + 20 | 0, $12, $13, $14, 32767);
 _map_alloc($0 + 44 | 0, $12, $13, $14, 32767);
 return;
}

function _make_cube_wireframe($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$02021 = 0, $$022 = 0, $6 = 0;
 $$02021 = 0;
 $$022 = $0;
 while (1) {
  $6 = HEAP32[1520 + ($$02021 << 2) >> 2] | 0;
  HEAPF32[$$022 >> 2] = +HEAPF32[1424 + ($6 * 12 | 0) >> 2] * $4 + $1;
  HEAPF32[$$022 + 4 >> 2] = +HEAPF32[1424 + ($6 * 12 | 0) + 4 >> 2] * $4 + $2;
  HEAPF32[$$022 + 8 >> 2] = +HEAPF32[1424 + ($6 * 12 | 0) + 8 >> 2] * $4 + $3;
  $$02021 = $$02021 + 1 | 0;
  if (($$02021 | 0) == 24) break; else $$022 = $$022 + 12 | 0;
 }
 return;
}

function _map_set($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $17 = 0;
 $10 = $1 - (HEAP32[$0 >> 2] | 0) & 255;
 if ($10 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = $2 - (HEAP32[$0 + 4 >> 2] | 0) & 255;
 if ($15 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = $3 - (HEAP32[$0 + 8 >> 2] | 0) & 255;
 if ($17 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[(HEAP32[$0 + 20 >> 2] | 0) + (($17 << 10 | $10) + ($15 << 5) << 1) + 1 >> 0] = $4;
 $$0 = 1;
 return $$0 | 0;
}

function _ensure_chunks($0) {
 $0 = $0 | 0;
 _check_workers();
 _mtx_lock(130940) | 0;
 if (!(HEAP32[32733] | 0)) _ensure_chunks_worker($0, 130928);
 _mtx_unlock(130940) | 0;
 _mtx_lock(131264) | 0;
 if (!(HEAP32[32814] | 0)) _ensure_chunks_worker($0, 131252);
 _mtx_unlock(131264) | 0;
 _mtx_lock(131588) | 0;
 if (!(HEAP32[32895] | 0)) _ensure_chunks_worker($0, 131576);
 _mtx_unlock(131588) | 0;
 _mtx_lock(131912) | 0;
 if (HEAP32[32976] | 0) {
  _mtx_unlock(131912) | 0;
  return;
 }
 _ensure_chunks_worker($0, 131900);
 _mtx_unlock(131912) | 0;
 return;
}

function _lodepng_load_file($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 $3 = _fopen($2, 16883) | 0;
 if (!$3) {
  $$0 = 78;
  return $$0 | 0;
 }
 _fseek($3, 0, 2) | 0;
 $5 = _ftell($3) | 0;
 _rewind($3);
 HEAP32[$1 >> 2] = 0;
 $6 = _malloc($5) | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = ($5 | 0) != 0;
 if (!(($6 | 0) == 0 | $7 ^ 1)) HEAP32[$1 >> 2] = _fread($6, 1, $5, $3) | 0;
 _fclose($3) | 0;
 $$0 = $7 & (HEAP32[$0 >> 2] | 0) == 0 ? 83 : 0;
 return $$0 | 0;
}

function _mat_identity($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 HEAPF32[$0 >> 2] = 1.0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 1.0;
 $3 = $0 + 24 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 1.0;
 $5 = $0 + 44 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAPF32[$0 + 60 >> 2] = 1.0;
 return;
}

function _HuffmanTree_makeFromLengths($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$017 = 0, $5 = 0;
 $5 = _malloc($2 << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $5;
 if (!$5) {
  $$016 = 83;
  return $$016 | 0;
 }
 if ($2 | 0) {
  $$017 = 0;
  do {
   HEAP32[$5 + ($$017 << 2) >> 2] = HEAP32[$1 + ($$017 << 2) >> 2];
   $$017 = $$017 + 1 | 0;
  } while (($$017 | 0) != ($2 | 0));
 }
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $3;
 $$016 = _HuffmanTree_makeFromLengths2($0) | 0;
 return $$016 | 0;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[13984 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 1;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __emscripten_atomic_fetch_and_sub_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $15 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = _i64Subtract($11 | 0, $14 | 0, $1 | 0, $2 | 0) | 0;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = tempRet0;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function _emscripten_sync_run_in_main_thread_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp;
 dest = $2;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $4 = $2 + 80 | 0;
 HEAP32[$4 >> 2] = 0;
 _emscripten_async_run_in_main_thread($2);
 _emscripten_wait_for_call_v($2, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function _map_get($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $9 = 0;
 $9 = $1 - (HEAP32[$0 >> 2] | 0) & 255;
 if ($9 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $14 = $2 - (HEAP32[$0 + 4 >> 2] | 0) & 255;
 if ($14 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = $3 - (HEAP32[$0 + 8 >> 2] | 0) & 255;
 if ($16 >>> 0 > 31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP8[(HEAP32[$0 + 20 >> 2] | 0) + (($16 << 10 | $9) + ($14 << 5) << 1) + 1 >> 0] | 0;
 return $$0 | 0;
}

function __emscripten_atomic_fetch_and_add_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $15 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = _i64Add($11 | 0, $14 | 0, $1 | 0, $2 | 0) | 0;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = tempRet0;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _lodepng_decode32_file($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = _lodepng_load_file($4, $5, $3) | 0;
 $8 = HEAP32[$4 >> 2] | 0;
 if ($6 | 0) {
  $$0$i = $6;
  _free($8);
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $$0$i = _lodepng_decode_memory($0, $1, $2, $8, HEAP32[$5 >> 2] | 0, 6, 8) | 0;
 _free($8);
 STACKTOP = sp;
 return $$0$i | 0;
}

function _on_left_click() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (!(_is_destructable(_hit_test(0, +HEAPF32[30548], +HEAPF32[30549], +HEAPF32[30550], +HEAPF32[30551], +HEAPF32[30552], $0, $1, $2) | 0) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[32728] = HEAP32[$0 >> 2];
 HEAP32[32729] = HEAP32[$1 >> 2];
 HEAP32[32730] = HEAP32[$2 >> 2];
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _pthread_attr_init($0) {
 $0 = $0 | 0;
 var $$sroa$0 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$sroa$0 = sp;
 dest = $$sroa$0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $0;
 src = $$sroa$0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return 0;
}

function _emscripten_atomic_sub_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $15 = _i64Subtract(HEAP32[$9 >> 2] | 0, HEAP32[$9 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0;
 $16 = tempRet0;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = $16;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $16;
 return $15 | 0;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _emscripten_atomic_add_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $15 = _i64Add(HEAP32[$9 >> 2] | 0, HEAP32[$9 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0;
 $16 = tempRet0;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = $16;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $16;
 return $15 | 0;
}

function _emscripten_sync_run_in_main_thread_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $1 = sp;
 dest = $1;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 >> 2] = $0;
 $2 = $1 + 80 | 0;
 HEAP32[$2 >> 2] = 0;
 _emscripten_async_run_in_main_thread($1);
 _emscripten_wait_for_call_v($1, inf) | 0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function ___timedwait($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 ___pthread_setcancelstate(1, $5) | 0;
 _emscripten_conditional_set_current_thread_status(1, 4);
 $6 = ___timedwait_cp($0, $1, $2, $3, $4) | 0;
 _emscripten_conditional_set_current_thread_status(4, 1);
 ___pthread_setcancelstate(HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function __emscripten_atomic_fetch_and_xor_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $17 = $0;
 HEAP32[$17 >> 2] = $11 ^ $1;
 HEAP32[$17 + 4 >> 2] = $14 ^ $2;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function __emscripten_atomic_fetch_and_and_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $17 = $0;
 HEAP32[$17 >> 2] = $11 & $1;
 HEAP32[$17 + 4 >> 2] = $14 & $2;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function __emscripten_atomic_fetch_and_or_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $17 = $0;
 HEAP32[$17 >> 2] = $11 | $1;
 HEAP32[$17 + 4 >> 2] = $14 | $2;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function _tokenize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$017 = 0, $$1 = 0, $10 = 0, $6 = 0;
 if (!$0) $$017 = HEAP32[$2 >> 2] | 0; else $$017 = $0;
 $6 = $$017 + (_strspn($$017, $1) | 0) | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = $6 + (_strcspn($6, $1) | 0) | 0;
 if (!(HEAP8[$10 >> 0] | 0)) $$1 = $10; else {
  HEAP8[$10 >> 0] = 0;
  $$1 = $10 + 1 | 0;
 }
 HEAP32[$2 >> 2] = $$1;
 $$0 = $6;
 return $$0 | 0;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0;
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0;
   $12 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11;
    break;
   } else $$04 = $11;
  }
 }
 return $$0$lcssa | 0;
}

function ___ftello_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $12 = 0;
 if (!(HEAP32[$0 >> 2] & 128)) $11 = 1; else $11 = (HEAP32[$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$0 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $12 = FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 7]($0, 0, $11) | 0;
 if (($12 | 0) < 0) $$0 = $12; else $$0 = $12 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 28 >> 2] | 0) | 0;
 return $$0 | 0;
}

function _emscripten_atomic_exchange_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $15 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $0;
 HEAP32[$15 >> 2] = $1;
 HEAP32[$15 + 4 >> 2] = $2;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $14;
 return $11 | 0;
}

function _emscripten_atomic_xor_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $15 = HEAP32[$9 >> 2] ^ $1;
 $16 = HEAP32[$9 + 4 >> 2] ^ $2;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = $16;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $16;
 return $15 | 0;
}

function _emscripten_atomic_and_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $15 = HEAP32[$9 >> 2] & $1;
 $16 = HEAP32[$9 + 4 >> 2] & $2;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = $16;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $16;
 return $15 | 0;
}

function _emscripten_atomic_or_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 $15 = HEAP32[$9 >> 2] | $1;
 $16 = HEAP32[$9 + 4 >> 2] | $2;
 $17 = $0;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = $16;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $16;
 return $15 | 0;
}

function _string_width($0) {
 $0 = $0 | 0;
 var $$012$lcssa = 0, $$01213 = 0, $$014 = 0, $1 = 0, $8 = 0;
 $1 = _strlen($0) | 0;
 if (($1 | 0) <= 0) {
  $$012$lcssa = 0;
  return $$012$lcssa | 0;
 }
 $$01213 = 0;
 $$014 = 0;
 while (1) {
  $8 = (HEAP32[10560 + (HEAP8[$0 + $$014 >> 0] << 2) >> 2] | 0) + $$01213 | 0;
  $$014 = $$014 + 1 | 0;
  if (($$014 | 0) == ($1 | 0)) {
   $$012$lcssa = $8;
   break;
  } else $$01213 = $8;
 }
 return $$012$lcssa | 0;
}

function _map_copy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $10 = HEAP32[$1 + 12 >> 2] | 0;
 HEAP32[$0 + 12 >> 2] = $10;
 HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
 $16 = _calloc($10 + 1 | 0, 2) | 0;
 HEAP32[$0 + 20 >> 2] = $16;
 _memcpy($16 | 0, HEAP32[$1 + 20 >> 2] | 0, ($10 << 1) + 2 | 0) | 0;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _gen_faces($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $5 = Math_imul($0 * 24 | 0, $1) | 0;
 _glGenBuffers(1, $3 | 0);
 _glBindBuffer(34962, HEAP32[$3 >> 2] | 0);
 _glBufferData(34962, $5 | 0, $2 | 0, 35044);
 _glBindBuffer(34962, 0);
 $7 = HEAP32[$3 >> 2] | 0;
 _free($2);
 STACKTOP = sp;
 return $7 | 0;
}

function _worker_run($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = $0 + 12 | 0;
 $2 = $0 + 4 | 0;
 $3 = $0 + 88 | 0;
 $4 = $0 + 40 | 0;
 while (1) {
  _mtx_lock($1) | 0;
  if ((HEAP32[$2 >> 2] | 0) != 1) do _cnd_wait($4, $1) | 0; while ((HEAP32[$2 >> 2] | 0) != 1);
  _mtx_unlock($1) | 0;
  _compute_chunk($3);
  _mtx_lock($1) | 0;
  HEAP32[$2 >> 2] = 2;
  _mtx_unlock($1) | 0;
 }
 return 0;
}

function ___unlist_locked_file($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$sink = 0, $10 = 0, $5 = 0;
 if (HEAP32[$0 + 68 >> 2] | 0) {
  $5 = HEAP32[$0 + 116 >> 2] | 0;
  $$pre = $0 + 112 | 0;
  if ($5 | 0) HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2];
  $10 = HEAP32[$$pre >> 2] | 0;
  if (!$10) $$sink = (___pthread_self_605() | 0) + 232 | 0; else $$sink = $10 + 116 | 0;
  HEAP32[$$sink >> 2] = $5;
 }
 return;
}

function _thrd_create($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0;
 $3 = _malloc(8) | 0;
 if (!$3) {
  $$0 = 4;
  return $$0 | 0;
 }
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (!(_pthread_create($0 | 0, 0, 3, $3 | 0) | 0)) {
  if (HEAP32[$0 >> 2] | 0) {
   $$0 = 1;
   return $$0 | 0;
  }
 } else HEAP32[$0 >> 2] = 0;
 _free($3);
 $$0 = 0;
 return $$0 | 0;
}

function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) $$0 = 0; else {
  $3 = Math_imul($1, $0) | 0;
  if (($1 | $0) >>> 0 > 65535) $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; else $$0 = $3;
 }
 $8 = _malloc($$0) | 0;
 if (!$8) return $8 | 0;
 if (!(HEAP32[$8 + -4 >> 2] & 3)) return $8 | 0;
 _memset($8 | 0, 0, $$0 | 0) | 0;
 return $8 | 0;
}

function _update_fps($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0.0, $5 = 0, $7 = 0.0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 $4 = +_glfwGetTime();
 $5 = $0 + 8 | 0;
 $7 = $4 - +HEAPF64[$5 >> 3];
 if (!($7 >= 1.0)) return;
 HEAP32[$0 >> 2] = ~~+_llvm_round_f64(+(+((HEAP32[$1 >> 2] | 0) >>> 0) / $7)) >>> 0;
 HEAP32[$1 >> 2] = 0;
 HEAPF64[$5 >> 3] = $4;
 return;
}

function _get_unused_chunk_mem_location() {
 var $$01214 = 0, $1 = 0, $6 = 0, label = 0;
 $$01214 = 1;
 while (1) {
  $1 = $$01214 + 1 | 0;
  if (!(HEAP32[23848 + ($$01214 * 96 | 0) + 12 >> 2] | 0)) break;
  if ($1 >>> 0 < 1024) $$01214 = $1; else {
   $6 = 0;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 5) return $6 | 0;
 $6 = 23848 + ($$01214 * 96 | 0) | 0;
 return $6 | 0;
}

function runPostSets() {}
function __register_pthread_ptr(pthreadPtr, isMainBrowserThread, isMainRuntimeThread) {
 pthreadPtr = pthreadPtr | 0;
 isMainBrowserThread = isMainBrowserThread | 0;
 isMainRuntimeThread = isMainRuntimeThread | 0;
 __pthread_ptr = pthreadPtr;
 __pthread_is_main_browser_thread = isMainBrowserThread;
 __pthread_is_main_runtime_thread = isMainRuntimeThread;
}

function _is_transparent($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0;
 L1 : do if (!$0) $$0 = 1; else {
  $4 = ($0 | 0) < 0 ? 0 - $0 | 0 : $0;
  if (($4 + -17 | 0) >>> 0 > 6) {
   switch ($4 | 0) {
   case 12:
   case 15:
   case 10:
   case 0:
    {
     $$0 = 1;
     break L1;
     break;
    }
   default:
    {}
   }
   $$0 = 0;
  } else $$0 = 1;
 } while (0);
 return $$0 | 0;
}

function ___fseeko($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0, $9 = 0, $phitmp = 0;
 if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $8 = ___fseeko_unlocked($0, $1, $2) | 0;
  if ($phitmp) $9 = $8; else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else $9 = ___fseeko_unlocked($0, $1, $2) | 0;
 return $9 | 0;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $spec$select = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $spec$select = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
 _memcpy($6 | 0, $1 | 0, $spec$select | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $spec$select;
 return $2 | 0;
}

function _get_unused_player_mem_location() {
 var $$01214 = 0, $2 = 0, $5 = 0, label = 0;
 $$01214 = 1;
 while (1) {
  $2 = 122152 + ($$01214 * 68 | 0) | 0;
  $$01214 = $$01214 + 1 | 0;
  if (!(HEAP32[$2 >> 2] | 0)) {
   $5 = $2;
   label = 4;
   break;
  }
  if ($$01214 >>> 0 >= 128) {
   $5 = 0;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return $5 | 0;
 return 0;
}

function _normalize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $3 = +HEAPF32[$0 >> 2];
 $5 = +HEAPF32[$1 >> 2];
 $8 = +HEAPF32[$2 >> 2];
 $11 = +Math_sqrt(+($3 * $3 + $5 * $5 + $8 * $8));
 HEAPF32[$0 >> 2] = $3 / $11;
 HEAPF32[$1 >> 2] = +HEAPF32[$1 >> 2] / $11;
 HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] / $11;
 return;
}

function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 23840;
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0;
 $9 = tempRet0;
 $10 = 23840;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 return $14 | 0;
}

function _pthread_cond_signal($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if (!(HEAP32[$0 >> 2] | 0)) {
  $$0 = ___private_cond_signal($0, 1) | 0;
  return $$0 | 0;
 }
 if (!(Atomics_load(HEAP32, $0 + 12 >> 2) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $0 + 8 | 0;
 Atomics_add(HEAP32, $7 >> 2, 1) | 0;
 _emscripten_futex_wake($7 | 0, 1) | 0;
 $$0 = 0;
 return $$0 | 0;
}

function _rewind($0) {
 $0 = $0 | 0;
 var $phitmp = 0;
 if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
  if (!$phitmp) ___unlockfile($0);
 } else {
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
 }
 return;
}

function _emscripten_atomic_store_u64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $6 = 0, $9 = 0;
 $6 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $6 >> 2, 1) | 0) != 0);
 $9 = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$9 + 4 >> 2] = $2;
 Atomics_store(HEAP32, $6 >> 2, 0) | 0;
 tempRet0 = $2;
 return $1 | 0;
}

function _emscripten_atomic_load_u64($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0, $7 = 0, $9 = 0;
 $4 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $4 >> 2, 1) | 0) != 0);
 $7 = $0;
 $9 = HEAP32[$7 >> 2] | 0;
 $12 = HEAP32[$7 + 4 >> 2] | 0;
 Atomics_store(HEAP32, $4 >> 2, 0) | 0;
 tempRet0 = $12;
 return $9 | 0;
}

function ___pthread_setcancelstate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pre = 0;
 if ($0 >>> 0 > 2) {
  $$0 = 22;
  return $$0 | 0;
 }
 $$pre = (_pthread_self() | 0) + 72 | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = Atomics_load(HEAP32, $$pre >> 2) | 0;
 Atomics_store(HEAP32, $$pre >> 2, $0) | 0;
 $$0 = 0;
 return $$0 | 0;
}

function _map_alloc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $8 = 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
 $8 = $4 + 1 | 0;
 HEAP32[$0 + 16 >> 2] = $8;
 HEAP32[$0 + 20 >> 2] = _calloc($8, 2) | 0;
 return;
}

function __pthread_msecs_until($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 _gettimeofday($1 | 0, 0) | 0;
 STACKTOP = sp;
 return +(+(HEAP32[$0 >> 2] | 0) * 1.0e3 + +(HEAP32[$0 + 4 >> 2] | 0) * 1.0e-06 - (+(HEAP32[$1 >> 2] | 0) * 1.0e3 + +(HEAP32[$1 + 4 >> 2] | 0) * .001));
}

function ___ftello($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $phitmp = 0;
 if ((Atomics_load(HEAP32, $0 + 76 >> 2) | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $6 = ___ftello_unlocked($0) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else $7 = ___ftello_unlocked($0) | 0;
 return $7 | 0;
}

function _gen_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 _glGenBuffers(1, $2 | 0);
 _glBindBuffer(34962, HEAP32[$2 >> 2] | 0);
 _glBufferData(34962, $0 | 0, $1 | 0, 35044);
 _glBindBuffer(34962, 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_733(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _mtx_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 _pthread_mutexattr_init($2) | 0;
 if ($1 & 8 | 0) _pthread_mutexattr_settype($2, 1) | 0;
 $7 = (_pthread_mutex_init($0, $2) | 0) == 0 & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function _is_obstacle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $3 = 0;
 $3 = ($0 | 0) < 0 ? 0 - $0 | 0 : $0;
 L1 : do if (($3 + -17 | 0) >>> 0 > 6) {
  switch ($3 | 0) {
  case 16:
  case 0:
   {
    $$0 = 0;
    break L1;
    break;
   }
  default:
   {}
  }
  $$0 = 1;
 } else $$0 = 0; while (0);
 return $$0 | 0;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __thrd_wrapper_function($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 _free($0);
 $4 = FUNCTION_TABLE_ii[$1 & 7]($3) | 0;
 $5 = _malloc(4) | 0;
 if (!$5) return $5 | 0;
 HEAP32[$5 >> 2] = $4;
 return $5 | 0;
}

function ___pthread_mutex_trylock($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 >> 2] & 15)) {
  $$0 = (Atomics_compareExchange(HEAP32, $0 + 4 >> 2, 0, 16) | 0) & 16;
  return $$0 | 0;
 } else {
  $$0 = ___pthread_mutex_trylock_owner($0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _load_program($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = _load_file($0) | 0;
 $3 = _make_shader(35633, $2) | 0;
 _free($2);
 $4 = _load_file($1) | 0;
 $5 = _make_shader(35632, $4) | 0;
 _free($4);
 return _make_program($3, $5) | 0;
}

function _fprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vfprintf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _emscripten_atomic_store_f64($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $5 = 0;
 $5 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $5 >> 2, 1) | 0) != 0);
 HEAPF64[$0 >> 3] = $1;
 Atomics_store(HEAP32, $5 >> 2, 0) | 0;
 return +$1;
}

function _emscripten_atomic_load_f64($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0.0;
 $4 = 22800 + (($0 >>> 3 & 255) << 2) | 0;
 do {} while ((Atomics_exchange(HEAP32, $4 >> 2, 1) | 0) != 0);
 $7 = +HEAPF64[$0 >> 3];
 Atomics_store(HEAP32, $4 >> 2, 0) | 0;
 return +$7;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function ___pthread_mutex_lock($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 >> 2] & 15)) if (!(Atomics_compareExchange(HEAP32, $0 + 4 >> 2, 0, 16) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = ___pthread_mutex_timedlock($0, 0) | 0;
 return $$0 | 0;
}

function ___ofl_add($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = ___ofl_lock() | 0;
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 >> 2] | 0;
 if ($4 | 0) HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$1 >> 2] = $0;
 ___ofl_unlock();
 return $0 | 0;
}

function _pthread_attr_setstacksize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($1 + -2048 | 0) >>> 0 > 1073741823) {
  $$0 = 22;
  return $$0 | 0;
 }
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = $1 + -81920;
 $$0 = 0;
 return $$0 | 0;
}

function _delete_chunk($0) {
 $0 = $0 | 0;
 _map_free($0 + 20 | 0);
 _map_free($0 + 44 | 0);
 _sign_list_free($0 + 68 | 0);
 _del_buffer(HEAP32[$0 + 88 >> 2] | 0);
 _del_buffer(HEAP32[$0 + 92 >> 2] | 0);
 HEAP32[$0 + 12 >> 2] = 0;
 return;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 0](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return (($$0 | 0) == 0 ? $0 : $$0) | 0;
}

function _pthread_mutexattr_settype($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 >>> 0 > 2) {
  $$0 = 22;
  return $$0 | 0;
 }
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -4 | $1;
 $$0 = 0;
 return $$0 | 0;
}

function ___pthread_testcancel() {
 var $0 = 0;
 $0 = _pthread_self() | 0;
 if (Atomics_load(HEAP32, $0 + 72 >> 2) | 0) return;
 if ((HEAP32[$0 >> 2] | 0) != 2) return;
 _emscripten_asm_const_i(3) | 0;
 return;
}

function _map_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = $0 + 20 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _puts(16733) | 0;
  return;
 } else {
  _free($2);
  HEAP32[$1 >> 2] = 0;
  return;
 }
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _emscripten_atomic_store_f32($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 return +(+((Atomics_store(HEAP32, $0 >> 2, (HEAPF32[tempDoublePtr >> 2] = $1, HEAP32[tempDoublePtr >> 2] | 0)) | 0) >>> 0));
}

function _del_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _glDeleteBuffers(1, $1 | 0);
 STACKTOP = sp;
 return;
}

function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function ___vm_unlock() {
 if ((Atomics_add(HEAP32, 33411, -1) | 0) != 1) return;
 if (!(Atomics_load(HEAP32, 33412) | 0)) return;
 _emscripten_futex_wake(133644, 2147483647) | 0;
 return;
}

function _pthread_attr_setdetachstate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 >>> 0 > 1) $$0 = 22; else {
  HEAP32[$0 + 12 >> 2] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function _emscripten_atomic_load_f32($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = Atomics_load(HEAP32, $0 >> 2) | 0;
 return +(HEAP32[tempDoublePtr >> 2] = $1, +HEAPF32[tempDoublePtr >> 2]);
}

function ___emscripten_thread_main($0) {
 $0 = $0 | 0;
 _emscripten_set_thread_name(_pthread_self() | 0, 20780);
 return ___call_main(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 7](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function _is_destructable($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch ($0 | 0) {
 case 16:
 case 0:
  {
   $$0 = 0;
   break;
  }
 default:
  $$0 = 1;
 }
 return $$0 | 0;
}

function _sign_list_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = _calloc($1, 80) | 0;
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0);
}

function _emscripten_sync_run_in_main_thread($0) {
 $0 = $0 | 0;
 _emscripten_async_run_in_main_thread($0);
 _emscripten_wait_for_call_v($0, inf) | 0;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function _map_set_func($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 _map_set($4, $0, $1, $2, $3) | 0;
 return;
}

function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0;
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0;
}

function _emscripten_conditional_set_current_thread_status(expectedStatus, newStatus) {
 expectedStatus = expectedStatus | 0;
 newStatus = newStatus | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _gen_chunk($0) {
 $0 = $0 | 0;
 _create_world(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0, 1, $0 + 20 | 0);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 0](a1 | 0, a2 | 0) | 0;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 0](a1 | 0, a2 | 0);
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function b4(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(4);
 return 0;
}

function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 23840;
 HEAP32[$2 >> 2] = $0 + -1;
 HEAP32[$2 + 4 >> 2] = 0;
 return;
}

function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_107() | 0) + 188 >> 2] | 0) | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 7](a1 | 0) | 0;
}

function _pthread_cond_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___pthread_cond_timedwait($0, $1, 0) | 0;
}

function b9(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(9);
}

function _malloc_faces($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _malloc(Math_imul($0 * 24 | 0, $1) | 0) | 0;
}

function ___emscripten_pthread_data_constructor() {
 HEAP32[(_pthread_self() | 0) + 188 >> 2] = 133048;
 return;
}

function _cnd_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (_pthread_cond_wait($0, $1) | 0) == 0 | 0;
}

function _fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___fseeko($0, $1, $2) | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 0](a1 | 0);
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function _llvm_round_f64(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function _llvm_round_f32(f) {
 f = +f;
 return f >= 0.0 ? +Math_floor(f + .5) : +Math_ceil(f - .5);
}

function _emscripten_set_thread_name(threadId, name) {
 threadId = threadId | 0;
 name = name | 0;
}

function _char_width($0) {
 $0 = $0 | 0;
 return HEAP32[10560 + ($0 << 24 >> 24 << 2) >> 2] | 0;
}

function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0;
 return $0 | 0;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function _emscripten_is_main_runtime_thread() {
 return __pthread_is_main_runtime_thread | 0;
}

function _mtx_unlock($0) {
 $0 = $0 | 0;
 return (___pthread_mutex_unlock($0) | 0) == 0 | 0;
}

function __pthread_isduecanceled($0) {
 $0 = $0 | 0;
 return (HEAP32[$0 >> 2] | 0) == 2 | 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0;
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(3);
 return 0;
}

function _cnd_signal($0) {
 $0 = $0 | 0;
 return (_pthread_cond_signal($0) | 0) == 0 | 0;
}

function _mtx_lock($0) {
 $0 = $0 | 0;
 return (___pthread_mutex_lock($0) | 0) == 0 | 0;
}

function _cnd_init($0) {
 $0 = $0 | 0;
 return (_pthread_cond_init($0, 0) | 0) == 0 | 0;
}

function _emscripten_set_current_thread_status(newStatus) {
 newStatus = newStatus | 0;
}

function _sign_list_free($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0);
 return;
}

function _pthread_mutexattr_init($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 return 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 0]();
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(8);
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function _is_plant($0) {
 $0 = $0 | 0;
 return ($0 + -17 | 0) >>> 0 < 7 | 0;
}

function ___errno_location() {
 return (___pthread_self_110() | 0) + 64 | 0;
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(2);
 return 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function ___vm_lock() {
 Atomics_add(HEAP32, 33411, 1) | 0;
 return;
}

function _pthread_mutexattr_destroy($0) {
 $0 = $0 | 0;
 return 0;
}

function _ftell($0) {
 $0 = $0 | 0;
 return ___ftello($0) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _pthread_attr_destroy($0) {
 $0 = $0 | 0;
 return 0;
}

function ___pthread_self_605() {
 return _pthread_self() | 0;
}

function ___pthread_self_446() {
 return _pthread_self() | 0;
}

function ___pthread_self_110() {
 return _pthread_self() | 0;
}

function ___pthread_self_107() {
 return _pthread_self() | 0;
}

function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(7);
}

function ___ofl_lock() {
 ___lock(133072);
 return 133080;
}

function _emscripten_get_global_libc() {
 return 133008;
}

function _dummy_733($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___ofl_unlock() {
 ___unlock(133072);
 return;
}

function _get_workers_mem_location() {
 return 130928;
}

function _get_players_mem_location() {
 return 122152;
}

function b1(p0) {
 p0 = p0 | 0;
 abort(1);
 return 0;
}

function _pthread_self() {
 return __pthread_ptr | 0;
}

function _get_model_mem_location() {
 return 23848;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b6(p0) {
 p0 = p0 | 0;
 abort(6);
}

function b0() {
 abort(0);
 return 0;
}

function b5() {
 abort(5);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0];
var FUNCTION_TABLE_ii = [b1,___stdio_close,_worker_run,__thrd_wrapper_function,___emscripten_thread_main,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2];
var FUNCTION_TABLE_iiii = [b3,___stdio_write,___stdio_seek,___stdout_write,_sn_write,___stdio_read,b3,b3];
var FUNCTION_TABLE_iiiiii = [b4];
var FUNCTION_TABLE_v = [b5];
var FUNCTION_TABLE_vi = [b6];
var FUNCTION_TABLE_vii = [b7];
var FUNCTION_TABLE_viii = [b8];
var FUNCTION_TABLE_viiiii = [b9,_map_set_func];

  return { ___emscripten_pthread_data_constructor: ___emscripten_pthread_data_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___pthread_tsd_run_dtors: ___pthread_tsd_run_dtors, ___udivdi3: ___udivdi3, __emscripten_atomic_fetch_and_add_u64: __emscripten_atomic_fetch_and_add_u64, __emscripten_atomic_fetch_and_and_u64: __emscripten_atomic_fetch_and_and_u64, __emscripten_atomic_fetch_and_or_u64: __emscripten_atomic_fetch_and_or_u64, __emscripten_atomic_fetch_and_sub_u64: __emscripten_atomic_fetch_and_sub_u64, __emscripten_atomic_fetch_and_xor_u64: __emscripten_atomic_fetch_and_xor_u64, __register_pthread_ptr: __register_pthread_ptr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _delete_chunk: _delete_chunk, _emscripten_async_run_in_main_thread: _emscripten_async_run_in_main_thread, _emscripten_atomic_add_u64: _emscripten_atomic_add_u64, _emscripten_atomic_and_u64: _emscripten_atomic_and_u64, _emscripten_atomic_cas_u64: _emscripten_atomic_cas_u64, _emscripten_atomic_exchange_u64: _emscripten_atomic_exchange_u64, _emscripten_atomic_load_f32: _emscripten_atomic_load_f32, _emscripten_atomic_load_f64: _emscripten_atomic_load_f64, _emscripten_atomic_load_u64: _emscripten_atomic_load_u64, _emscripten_atomic_or_u64: _emscripten_atomic_or_u64, _emscripten_atomic_store_f32: _emscripten_atomic_store_f32, _emscripten_atomic_store_f64: _emscripten_atomic_store_f64, _emscripten_atomic_store_u64: _emscripten_atomic_store_u64, _emscripten_atomic_sub_u64: _emscripten_atomic_sub_u64, _emscripten_atomic_xor_u64: _emscripten_atomic_xor_u64, _emscripten_conditional_set_current_thread_status: _emscripten_conditional_set_current_thread_status, _emscripten_get_global_libc: _emscripten_get_global_libc, _emscripten_is_main_runtime_thread: _emscripten_is_main_runtime_thread, _emscripten_main_thread_process_queued_calls: _emscripten_main_thread_process_queued_calls, _emscripten_set_current_thread_status: _emscripten_set_current_thread_status, _emscripten_set_thread_name: _emscripten_set_thread_name, _emscripten_sync_run_in_main_thread: _emscripten_sync_run_in_main_thread, _emscripten_sync_run_in_main_thread_0: _emscripten_sync_run_in_main_thread_0, _emscripten_sync_run_in_main_thread_1: _emscripten_sync_run_in_main_thread_1, _emscripten_sync_run_in_main_thread_2: _emscripten_sync_run_in_main_thread_2, _emscripten_sync_run_in_main_thread_3: _emscripten_sync_run_in_main_thread_3, _emscripten_sync_run_in_main_thread_4: _emscripten_sync_run_in_main_thread_4, _emscripten_sync_run_in_main_thread_5: _emscripten_sync_run_in_main_thread_5, _emscripten_sync_run_in_main_thread_6: _emscripten_sync_run_in_main_thread_6, _emscripten_sync_run_in_main_thread_7: _emscripten_sync_run_in_main_thread_7, _emscripten_sync_run_in_main_thread_xprintf_varargs: _emscripten_sync_run_in_main_thread_xprintf_varargs, _find_chunk: _find_chunk, _free: _free, _gen_chunk: _gen_chunk, _get_model_mem_location: _get_model_mem_location, _get_players_mem_location: _get_players_mem_location, _get_unused_chunk_mem_location: _get_unused_chunk_mem_location, _get_unused_player_mem_location: _get_unused_player_mem_location, _get_workers_mem_location: _get_workers_mem_location, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _init: _init, _init_chunk: _init_chunk, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_round_f32: _llvm_round_f32, _llvm_round_f64: _llvm_round_f64, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _on_left_click: _on_left_click, _on_right_click: _on_right_click, _proxy_main: _proxy_main, _pthread_self: _pthread_self, _run_frame: _run_frame, _sbrk: _sbrk, _stop: _stop, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiiii: dynCall_viiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___emscripten_pthread_data_constructor = Module["___emscripten_pthread_data_constructor"] = asm["___emscripten_pthread_data_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___pthread_tsd_run_dtors = Module["___pthread_tsd_run_dtors"] = asm["___pthread_tsd_run_dtors"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __emscripten_atomic_fetch_and_add_u64 = Module["__emscripten_atomic_fetch_and_add_u64"] = asm["__emscripten_atomic_fetch_and_add_u64"];
var __emscripten_atomic_fetch_and_and_u64 = Module["__emscripten_atomic_fetch_and_and_u64"] = asm["__emscripten_atomic_fetch_and_and_u64"];
var __emscripten_atomic_fetch_and_or_u64 = Module["__emscripten_atomic_fetch_and_or_u64"] = asm["__emscripten_atomic_fetch_and_or_u64"];
var __emscripten_atomic_fetch_and_sub_u64 = Module["__emscripten_atomic_fetch_and_sub_u64"] = asm["__emscripten_atomic_fetch_and_sub_u64"];
var __emscripten_atomic_fetch_and_xor_u64 = Module["__emscripten_atomic_fetch_and_xor_u64"] = asm["__emscripten_atomic_fetch_and_xor_u64"];
var __register_pthread_ptr = Module["__register_pthread_ptr"] = asm["__register_pthread_ptr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _delete_chunk = Module["_delete_chunk"] = asm["_delete_chunk"];
var _emscripten_async_run_in_main_thread = Module["_emscripten_async_run_in_main_thread"] = asm["_emscripten_async_run_in_main_thread"];
var _emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] = asm["_emscripten_atomic_add_u64"];
var _emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] = asm["_emscripten_atomic_and_u64"];
var _emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] = asm["_emscripten_atomic_cas_u64"];
var _emscripten_atomic_exchange_u64 = Module["_emscripten_atomic_exchange_u64"] = asm["_emscripten_atomic_exchange_u64"];
var _emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] = asm["_emscripten_atomic_load_f32"];
var _emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] = asm["_emscripten_atomic_load_f64"];
var _emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] = asm["_emscripten_atomic_load_u64"];
var _emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] = asm["_emscripten_atomic_or_u64"];
var _emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] = asm["_emscripten_atomic_store_f32"];
var _emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] = asm["_emscripten_atomic_store_f64"];
var _emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] = asm["_emscripten_atomic_store_u64"];
var _emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] = asm["_emscripten_atomic_sub_u64"];
var _emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] = asm["_emscripten_atomic_xor_u64"];
var _emscripten_conditional_set_current_thread_status = Module["_emscripten_conditional_set_current_thread_status"] = asm["_emscripten_conditional_set_current_thread_status"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _emscripten_is_main_runtime_thread = Module["_emscripten_is_main_runtime_thread"] = asm["_emscripten_is_main_runtime_thread"];
var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = asm["_emscripten_main_thread_process_queued_calls"];
var _emscripten_set_current_thread_status = Module["_emscripten_set_current_thread_status"] = asm["_emscripten_set_current_thread_status"];
var _emscripten_set_thread_name = Module["_emscripten_set_thread_name"] = asm["_emscripten_set_thread_name"];
var _emscripten_sync_run_in_main_thread = Module["_emscripten_sync_run_in_main_thread"] = asm["_emscripten_sync_run_in_main_thread"];
var _emscripten_sync_run_in_main_thread_0 = Module["_emscripten_sync_run_in_main_thread_0"] = asm["_emscripten_sync_run_in_main_thread_0"];
var _emscripten_sync_run_in_main_thread_1 = Module["_emscripten_sync_run_in_main_thread_1"] = asm["_emscripten_sync_run_in_main_thread_1"];
var _emscripten_sync_run_in_main_thread_2 = Module["_emscripten_sync_run_in_main_thread_2"] = asm["_emscripten_sync_run_in_main_thread_2"];
var _emscripten_sync_run_in_main_thread_3 = Module["_emscripten_sync_run_in_main_thread_3"] = asm["_emscripten_sync_run_in_main_thread_3"];
var _emscripten_sync_run_in_main_thread_4 = Module["_emscripten_sync_run_in_main_thread_4"] = asm["_emscripten_sync_run_in_main_thread_4"];
var _emscripten_sync_run_in_main_thread_5 = Module["_emscripten_sync_run_in_main_thread_5"] = asm["_emscripten_sync_run_in_main_thread_5"];
var _emscripten_sync_run_in_main_thread_6 = Module["_emscripten_sync_run_in_main_thread_6"] = asm["_emscripten_sync_run_in_main_thread_6"];
var _emscripten_sync_run_in_main_thread_7 = Module["_emscripten_sync_run_in_main_thread_7"] = asm["_emscripten_sync_run_in_main_thread_7"];
var _emscripten_sync_run_in_main_thread_xprintf_varargs = Module["_emscripten_sync_run_in_main_thread_xprintf_varargs"] = asm["_emscripten_sync_run_in_main_thread_xprintf_varargs"];
var _find_chunk = Module["_find_chunk"] = asm["_find_chunk"];
var _free = Module["_free"] = asm["_free"];
var _gen_chunk = Module["_gen_chunk"] = asm["_gen_chunk"];
var _get_model_mem_location = Module["_get_model_mem_location"] = asm["_get_model_mem_location"];
var _get_players_mem_location = Module["_get_players_mem_location"] = asm["_get_players_mem_location"];
var _get_unused_chunk_mem_location = Module["_get_unused_chunk_mem_location"] = asm["_get_unused_chunk_mem_location"];
var _get_unused_player_mem_location = Module["_get_unused_player_mem_location"] = asm["_get_unused_player_mem_location"];
var _get_workers_mem_location = Module["_get_workers_mem_location"] = asm["_get_workers_mem_location"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _init = Module["_init"] = asm["_init"];
var _init_chunk = Module["_init_chunk"] = asm["_init_chunk"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_round_f32 = Module["_llvm_round_f32"] = asm["_llvm_round_f32"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _on_left_click = Module["_on_left_click"] = asm["_on_left_click"];
var _on_right_click = Module["_on_right_click"] = asm["_on_right_click"];
var _proxy_main = Module["_proxy_main"] = asm["_proxy_main"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _run_frame = Module["_run_frame"] = asm["_run_frame"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _stop = Module["_stop"] = asm["_stop"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;



Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;

Module["getMemory"] = getMemory;
























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;


Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;




















Module["establishStackSpace"] = establishStackSpace;


Module["dynCall_ii"] = dynCall_ii;





if (memoryInitializer && !ENVIRONMENT_IS_PTHREAD) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {
    PThread.terminateAllThreads();

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (ENVIRONMENT_IS_PTHREAD) console.error('Pthread aborting at ' + new Error().stack);
  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

if (!ENVIRONMENT_IS_PTHREAD) run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






